
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015150  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001304  08015338  08015338  00025338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801663c  0801663c  00030250  2**0
                  CONTENTS
  4 .ARM          00000000  0801663c  0801663c  00030250  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801663c  0801663c  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801663c  0801663c  0002663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016640  08016640  00026640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08016644  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006030  20000250  08016894  00030250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006280  08016894  00036280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002343f  00000000  00000000  00030279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a7f  00000000  00000000  000536b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002138  00000000  00000000  00059138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec8  00000000  00000000  0005b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233cc  00000000  00000000  0005d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ca3b  00000000  00000000  00080504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1dd3  00000000  00000000  000acf3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ed12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e04  00000000  00000000  0015ed64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00168b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00168b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000250 	.word	0x20000250
 8000204:	00000000 	.word	0x00000000
 8000208:	08015320 	.word	0x08015320

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000254 	.word	0x20000254
 8000224:	08015320 	.word	0x08015320

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <generate_sequence_clap>:
#include "stm32f1xx_hal.h"




void generate_sequence_clap(uint8_t* sequence, uint8_t length) {
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
    uint8_t prev_value = 1; // Initialize the previous value to 1
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < length; i++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	73bb      	strb	r3, [r7, #14]
 80011fc:	e017      	b.n	800122e <generate_sequence_clap+0x46>
        sequence[i] = (prev_value + rand()) % 2; // Generate random number between 0 and 1, excluding consecutive 0s
 80011fe:	7bfc      	ldrb	r4, [r7, #15]
 8001200:	f011 fe80 	bl	8012f04 <rand>
 8001204:	4603      	mov	r3, r0
 8001206:	4423      	add	r3, r4
 8001208:	2b00      	cmp	r3, #0
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	bfb8      	it	lt
 8001210:	425b      	neglt	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	7bbb      	ldrb	r3, [r7, #14]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	b2ca      	uxtb	r2, r1
 800121c:	701a      	strb	r2, [r3, #0]
        prev_value = sequence[i]; // Update the previous value
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	3301      	adds	r3, #1
 800122c:	73bb      	strb	r3, [r7, #14]
 800122e:	7bba      	ldrb	r2, [r7, #14]
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	429a      	cmp	r2, r3
 8001234:	d3e3      	bcc.n	80011fe <generate_sequence_clap+0x16>
    }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}

08001240 <show_sequence_clap>:


// Show the LED sequence to the user
void show_sequence_clap(const uint8_t* sequence, uint8_t length) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; i++) {
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e02c      	b.n	80012ac <show_sequence_clap+0x6c>
        if (sequence[i] == 0) {
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d110      	bne.n	8001280 <show_sequence_clap+0x40>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); // Turn on LED on GPIOB PIN 12
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001264:	4816      	ldr	r0, [pc, #88]	; (80012c0 <show_sequence_clap+0x80>)
 8001266:	f008 f88c 	bl	8009382 <HAL_GPIO_WritePin>
        	HAL_Delay(500); // Wait for 500ms
 800126a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800126e:	f006 fbe7 	bl	8007a40 <HAL_Delay>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); // Turn off LEDs
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001278:	4811      	ldr	r0, [pc, #68]	; (80012c0 <show_sequence_clap+0x80>)
 800127a:	f008 f882 	bl	8009382 <HAL_GPIO_WritePin>
 800127e:	e00f      	b.n	80012a0 <show_sequence_clap+0x60>
        } else {
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1); // Turn on LED on GPIOB PIN 13
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <show_sequence_clap+0x80>)
 8001288:	f008 f87b 	bl	8009382 <HAL_GPIO_WritePin>
        	HAL_Delay(500); // Wait for 500ms
 800128c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001290:	f006 fbd6 	bl	8007a40 <HAL_Delay>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0); // Turn off LEDs
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <show_sequence_clap+0x80>)
 800129c:	f008 f871 	bl	8009382 <HAL_GPIO_WritePin>
        }

        HAL_Delay(200); // Wait for 500ms
 80012a0:	20c8      	movs	r0, #200	; 0xc8
 80012a2:	f006 fbcd 	bl	8007a40 <HAL_Delay>
    for (uint8_t i = 0; i < length; i++) {
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	3301      	adds	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3ce      	bcc.n	8001252 <show_sequence_clap+0x12>
    }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40010800 	.word	0x40010800

080012c4 <wait_for_user_input_clap>:

    return true; // User completed the sequence correctly, return true
}
*/

void wait_for_user_input_clap(uint8_t* user_input, const uint8_t* sequence, uint8_t length) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	4613      	mov	r3, r2
 80012d0:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < length; i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e052      	b.n	800137e <wait_for_user_input_clap+0xba>
        while (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5) || HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)); // Wait until both buttons are released
 80012d8:	bf00      	nop
 80012da:	2120      	movs	r1, #32
 80012dc:	482c      	ldr	r0, [pc, #176]	; (8001390 <wait_for_user_input_clap+0xcc>)
 80012de:	f008 f839 	bl	8009354 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f8      	bne.n	80012da <wait_for_user_input_clap+0x16>
 80012e8:	2140      	movs	r1, #64	; 0x40
 80012ea:	4829      	ldr	r0, [pc, #164]	; (8001390 <wait_for_user_input_clap+0xcc>)
 80012ec:	f008 f832 	bl	8009354 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f1      	bne.n	80012da <wait_for_user_input_clap+0x16>

        while (!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5) && !HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)); // Wait until one of the buttons is pressed
 80012f6:	bf00      	nop
 80012f8:	2120      	movs	r1, #32
 80012fa:	4825      	ldr	r0, [pc, #148]	; (8001390 <wait_for_user_input_clap+0xcc>)
 80012fc:	f008 f82a 	bl	8009354 <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <wait_for_user_input_clap+0x50>
 8001306:	2140      	movs	r1, #64	; 0x40
 8001308:	4821      	ldr	r0, [pc, #132]	; (8001390 <wait_for_user_input_clap+0xcc>)
 800130a:	f008 f823 	bl	8009354 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f1      	beq.n	80012f8 <wait_for_user_input_clap+0x34>

        if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)) {
 8001314:	2120      	movs	r1, #32
 8001316:	481e      	ldr	r0, [pc, #120]	; (8001390 <wait_for_user_input_clap+0xcc>)
 8001318:	f008 f81c 	bl	8009354 <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <wait_for_user_input_clap+0x76>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1); // Turn on LED on GPIOB PIN 12
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001328:	481a      	ldr	r0, [pc, #104]	; (8001394 <wait_for_user_input_clap+0xd0>)
 800132a:	f008 f82a 	bl	8009382 <HAL_GPIO_WritePin>
            user_input[i] = 0; // Store user input as 0
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e00a      	b.n	8001350 <wait_for_user_input_clap+0x8c>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1); // Turn on LED on GPIOB PIN 13
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001340:	4814      	ldr	r0, [pc, #80]	; (8001394 <wait_for_user_input_clap+0xd0>)
 8001342:	f008 f81e 	bl	8009382 <HAL_GPIO_WritePin>
            user_input[i] = 1; // Store user input as 1
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
        }

        HAL_Delay(500); // Wait for 500ms
 8001350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001354:	f006 fb74 	bl	8007a40 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); // Turn off LEDs
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <wait_for_user_input_clap+0xd0>)
 8001360:	f008 f80f 	bl	8009382 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0); // Turn off LEDs
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <wait_for_user_input_clap+0xd0>)
 800136c:	f008 f809 	bl	8009382 <HAL_GPIO_WritePin>
        HAL_Delay(500); // Wait for 500ms
 8001370:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001374:	f006 fb64 	bl	8007a40 <HAL_Delay>
    for (uint8_t i = 0; i < length; i++) {
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	3301      	adds	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
 800137e:	7dfa      	ldrb	r2, [r7, #23]
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	429a      	cmp	r2, r3
 8001384:	d3a8      	bcc.n	80012d8 <wait_for_user_input_clap+0x14>
    }
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40011800 	.word	0x40011800
 8001394:	40010800 	.word	0x40010800

08001398 <play_game>:

bool play_game(uint8_t* sequence, uint8_t sequence_length) {
 8001398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800139c:	b087      	sub	sp, #28
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	70fb      	strb	r3, [r7, #3]
 80013a6:	466b      	mov	r3, sp
 80013a8:	461e      	mov	r6, r3
    uint8_t user_input[sequence_length];
 80013aa:	78f9      	ldrb	r1, [r7, #3]
 80013ac:	460b      	mov	r3, r1
 80013ae:	3b01      	subs	r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	b2cb      	uxtb	r3, r1
 80013b4:	2200      	movs	r2, #0
 80013b6:	4698      	mov	r8, r3
 80013b8:	4691      	mov	r9, r2
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013ce:	b2cb      	uxtb	r3, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	461c      	mov	r4, r3
 80013d4:	4615      	mov	r5, r2
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	00eb      	lsls	r3, r5, #3
 80013e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013e4:	00e2      	lsls	r2, r4, #3
 80013e6:	460b      	mov	r3, r1
 80013e8:	3307      	adds	r3, #7
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	ebad 0d03 	sub.w	sp, sp, r3
 80013f2:	466b      	mov	r3, sp
 80013f4:	3300      	adds	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]

    generate_sequence_clap(sequence, sequence_length);
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	4619      	mov	r1, r3
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fef3 	bl	80011e8 <generate_sequence_clap>
    show_sequence_clap(sequence, sequence_length);
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	4619      	mov	r1, r3
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff1a 	bl	8001240 <show_sequence_clap>

    wait_for_user_input_clap(user_input, sequence, sequence_length);
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	461a      	mov	r2, r3
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f7ff ff56 	bl	80012c4 <wait_for_user_input_clap>

    for (uint8_t i = 0; i < sequence_length; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	75fb      	strb	r3, [r7, #23]
 800141c:	e00d      	b.n	800143a <play_game+0xa2>
        if (user_input[i] != sequence[i]) {
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	5cd2      	ldrb	r2, [r2, r3]
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	440b      	add	r3, r1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <play_game+0x9c>
            return false; // User made a mistake, return false
 8001430:	2300      	movs	r3, #0
 8001432:	e007      	b.n	8001444 <play_game+0xac>
    for (uint8_t i = 0; i < sequence_length; i++) {
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	3301      	adds	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
 800143a:	7dfa      	ldrb	r2, [r7, #23]
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	429a      	cmp	r2, r3
 8001440:	d3ed      	bcc.n	800141e <play_game+0x86>
        }
    }

    return true; // User completed the sequence correctly, return true
 8001442:	2301      	movs	r3, #1
 8001444:	46b5      	mov	sp, r6
}
 8001446:	4618      	mov	r0, r3
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001450 <playGuessingGame_Distance>:
    } else {
        return 0; // Incorrect guess
    }
}

void playGuessingGame_Distance(int randomNumber) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    //char textangle[] = "The random number is: ";
    char angleString[20];
    sprintf(angleString, "target distance: %d", randomNumber);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	490b      	ldr	r1, [pc, #44]	; (800148c <playGuessingGame_Distance+0x3c>)
 8001460:	4618      	mov	r0, r3
 8001462:	f011 fd9d 	bl	8012fa0 <siprintf>

    //LCD_DrawString(10, 180, textangle, RED);
    LCD_DrawString(10, 180, angleString, RED);
 8001466:	f107 020c 	add.w	r2, r7, #12
 800146a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800146e:	21b4      	movs	r1, #180	; 0xb4
 8001470:	200a      	movs	r0, #10
 8001472:	f002 f893 	bl	800359c <LCD_DrawString>
    LCD_DrawString(10,200,  "current distance: ", RED);
 8001476:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <playGuessingGame_Distance+0x40>)
 800147c:	21c8      	movs	r1, #200	; 0xc8
 800147e:	200a      	movs	r0, #10
 8001480:	f002 f88c 	bl	800359c <LCD_DrawString>
        } else {
            LCD_DrawChar(60,60, 'N', RED);	//lose

        }
    }*/
}
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	08015338 	.word	0x08015338
 8001490:	0801534c 	.word	0x0801534c
 8001494:	00000000 	.word	0x00000000

08001498 <measureDistance>:

int measureDistance() {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
    int distance = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]

        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a8:	4845      	ldr	r0, [pc, #276]	; (80015c0 <measureDistance+0x128>)
 80014aa:	f007 ff6a 	bl	8009382 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 80014ae:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <measureDistance+0x12c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
        while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 80014b6:	bf00      	nop
 80014b8:	4b42      	ldr	r3, [pc, #264]	; (80015c4 <measureDistance+0x12c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	2b09      	cmp	r3, #9
 80014c0:	d9fa      	bls.n	80014b8 <measureDistance+0x20>
        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c8:	483d      	ldr	r0, [pc, #244]	; (80015c0 <measureDistance+0x128>)
 80014ca:	f007 ff5a 	bl	8009382 <HAL_GPIO_WritePin>

        pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80014ce:	f006 faad 	bl	8007a2c <HAL_GetTick>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a3c      	ldr	r2, [pc, #240]	; (80015c8 <measureDistance+0x130>)
 80014d6:	6013      	str	r3, [r2, #0]
        // wait for the echo pin to go high
        while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80014d8:	bf00      	nop
 80014da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014de:	4838      	ldr	r0, [pc, #224]	; (80015c0 <measureDistance+0x128>)
 80014e0:	f007 ff38 	bl	8009354 <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d108      	bne.n	80014fc <measureDistance+0x64>
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <measureDistance+0x130>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f103 040a 	add.w	r4, r3, #10
 80014f2:	f006 fa9b 	bl	8007a2c <HAL_GetTick>
 80014f6:	4603      	mov	r3, r0
 80014f8:	429c      	cmp	r4, r3
 80014fa:	d8ee      	bhi.n	80014da <measureDistance+0x42>
        Value1 = __HAL_TIM_GET_COUNTER (&htim2);
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <measureDistance+0x12c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	4a32      	ldr	r2, [pc, #200]	; (80015cc <measureDistance+0x134>)
 8001504:	6013      	str	r3, [r2, #0]

        pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001506:	f006 fa91 	bl	8007a2c <HAL_GetTick>
 800150a:	4603      	mov	r3, r0
 800150c:	4a2e      	ldr	r2, [pc, #184]	; (80015c8 <measureDistance+0x130>)
 800150e:	6013      	str	r3, [r2, #0]
        // wait for the echo pin to go low
        while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001510:	bf00      	nop
 8001512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001516:	482a      	ldr	r0, [pc, #168]	; (80015c0 <measureDistance+0x128>)
 8001518:	f007 ff1c 	bl	8009354 <HAL_GPIO_ReadPin>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <measureDistance+0x9c>
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <measureDistance+0x130>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800152a:	f006 fa7f 	bl	8007a2c <HAL_GetTick>
 800152e:	4603      	mov	r3, r0
 8001530:	429c      	cmp	r4, r3
 8001532:	d8ee      	bhi.n	8001512 <measureDistance+0x7a>
        Value2 = __HAL_TIM_GET_COUNTER (&htim2);
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <measureDistance+0x12c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <measureDistance+0x138>)
 800153c:	6013      	str	r3, [r2, #0]

        distance = (Value2-Value1)* 0.034/2;
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <measureDistance+0x138>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <measureDistance+0x134>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ffb7 	bl	80004bc <__aeabi_ui2d>
 800154e:	a31a      	add	r3, pc, #104	; (adr r3, 80015b8 <measureDistance+0x120>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f82c 	bl	80005b0 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001568:	f7ff f94c 	bl	8000804 <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff facc 	bl	8000b10 <__aeabi_d2iz>
 8001578:	4603      	mov	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]

        char DDistance[3];
        int rounded = distance;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	60bb      	str	r3, [r7, #8]

        sprintf(DDistance, "%d", rounded);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	4913      	ldr	r1, [pc, #76]	; (80015d4 <measureDistance+0x13c>)
 8001586:	4618      	mov	r0, r3
 8001588:	f011 fd0a 	bl	8012fa0 <siprintf>

        LCD_DrawString(150,200,  "   ", RED);
 800158c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001590:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <measureDistance+0x140>)
 8001592:	21c8      	movs	r1, #200	; 0xc8
 8001594:	2096      	movs	r0, #150	; 0x96
 8001596:	f002 f801 	bl	800359c <LCD_DrawString>
        LCD_DrawString(150, 200, DDistance, RED);
 800159a:	1d3a      	adds	r2, r7, #4
 800159c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015a0:	21c8      	movs	r1, #200	; 0xc8
 80015a2:	2096      	movs	r0, #150	; 0x96
 80015a4:	f001 fffa 	bl	800359c <LCD_DrawString>

        HAL_Delay(100);
 80015a8:	2064      	movs	r0, #100	; 0x64
 80015aa:	f006 fa49 	bl	8007a40 <HAL_Delay>

      return distance;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	b020c49c 	.word	0xb020c49c
 80015bc:	3fa16872 	.word	0x3fa16872
 80015c0:	40010c00 	.word	0x40010c00
 80015c4:	20002754 	.word	0x20002754
 80015c8:	2000026c 	.word	0x2000026c
 80015cc:	20000270 	.word	0x20000270
 80015d0:	20000274 	.word	0x20000274
 80015d4:	08015360 	.word	0x08015360
 80015d8:	08015364 	.word	0x08015364

080015dc <game_Distance>:

bool game_Distance() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e8:	481b      	ldr	r0, [pc, #108]	; (8001658 <game_Distance+0x7c>)
 80015ea:	f007 feca 	bl	8009382 <HAL_GPIO_WritePin>

	 //srand(time(NULL)); // Set the seed for random number generation

    int randomNumber = rand() % 11 + 10;
 80015ee:	f011 fc89 	bl	8012f04 <rand>
 80015f2:	4601      	mov	r1, r0
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <game_Distance+0x80>)
 80015f6:	fb83 2301 	smull	r2, r3, r3, r1
 80015fa:	105a      	asrs	r2, r3, #1
 80015fc:	17cb      	asrs	r3, r1, #31
 80015fe:	1ad2      	subs	r2, r2, r3
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	1aca      	subs	r2, r1, r3
 800160c:	f102 030a 	add.w	r3, r2, #10
 8001610:	607b      	str	r3, [r7, #4]

    LCD_DrawString(100, 250, "give up", RED);
 8001612:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <game_Distance+0x84>)
 8001618:	21fa      	movs	r1, #250	; 0xfa
 800161a:	2064      	movs	r0, #100	; 0x64
 800161c:	f001 ffbe 	bl	800359c <LCD_DrawString>

    	//if (tim > 0) print_digit(tim);

    	int measuredDistance;

    	playGuessingGame_Distance(randomNumber);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff15 	bl	8001450 <playGuessingGame_Distance>

        measuredDistance = measureDistance();
 8001626:	f7ff ff37 	bl	8001498 <measureDistance>
 800162a:	6038      	str	r0, [r7, #0]

        if (measuredDistance == randomNumber) return true; // Exit the loop on correct measurement
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d101      	bne.n	8001638 <game_Distance+0x5c>
 8001634:	2301      	movs	r3, #1
 8001636:	e00a      	b.n	800164e <game_Distance+0x72>

        if(Check_touchkey_flag(95, 145, 250, 300)) return false;
 8001638:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800163c:	22fa      	movs	r2, #250	; 0xfa
 800163e:	2191      	movs	r1, #145	; 0x91
 8001640:	205f      	movs	r0, #95	; 0x5f
 8001642:	f006 f947 	bl	80078d4 <Check_touchkey_flag>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0e9      	beq.n	8001620 <game_Distance+0x44>
 800164c:	2300      	movs	r3, #0

        //if(tim == 0) return false;
    }

    return false;
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40010c00 	.word	0x40010c00
 800165c:	2e8ba2e9 	.word	0x2e8ba2e9
 8001660:	08015368 	.word	0x08015368

08001664 <shuffle>:
	    } while (sequence[i] == prev_value); // Repeat if the generated number is the same as the previous value
	    prev_value = sequence[i]; // Update the previous value
	}
}*/

void shuffle(uint8_t* array, int len) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
    for (int i = len - 1; i > 0; --i) {
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e020      	b.n	80016b8 <shuffle+0x54>
        int j = rand() % (i + 1);
 8001676:	f011 fc45 	bl	8012f04 <rand>
 800167a:	4602      	mov	r2, r0
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	fb92 f1f3 	sdiv	r1, r2, r3
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	613b      	str	r3, [r7, #16]
        int temp = array[i];
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
        array[i] = array[j];
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	441a      	add	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	440b      	add	r3, r1
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	701a      	strb	r2, [r3, #0]
        array[j] = temp;
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]
    for (int i = len - 1; i > 0; --i) {
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	dcdb      	bgt.n	8001676 <shuffle+0x12>
    }
}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <generate_sequence>:

void generate_sequence() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
    uint8_t numbers[] = {0, 1, 2}; // Array containing the numbers 0, 1, 2
 80016ce:	4a24      	ldr	r2, [pc, #144]	; (8001760 <generate_sequence+0x98>)
 80016d0:	463b      	mov	r3, r7
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	4611      	mov	r1, r2
 80016d6:	8019      	strh	r1, [r3, #0]
 80016d8:	3302      	adds	r3, #2
 80016da:	0c12      	lsrs	r2, r2, #16
 80016dc:	701a      	strb	r2, [r3, #0]
    int numbers_length = sizeof(numbers) / sizeof(numbers[0]);
 80016de:	2303      	movs	r3, #3
 80016e0:	607b      	str	r3, [r7, #4]

    // Shuffle the numbers array
    shuffle(numbers, numbers_length);
 80016e2:	463b      	mov	r3, r7
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ffbc 	bl	8001664 <shuffle>
    // Copy the shuffled numbers to the sequence array
    for (int i = 0; i < numbers_length; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e00b      	b.n	800170a <generate_sequence+0x42>
        sequence[i] = numbers[i];
 80016f2:	463a      	mov	r2, r7
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	7819      	ldrb	r1, [r3, #0]
 80016fa:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <generate_sequence+0x9c>)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	460a      	mov	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < numbers_length; i++) {
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3301      	adds	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbef      	blt.n	80016f2 <generate_sequence+0x2a>
    }
    // Fill the remaining part of the sequence array with random numbers
    for (int i = numbers_length; i < length; i++) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	e014      	b.n	8001742 <generate_sequence+0x7a>
        sequence[i] = rand() % 3;
 8001718:	f011 fbf4 	bl	8012f04 <rand>
 800171c:	4602      	mov	r2, r0
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <generate_sequence+0xa0>)
 8001720:	fb83 3102 	smull	r3, r1, r3, r2
 8001724:	17d3      	asrs	r3, r2, #31
 8001726:	1ac9      	subs	r1, r1, r3
 8001728:	460b      	mov	r3, r1
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	440b      	add	r3, r1
 800172e:	1ad1      	subs	r1, r2, r3
 8001730:	b2c9      	uxtb	r1, r1
 8001732:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <generate_sequence+0x9c>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4413      	add	r3, r2
 8001738:	460a      	mov	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
    for (int i = numbers_length; i < length; i++) {
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	3301      	adds	r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <generate_sequence+0xa4>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4293      	cmp	r3, r2
 800174c:	dbe4      	blt.n	8001718 <generate_sequence+0x50>
    }
    shuffle(sequence, 5);
 800174e:	2105      	movs	r1, #5
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <generate_sequence+0x9c>)
 8001752:	f7ff ff87 	bl	8001664 <shuffle>
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	08015370 	.word	0x08015370
 8001764:	20000278 	.word	0x20000278
 8001768:	55555556 	.word	0x55555556
 800176c:	20000000 	.word	0x20000000

08001770 <show_sequence>:


void show_sequence() {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < length; i++) {
 8001776:	2300      	movs	r3, #0
 8001778:	71fb      	strb	r3, [r7, #7]
 800177a:	e05a      	b.n	8001832 <show_sequence+0xc2>
        if (sequence[i] == 0) {
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a32      	ldr	r2, [pc, #200]	; (8001848 <show_sequence+0xd8>)
 8001780:	5cd3      	ldrb	r3, [r2, r3]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d113      	bne.n	80017ae <show_sequence+0x3e>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // red
 8001786:	2200      	movs	r2, #0
 8001788:	2120      	movs	r1, #32
 800178a:	4830      	ldr	r0, [pc, #192]	; (800184c <show_sequence+0xdc>)
 800178c:	f007 fdf9 	bl	8009382 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2101      	movs	r1, #1
 8001794:	482d      	ldr	r0, [pc, #180]	; (800184c <show_sequence+0xdc>)
 8001796:	f007 fdf4 	bl	8009382 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	2102      	movs	r1, #2
 800179e:	482b      	ldr	r0, [pc, #172]	; (800184c <show_sequence+0xdc>)
 80017a0:	f007 fdef 	bl	8009382 <HAL_GPIO_WritePin>
            HAL_Delay(400);
 80017a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80017a8:	f006 f94a 	bl	8007a40 <HAL_Delay>
 80017ac:	e02b      	b.n	8001806 <show_sequence+0x96>

        } else if (sequence[i] == 1) {
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4a25      	ldr	r2, [pc, #148]	; (8001848 <show_sequence+0xd8>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d113      	bne.n	80017e0 <show_sequence+0x70>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // green
 80017b8:	2200      	movs	r2, #0
 80017ba:	2101      	movs	r1, #1
 80017bc:	4823      	ldr	r0, [pc, #140]	; (800184c <show_sequence+0xdc>)
 80017be:	f007 fde0 	bl	8009382 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2120      	movs	r1, #32
 80017c6:	4821      	ldr	r0, [pc, #132]	; (800184c <show_sequence+0xdc>)
 80017c8:	f007 fddb 	bl	8009382 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2102      	movs	r1, #2
 80017d0:	481e      	ldr	r0, [pc, #120]	; (800184c <show_sequence+0xdc>)
 80017d2:	f007 fdd6 	bl	8009382 <HAL_GPIO_WritePin>
            HAL_Delay(400);
 80017d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80017da:	f006 f931 	bl	8007a40 <HAL_Delay>
 80017de:	e012      	b.n	8001806 <show_sequence+0x96>
        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // blue
 80017e0:	2200      	movs	r2, #0
 80017e2:	2102      	movs	r1, #2
 80017e4:	4819      	ldr	r0, [pc, #100]	; (800184c <show_sequence+0xdc>)
 80017e6:	f007 fdcc 	bl	8009382 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2120      	movs	r1, #32
 80017ee:	4817      	ldr	r0, [pc, #92]	; (800184c <show_sequence+0xdc>)
 80017f0:	f007 fdc7 	bl	8009382 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2101      	movs	r1, #1
 80017f8:	4814      	ldr	r0, [pc, #80]	; (800184c <show_sequence+0xdc>)
 80017fa:	f007 fdc2 	bl	8009382 <HAL_GPIO_WritePin>
            HAL_Delay(400);
 80017fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001802:	f006 f91d 	bl	8007a40 <HAL_Delay>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // blue
 8001806:	2201      	movs	r2, #1
 8001808:	2102      	movs	r1, #2
 800180a:	4810      	ldr	r0, [pc, #64]	; (800184c <show_sequence+0xdc>)
 800180c:	f007 fdb9 	bl	8009382 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2120      	movs	r1, #32
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <show_sequence+0xdc>)
 8001816:	f007 fdb4 	bl	8009382 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2101      	movs	r1, #1
 800181e:	480b      	ldr	r0, [pc, #44]	; (800184c <show_sequence+0xdc>)
 8001820:	f007 fdaf 	bl	8009382 <HAL_GPIO_WritePin>
        HAL_Delay(400);
 8001824:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001828:	f006 f90a 	bl	8007a40 <HAL_Delay>
    for (uint8_t i = 0; i < length; i++) {
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <show_sequence+0xe0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	429a      	cmp	r2, r3
 800183a:	d39f      	bcc.n	800177c <show_sequence+0xc>
    }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000278 	.word	0x20000278
 800184c:	40010c00 	.word	0x40010c00
 8001850:	20000000 	.word	0x20000000

08001854 <user_input>:

void user_input() {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	71fb      	strb	r3, [r7, #7]
    while (len < length) {
 800185e:	e056      	b.n	800190e <user_input+0xba>
         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 8001860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001864:	482f      	ldr	r0, [pc, #188]	; (8001924 <user_input+0xd0>)
 8001866:	f007 fd75 	bl	8009354 <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	2b01      	cmp	r3, #1
 800186e:	d115      	bne.n	800189c <user_input+0x48>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn on LED at PB5 //debug
 8001870:	2200      	movs	r2, #0
 8001872:	2120      	movs	r1, #32
 8001874:	482c      	ldr	r0, [pc, #176]	; (8001928 <user_input+0xd4>)
 8001876:	f007 fd84 	bl	8009382 <HAL_GPIO_WritePin>
             result[len] = 0;
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4a2b      	ldr	r2, [pc, #172]	; (800192c <user_input+0xd8>)
 800187e:	2100      	movs	r1, #0
 8001880:	54d1      	strb	r1, [r2, r3]
             len++;
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	3301      	adds	r3, #1
 8001886:	71fb      	strb	r3, [r7, #7]
             HAL_Delay(300); // Wait for 500ms
 8001888:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800188c:	f006 f8d8 	bl	8007a40 <HAL_Delay>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Turn off LED
 8001890:	2201      	movs	r2, #1
 8001892:	2120      	movs	r1, #32
 8001894:	4824      	ldr	r0, [pc, #144]	; (8001928 <user_input+0xd4>)
 8001896:	f007 fd74 	bl	8009382 <HAL_GPIO_WritePin>
 800189a:	e038      	b.n	800190e <user_input+0xba>

         }else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
 800189c:	2108      	movs	r1, #8
 800189e:	4821      	ldr	r0, [pc, #132]	; (8001924 <user_input+0xd0>)
 80018a0:	f007 fd58 	bl	8009354 <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d115      	bne.n	80018d6 <user_input+0x82>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn on LED at PB0  //debug
 80018aa:	2200      	movs	r2, #0
 80018ac:	2101      	movs	r1, #1
 80018ae:	481e      	ldr	r0, [pc, #120]	; (8001928 <user_input+0xd4>)
 80018b0:	f007 fd67 	bl	8009382 <HAL_GPIO_WritePin>
             result[len] = 1;
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <user_input+0xd8>)
 80018b8:	2101      	movs	r1, #1
 80018ba:	54d1      	strb	r1, [r2, r3]
             len++;
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	3301      	adds	r3, #1
 80018c0:	71fb      	strb	r3, [r7, #7]
             HAL_Delay(300); // Wait for 500ms
 80018c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018c6:	f006 f8bb 	bl	8007a40 <HAL_Delay>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn off LED
 80018ca:	2201      	movs	r2, #1
 80018cc:	2101      	movs	r1, #1
 80018ce:	4816      	ldr	r0, [pc, #88]	; (8001928 <user_input+0xd4>)
 80018d0:	f007 fd57 	bl	8009382 <HAL_GPIO_WritePin>
 80018d4:	e01b      	b.n	800190e <user_input+0xba>

         }else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 80018d6:	2104      	movs	r1, #4
 80018d8:	4812      	ldr	r0, [pc, #72]	; (8001924 <user_input+0xd0>)
 80018da:	f007 fd3b 	bl	8009354 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d114      	bne.n	800190e <user_input+0xba>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Turn on LED at PB1	//debug
 80018e4:	2200      	movs	r2, #0
 80018e6:	2102      	movs	r1, #2
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <user_input+0xd4>)
 80018ea:	f007 fd4a 	bl	8009382 <HAL_GPIO_WritePin>
             result[len] = 2;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <user_input+0xd8>)
 80018f2:	2102      	movs	r1, #2
 80018f4:	54d1      	strb	r1, [r2, r3]
             len++;
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	3301      	adds	r3, #1
 80018fa:	71fb      	strb	r3, [r7, #7]
             HAL_Delay(300); // Wait for 500ms
 80018fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001900:	f006 f89e 	bl	8007a40 <HAL_Delay>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Turn off LED
 8001904:	2201      	movs	r2, #1
 8001906:	2102      	movs	r1, #2
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <user_input+0xd4>)
 800190a:	f007 fd3a 	bl	8009382 <HAL_GPIO_WritePin>
    while (len < length) {
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <user_input+0xdc>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	429a      	cmp	r2, r3
 8001916:	d3a3      	bcc.n	8001860 <user_input+0xc>

         }
   }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40010800 	.word	0x40010800
 8001928:	40010c00 	.word	0x40010c00
 800192c:	20000280 	.word	0x20000280
 8001930:	20000000 	.word	0x20000000

08001934 <check_match>:


bool check_match(){
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
    for (int i=0; i<length; i++){
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	e00e      	b.n	800195e <check_match+0x2a>
    	if (sequence[i] != result[i]) return false;
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <check_match+0x44>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	490c      	ldr	r1, [pc, #48]	; (800197c <check_match+0x48>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	440b      	add	r3, r1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <check_match+0x24>
 8001954:	2300      	movs	r3, #0
 8001956:	e009      	b.n	800196c <check_match+0x38>
    for (int i=0; i<length; i++){
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <check_match+0x4c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4293      	cmp	r3, r2
 8001968:	dbea      	blt.n	8001940 <check_match+0xc>
    }
    return true;
 800196a:	2301      	movs	r3, #1

}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000278 	.word	0x20000278
 800197c:	20000280 	.word	0x20000280
 8001980:	20000000 	.word	0x20000000

08001984 <light_pattern>:

bool light_pattern(){
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	generate_sequence();
 8001988:	f7ff fe9e 	bl	80016c8 <generate_sequence>
	show_sequence();
 800198c:	f7ff fef0 	bl	8001770 <show_sequence>
	//LCD_DrawString(0, 120, "please enter your sequence", RED);
	user_input();
 8001990:	f7ff ff60 	bl	8001854 <user_input>
	return check_match();
 8001994:	f7ff ffce 	bl	8001934 <check_match>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <update_display>:
extern char answer[100];
extern UART_HandleTypeDef huart1;
char rxString[100] = {0};
extern volatile bool fail;

void update_display(){
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af02      	add	r7, sp, #8
	//if maze == 32-> special case (reach end without 3 keys)
	//if maze == 20??? (hearts region but max hearts)

	LCD_Clear (width_margin+current_y*block_size, height_margin+current_x*block_size, block_size, block_size, WHITE);	//clear the previous (current xy)
 80019a6:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <update_display+0x108>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <update_display+0x10c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	493f      	ldr	r1, [pc, #252]	; (8001ab0 <update_display+0x110>)
 80019b4:	7809      	ldrb	r1, [r1, #0]
 80019b6:	b289      	uxth	r1, r1
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4413      	add	r3, r2
 80019c0:	b298      	uxth	r0, r3
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <update_display+0x114>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <update_display+0x118>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4938      	ldr	r1, [pc, #224]	; (8001ab0 <update_display+0x110>)
 80019d0:	7809      	ldrb	r1, [r1, #0]
 80019d2:	b289      	uxth	r1, r1
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4413      	add	r3, r2
 80019dc:	b299      	uxth	r1, r3
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <update_display+0x110>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <update_display+0x110>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80019ee:	9400      	str	r4, [sp, #0]
 80019f0:	f001 fd63 	bl	80034ba <LCD_Clear>
	LCD_Drawelement(height_margin+next_x*block_size, width_margin+next_y*block_size, start, RED);
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <update_display+0x114>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <update_display+0x11c>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	492b      	ldr	r1, [pc, #172]	; (8001ab0 <update_display+0x110>)
 8001a02:	7809      	ldrb	r1, [r1, #0]
 8001a04:	b289      	uxth	r1, r1
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b298      	uxth	r0, r3
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <update_display+0x108>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <update_display+0x120>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4924      	ldr	r1, [pc, #144]	; (8001ab0 <update_display+0x110>)
 8001a1e:	7809      	ldrb	r1, [r1, #0]
 8001a20:	b289      	uxth	r1, r1
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	b299      	uxth	r1, r3
 8001a2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a30:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <update_display+0x124>)
 8001a32:	f002 f8ed 	bl	8003c10 <LCD_Drawelement>
	if (boo_flag == 1){
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <update_display+0x128>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d12f      	bne.n	8001a9e <update_display+0xfe>
		boo_flag = 0;
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <update_display+0x128>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
		LCD_Drawelement(height_margin+current_x*block_size, width_margin+current_y*block_size, endpt, 0xFD20);
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <update_display+0x114>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <update_display+0x118>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4917      	ldr	r1, [pc, #92]	; (8001ab0 <update_display+0x110>)
 8001a52:	7809      	ldrb	r1, [r1, #0]
 8001a54:	b289      	uxth	r1, r1
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b298      	uxth	r0, r3
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <update_display+0x108>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <update_display+0x10c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4910      	ldr	r1, [pc, #64]	; (8001ab0 <update_display+0x110>)
 8001a6e:	7809      	ldrb	r1, [r1, #0]
 8001a70:	b289      	uxth	r1, r1
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	b299      	uxth	r1, r3
 8001a7c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001a80:	4a12      	ldr	r2, [pc, #72]	; (8001acc <update_display+0x12c>)
 8001a82:	f002 f8c5 	bl	8003c10 <LCD_Drawelement>
		maze[current_x][current_y] = 3;
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <update_display+0x130>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <update_display+0x118>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <update_display+0x10c>)
 8001a96:	7812      	ldrb	r2, [r2, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	701a      	strb	r2, [r3, #0]
	}

}
 8001a9e:	bf00      	nop
 8001aa0:	3704      	adds	r7, #4
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000288c 	.word	0x2000288c
 8001aac:	2000287b 	.word	0x2000287b
 8001ab0:	08015f90 	.word	0x08015f90
 8001ab4:	2000288d 	.word	0x2000288d
 8001ab8:	2000287a 	.word	0x2000287a
 8001abc:	2000287c 	.word	0x2000287c
 8001ac0:	2000287d 	.word	0x2000287d
 8001ac4:	08016054 	.word	0x08016054
 8001ac8:	20000285 	.word	0x20000285
 8001acc:	08016074 	.word	0x08016074
 8001ad0:	20002870 	.word	0x20002870

08001ad4 <handle_lose>:

void handle_lose(){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af02      	add	r7, sp, #8
	// end page
	status = 1;
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <handle_lose+0x5c>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001aea:	22f0      	movs	r2, #240	; 0xf0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2000      	movs	r0, #0
 8001af0:	f001 fce3 	bl	80034ba <LCD_Clear>
	LCD_DrawString(100, 100, "you lose!", BLUE);
 8001af4:	231f      	movs	r3, #31
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <handle_lose+0x60>)
 8001af8:	2164      	movs	r1, #100	; 0x64
 8001afa:	2064      	movs	r0, #100	; 0x64
 8001afc:	f001 fd4e 	bl	800359c <LCD_DrawString>
	play_audio("FAIL.WAV");
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <handle_lose+0x64>)
 8001b02:	f004 ffad 	bl	8006a60 <play_audio>
	game_record();
 8001b06:	f004 f91d 	bl	8005d44 <game_record>
	LCD_DrawString(100, 200, "next round", RED);
 8001b0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <handle_lose+0x68>)
 8001b10:	21c8      	movs	r1, #200	; 0xc8
 8001b12:	2064      	movs	r0, #100	; 0x64
 8001b14:	f001 fd42 	bl	800359c <LCD_DrawString>
	while(restart_flag == 0) Check_touchkey_start();
 8001b18:	e001      	b.n	8001b1e <handle_lose+0x4a>
 8001b1a:	f005 feb7 	bl	800788c <Check_touchkey_start>
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <handle_lose+0x6c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f9      	beq.n	8001b1a <handle_lose+0x46>
	restart();
 8001b26:	f003 f825 	bl	8004b74 <restart>
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000286 	.word	0x20000286
 8001b34:	08015374 	.word	0x08015374
 8001b38:	08015380 	.word	0x08015380
 8001b3c:	0801538c 	.word	0x0801538c
 8001b40:	20002880 	.word	0x20002880

08001b44 <handle_empty>:

void handle_empty(){	// empty - only need to change the display
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	maze[next_x][next_y] = 2;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <handle_empty+0x4c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <handle_empty+0x50>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <handle_empty+0x54>)
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <handle_empty+0x4c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <handle_empty+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <handle_empty+0x5c>)
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
	update_display(); 	//update maze display
 8001b78:	f7ff ff12 	bl	80019a0 <update_display>
	current_x = next_x;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <handle_empty+0x50>)
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <handle_empty+0x58>)
 8001b82:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <handle_empty+0x54>)
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <handle_empty+0x5c>)
 8001b8a:	701a      	strb	r2, [r3, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20002870 	.word	0x20002870
 8001b94:	2000287c 	.word	0x2000287c
 8001b98:	2000287d 	.word	0x2000287d
 8001b9c:	2000287a 	.word	0x2000287a
 8001ba0:	2000287b 	.word	0x2000287b

08001ba4 <handle_endpt>:


void handle_endpt(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af02      	add	r7, sp, #8
	if(keys == 3){
 8001baa:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <handle_endpt+0xe0>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d13f      	bne.n	8001c32 <handle_endpt+0x8e>
		//handle end condition
		// end page
		maze[next_x][next_y] = 2;
 8001bb2:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <handle_endpt+0xe4>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <handle_endpt+0xe8>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a33      	ldr	r2, [pc, #204]	; (8001c90 <handle_endpt+0xec>)
 8001bc2:	7812      	ldrb	r2, [r2, #0]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
	    maze[current_x][current_y] = 0;
 8001bca:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <handle_endpt+0xe4>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <handle_endpt+0xf0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <handle_endpt+0xf4>)
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
		update_display();
 8001be2:	f7ff fedd 	bl	80019a0 <update_display>

		LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bf0:	22f0      	movs	r2, #240	; 0xf0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f001 fc60 	bl	80034ba <LCD_Clear>
		LCD_DrawString(100, 100, "you win!", BLUE);
 8001bfa:	231f      	movs	r3, #31
 8001bfc:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <handle_endpt+0xf8>)
 8001bfe:	2164      	movs	r1, #100	; 0x64
 8001c00:	2064      	movs	r0, #100	; 0x64
 8001c02:	f001 fccb 	bl	800359c <LCD_DrawString>
		play_audio("VIC.WAV");
 8001c06:	4826      	ldr	r0, [pc, #152]	; (8001ca0 <handle_endpt+0xfc>)
 8001c08:	f004 ff2a 	bl	8006a60 <play_audio>
		game_record();
 8001c0c:	f004 f89a 	bl	8005d44 <game_record>
		LCD_DrawString(100, 200, "next round", RED);
 8001c10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <handle_endpt+0x100>)
 8001c16:	21c8      	movs	r1, #200	; 0xc8
 8001c18:	2064      	movs	r0, #100	; 0x64
 8001c1a:	f001 fcbf 	bl	800359c <LCD_DrawString>
		while(restart_flag == 0) Check_touchkey_start();
 8001c1e:	e001      	b.n	8001c24 <handle_endpt+0x80>
 8001c20:	f005 fe34 	bl	800788c <Check_touchkey_start>
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <handle_endpt+0x104>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f9      	beq.n	8001c20 <handle_endpt+0x7c>
		restart();
 8001c2c:	f002 ffa2 	bl	8004b74 <restart>
		current_x = next_x;
		current_y = next_y;
		boo_flag = 1;
	}

}
 8001c30:	e024      	b.n	8001c7c <handle_endpt+0xd8>
		maze[next_x][next_y] = 2;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <handle_endpt+0xe4>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <handle_endpt+0xe8>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <handle_endpt+0xec>)
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
		maze[current_x][current_y] = 0;
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <handle_endpt+0xe4>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <handle_endpt+0xf0>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <handle_endpt+0xf4>)
 8001c5a:	7812      	ldrb	r2, [r2, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
		update_display();
 8001c62:	f7ff fe9d 	bl	80019a0 <update_display>
		current_x = next_x;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <handle_endpt+0xe8>)
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <handle_endpt+0xf0>)
 8001c6c:	701a      	strb	r2, [r3, #0]
		current_y = next_y;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <handle_endpt+0xec>)
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <handle_endpt+0xf4>)
 8001c74:	701a      	strb	r2, [r3, #0]
		boo_flag = 1;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <handle_endpt+0x108>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000287f 	.word	0x2000287f
 8001c88:	20002870 	.word	0x20002870
 8001c8c:	2000287c 	.word	0x2000287c
 8001c90:	2000287d 	.word	0x2000287d
 8001c94:	2000287a 	.word	0x2000287a
 8001c98:	2000287b 	.word	0x2000287b
 8001c9c:	08015398 	.word	0x08015398
 8001ca0:	080153a4 	.word	0x080153a4
 8001ca4:	0801538c 	.word	0x0801538c
 8001ca8:	20002880 	.word	0x20002880
 8001cac:	20000285 	.word	0x20000285

08001cb0 <handle_key>:


void handle_key(){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	LCD_Drawkey(10, 15+keys*32); //display the key
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <handle_key+0x70>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	015b      	lsls	r3, r3, #5
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	330f      	adds	r3, #15
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	200a      	movs	r0, #10
 8001cc6:	f002 f80d 	bl	8003ce4 <LCD_Drawkey>
	keys++;
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <handle_key+0x70>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <handle_key+0x70>)
 8001cd4:	701a      	strb	r2, [r3, #0]
	//LCD_DrawBox(130+(hearts-1)*32, 10, WHITE, 32);
	//hearts--;
	maze[next_x][next_y] = 2;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <handle_key+0x74>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <handle_key+0x78>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <handle_key+0x7c>)
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <handle_key+0x74>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <handle_key+0x80>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <handle_key+0x84>)
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
	update_display();
 8001d06:	f7ff fe4b 	bl	80019a0 <update_display>
	current_x = next_x;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <handle_key+0x78>)
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <handle_key+0x80>)
 8001d10:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <handle_key+0x7c>)
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <handle_key+0x84>)
 8001d18:	701a      	strb	r2, [r3, #0]


}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000287f 	.word	0x2000287f
 8001d24:	20002870 	.word	0x20002870
 8001d28:	2000287c 	.word	0x2000287c
 8001d2c:	2000287d 	.word	0x2000287d
 8001d30:	2000287a 	.word	0x2000287a
 8001d34:	2000287b 	.word	0x2000287b

08001d38 <handle_game1>:


void handle_game1(){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <handle_game1+0x100>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <handle_game1+0x104>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	; (8001e40 <handle_game1+0x108>)
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	2202      	movs	r2, #2
 8001d54:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <handle_game1+0x100>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <handle_game1+0x10c>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <handle_game1+0x110>)
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	4413      	add	r3, r2
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 8001d6e:	f7ff fe17 	bl	80019a0 <update_display>
	uint8_t start_flag = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	71fb      	strb	r3, [r7, #7]
	//char str[10];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d80:	22f0      	movs	r2, #240	; 0xf0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2000      	movs	r0, #0
 8001d86:	f001 fb98 	bl	80034ba <LCD_Clear>
	LCD_DrawString(0, 0, "light pattern game, please follow the pattern on the LED under the board and tap the corresponding color buttons", BLUE);
 8001d8a:	231f      	movs	r3, #31
 8001d8c:	4a2f      	ldr	r2, [pc, #188]	; (8001e4c <handle_game1+0x114>)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2000      	movs	r0, #0
 8001d92:	f001 fc03 	bl	800359c <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task", RED);
 8001d96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	; (8001e50 <handle_game1+0x118>)
 8001d9c:	2132      	movs	r1, #50	; 0x32
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f001 fbfc 	bl	800359c <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 8001da4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001da8:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <handle_game1+0x11c>)
 8001daa:	21c8      	movs	r1, #200	; 0xc8
 8001dac:	2064      	movs	r0, #100	; 0x64
 8001dae:	f001 fbf5 	bl	800359c <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8001db2:	e007      	b.n	8001dc4 <handle_game1+0x8c>
 8001db4:	23e6      	movs	r3, #230	; 0xe6
 8001db6:	22c8      	movs	r2, #200	; 0xc8
 8001db8:	2191      	movs	r1, #145	; 0x91
 8001dba:	205f      	movs	r0, #95	; 0x5f
 8001dbc:	f005 fd8a 	bl	80078d4 <Check_touchkey_flag>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f4      	beq.n	8001db4 <handle_game1+0x7c>
	LCD_DrawString(100, 200, "     ", WHITE);
 8001dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dce:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <handle_game1+0x120>)
 8001dd0:	21c8      	movs	r1, #200	; 0xc8
 8001dd2:	2064      	movs	r0, #100	; 0x64
 8001dd4:	f001 fbe2 	bl	800359c <LCD_DrawString>

	bool game1 = light_pattern();	//check timer?
 8001dd8:	f7ff fdd4 	bl	8001984 <light_pattern>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71bb      	strb	r3, [r7, #6]
	if (game1 == false){
 8001de0:	79bb      	ldrb	r3, [r7, #6]
 8001de2:	f083 0301 	eor.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <handle_game1+0xc8>
		hearts--;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <handle_game1+0x124>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <handle_game1+0x124>)
 8001df6:	701a      	strb	r2, [r3, #0]
		play_audio("LOSE.WAV");
 8001df8:	4819      	ldr	r0, [pc, #100]	; (8001e60 <handle_game1+0x128>)
 8001dfa:	f004 fe31 	bl	8006a60 <play_audio>
 8001dfe:	e002      	b.n	8001e06 <handle_game1+0xce>
	}else play_audio("WIN.WAV");
 8001e00:	4818      	ldr	r0, [pc, #96]	; (8001e64 <handle_game1+0x12c>)
 8001e02:	f004 fe2d 	bl	8006a60 <play_audio>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e10:	22f0      	movs	r2, #240	; 0xf0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2000      	movs	r0, #0
 8001e16:	f001 fb50 	bl	80034ba <LCD_Clear>
	LCD_Display();
 8001e1a:	f002 ffa5 	bl	8004d68 <LCD_Display>
	current_x = next_x;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <handle_game1+0x104>)
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <handle_game1+0x10c>)
 8001e24:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <handle_game1+0x108>)
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <handle_game1+0x110>)
 8001e2c:	701a      	strb	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20002870 	.word	0x20002870
 8001e3c:	2000287c 	.word	0x2000287c
 8001e40:	2000287d 	.word	0x2000287d
 8001e44:	2000287a 	.word	0x2000287a
 8001e48:	2000287b 	.word	0x2000287b
 8001e4c:	080153ac 	.word	0x080153ac
 8001e50:	08015420 	.word	0x08015420
 8001e54:	08015440 	.word	0x08015440
 8001e58:	08015448 	.word	0x08015448
 8001e5c:	2000287e 	.word	0x2000287e
 8001e60:	08015450 	.word	0x08015450
 8001e64:	0801545c 	.word	0x0801545c

08001e68 <handle_game2>:


void handle_game2(){
 8001e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e6c:	b087      	sub	sp, #28
 8001e6e:	af02      	add	r7, sp, #8
 8001e70:	466b      	mov	r3, sp
 8001e72:	461e      	mov	r6, r3
	maze[next_x][next_y] = 2;
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <handle_game2+0x174>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <handle_game2+0x178>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <handle_game2+0x17c>)
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	2202      	movs	r2, #2
 8001e8a:	701a      	strb	r2, [r3, #0]
		maze[current_x][current_y] = 0;
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <handle_game2+0x174>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b55      	ldr	r3, [pc, #340]	; (8001fe8 <handle_game2+0x180>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a54      	ldr	r2, [pc, #336]	; (8001fec <handle_game2+0x184>)
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
		//update maze display
			update_display();
 8001ea4:	f7ff fd7c 	bl	80019a0 <update_display>
			uint8_t start_flag = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73bb      	strb	r3, [r7, #14]
			uint8_t sequence_length_clap = 4;
 8001eac:	2304      	movs	r3, #4
 8001eae:	737b      	strb	r3, [r7, #13]
			uint8_t sequence_clap[sequence_length_clap];
 8001eb0:	7b79      	ldrb	r1, [r7, #13]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	b2cb      	uxtb	r3, r1
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	4691      	mov	r9, r2
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ecc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ed0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ed4:	b2cb      	uxtb	r3, r1
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	461c      	mov	r4, r3
 8001eda:	4615      	mov	r5, r2
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	00eb      	lsls	r3, r5, #3
 8001ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eea:	00e2      	lsls	r2, r4, #3
 8001eec:	460b      	mov	r3, r1
 8001eee:	3307      	adds	r3, #7
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ef8:	ab02      	add	r3, sp, #8
 8001efa:	3300      	adds	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]

			LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f08:	22f0      	movs	r2, #240	; 0xf0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f001 fad4 	bl	80034ba <LCD_Clear>
			LCD_DrawString(0, 0, "clap game,please follow the LED and clap", BLUE);
 8001f12:	231f      	movs	r3, #31
 8001f14:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <handle_game2+0x188>)
 8001f16:	2100      	movs	r1, #0
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f001 fb3f 	bl	800359c <LCD_DrawString>
			LCD_DrawString(0, 50, "Press start to start the task", RED);
 8001f1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f22:	4a34      	ldr	r2, [pc, #208]	; (8001ff4 <handle_game2+0x18c>)
 8001f24:	2132      	movs	r1, #50	; 0x32
 8001f26:	2000      	movs	r0, #0
 8001f28:	f001 fb38 	bl	800359c <LCD_DrawString>

			LCD_DrawString(100, 200, "start", RED);
 8001f2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f30:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <handle_game2+0x190>)
 8001f32:	21c8      	movs	r1, #200	; 0xc8
 8001f34:	2064      	movs	r0, #100	; 0x64
 8001f36:	f001 fb31 	bl	800359c <LCD_DrawString>
			while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8001f3a:	e007      	b.n	8001f4c <handle_game2+0xe4>
 8001f3c:	23e6      	movs	r3, #230	; 0xe6
 8001f3e:	22c8      	movs	r2, #200	; 0xc8
 8001f40:	2191      	movs	r1, #145	; 0x91
 8001f42:	205f      	movs	r0, #95	; 0x5f
 8001f44:	f005 fcc6 	bl	80078d4 <Check_touchkey_flag>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73bb      	strb	r3, [r7, #14]
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f4      	beq.n	8001f3c <handle_game2+0xd4>
			LCD_DrawString(100, 200, "     ", WHITE);
 8001f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f56:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <handle_game2+0x194>)
 8001f58:	21c8      	movs	r1, #200	; 0xc8
 8001f5a:	2064      	movs	r0, #100	; 0x64
 8001f5c:	f001 fb1e 	bl	800359c <LCD_DrawString>

			uint8_t game_count = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]

			while (game_count < 1) {
 8001f64:	e00a      	b.n	8001f7c <handle_game2+0x114>
		      if (play_game(sequence_clap, sequence_length_clap)) {
 8001f66:	7b7b      	ldrb	r3, [r7, #13]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fa14 	bl	8001398 <play_game>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <handle_game2+0x11c>
		          game_count++;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
			while (game_count < 1) {
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f1      	beq.n	8001f66 <handle_game2+0xfe>
 8001f82:	e000      	b.n	8001f86 <handle_game2+0x11e>
		      } else {
		          break;
 8001f84:	bf00      	nop
		      }
		  }

		  if (game_count == 1) {
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d103      	bne.n	8001f94 <handle_game2+0x12c>
		      //return true; // User completed 5 games correctly
			  play_audio("WIN.WAV");
 8001f8c:	481c      	ldr	r0, [pc, #112]	; (8002000 <handle_game2+0x198>)
 8001f8e:	f004 fd67 	bl	8006a60 <play_audio>
 8001f92:	e008      	b.n	8001fa6 <handle_game2+0x13e>
		  } else {
		      hearts--; // User made a mistake, game over
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <handle_game2+0x19c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <handle_game2+0x19c>)
 8001f9e:	701a      	strb	r2, [r3, #0]
		      play_audio("LOSE.WAV");
 8001fa0:	4819      	ldr	r0, [pc, #100]	; (8002008 <handle_game2+0x1a0>)
 8001fa2:	f004 fd5d 	bl	8006a60 <play_audio>
		  }


		 //print maze
		LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001fb0:	22f0      	movs	r2, #240	; 0xf0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f001 fa80 	bl	80034ba <LCD_Clear>
		LCD_Display();
 8001fba:	f002 fed5 	bl	8004d68 <LCD_Display>
		current_x = next_x;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <handle_game2+0x178>)
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <handle_game2+0x180>)
 8001fc4:	701a      	strb	r2, [r3, #0]
		current_y = next_y;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <handle_game2+0x17c>)
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <handle_game2+0x184>)
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	46b5      	mov	sp, r6
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fda:	bf00      	nop
 8001fdc:	20002870 	.word	0x20002870
 8001fe0:	2000287c 	.word	0x2000287c
 8001fe4:	2000287d 	.word	0x2000287d
 8001fe8:	2000287a 	.word	0x2000287a
 8001fec:	2000287b 	.word	0x2000287b
 8001ff0:	08015464 	.word	0x08015464
 8001ff4:	08015420 	.word	0x08015420
 8001ff8:	08015440 	.word	0x08015440
 8001ffc:	08015448 	.word	0x08015448
 8002000:	0801545c 	.word	0x0801545c
 8002004:	2000287e 	.word	0x2000287e
 8002008:	08015450 	.word	0x08015450

0800200c <handle_game3>:


void handle_game3(){
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af02      	add	r7, sp, #8

	maze[next_x][next_y] = 2;
 8002012:	4b3e      	ldr	r3, [pc, #248]	; (800210c <handle_game3+0x100>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <handle_game3+0x104>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <handle_game3+0x108>)
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	4413      	add	r3, r2
 8002026:	2202      	movs	r2, #2
 8002028:	701a      	strb	r2, [r3, #0]
		maze[current_x][current_y] = 0;
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <handle_game3+0x100>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <handle_game3+0x10c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a38      	ldr	r2, [pc, #224]	; (800211c <handle_game3+0x110>)
 800203a:	7812      	ldrb	r2, [r2, #0]
 800203c:	4413      	add	r3, r2
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
		update_display(); //update maze display
 8002042:	f7ff fcad 	bl	80019a0 <update_display>
		uint8_t start_flag = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	71fb      	strb	r3, [r7, #7]

		//print instruction
		LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 800204a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002054:	22f0      	movs	r2, #240	; 0xf0
 8002056:	2100      	movs	r1, #0
 8002058:	2000      	movs	r0, #0
 800205a:	f001 fa2e 	bl	80034ba <LCD_Clear>
		LCD_DrawString(0, 0, "distance game! try to put things in the distance that shown on the screen", BLUE);
 800205e:	231f      	movs	r3, #31
 8002060:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <handle_game3+0x114>)
 8002062:	2100      	movs	r1, #0
 8002064:	2000      	movs	r0, #0
 8002066:	f001 fa99 	bl	800359c <LCD_DrawString>
		LCD_DrawString(0, 50, "Press start to start the task", RED);
 800206a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800206e:	4a2d      	ldr	r2, [pc, #180]	; (8002124 <handle_game3+0x118>)
 8002070:	2132      	movs	r1, #50	; 0x32
 8002072:	2000      	movs	r0, #0
 8002074:	f001 fa92 	bl	800359c <LCD_DrawString>

		LCD_DrawString(100, 200, "start", RED);
 8002078:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800207c:	4a2a      	ldr	r2, [pc, #168]	; (8002128 <handle_game3+0x11c>)
 800207e:	21c8      	movs	r1, #200	; 0xc8
 8002080:	2064      	movs	r0, #100	; 0x64
 8002082:	f001 fa8b 	bl	800359c <LCD_DrawString>
		while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8002086:	e007      	b.n	8002098 <handle_game3+0x8c>
 8002088:	23e6      	movs	r3, #230	; 0xe6
 800208a:	22c8      	movs	r2, #200	; 0xc8
 800208c:	2191      	movs	r1, #145	; 0x91
 800208e:	205f      	movs	r0, #95	; 0x5f
 8002090:	f005 fc20 	bl	80078d4 <Check_touchkey_flag>
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f4      	beq.n	8002088 <handle_game3+0x7c>
		LCD_DrawString(100, 200, "     ", WHITE);
 800209e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a2:	4a22      	ldr	r2, [pc, #136]	; (800212c <handle_game3+0x120>)
 80020a4:	21c8      	movs	r1, #200	; 0xc8
 80020a6:	2064      	movs	r0, #100	; 0x64
 80020a8:	f001 fa78 	bl	800359c <LCD_DrawString>

		//timer = 10;

		bool distance = game_Distance();	//check timer?
 80020ac:	f7ff fa96 	bl	80015dc <game_Distance>
 80020b0:	4603      	mov	r3, r0
 80020b2:	71bb      	strb	r3, [r7, #6]
		if (distance == false){
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d009      	beq.n	80020d4 <handle_game3+0xc8>
			hearts--;
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <handle_game3+0x124>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <handle_game3+0x124>)
 80020ca:	701a      	strb	r2, [r3, #0]
			play_audio("LOSE.WAV");
 80020cc:	4819      	ldr	r0, [pc, #100]	; (8002134 <handle_game3+0x128>)
 80020ce:	f004 fcc7 	bl	8006a60 <play_audio>
 80020d2:	e002      	b.n	80020da <handle_game3+0xce>
		}else play_audio("WIN.WAV");
 80020d4:	4818      	ldr	r0, [pc, #96]	; (8002138 <handle_game3+0x12c>)
 80020d6:	f004 fcc3 	bl	8006a60 <play_audio>

		//timer = -1;	//clean the dot matrix
		//max7219_Clean();
		//print maze
		LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 80020da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020e4:	22f0      	movs	r2, #240	; 0xf0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2000      	movs	r0, #0
 80020ea:	f001 f9e6 	bl	80034ba <LCD_Clear>
		LCD_Display();
 80020ee:	f002 fe3b 	bl	8004d68 <LCD_Display>
		current_x = next_x;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <handle_game3+0x104>)
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <handle_game3+0x10c>)
 80020f8:	701a      	strb	r2, [r3, #0]
		current_y = next_y;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <handle_game3+0x108>)
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <handle_game3+0x110>)
 8002100:	701a      	strb	r2, [r3, #0]

}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20002870 	.word	0x20002870
 8002110:	2000287c 	.word	0x2000287c
 8002114:	2000287d 	.word	0x2000287d
 8002118:	2000287a 	.word	0x2000287a
 800211c:	2000287b 	.word	0x2000287b
 8002120:	08015490 	.word	0x08015490
 8002124:	08015420 	.word	0x08015420
 8002128:	08015440 	.word	0x08015440
 800212c:	08015448 	.word	0x08015448
 8002130:	2000287e 	.word	0x2000287e
 8002134:	08015450 	.word	0x08015450
 8002138:	0801545c 	.word	0x0801545c

0800213c <handle_dark>:


void handle_dark(){
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 8002142:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <handle_dark+0x1bc>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <handle_dark+0x1c0>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6b      	ldr	r2, [pc, #428]	; (8002300 <handle_dark+0x1c4>)
 8002152:	7812      	ldrb	r2, [r2, #0]
 8002154:	4413      	add	r3, r2
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 800215a:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <handle_dark+0x1bc>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4b69      	ldr	r3, [pc, #420]	; (8002304 <handle_dark+0x1c8>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a67      	ldr	r2, [pc, #412]	; (8002308 <handle_dark+0x1cc>)
 800216a:	7812      	ldrb	r2, [r2, #0]
 800216c:	4413      	add	r3, r2
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 8002172:	f7ff fc15 	bl	80019a0 <update_display>
	uint8_t start_flag = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]
	char str[10];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 800217a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002184:	22f0      	movs	r2, #240	; 0xf0
 8002186:	2100      	movs	r1, #0
 8002188:	2000      	movs	r0, #0
 800218a:	f001 f996 	bl	80034ba <LCD_Clear>
	LCD_DrawString(0, 0, "oops, something is watching you, please decrease the light to avoid their sight.", BLUE);
 800218e:	231f      	movs	r3, #31
 8002190:	4a5e      	ldr	r2, [pc, #376]	; (800230c <handle_dark+0x1d0>)
 8002192:	2100      	movs	r1, #0
 8002194:	2000      	movs	r0, #0
 8002196:	f001 fa01 	bl	800359c <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 800219a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800219e:	4a5c      	ldr	r2, [pc, #368]	; (8002310 <handle_dark+0x1d4>)
 80021a0:	2132      	movs	r1, #50	; 0x32
 80021a2:	2000      	movs	r0, #0
 80021a4:	f001 f9fa 	bl	800359c <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 80021a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021ac:	4a59      	ldr	r2, [pc, #356]	; (8002314 <handle_dark+0x1d8>)
 80021ae:	21c8      	movs	r1, #200	; 0xc8
 80021b0:	2064      	movs	r0, #100	; 0x64
 80021b2:	f001 f9f3 	bl	800359c <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 220);
 80021b6:	e007      	b.n	80021c8 <handle_dark+0x8c>
 80021b8:	23dc      	movs	r3, #220	; 0xdc
 80021ba:	22c8      	movs	r2, #200	; 0xc8
 80021bc:	2191      	movs	r1, #145	; 0x91
 80021be:	205f      	movs	r0, #95	; 0x5f
 80021c0:	f005 fb88 	bl	80078d4 <Check_touchkey_flag>
 80021c4:	4603      	mov	r3, r0
 80021c6:	75fb      	strb	r3, [r7, #23]
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f4      	beq.n	80021b8 <handle_dark+0x7c>

	//start the task
	//LCD_Clear (100, 200, 100, 20, WHITE);	// clear the screen
	LCD_DrawString(100, 200, "       ", RED);
 80021ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021d2:	4a51      	ldr	r2, [pc, #324]	; (8002318 <handle_dark+0x1dc>)
 80021d4:	21c8      	movs	r1, #200	; 0xc8
 80021d6:	2064      	movs	r0, #100	; 0x64
 80021d8:	f001 f9e0 	bl	800359c <LCD_DrawString>
	LCD_DrawString(100, 250, "give up", RED);
 80021dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021e0:	4a4e      	ldr	r2, [pc, #312]	; (800231c <handle_dark+0x1e0>)
 80021e2:	21fa      	movs	r1, #250	; 0xfa
 80021e4:	2064      	movs	r0, #100	; 0x64
 80021e6:	f001 f9d9 	bl	800359c <LCD_DrawString>
	//timer = 10;
	//get initial LDR value
	HAL_ADC_Start(&hadc1);	//init the adc
 80021ea:	484d      	ldr	r0, [pc, #308]	; (8002320 <handle_dark+0x1e4>)
 80021ec:	f005 fd36 	bl	8007c5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);	//time need for conversion
 80021f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021f4:	484a      	ldr	r0, [pc, #296]	; (8002320 <handle_dark+0x1e4>)
 80021f6:	f005 fddf 	bl	8007db8 <HAL_ADC_PollForConversion>
	int init_data = HAL_ADC_GetValue(&hadc1);
 80021fa:	4849      	ldr	r0, [pc, #292]	; (8002320 <handle_dark+0x1e4>)
 80021fc:	f005 ffc0 	bl	8008180 <HAL_ADC_GetValue>
 8002200:	4603      	mov	r3, r0
 8002202:	613b      	str	r3, [r7, #16]
	int data1 = init_data;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	60fb      	str	r3, [r7, #12]
	sprintf(str, "LDR %d  ",init_data);
 8002208:	463b      	mov	r3, r7
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4945      	ldr	r1, [pc, #276]	; (8002324 <handle_dark+0x1e8>)
 800220e:	4618      	mov	r0, r3
 8002210:	f010 fec6 	bl	8012fa0 <siprintf>
	LCD_DrawString(100, 150, str, RED);
 8002214:	463a      	mov	r2, r7
 8002216:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800221a:	2196      	movs	r1, #150	; 0x96
 800221c:	2064      	movs	r0, #100	; 0x64
 800221e:	f001 f9bd 	bl	800359c <LCD_DrawString>
	timer = 10;
 8002222:	4b41      	ldr	r3, [pc, #260]	; (8002328 <handle_dark+0x1ec>)
 8002224:	220a      	movs	r2, #10
 8002226:	601a      	str	r2, [r3, #0]
	//print_digit(timer);

	while (true){

		//handle LDR
		HAL_ADC_Start(&hadc1);
 8002228:	483d      	ldr	r0, [pc, #244]	; (8002320 <handle_dark+0x1e4>)
 800222a:	f005 fd17 	bl	8007c5c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);	//time need for conversion
 800222e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002232:	483b      	ldr	r0, [pc, #236]	; (8002320 <handle_dark+0x1e4>)
 8002234:	f005 fdc0 	bl	8007db8 <HAL_ADC_PollForConversion>
		data1 = HAL_ADC_GetValue(&hadc1);
 8002238:	4839      	ldr	r0, [pc, #228]	; (8002320 <handle_dark+0x1e4>)
 800223a:	f005 ffa1 	bl	8008180 <HAL_ADC_GetValue>
 800223e:	4603      	mov	r3, r0
 8002240:	60fb      	str	r3, [r7, #12]
		sprintf(str, "LDR %d  ", data1);
 8002242:	463b      	mov	r3, r7
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4937      	ldr	r1, [pc, #220]	; (8002324 <handle_dark+0x1e8>)
 8002248:	4618      	mov	r0, r3
 800224a:	f010 fea9 	bl	8012fa0 <siprintf>
		LCD_DrawString(100, 150, str, RED);
 800224e:	463a      	mov	r2, r7
 8002250:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002254:	2196      	movs	r1, #150	; 0x96
 8002256:	2064      	movs	r0, #100	; 0x64
 8002258:	f001 f9a0 	bl	800359c <LCD_DrawString>
    	if((init_data - data1) > 500 || data1 < 500) {play_audio("WIN.WAV"); break;}	//dynamic & abs threshold check //task success
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002266:	dc03      	bgt.n	8002270 <handle_dark+0x134>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800226e:	da03      	bge.n	8002278 <handle_dark+0x13c>
 8002270:	482e      	ldr	r0, [pc, #184]	; (800232c <handle_dark+0x1f0>)
 8002272:	f004 fbf5 	bl	8006a60 <play_audio>
 8002276:	e021      	b.n	80022bc <handle_dark+0x180>

    	//give up flag
    	if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 8002278:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800227c:	22fa      	movs	r2, #250	; 0xfa
 800227e:	2191      	movs	r1, #145	; 0x91
 8002280:	205f      	movs	r0, #95	; 0x5f
 8002282:	f005 fb27 	bl	80078d4 <Check_touchkey_flag>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <handle_dark+0x164>
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <handle_dark+0x1f4>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b26      	ldr	r3, [pc, #152]	; (8002330 <handle_dark+0x1f4>)
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	4826      	ldr	r0, [pc, #152]	; (8002334 <handle_dark+0x1f8>)
 800229a:	f004 fbe1 	bl	8006a60 <play_audio>
 800229e:	e00d      	b.n	80022bc <handle_dark+0x180>

		if(timer == -1){//task failure
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <handle_dark+0x1ec>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022a8:	d1be      	bne.n	8002228 <handle_dark+0xec>
			hearts--;
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <handle_dark+0x1f4>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <handle_dark+0x1f4>)
 80022b4:	701a      	strb	r2, [r3, #0]
			play_audio("LOSE.WAV");
 80022b6:	481f      	ldr	r0, [pc, #124]	; (8002334 <handle_dark+0x1f8>)
 80022b8:	f004 fbd2 	bl	8006a60 <play_audio>
			break;
		}
	}
	timer = -1;	//clean the dot matrix
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <handle_dark+0x1ec>)
 80022be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022c2:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 80022c4:	f002 fbfc 	bl	8004ac0 <max7219_Clean>
	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 80022c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022d2:	22f0      	movs	r2, #240	; 0xf0
 80022d4:	2100      	movs	r1, #0
 80022d6:	2000      	movs	r0, #0
 80022d8:	f001 f8ef 	bl	80034ba <LCD_Clear>
	LCD_Display();
 80022dc:	f002 fd44 	bl	8004d68 <LCD_Display>
	current_x = next_x;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <handle_dark+0x1c0>)
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <handle_dark+0x1c8>)
 80022e6:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <handle_dark+0x1c4>)
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <handle_dark+0x1cc>)
 80022ee:	701a      	strb	r2, [r3, #0]
}
 80022f0:	bf00      	nop
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20002870 	.word	0x20002870
 80022fc:	2000287c 	.word	0x2000287c
 8002300:	2000287d 	.word	0x2000287d
 8002304:	2000287a 	.word	0x2000287a
 8002308:	2000287b 	.word	0x2000287b
 800230c:	080154dc 	.word	0x080154dc
 8002310:	08015530 	.word	0x08015530
 8002314:	08015440 	.word	0x08015440
 8002318:	0801556c 	.word	0x0801556c
 800231c:	08015574 	.word	0x08015574
 8002320:	20002474 	.word	0x20002474
 8002324:	0801557c 	.word	0x0801557c
 8002328:	20000004 	.word	0x20000004
 800232c:	0801545c 	.word	0x0801545c
 8002330:	2000287e 	.word	0x2000287e
 8002334:	08015450 	.word	0x08015450

08002338 <handle_bright>:


void handle_bright(){
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 800233e:	4b6e      	ldr	r3, [pc, #440]	; (80024f8 <handle_bright+0x1c0>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b6e      	ldr	r3, [pc, #440]	; (80024fc <handle_bright+0x1c4>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6c      	ldr	r2, [pc, #432]	; (8002500 <handle_bright+0x1c8>)
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	4413      	add	r3, r2
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8002356:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <handle_bright+0x1c0>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <handle_bright+0x1cc>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a68      	ldr	r2, [pc, #416]	; (8002508 <handle_bright+0x1d0>)
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	4413      	add	r3, r2
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 800236e:	f7ff fb17 	bl	80019a0 <update_display>
	uint8_t start_flag = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]
	char str[10];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002380:	22f0      	movs	r2, #240	; 0xf0
 8002382:	2100      	movs	r1, #0
 8002384:	2000      	movs	r0, #0
 8002386:	f001 f898 	bl	80034ba <LCD_Clear>
	LCD_DrawString(0, 0, "Oh, you entered a dark region, you need some light to find the path!", BLUE);
 800238a:	231f      	movs	r3, #31
 800238c:	4a5f      	ldr	r2, [pc, #380]	; (800250c <handle_bright+0x1d4>)
 800238e:	2100      	movs	r1, #0
 8002390:	2000      	movs	r0, #0
 8002392:	f001 f903 	bl	800359c <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 8002396:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800239a:	4a5d      	ldr	r2, [pc, #372]	; (8002510 <handle_bright+0x1d8>)
 800239c:	2132      	movs	r1, #50	; 0x32
 800239e:	2000      	movs	r0, #0
 80023a0:	f001 f8fc 	bl	800359c <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 80023a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023a8:	4a5a      	ldr	r2, [pc, #360]	; (8002514 <handle_bright+0x1dc>)
 80023aa:	21c8      	movs	r1, #200	; 0xc8
 80023ac:	2064      	movs	r0, #100	; 0x64
 80023ae:	f001 f8f5 	bl	800359c <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 80023b2:	e007      	b.n	80023c4 <handle_bright+0x8c>
 80023b4:	23e6      	movs	r3, #230	; 0xe6
 80023b6:	22c8      	movs	r2, #200	; 0xc8
 80023b8:	2191      	movs	r1, #145	; 0x91
 80023ba:	205f      	movs	r0, #95	; 0x5f
 80023bc:	f005 fa8a 	bl	80078d4 <Check_touchkey_flag>
 80023c0:	4603      	mov	r3, r0
 80023c2:	75fb      	strb	r3, [r7, #23]
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f4      	beq.n	80023b4 <handle_bright+0x7c>

	//start the task
	//LCD_Clear (100, 200, 100, 20, WHITE);	// clear the screen
	LCD_DrawString(100, 200, "       ", RED);
 80023ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023ce:	4a52      	ldr	r2, [pc, #328]	; (8002518 <handle_bright+0x1e0>)
 80023d0:	21c8      	movs	r1, #200	; 0xc8
 80023d2:	2064      	movs	r0, #100	; 0x64
 80023d4:	f001 f8e2 	bl	800359c <LCD_DrawString>
	LCD_DrawString(100, 250, "give up", RED);
 80023d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023dc:	4a4f      	ldr	r2, [pc, #316]	; (800251c <handle_bright+0x1e4>)
 80023de:	21fa      	movs	r1, #250	; 0xfa
 80023e0:	2064      	movs	r0, #100	; 0x64
 80023e2:	f001 f8db 	bl	800359c <LCD_DrawString>
	//timer = 10;
	//get initial LDR value
	HAL_ADC_Start(&hadc1);	//init the adc
 80023e6:	484e      	ldr	r0, [pc, #312]	; (8002520 <handle_bright+0x1e8>)
 80023e8:	f005 fc38 	bl	8007c5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);	//time need for conversion
 80023ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023f0:	484b      	ldr	r0, [pc, #300]	; (8002520 <handle_bright+0x1e8>)
 80023f2:	f005 fce1 	bl	8007db8 <HAL_ADC_PollForConversion>
	int init_data = HAL_ADC_GetValue(&hadc1);
 80023f6:	484a      	ldr	r0, [pc, #296]	; (8002520 <handle_bright+0x1e8>)
 80023f8:	f005 fec2 	bl	8008180 <HAL_ADC_GetValue>
 80023fc:	4603      	mov	r3, r0
 80023fe:	613b      	str	r3, [r7, #16]
	int data1 = init_data;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	60fb      	str	r3, [r7, #12]
	sprintf(str, "LDR %d  ",init_data);
 8002404:	463b      	mov	r3, r7
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4946      	ldr	r1, [pc, #280]	; (8002524 <handle_bright+0x1ec>)
 800240a:	4618      	mov	r0, r3
 800240c:	f010 fdc8 	bl	8012fa0 <siprintf>
	LCD_DrawString(100, 150, str, RED);
 8002410:	463a      	mov	r2, r7
 8002412:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002416:	2196      	movs	r1, #150	; 0x96
 8002418:	2064      	movs	r0, #100	; 0x64
 800241a:	f001 f8bf 	bl	800359c <LCD_DrawString>
	timer = 10;
 800241e:	4b42      	ldr	r3, [pc, #264]	; (8002528 <handle_bright+0x1f0>)
 8002420:	220a      	movs	r2, #10
 8002422:	601a      	str	r2, [r3, #0]
		//display timer value
		//sprintf(str, "%d  ", timer);
		//LCD_DrawString(100, 100, str, RED);

		//give up flag
		if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 8002424:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002428:	22fa      	movs	r2, #250	; 0xfa
 800242a:	2191      	movs	r1, #145	; 0x91
 800242c:	205f      	movs	r0, #95	; 0x5f
 800242e:	f005 fa51 	bl	80078d4 <Check_touchkey_flag>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <handle_bright+0x114>
 8002438:	4b3c      	ldr	r3, [pc, #240]	; (800252c <handle_bright+0x1f4>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b3a      	ldr	r3, [pc, #232]	; (800252c <handle_bright+0x1f4>)
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	483a      	ldr	r0, [pc, #232]	; (8002530 <handle_bright+0x1f8>)
 8002446:	f004 fb0b 	bl	8006a60 <play_audio>
 800244a:	e036      	b.n	80024ba <handle_bright+0x182>

		//handle LDR
		HAL_ADC_Start(&hadc1);
 800244c:	4834      	ldr	r0, [pc, #208]	; (8002520 <handle_bright+0x1e8>)
 800244e:	f005 fc05 	bl	8007c5c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);	//time need for conversion
 8002452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002456:	4832      	ldr	r0, [pc, #200]	; (8002520 <handle_bright+0x1e8>)
 8002458:	f005 fcae 	bl	8007db8 <HAL_ADC_PollForConversion>
		data1 = HAL_ADC_GetValue(&hadc1);
 800245c:	4830      	ldr	r0, [pc, #192]	; (8002520 <handle_bright+0x1e8>)
 800245e:	f005 fe8f 	bl	8008180 <HAL_ADC_GetValue>
 8002462:	4603      	mov	r3, r0
 8002464:	60fb      	str	r3, [r7, #12]
		sprintf(str, "LDR %d  ", data1);
 8002466:	463b      	mov	r3, r7
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	492e      	ldr	r1, [pc, #184]	; (8002524 <handle_bright+0x1ec>)
 800246c:	4618      	mov	r0, r3
 800246e:	f010 fd97 	bl	8012fa0 <siprintf>
		LCD_DrawString(100, 150, str, RED);
 8002472:	463a      	mov	r2, r7
 8002474:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002478:	2196      	movs	r1, #150	; 0x96
 800247a:	2064      	movs	r0, #100	; 0x64
 800247c:	f001 f88e 	bl	800359c <LCD_DrawString>
		if((data1 - init_data) > 500 || data1 > 3800) {play_audio("WIN.WAV"); break;}	//dynamic & abs threshold check //task success
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800248a:	dc04      	bgt.n	8002496 <handle_bright+0x15e>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002492:	4293      	cmp	r3, r2
 8002494:	dd03      	ble.n	800249e <handle_bright+0x166>
 8002496:	4827      	ldr	r0, [pc, #156]	; (8002534 <handle_bright+0x1fc>)
 8002498:	f004 fae2 	bl	8006a60 <play_audio>
 800249c:	e00d      	b.n	80024ba <handle_bright+0x182>

		if(timer == -1){
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <handle_bright+0x1f0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a6:	d1bd      	bne.n	8002424 <handle_bright+0xec>
			hearts--;
 80024a8:	4b20      	ldr	r3, [pc, #128]	; (800252c <handle_bright+0x1f4>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <handle_bright+0x1f4>)
 80024b2:	701a      	strb	r2, [r3, #0]
			play_audio("LOSE.WAV");
 80024b4:	481e      	ldr	r0, [pc, #120]	; (8002530 <handle_bright+0x1f8>)
 80024b6:	f004 fad3 	bl	8006a60 <play_audio>
			break;
		}	//task failure
	}
	timer = -1;	//clean the dot matrix
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <handle_bright+0x1f0>)
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024c0:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 80024c2:	f002 fafd 	bl	8004ac0 <max7219_Clean>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 80024c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80024d0:	22f0      	movs	r2, #240	; 0xf0
 80024d2:	2100      	movs	r1, #0
 80024d4:	2000      	movs	r0, #0
 80024d6:	f000 fff0 	bl	80034ba <LCD_Clear>
	LCD_Display();
 80024da:	f002 fc45 	bl	8004d68 <LCD_Display>
	current_x = next_x;
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <handle_bright+0x1c4>)
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <handle_bright+0x1cc>)
 80024e4:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <handle_bright+0x1c8>)
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <handle_bright+0x1d0>)
 80024ec:	701a      	strb	r2, [r3, #0]
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20002870 	.word	0x20002870
 80024fc:	2000287c 	.word	0x2000287c
 8002500:	2000287d 	.word	0x2000287d
 8002504:	2000287a 	.word	0x2000287a
 8002508:	2000287b 	.word	0x2000287b
 800250c:	08015588 	.word	0x08015588
 8002510:	08015530 	.word	0x08015530
 8002514:	08015440 	.word	0x08015440
 8002518:	0801556c 	.word	0x0801556c
 800251c:	08015574 	.word	0x08015574
 8002520:	20002474 	.word	0x20002474
 8002524:	0801557c 	.word	0x0801557c
 8002528:	20000004 	.word	0x20000004
 800252c:	2000287e 	.word	0x2000287e
 8002530:	08015450 	.word	0x08015450
 8002534:	0801545c 	.word	0x0801545c

08002538 <handle_ice>:


void handle_ice(){	//increase temp
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 800253e:	4b5e      	ldr	r3, [pc, #376]	; (80026b8 <handle_ice+0x180>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <handle_ice+0x184>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a5c      	ldr	r2, [pc, #368]	; (80026c0 <handle_ice+0x188>)
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	4413      	add	r3, r2
 8002552:	2202      	movs	r2, #2
 8002554:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8002556:	4b58      	ldr	r3, [pc, #352]	; (80026b8 <handle_ice+0x180>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b5a      	ldr	r3, [pc, #360]	; (80026c4 <handle_ice+0x18c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <handle_ice+0x190>)
 8002566:	7812      	ldrb	r2, [r2, #0]
 8002568:	4413      	add	r3, r2
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 800256e:	f7ff fa17 	bl	80019a0 <update_display>
	uint8_t start_flag = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[20];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002582:	22f0      	movs	r2, #240	; 0xf0
 8002584:	2100      	movs	r1, #0
 8002586:	2000      	movs	r0, #0
 8002588:	f000 ff97 	bl	80034ba <LCD_Clear>
	LCD_DrawString(0, 0, "a cube of ice is blocking the road, please try to melt it!", BLUE);
 800258c:	231f      	movs	r3, #31
 800258e:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <handle_ice+0x194>)
 8002590:	2100      	movs	r1, #0
 8002592:	2000      	movs	r0, #0
 8002594:	f001 f802 	bl	800359c <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 8002598:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800259c:	4a4c      	ldr	r2, [pc, #304]	; (80026d0 <handle_ice+0x198>)
 800259e:	2132      	movs	r1, #50	; 0x32
 80025a0:	2000      	movs	r0, #0
 80025a2:	f000 fffb 	bl	800359c <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 80025a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025aa:	4a4a      	ldr	r2, [pc, #296]	; (80026d4 <handle_ice+0x19c>)
 80025ac:	21c8      	movs	r1, #200	; 0xc8
 80025ae:	2064      	movs	r0, #100	; 0x64
 80025b0:	f000 fff4 	bl	800359c <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 80025b4:	e008      	b.n	80025c8 <handle_ice+0x90>
 80025b6:	23e6      	movs	r3, #230	; 0xe6
 80025b8:	22c8      	movs	r2, #200	; 0xc8
 80025ba:	2191      	movs	r1, #145	; 0x91
 80025bc:	205f      	movs	r0, #95	; 0x5f
 80025be:	f005 f989 	bl	80078d4 <Check_touchkey_flag>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f2      	beq.n	80025b6 <handle_ice+0x7e>

	//start the task
	//LCD_Clear (100, 200, 100, 20, WHITE);	// clear the screen
	LCD_DrawString(100, 200, "       ", RED);
 80025d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025d4:	4a40      	ldr	r2, [pc, #256]	; (80026d8 <handle_ice+0x1a0>)
 80025d6:	21c8      	movs	r1, #200	; 0xc8
 80025d8:	2064      	movs	r0, #100	; 0x64
 80025da:	f000 ffdf 	bl	800359c <LCD_DrawString>
	LCD_DrawString(100, 250, "give up", RED);
 80025de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025e2:	4a3e      	ldr	r2, [pc, #248]	; (80026dc <handle_ice+0x1a4>)
 80025e4:	21fa      	movs	r1, #250	; 0xfa
 80025e6:	2064      	movs	r0, #100	; 0x64
 80025e8:	f000 ffd8 	bl	800359c <LCD_DrawString>
	//timer = 15;
	float init_data = temp_value();
 80025ec:	f004 f9e8 	bl	80069c0 <temp_value>
 80025f0:	6238      	str	r0, [r7, #32]
	init_data = temp_value();
 80025f2:	f004 f9e5 	bl	80069c0 <temp_value>
 80025f6:	6238      	str	r0, [r7, #32]
	//int data1 = init_data;
	//int round = init_data;
	//sprintf(str, "init temp %d ",init_data);
	//LCD_DrawString(100, 150, str, RED);
	float data1, re;
	timer = 15;
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <handle_ice+0x1a8>)
 80025fa:	220f      	movs	r2, #15
 80025fc:	601a      	str	r2, [r3, #0]
		//display timer value
		//sprintf(str, "%d  ", timer);
		//LCD_DrawString(100, 100, str, RED);

		//read new value
		 data1 = temp_value();
 80025fe:	f004 f9df 	bl	80069c0 <temp_value>
 8002602:	61f8      	str	r0, [r7, #28]
		 //round = data1;
		 //sprintf(str, "temp %d ",data1);
		 re = data1 - init_data;
 8002604:	6a39      	ldr	r1, [r7, #32]
 8002606:	69f8      	ldr	r0, [r7, #28]
 8002608:	f7fe fb1e 	bl	8000c48 <__aeabi_fsub>
 800260c:	4603      	mov	r3, r0
 800260e:	61bb      	str	r3, [r7, #24]
		 //LCD_DrawString(100, 180, str, RED);
		 if (re >= 1 || data1 >= 30) {play_audio("WIN.WAV"); break;}
 8002610:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002614:	69b8      	ldr	r0, [r7, #24]
 8002616:	f7fe fdd3 	bl	80011c0 <__aeabi_fcmpge>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <handle_ice+0xf6>
 8002620:	4930      	ldr	r1, [pc, #192]	; (80026e4 <handle_ice+0x1ac>)
 8002622:	69f8      	ldr	r0, [r7, #28]
 8002624:	f7fe fdcc 	bl	80011c0 <__aeabi_fcmpge>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <handle_ice+0xfe>
 800262e:	482e      	ldr	r0, [pc, #184]	; (80026e8 <handle_ice+0x1b0>)
 8002630:	f004 fa16 	bl	8006a60 <play_audio>
 8002634:	e021      	b.n	800267a <handle_ice+0x142>

		 //give up flag
		 if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 8002636:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800263a:	22fa      	movs	r2, #250	; 0xfa
 800263c:	2191      	movs	r1, #145	; 0x91
 800263e:	205f      	movs	r0, #95	; 0x5f
 8002640:	f005 f948 	bl	80078d4 <Check_touchkey_flag>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <handle_ice+0x126>
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <handle_ice+0x1b4>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	3b01      	subs	r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <handle_ice+0x1b4>)
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	4826      	ldr	r0, [pc, #152]	; (80026f0 <handle_ice+0x1b8>)
 8002658:	f004 fa02 	bl	8006a60 <play_audio>
 800265c:	e00d      	b.n	800267a <handle_ice+0x142>

		 if(timer == -1){hearts--; play_audio("LOSE.WAV"); break;}	//task failure
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <handle_ice+0x1a8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002666:	d1ca      	bne.n	80025fe <handle_ice+0xc6>
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <handle_ice+0x1b4>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	3b01      	subs	r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <handle_ice+0x1b4>)
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	481e      	ldr	r0, [pc, #120]	; (80026f0 <handle_ice+0x1b8>)
 8002676:	f004 f9f3 	bl	8006a60 <play_audio>
	}

	timer = -1;	//clean the dot matrix
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <handle_ice+0x1a8>)
 800267c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002680:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 8002682:	f002 fa1d 	bl	8004ac0 <max7219_Clean>
	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002690:	22f0      	movs	r2, #240	; 0xf0
 8002692:	2100      	movs	r1, #0
 8002694:	2000      	movs	r0, #0
 8002696:	f000 ff10 	bl	80034ba <LCD_Clear>
	LCD_Display();
 800269a:	f002 fb65 	bl	8004d68 <LCD_Display>
	current_x = next_x;
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <handle_ice+0x184>)
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <handle_ice+0x18c>)
 80026a4:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <handle_ice+0x188>)
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <handle_ice+0x190>)
 80026ac:	701a      	strb	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	3728      	adds	r7, #40	; 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20002870 	.word	0x20002870
 80026bc:	2000287c 	.word	0x2000287c
 80026c0:	2000287d 	.word	0x2000287d
 80026c4:	2000287a 	.word	0x2000287a
 80026c8:	2000287b 	.word	0x2000287b
 80026cc:	080155d0 	.word	0x080155d0
 80026d0:	08015530 	.word	0x08015530
 80026d4:	08015440 	.word	0x08015440
 80026d8:	0801556c 	.word	0x0801556c
 80026dc:	08015574 	.word	0x08015574
 80026e0:	20000004 	.word	0x20000004
 80026e4:	41f00000 	.word	0x41f00000
 80026e8:	0801545c 	.word	0x0801545c
 80026ec:	2000287e 	.word	0x2000287e
 80026f0:	08015450 	.word	0x08015450

080026f4 <handle_fire>:


void handle_fire(){	//decrease temperature
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 80026fa:	4b5e      	ldr	r3, [pc, #376]	; (8002874 <handle_fire+0x180>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <handle_fire+0x184>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5c      	ldr	r2, [pc, #368]	; (800287c <handle_fire+0x188>)
 800270a:	7812      	ldrb	r2, [r2, #0]
 800270c:	4413      	add	r3, r2
 800270e:	2202      	movs	r2, #2
 8002710:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8002712:	4b58      	ldr	r3, [pc, #352]	; (8002874 <handle_fire+0x180>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b5a      	ldr	r3, [pc, #360]	; (8002880 <handle_fire+0x18c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <handle_fire+0x190>)
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	4413      	add	r3, r2
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 800272a:	f7ff f939 	bl	80019a0 <update_display>
	uint8_t start_flag = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[20];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800273e:	22f0      	movs	r2, #240	; 0xf0
 8002740:	2100      	movs	r1, #0
 8002742:	2000      	movs	r0, #0
 8002744:	f000 feb9 	bl	80034ba <LCD_Clear>
	LCD_DrawString(0, 0, "three suns are shine on you and you are so hot, please try to decrease the surrounding temperature", BLUE);
 8002748:	231f      	movs	r3, #31
 800274a:	4a4f      	ldr	r2, [pc, #316]	; (8002888 <handle_fire+0x194>)
 800274c:	2100      	movs	r1, #0
 800274e:	2000      	movs	r0, #0
 8002750:	f000 ff24 	bl	800359c <LCD_DrawString>
	LCD_DrawString(0, 80, "Press start to start the task, wait until the timer start", RED);
 8002754:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002758:	4a4c      	ldr	r2, [pc, #304]	; (800288c <handle_fire+0x198>)
 800275a:	2150      	movs	r1, #80	; 0x50
 800275c:	2000      	movs	r0, #0
 800275e:	f000 ff1d 	bl	800359c <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 8002762:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002766:	4a4a      	ldr	r2, [pc, #296]	; (8002890 <handle_fire+0x19c>)
 8002768:	21c8      	movs	r1, #200	; 0xc8
 800276a:	2064      	movs	r0, #100	; 0x64
 800276c:	f000 ff16 	bl	800359c <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8002770:	e008      	b.n	8002784 <handle_fire+0x90>
 8002772:	23e6      	movs	r3, #230	; 0xe6
 8002774:	22c8      	movs	r2, #200	; 0xc8
 8002776:	2191      	movs	r1, #145	; 0x91
 8002778:	205f      	movs	r0, #95	; 0x5f
 800277a:	f005 f8ab 	bl	80078d4 <Check_touchkey_flag>
 800277e:	4603      	mov	r3, r0
 8002780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f2      	beq.n	8002772 <handle_fire+0x7e>

	//start the task
	//LCD_Clear (100, 200, 100, 20, WHITE);	// clear the screen
	LCD_DrawString(100, 250, "give up", RED);
 800278c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002790:	4a40      	ldr	r2, [pc, #256]	; (8002894 <handle_fire+0x1a0>)
 8002792:	21fa      	movs	r1, #250	; 0xfa
 8002794:	2064      	movs	r0, #100	; 0x64
 8002796:	f000 ff01 	bl	800359c <LCD_DrawString>
	LCD_DrawString(100, 200, "       ", RED);
 800279a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800279e:	4a3e      	ldr	r2, [pc, #248]	; (8002898 <handle_fire+0x1a4>)
 80027a0:	21c8      	movs	r1, #200	; 0xc8
 80027a2:	2064      	movs	r0, #100	; 0x64
 80027a4:	f000 fefa 	bl	800359c <LCD_DrawString>
	//timer = 15;
	float init_data = temp_value();
 80027a8:	f004 f90a 	bl	80069c0 <temp_value>
 80027ac:	6238      	str	r0, [r7, #32]
	init_data = temp_value();
 80027ae:	f004 f907 	bl	80069c0 <temp_value>
 80027b2:	6238      	str	r0, [r7, #32]
	//int data1 = init_data;
	//int round = init_data;
	//sprintf(str, "init temp %d ",init_data);
	//LCD_DrawString(100, 150, str, RED);
	float data1, re;
	timer = 5;
 80027b4:	4b39      	ldr	r3, [pc, #228]	; (800289c <handle_fire+0x1a8>)
 80027b6:	2205      	movs	r2, #5
 80027b8:	601a      	str	r2, [r3, #0]
		//sprintf(str, "%d  ", timer);
		//LCD_DrawString(100, 120, str, RED);
		//print_digit(timer);

		//read new value
		 data1 = temp_value();
 80027ba:	f004 f901 	bl	80069c0 <temp_value>
 80027be:	61f8      	str	r0, [r7, #28]
		 //round = data1;
		 //sprintf(str, "temp %d ",data1);
		 //LCD_DrawString(100, 180, str, RED);
		 re = init_data - data1;
 80027c0:	69f9      	ldr	r1, [r7, #28]
 80027c2:	6a38      	ldr	r0, [r7, #32]
 80027c4:	f7fe fa40 	bl	8000c48 <__aeabi_fsub>
 80027c8:	4603      	mov	r3, r0
 80027ca:	61bb      	str	r3, [r7, #24]
		 if (re >= 0.25  || data1 <=20) { play_audio("WIN.WAV"); break;}
 80027cc:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80027d0:	69b8      	ldr	r0, [r7, #24]
 80027d2:	f7fe fcf5 	bl	80011c0 <__aeabi_fcmpge>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <handle_fire+0xf6>
 80027dc:	4930      	ldr	r1, [pc, #192]	; (80028a0 <handle_fire+0x1ac>)
 80027de:	69f8      	ldr	r0, [r7, #28]
 80027e0:	f7fe fce4 	bl	80011ac <__aeabi_fcmple>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <handle_fire+0xfe>
 80027ea:	482e      	ldr	r0, [pc, #184]	; (80028a4 <handle_fire+0x1b0>)
 80027ec:	f004 f938 	bl	8006a60 <play_audio>
 80027f0:	e021      	b.n	8002836 <handle_fire+0x142>

		 //give up flag
		 if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 80027f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027f6:	22fa      	movs	r2, #250	; 0xfa
 80027f8:	2191      	movs	r1, #145	; 0x91
 80027fa:	205f      	movs	r0, #95	; 0x5f
 80027fc:	f005 f86a 	bl	80078d4 <Check_touchkey_flag>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <handle_fire+0x126>
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <handle_fire+0x1b4>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	3b01      	subs	r3, #1
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <handle_fire+0x1b4>)
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	4826      	ldr	r0, [pc, #152]	; (80028ac <handle_fire+0x1b8>)
 8002814:	f004 f924 	bl	8006a60 <play_audio>
 8002818:	e00d      	b.n	8002836 <handle_fire+0x142>

		 if(timer == -1){hearts--; play_audio("LOSE.WAV"); break;}	//task failure
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <handle_fire+0x1a8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002822:	d1ca      	bne.n	80027ba <handle_fire+0xc6>
 8002824:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <handle_fire+0x1b4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	3b01      	subs	r3, #1
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <handle_fire+0x1b4>)
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	481e      	ldr	r0, [pc, #120]	; (80028ac <handle_fire+0x1b8>)
 8002832:	f004 f915 	bl	8006a60 <play_audio>
	}

	timer = -1;	//clean the dot matrix
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <handle_fire+0x1a8>)
 8002838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800283c:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 800283e:	f002 f93f 	bl	8004ac0 <max7219_Clean>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800284c:	22f0      	movs	r2, #240	; 0xf0
 800284e:	2100      	movs	r1, #0
 8002850:	2000      	movs	r0, #0
 8002852:	f000 fe32 	bl	80034ba <LCD_Clear>
	LCD_Display();
 8002856:	f002 fa87 	bl	8004d68 <LCD_Display>
	current_x = next_x;
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <handle_fire+0x184>)
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <handle_fire+0x18c>)
 8002860:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <handle_fire+0x188>)
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <handle_fire+0x190>)
 8002868:	701a      	strb	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	3728      	adds	r7, #40	; 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20002870 	.word	0x20002870
 8002878:	2000287c 	.word	0x2000287c
 800287c:	2000287d 	.word	0x2000287d
 8002880:	2000287a 	.word	0x2000287a
 8002884:	2000287b 	.word	0x2000287b
 8002888:	0801560c 	.word	0x0801560c
 800288c:	08015530 	.word	0x08015530
 8002890:	08015440 	.word	0x08015440
 8002894:	08015574 	.word	0x08015574
 8002898:	0801556c 	.word	0x0801556c
 800289c:	20000004 	.word	0x20000004
 80028a0:	41a00000 	.word	0x41a00000
 80028a4:	0801545c 	.word	0x0801545c
 80028a8:	2000287e 	.word	0x2000287e
 80028ac:	08015450 	.word	0x08015450

080028b0 <handle_ghost>:


void handle_ghost(){	//quiz zone (replace ghost)
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 80028b6:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <handle_ghost+0x1a4>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <handle_ghost+0x1a8>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <handle_ghost+0x1ac>)
 80028c6:	7812      	ldrb	r2, [r2, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	2202      	movs	r2, #2
 80028cc:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 80028ce:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <handle_ghost+0x1a4>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <handle_ghost+0x1b0>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a61      	ldr	r2, [pc, #388]	; (8002a64 <handle_ghost+0x1b4>)
 80028de:	7812      	ldrb	r2, [r2, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 80028e6:	f7ff f85b 	bl	80019a0 <update_display>
	uint8_t start_flag = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	71fb      	strb	r3, [r7, #7]

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 80028ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80028f8:	22f0      	movs	r2, #240	; 0xf0
 80028fa:	2100      	movs	r1, #0
 80028fc:	2000      	movs	r0, #0
 80028fe:	f000 fddc 	bl	80034ba <LCD_Clear>
	LCD_DrawString(0, 0, "QUIZ TIME! please answer question with your phone (lowercase/number only)", BLUE);
 8002902:	231f      	movs	r3, #31
 8002904:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <handle_ghost+0x1b8>)
 8002906:	2100      	movs	r1, #0
 8002908:	2000      	movs	r0, #0
 800290a:	f000 fe47 	bl	800359c <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 800290e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002912:	4a56      	ldr	r2, [pc, #344]	; (8002a6c <handle_ghost+0x1bc>)
 8002914:	2132      	movs	r1, #50	; 0x32
 8002916:	2000      	movs	r0, #0
 8002918:	f000 fe40 	bl	800359c <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 800291c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002920:	4a53      	ldr	r2, [pc, #332]	; (8002a70 <handle_ghost+0x1c0>)
 8002922:	21c8      	movs	r1, #200	; 0xc8
 8002924:	2064      	movs	r0, #100	; 0x64
 8002926:	f000 fe39 	bl	800359c <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 800292a:	e007      	b.n	800293c <handle_ghost+0x8c>
 800292c:	23e6      	movs	r3, #230	; 0xe6
 800292e:	22c8      	movs	r2, #200	; 0xc8
 8002930:	2191      	movs	r1, #145	; 0x91
 8002932:	205f      	movs	r0, #95	; 0x5f
 8002934:	f004 ffce 	bl	80078d4 <Check_touchkey_flag>
 8002938:	4603      	mov	r3, r0
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f4      	beq.n	800292c <handle_ghost+0x7c>

	//start the task
	LCD_DrawString(100, 200, "       ", RED);
 8002942:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002946:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <handle_ghost+0x1c4>)
 8002948:	21c8      	movs	r1, #200	; 0xc8
 800294a:	2064      	movs	r0, #100	; 0x64
 800294c:	f000 fe26 	bl	800359c <LCD_DrawString>
	LCD_DrawString(100, 250, "give up", RED);
 8002950:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002954:	4a48      	ldr	r2, [pc, #288]	; (8002a78 <handle_ghost+0x1c8>)
 8002956:	21fa      	movs	r1, #250	; 0xfa
 8002958:	2064      	movs	r0, #100	; 0x64
 800295a:	f000 fe1f 	bl	800359c <LCD_DrawString>

	get_question();	//display a random question on LCD
 800295e:	f000 fb21 	bl	8002fa4 <get_question>
	int len = strlen(answer);
 8002962:	4846      	ldr	r0, [pc, #280]	; (8002a7c <handle_ghost+0x1cc>)
 8002964:	f7fd fc60 	bl	8000228 <strlen>
 8002968:	4603      	mov	r3, r0
 800296a:	603b      	str	r3, [r7, #0]
	len--; //take out the \n
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	3b01      	subs	r3, #1
 8002970:	603b      	str	r3, [r7, #0]
	timer = 30;
 8002972:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <handle_ghost+0x1d0>)
 8002974:	221e      	movs	r2, #30
 8002976:	601a      	str	r2, [r3, #0]

	while (true){
		//give up flag
		if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 8002978:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800297c:	22fa      	movs	r2, #250	; 0xfa
 800297e:	2191      	movs	r1, #145	; 0x91
 8002980:	205f      	movs	r0, #95	; 0x5f
 8002982:	f004 ffa7 	bl	80078d4 <Check_touchkey_flag>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d009      	beq.n	80029a0 <handle_ghost+0xf0>
 800298c:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <handle_ghost+0x1d4>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	3b01      	subs	r3, #1
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <handle_ghost+0x1d4>)
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	483b      	ldr	r0, [pc, #236]	; (8002a88 <handle_ghost+0x1d8>)
 800299a:	f004 f861 	bl	8006a60 <play_audio>
 800299e:	e03b      	b.n	8002a18 <handle_ghost+0x168>

		if (HAL_UART_Receive(&huart1,(uint8_t*)rxString,len,200)==HAL_OK){
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	23c8      	movs	r3, #200	; 0xc8
 80029a6:	4939      	ldr	r1, [pc, #228]	; (8002a8c <handle_ghost+0x1dc>)
 80029a8:	4839      	ldr	r0, [pc, #228]	; (8002a90 <handle_ghost+0x1e0>)
 80029aa:	f00a fee0 	bl	800d76e <HAL_UART_Receive>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d120      	bne.n	80029f6 <handle_ghost+0x146>

			if (HAL_UART_Receive(&huart1, (uint8_t*)rxString, 1, 100) == HAL_OK) continue;	//check if the input len > ans len
 80029b4:	2364      	movs	r3, #100	; 0x64
 80029b6:	2201      	movs	r2, #1
 80029b8:	4934      	ldr	r1, [pc, #208]	; (8002a8c <handle_ghost+0x1dc>)
 80029ba:	4835      	ldr	r0, [pc, #212]	; (8002a90 <handle_ghost+0x1e0>)
 80029bc:	f00a fed7 	bl	800d76e <HAL_UART_Receive>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d026      	beq.n	8002a14 <handle_ghost+0x164>
			rxString[len] = '\0';
 80029c6:	4a31      	ldr	r2, [pc, #196]	; (8002a8c <handle_ghost+0x1dc>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
			if(strncmp(rxString, answer, len) == 0) { play_audio("WIN.WAV"); break;}
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4929      	ldr	r1, [pc, #164]	; (8002a7c <handle_ghost+0x1cc>)
 80029d6:	482d      	ldr	r0, [pc, #180]	; (8002a8c <handle_ghost+0x1dc>)
 80029d8:	f010 fb02 	bl	8012fe0 <strncmp>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <handle_ghost+0x13a>
 80029e2:	482c      	ldr	r0, [pc, #176]	; (8002a94 <handle_ghost+0x1e4>)
 80029e4:	f004 f83c 	bl	8006a60 <play_audio>
 80029e8:	e016      	b.n	8002a18 <handle_ghost+0x168>
			HAL_UART_Receive(&huart1, (uint8_t*)rxString, 100, 100);	//remove remaining char
 80029ea:	2364      	movs	r3, #100	; 0x64
 80029ec:	2264      	movs	r2, #100	; 0x64
 80029ee:	4927      	ldr	r1, [pc, #156]	; (8002a8c <handle_ghost+0x1dc>)
 80029f0:	4827      	ldr	r0, [pc, #156]	; (8002a90 <handle_ghost+0x1e0>)
 80029f2:	f00a febc 	bl	800d76e <HAL_UART_Receive>
		}

		if(timer == -1){
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <handle_ghost+0x1d0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029fe:	d1bb      	bne.n	8002978 <handle_ghost+0xc8>
			hearts--;
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <handle_ghost+0x1d4>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <handle_ghost+0x1d4>)
 8002a0a:	701a      	strb	r2, [r3, #0]
			play_audio("LOSE.WAV");
 8002a0c:	481e      	ldr	r0, [pc, #120]	; (8002a88 <handle_ghost+0x1d8>)
 8002a0e:	f004 f827 	bl	8006a60 <play_audio>
			break;
 8002a12:	e001      	b.n	8002a18 <handle_ghost+0x168>
			if (HAL_UART_Receive(&huart1, (uint8_t*)rxString, 1, 100) == HAL_OK) continue;	//check if the input len > ans len
 8002a14:	bf00      	nop
		if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 8002a16:	e7af      	b.n	8002978 <handle_ghost+0xc8>
		}	//task failure
	}
	timer = -1;	//clean the dot matrix
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <handle_ghost+0x1d0>)
 8002a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a1e:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 8002a20:	f002 f84e 	bl	8004ac0 <max7219_Clean>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002a2e:	22f0      	movs	r2, #240	; 0xf0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2000      	movs	r0, #0
 8002a34:	f000 fd41 	bl	80034ba <LCD_Clear>
	LCD_Display();
 8002a38:	f002 f996 	bl	8004d68 <LCD_Display>
	current_x = next_x;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <handle_ghost+0x1a8>)
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <handle_ghost+0x1b0>)
 8002a42:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <handle_ghost+0x1ac>)
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <handle_ghost+0x1b4>)
 8002a4a:	701a      	strb	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20002870 	.word	0x20002870
 8002a58:	2000287c 	.word	0x2000287c
 8002a5c:	2000287d 	.word	0x2000287d
 8002a60:	2000287a 	.word	0x2000287a
 8002a64:	2000287b 	.word	0x2000287b
 8002a68:	08015670 	.word	0x08015670
 8002a6c:	08015530 	.word	0x08015530
 8002a70:	08015440 	.word	0x08015440
 8002a74:	0801556c 	.word	0x0801556c
 8002a78:	08015574 	.word	0x08015574
 8002a7c:	20002410 	.word	0x20002410
 8002a80:	20000004 	.word	0x20000004
 8002a84:	2000287e 	.word	0x2000287e
 8002a88:	08015450 	.word	0x08015450
 8002a8c:	20000288 	.word	0x20000288
 8002a90:	200027e4 	.word	0x200027e4
 8002a94:	0801545c 	.word	0x0801545c

08002a98 <handle_stone>:


void handle_stone(){
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <handle_stone+0x104>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <handle_stone+0x108>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3d      	ldr	r2, [pc, #244]	; (8002ba4 <handle_stone+0x10c>)
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <handle_stone+0x104>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <handle_stone+0x110>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a39      	ldr	r2, [pc, #228]	; (8002bac <handle_stone+0x114>)
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 8002ace:	f7fe ff67 	bl	80019a0 <update_display>
	uint8_t start_flag = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	71fb      	strb	r3, [r7, #7]
	//char str[10];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ae0:	22f0      	movs	r2, #240	; 0xf0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f000 fce8 	bl	80034ba <LCD_Clear>
	LCD_DrawString(0, 0, "a stone is blocking the road, please push to remove it!", BLUE);
 8002aea:	231f      	movs	r3, #31
 8002aec:	4a30      	ldr	r2, [pc, #192]	; (8002bb0 <handle_stone+0x118>)
 8002aee:	2100      	movs	r1, #0
 8002af0:	2000      	movs	r0, #0
 8002af2:	f000 fd53 	bl	800359c <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, pls hold the device in 90deg", RED);
 8002af6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002afa:	4a2e      	ldr	r2, [pc, #184]	; (8002bb4 <handle_stone+0x11c>)
 8002afc:	2132      	movs	r1, #50	; 0x32
 8002afe:	2000      	movs	r0, #0
 8002b00:	f000 fd4c 	bl	800359c <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 8002b04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b08:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <handle_stone+0x120>)
 8002b0a:	21c8      	movs	r1, #200	; 0xc8
 8002b0c:	2064      	movs	r0, #100	; 0x64
 8002b0e:	f000 fd45 	bl	800359c <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8002b12:	e007      	b.n	8002b24 <handle_stone+0x8c>
 8002b14:	23e6      	movs	r3, #230	; 0xe6
 8002b16:	22c8      	movs	r2, #200	; 0xc8
 8002b18:	2191      	movs	r1, #145	; 0x91
 8002b1a:	205f      	movs	r0, #95	; 0x5f
 8002b1c:	f004 feda 	bl	80078d4 <Check_touchkey_flag>
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f4      	beq.n	8002b14 <handle_stone+0x7c>
	LCD_DrawString(100, 200, "     ", WHITE);
 8002b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b2e:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <handle_stone+0x124>)
 8002b30:	21c8      	movs	r1, #200	; 0xc8
 8002b32:	2064      	movs	r0, #100	; 0x64
 8002b34:	f000 fd32 	bl	800359c <LCD_DrawString>

	int stone =  push();	//check timer?
 8002b38:	f003 f87e 	bl	8005c38 <push>
 8002b3c:	6038      	str	r0, [r7, #0]
	if (stone != 0){
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <handle_stone+0xc0>
		hearts--;
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <handle_stone+0x128>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <handle_stone+0x128>)
 8002b4e:	701a      	strb	r2, [r3, #0]
		play_audio("LOSE.WAV");
 8002b50:	481c      	ldr	r0, [pc, #112]	; (8002bc4 <handle_stone+0x12c>)
 8002b52:	f003 ff85 	bl	8006a60 <play_audio>
 8002b56:	e002      	b.n	8002b5e <handle_stone+0xc6>
	}else play_audio("WIN.WAV");
 8002b58:	481b      	ldr	r0, [pc, #108]	; (8002bc8 <handle_stone+0x130>)
 8002b5a:	f003 ff81 	bl	8006a60 <play_audio>

	timer = -1;	//clean the dot matrix
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <handle_stone+0x134>)
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b64:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 8002b66:	f001 ffab 	bl	8004ac0 <max7219_Clean>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b74:	22f0      	movs	r2, #240	; 0xf0
 8002b76:	2100      	movs	r1, #0
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f000 fc9e 	bl	80034ba <LCD_Clear>
	LCD_Display();
 8002b7e:	f002 f8f3 	bl	8004d68 <LCD_Display>
	current_x = next_x;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <handle_stone+0x108>)
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <handle_stone+0x110>)
 8002b88:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <handle_stone+0x10c>)
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <handle_stone+0x114>)
 8002b90:	701a      	strb	r2, [r3, #0]
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20002870 	.word	0x20002870
 8002ba0:	2000287c 	.word	0x2000287c
 8002ba4:	2000287d 	.word	0x2000287d
 8002ba8:	2000287a 	.word	0x2000287a
 8002bac:	2000287b 	.word	0x2000287b
 8002bb0:	080156bc 	.word	0x080156bc
 8002bb4:	080156f4 	.word	0x080156f4
 8002bb8:	08015440 	.word	0x08015440
 8002bbc:	08015448 	.word	0x08015448
 8002bc0:	2000287e 	.word	0x2000287e
 8002bc4:	08015450 	.word	0x08015450
 8002bc8:	0801545c 	.word	0x0801545c
 8002bcc:	20000004 	.word	0x20000004

08002bd0 <handle_door>:


void handle_door(){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <handle_door+0x104>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <handle_door+0x108>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3d      	ldr	r2, [pc, #244]	; (8002cdc <handle_door+0x10c>)
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	4413      	add	r3, r2
 8002bea:	2202      	movs	r2, #2
 8002bec:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8002bee:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <handle_door+0x104>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <handle_door+0x110>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a39      	ldr	r2, [pc, #228]	; (8002ce4 <handle_door+0x114>)
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 8002c06:	f7fe fecb 	bl	80019a0 <update_display>
	uint8_t start_flag = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	71fb      	strb	r3, [r7, #7]
	//char str[10];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c18:	22f0      	movs	r2, #240	; 0xf0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f000 fc4c 	bl	80034ba <LCD_Clear>
	LCD_DrawString(0, 0, "a door is here, please pull to open the door!", BLUE);
 8002c22:	231f      	movs	r3, #31
 8002c24:	4a30      	ldr	r2, [pc, #192]	; (8002ce8 <handle_door+0x118>)
 8002c26:	2100      	movs	r1, #0
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f000 fcb7 	bl	800359c <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, pls hold the device in 90deg", RED);
 8002c2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c32:	4a2e      	ldr	r2, [pc, #184]	; (8002cec <handle_door+0x11c>)
 8002c34:	2132      	movs	r1, #50	; 0x32
 8002c36:	2000      	movs	r0, #0
 8002c38:	f000 fcb0 	bl	800359c <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 8002c3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c40:	4a2b      	ldr	r2, [pc, #172]	; (8002cf0 <handle_door+0x120>)
 8002c42:	21c8      	movs	r1, #200	; 0xc8
 8002c44:	2064      	movs	r0, #100	; 0x64
 8002c46:	f000 fca9 	bl	800359c <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8002c4a:	e007      	b.n	8002c5c <handle_door+0x8c>
 8002c4c:	23e6      	movs	r3, #230	; 0xe6
 8002c4e:	22c8      	movs	r2, #200	; 0xc8
 8002c50:	2191      	movs	r1, #145	; 0x91
 8002c52:	205f      	movs	r0, #95	; 0x5f
 8002c54:	f004 fe3e 	bl	80078d4 <Check_touchkey_flag>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	71fb      	strb	r3, [r7, #7]
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f4      	beq.n	8002c4c <handle_door+0x7c>
	LCD_DrawString(100, 200, "     ", WHITE);
 8002c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c66:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <handle_door+0x124>)
 8002c68:	21c8      	movs	r1, #200	; 0xc8
 8002c6a:	2064      	movs	r0, #100	; 0x64
 8002c6c:	f000 fc96 	bl	800359c <LCD_DrawString>

	int door =  pull();
 8002c70:	f003 f826 	bl	8005cc0 <pull>
 8002c74:	6038      	str	r0, [r7, #0]
	if (door != 0){
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <handle_door+0xc0>
		hearts--;
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <handle_door+0x128>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <handle_door+0x128>)
 8002c86:	701a      	strb	r2, [r3, #0]
		play_audio("LOSE.WAV");
 8002c88:	481c      	ldr	r0, [pc, #112]	; (8002cfc <handle_door+0x12c>)
 8002c8a:	f003 fee9 	bl	8006a60 <play_audio>
 8002c8e:	e002      	b.n	8002c96 <handle_door+0xc6>
	}else play_audio("WIN.WAV");
 8002c90:	481b      	ldr	r0, [pc, #108]	; (8002d00 <handle_door+0x130>)
 8002c92:	f003 fee5 	bl	8006a60 <play_audio>

	timer = -1;	//clean the dot matrix
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <handle_door+0x134>)
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c9c:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 8002c9e:	f001 ff0f 	bl	8004ac0 <max7219_Clean>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002cac:	22f0      	movs	r2, #240	; 0xf0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f000 fc02 	bl	80034ba <LCD_Clear>
	LCD_Display();
 8002cb6:	f002 f857 	bl	8004d68 <LCD_Display>
	current_x = next_x;
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <handle_door+0x108>)
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <handle_door+0x110>)
 8002cc0:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <handle_door+0x10c>)
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <handle_door+0x114>)
 8002cc8:	701a      	strb	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20002870 	.word	0x20002870
 8002cd8:	2000287c 	.word	0x2000287c
 8002cdc:	2000287d 	.word	0x2000287d
 8002ce0:	2000287a 	.word	0x2000287a
 8002ce4:	2000287b 	.word	0x2000287b
 8002ce8:	08015730 	.word	0x08015730
 8002cec:	080156f4 	.word	0x080156f4
 8002cf0:	08015440 	.word	0x08015440
 8002cf4:	08015448 	.word	0x08015448
 8002cf8:	2000287e 	.word	0x2000287e
 8002cfc:	08015450 	.word	0x08015450
 8002d00:	0801545c 	.word	0x0801545c
 8002d04:	20000004 	.word	0x20000004

08002d08 <handle_addheart>:


void handle_addheart(){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
		if (hearts == 3){
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <handle_addheart+0xbc>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d122      	bne.n	8002d5a <handle_addheart+0x52>
			//display - your heart is full, nothing happen
			maze[next_x][next_y] = 2;
 8002d14:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <handle_addheart+0xc0>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <handle_addheart+0xc4>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <handle_addheart+0xc8>)
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	2202      	movs	r2, #2
 8002d2a:	701a      	strb	r2, [r3, #0]
			maze[current_x][current_y] = 0;
 8002d2c:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <handle_addheart+0xc0>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <handle_addheart+0xcc>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <handle_addheart+0xd0>)
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
			update_display();
 8002d44:	f7fe fe2c 	bl	80019a0 <update_display>
			current_x = next_x;
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <handle_addheart+0xc4>)
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <handle_addheart+0xcc>)
 8002d4e:	701a      	strb	r2, [r3, #0]
			current_y = next_y;
 8002d50:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <handle_addheart+0xc8>)
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <handle_addheart+0xd0>)
 8002d56:	701a      	strb	r2, [r3, #0]
			LCD_Drawheart(10, 130+hearts*32); //display the key
			hearts++;
			current_x = next_x;
			current_y = next_y;
		}
}
 8002d58:	e032      	b.n	8002dc0 <handle_addheart+0xb8>
			maze[next_x][next_y] = 2;
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <handle_addheart+0xc0>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <handle_addheart+0xc4>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <handle_addheart+0xc8>)
 8002d6a:	7812      	ldrb	r2, [r2, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	2202      	movs	r2, #2
 8002d70:	701a      	strb	r2, [r3, #0]
			maze[current_x][current_y] = 0;
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <handle_addheart+0xc0>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <handle_addheart+0xcc>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a15      	ldr	r2, [pc, #84]	; (8002dd8 <handle_addheart+0xd0>)
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
			update_display();
 8002d8a:	f7fe fe09 	bl	80019a0 <update_display>
			LCD_Drawheart(10, 130+hearts*32); //display the key
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <handle_addheart+0xbc>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	015b      	lsls	r3, r3, #5
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3382      	adds	r3, #130	; 0x82
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	200a      	movs	r0, #10
 8002da0:	f001 f808 	bl	8003db4 <LCD_Drawheart>
			hearts++;
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <handle_addheart+0xbc>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <handle_addheart+0xbc>)
 8002dae:	701a      	strb	r2, [r3, #0]
			current_x = next_x;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <handle_addheart+0xc4>)
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <handle_addheart+0xcc>)
 8002db6:	701a      	strb	r2, [r3, #0]
			current_y = next_y;
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <handle_addheart+0xc8>)
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <handle_addheart+0xd0>)
 8002dbe:	701a      	strb	r2, [r3, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000287e 	.word	0x2000287e
 8002dc8:	20002870 	.word	0x20002870
 8002dcc:	2000287c 	.word	0x2000287c
 8002dd0:	2000287d 	.word	0x2000287d
 8002dd4:	2000287a 	.word	0x2000287a
 8002dd8:	2000287b 	.word	0x2000287b

08002ddc <handle_prison>:


void handle_prison(){ // minus one heart
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
	maze[next_x][next_y] = 2;
 8002de0:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <handle_prison+0x74>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <handle_prison+0x78>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <handle_prison+0x7c>)
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	2202      	movs	r2, #2
 8002df6:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8002df8:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <handle_prison+0x74>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <handle_prison+0x80>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <handle_prison+0x84>)
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]

	//update maze display
	update_display();
 8002e10:	f7fe fdc6 	bl	80019a0 <update_display>
	LCD_DrawBox(130+(hearts-1)*32, 10, WHITE, 32);
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <handle_prison+0x88>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	015b      	lsls	r3, r3, #5
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3382      	adds	r3, #130	; 0x82
 8002e22:	b298      	uxth	r0, r3
 8002e24:	2320      	movs	r3, #32
 8002e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e2a:	210a      	movs	r1, #10
 8002e2c:	f000 fc16 	bl	800365c <LCD_DrawBox>
	hearts--;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <handle_prison+0x88>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <handle_prison+0x88>)
 8002e3a:	701a      	strb	r2, [r3, #0]

	current_x = next_x;
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <handle_prison+0x78>)
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <handle_prison+0x80>)
 8002e42:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <handle_prison+0x7c>)
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <handle_prison+0x84>)
 8002e4a:	701a      	strb	r2, [r3, #0]

}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20002870 	.word	0x20002870
 8002e54:	2000287c 	.word	0x2000287c
 8002e58:	2000287d 	.word	0x2000287d
 8002e5c:	2000287a 	.word	0x2000287a
 8002e60:	2000287b 	.word	0x2000287b
 8002e64:	2000287e 	.word	0x2000287e

08002e68 <handle_hidden>:


void handle_hidden(){
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af02      	add	r7, sp, #8
	//display, you trap in a hidden area
	//jump to somewhere else
	LCD_Clear (width_margin+next_y*block_size, height_margin+next_x*block_size, block_size, block_size, WHITE);
 8002e6e:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <handle_hidden+0x114>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <handle_hidden+0x118>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4942      	ldr	r1, [pc, #264]	; (8002f84 <handle_hidden+0x11c>)
 8002e7c:	7809      	ldrb	r1, [r1, #0]
 8002e7e:	b289      	uxth	r1, r1
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	b298      	uxth	r0, r3
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <handle_hidden+0x120>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b3e      	ldr	r3, [pc, #248]	; (8002f8c <handle_hidden+0x124>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	493b      	ldr	r1, [pc, #236]	; (8002f84 <handle_hidden+0x11c>)
 8002e98:	7809      	ldrb	r1, [r1, #0]
 8002e9a:	b289      	uxth	r1, r1
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b299      	uxth	r1, r3
 8002ea6:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <handle_hidden+0x11c>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <handle_hidden+0x11c>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002eb6:	9400      	str	r4, [sp, #0]
 8002eb8:	f000 faff 	bl	80034ba <LCD_Clear>
	maze[next_x][next_y] = 0;
 8002ebc:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <handle_hidden+0x128>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <handle_hidden+0x124>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <handle_hidden+0x118>)
 8002ecc:	7812      	ldrb	r2, [r2, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
	while(true){
		next_x = rand() % (rows - 2) + 1;
 8002ed4:	f010 f816 	bl	8012f04 <rand>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <handle_hidden+0x12c>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	3b02      	subs	r3, #2
 8002ee0:	fb92 f1f3 	sdiv	r1, r2, r3
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	3301      	adds	r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <handle_hidden+0x124>)
 8002ef2:	701a      	strb	r2, [r3, #0]
		next_y = rand() % (columns - 2) + 1;
 8002ef4:	f010 f806 	bl	8012f04 <rand>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <handle_hidden+0x130>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	3b02      	subs	r3, #2
 8002f00:	fb92 f1f3 	sdiv	r1, r2, r3
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <handle_hidden+0x118>)
 8002f12:	701a      	strb	r2, [r3, #0]
		if(maze[next_x][next_y] == 0){
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <handle_hidden+0x128>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <handle_hidden+0x124>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <handle_hidden+0x118>)
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1d2      	bne.n	8002ed4 <handle_hidden+0x6c>
		   maze[next_x][next_y] = 2;
 8002f2e:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <handle_hidden+0x128>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <handle_hidden+0x124>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <handle_hidden+0x118>)
 8002f3e:	7812      	ldrb	r2, [r2, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	2202      	movs	r2, #2
 8002f44:	701a      	strb	r2, [r3, #0]
		   break;
 8002f46:	bf00      	nop
		}
	}
	maze[current_x][current_y] = 0;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <handle_hidden+0x128>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <handle_hidden+0x134>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <handle_hidden+0x138>)
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
	update_display();
 8002f60:	f7fe fd1e 	bl	80019a0 <update_display>
	current_x = next_x;
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <handle_hidden+0x124>)
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <handle_hidden+0x134>)
 8002f6a:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <handle_hidden+0x118>)
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <handle_hidden+0x138>)
 8002f72:	701a      	strb	r2, [r3, #0]
	//update maze display

}
 8002f74:	bf00      	nop
 8002f76:	3704      	adds	r7, #4
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd90      	pop	{r4, r7, pc}
 8002f7c:	2000288c 	.word	0x2000288c
 8002f80:	2000287d 	.word	0x2000287d
 8002f84:	08015f90 	.word	0x08015f90
 8002f88:	2000288d 	.word	0x2000288d
 8002f8c:	2000287c 	.word	0x2000287c
 8002f90:	20002870 	.word	0x20002870
 8002f94:	20002874 	.word	0x20002874
 8002f98:	20002875 	.word	0x20002875
 8002f9c:	2000287a 	.word	0x2000287a
 8002fa0:	2000287b 	.word	0x2000287b

08002fa4 <get_question>:
uint8_t currentLine = 1; // Current line number
char buffer[100] = {0}; // Buffer to store the read line
char question[100];
char answer[100];

void get_question(){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
  int num_odd_numbers = (41 - 1) / 2 + 1;
 8002faa:	2315      	movs	r3, #21
 8002fac:	60fb      	str	r3, [r7, #12]
  int index = rand() % num_odd_numbers;
 8002fae:	f00f ffa9 	bl	8012f04 <rand>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	fb93 f2f2 	sdiv	r2, r3, r2
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	fb01 f202 	mul.w	r2, r1, r2
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
  int lineToRead = 1 + 2 * index;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	3301      	adds	r3, #1
 8002fca:	607b      	str	r3, [r7, #4]
  currentLine = 1;
 8002fcc:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <get_question+0xd4>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]

  f_mount(&myFATFS,SDPath,1);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4929      	ldr	r1, [pc, #164]	; (800307c <get_question+0xd8>)
 8002fd6:	482a      	ldr	r0, [pc, #168]	; (8003080 <get_question+0xdc>)
 8002fd8:	f00d fc92 	bl	8010900 <f_mount>
  f_open(&myFILE, "QUIZ.TXT", FA_OPEN_EXISTING|FA_READ);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	4929      	ldr	r1, [pc, #164]	; (8003084 <get_question+0xe0>)
 8002fe0:	4829      	ldr	r0, [pc, #164]	; (8003088 <get_question+0xe4>)
 8002fe2:	f00d fcd7 	bl	8010994 <f_open>
  while (currentLine <= lineToRead+1) {
 8002fe6:	e034      	b.n	8003052 <get_question+0xae>
	  if (f_gets(buffer, sizeof(buffer), &myFILE) == NULL) {
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <get_question+0xe4>)
 8002fea:	2164      	movs	r1, #100	; 0x64
 8002fec:	4827      	ldr	r0, [pc, #156]	; (800308c <get_question+0xe8>)
 8002fee:	f00e ffe2 	bl	8011fb6 <f_gets>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d107      	bne.n	8003008 <get_question+0x64>
		  // Handle end of file or read error
		  LCD_DrawString(0,0, "error", RED);
 8002ff8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ffc:	4a24      	ldr	r2, [pc, #144]	; (8003090 <get_question+0xec>)
 8002ffe:	2100      	movs	r1, #0
 8003000:	2000      	movs	r0, #0
 8003002:	f000 facb 	bl	800359c <LCD_DrawString>
		  break;
 8003006:	e02b      	b.n	8003060 <get_question+0xbc>
	  }

	  if (currentLine == lineToRead) {
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <get_question+0xd4>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4293      	cmp	r3, r2
 8003012:	d10b      	bne.n	800302c <get_question+0x88>
		  // Process the read line
		  // Here, you can print the line, store it in a variable, or perform any desired operations
		  sprintf(question, "%s", buffer);
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <get_question+0xe8>)
 8003016:	491f      	ldr	r1, [pc, #124]	; (8003094 <get_question+0xf0>)
 8003018:	481f      	ldr	r0, [pc, #124]	; (8003098 <get_question+0xf4>)
 800301a:	f00f ffc1 	bl	8012fa0 <siprintf>
		  LCD_DrawString(0,100, question, RED);
 800301e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003022:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <get_question+0xf4>)
 8003024:	2164      	movs	r1, #100	; 0x64
 8003026:	2000      	movs	r0, #0
 8003028:	f000 fab8 	bl	800359c <LCD_DrawString>
		  //HAL_Delay(1000);

	  }if (currentLine == lineToRead+1) {
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <get_question+0xd4>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3301      	adds	r3, #1
 8003036:	429a      	cmp	r2, r3
 8003038:	d105      	bne.n	8003046 <get_question+0xa2>
		  // Process the read line
		  // Here, you can print the line, store it in a variable, or perform any desired operations
		  sprintf(answer, "%s", buffer);
 800303a:	4a14      	ldr	r2, [pc, #80]	; (800308c <get_question+0xe8>)
 800303c:	4915      	ldr	r1, [pc, #84]	; (8003094 <get_question+0xf0>)
 800303e:	4817      	ldr	r0, [pc, #92]	; (800309c <get_question+0xf8>)
 8003040:	f00f ffae 	bl	8012fa0 <siprintf>
		  //LCD_DrawString(0,150, answer, BLUE);
		  //HAL_Delay(1000);
		  break;
 8003044:	e00c      	b.n	8003060 <get_question+0xbc>
	  }

	  currentLine++;
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <get_question+0xd4>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <get_question+0xd4>)
 8003050:	701a      	strb	r2, [r3, #0]
  while (currentLine <= lineToRead+1) {
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <get_question+0xd4>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3301      	adds	r3, #1
 800305c:	429a      	cmp	r2, r3
 800305e:	ddc3      	ble.n	8002fe8 <get_question+0x44>
  }
  f_close(&myFILE);
 8003060:	4809      	ldr	r0, [pc, #36]	; (8003088 <get_question+0xe4>)
 8003062:	f00e fc8c 	bl	801197e <f_close>
  f_mount(&myFATFS," ",0);
 8003066:	2200      	movs	r2, #0
 8003068:	490d      	ldr	r1, [pc, #52]	; (80030a0 <get_question+0xfc>)
 800306a:	4805      	ldr	r0, [pc, #20]	; (8003080 <get_question+0xdc>)
 800306c:	f00d fc48 	bl	8010900 <f_mount>

}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000001 	.word	0x20000001
 800307c:	20006240 	.word	0x20006240
 8003080:	200002ec 	.word	0x200002ec
 8003084:	08015760 	.word	0x08015760
 8003088:	2000131c 	.word	0x2000131c
 800308c:	20002348 	.word	0x20002348
 8003090:	0801576c 	.word	0x0801576c
 8003094:	08015774 	.word	0x08015774
 8003098:	200023ac 	.word	0x200023ac
 800309c:	20002410 	.word	0x20002410
 80030a0:	08015778 	.word	0x08015778

080030a4 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );

extern uint8_t key[], heart[], start[], endpt[], elekey[], game[], event[], sheart[], toxic[], random_move[];

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	e002      	b.n	80030b4 <Delay+0x10>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f9      	bne.n	80030ae <Delay+0xa>
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <LCD_INIT>:

void LCD_INIT ( void )
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80030cc:	2001      	movs	r0, #1
 80030ce:	f000 f829 	bl	8003124 <LCD_BackLed_Control>
	LCD_Rst();
 80030d2:	f000 f80f 	bl	80030f4 <LCD_Rst>
	LCD_REG_Config();
 80030d6:	f000 f85f 	bl	8003198 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80030da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80030e4:	22f0      	movs	r2, #240	; 0xf0
 80030e6:	2100      	movs	r1, #0
 80030e8:	2000      	movs	r0, #0
 80030ea:	f000 f9e6 	bl	80034ba <LCD_Clear>
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <LCD_Rst>:



void LCD_Rst ( void )
{			
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2102      	movs	r1, #2
 80030fc:	4807      	ldr	r0, [pc, #28]	; (800311c <LCD_Rst+0x28>)
 80030fe:	f006 f940 	bl	8009382 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8003102:	4807      	ldr	r0, [pc, #28]	; (8003120 <LCD_Rst+0x2c>)
 8003104:	f7ff ffce 	bl	80030a4 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8003108:	2201      	movs	r2, #1
 800310a:	2102      	movs	r1, #2
 800310c:	4803      	ldr	r0, [pc, #12]	; (800311c <LCD_Rst+0x28>)
 800310e:	f006 f938 	bl	8009382 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8003112:	4803      	ldr	r0, [pc, #12]	; (8003120 <LCD_Rst+0x2c>)
 8003114:	f7ff ffc6 	bl	80030a4 <Delay>
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40011800 	.word	0x40011800
 8003120:	0002bffc 	.word	0x0002bffc

08003124 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8003134:	2200      	movs	r2, #0
 8003136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800313a:	4807      	ldr	r0, [pc, #28]	; (8003158 <LCD_BackLed_Control+0x34>)
 800313c:	f006 f921 	bl	8009382 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8003140:	e005      	b.n	800314e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8003142:	2201      	movs	r2, #1
 8003144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003148:	4803      	ldr	r0, [pc, #12]	; (8003158 <LCD_BackLed_Control+0x34>)
 800314a:	f006 f91a 	bl	8009382 <HAL_GPIO_WritePin>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40011400 	.word	0x40011400

0800315c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8003166:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	8013      	strh	r3, [r2, #0]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8003182:	4a04      	ldr	r2, [pc, #16]	; (8003194 <LCD_Write_Data+0x1c>)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	8013      	strh	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	60020000 	.word	0x60020000

08003198 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800319c:	20cf      	movs	r0, #207	; 0xcf
 800319e:	f7ff ffdd 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7ff ffe8 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80031a8:	2081      	movs	r0, #129	; 0x81
 80031aa:	f7ff ffe5 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80031ae:	2030      	movs	r0, #48	; 0x30
 80031b0:	f7ff ffe2 	bl	8003178 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80031b4:	20ed      	movs	r0, #237	; 0xed
 80031b6:	f7ff ffd1 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80031ba:	2064      	movs	r0, #100	; 0x64
 80031bc:	f7ff ffdc 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80031c0:	2003      	movs	r0, #3
 80031c2:	f7ff ffd9 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80031c6:	2012      	movs	r0, #18
 80031c8:	f7ff ffd6 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80031cc:	2081      	movs	r0, #129	; 0x81
 80031ce:	f7ff ffd3 	bl	8003178 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80031d2:	20e8      	movs	r0, #232	; 0xe8
 80031d4:	f7ff ffc2 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80031d8:	2085      	movs	r0, #133	; 0x85
 80031da:	f7ff ffcd 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80031de:	2010      	movs	r0, #16
 80031e0:	f7ff ffca 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80031e4:	2078      	movs	r0, #120	; 0x78
 80031e6:	f7ff ffc7 	bl	8003178 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80031ea:	20cb      	movs	r0, #203	; 0xcb
 80031ec:	f7ff ffb6 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80031f0:	2039      	movs	r0, #57	; 0x39
 80031f2:	f7ff ffc1 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80031f6:	202c      	movs	r0, #44	; 0x2c
 80031f8:	f7ff ffbe 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80031fc:	2000      	movs	r0, #0
 80031fe:	f7ff ffbb 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8003202:	2034      	movs	r0, #52	; 0x34
 8003204:	f7ff ffb8 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8003208:	2002      	movs	r0, #2
 800320a:	f7ff ffb5 	bl	8003178 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800320e:	20f7      	movs	r0, #247	; 0xf7
 8003210:	f7ff ffa4 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8003214:	2020      	movs	r0, #32
 8003216:	f7ff ffaf 	bl	8003178 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800321a:	20ea      	movs	r0, #234	; 0xea
 800321c:	f7ff ff9e 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8003220:	2000      	movs	r0, #0
 8003222:	f7ff ffa9 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003226:	2000      	movs	r0, #0
 8003228:	f7ff ffa6 	bl	8003178 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800322c:	20b1      	movs	r0, #177	; 0xb1
 800322e:	f7ff ff95 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8003232:	2000      	movs	r0, #0
 8003234:	f7ff ffa0 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8003238:	201b      	movs	r0, #27
 800323a:	f7ff ff9d 	bl	8003178 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800323e:	20b6      	movs	r0, #182	; 0xb6
 8003240:	f7ff ff8c 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8003244:	200a      	movs	r0, #10
 8003246:	f7ff ff97 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800324a:	20a2      	movs	r0, #162	; 0xa2
 800324c:	f7ff ff94 	bl	8003178 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8003250:	20c0      	movs	r0, #192	; 0xc0
 8003252:	f7ff ff83 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8003256:	2035      	movs	r0, #53	; 0x35
 8003258:	f7ff ff8e 	bl	8003178 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800325c:	20c1      	movs	r0, #193	; 0xc1
 800325e:	f7ff ff7d 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8003262:	2011      	movs	r0, #17
 8003264:	f7ff ff88 	bl	8003178 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8003268:	20c5      	movs	r0, #197	; 0xc5
 800326a:	f7ff ff77 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800326e:	2045      	movs	r0, #69	; 0x45
 8003270:	f7ff ff82 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8003274:	2045      	movs	r0, #69	; 0x45
 8003276:	f7ff ff7f 	bl	8003178 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800327a:	20c7      	movs	r0, #199	; 0xc7
 800327c:	f7ff ff6e 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8003280:	20a2      	movs	r0, #162	; 0xa2
 8003282:	f7ff ff79 	bl	8003178 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8003286:	20f2      	movs	r0, #242	; 0xf2
 8003288:	f7ff ff68 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800328c:	2000      	movs	r0, #0
 800328e:	f7ff ff73 	bl	8003178 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8003292:	2026      	movs	r0, #38	; 0x26
 8003294:	f7ff ff62 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8003298:	2001      	movs	r0, #1
 800329a:	f7ff ff6d 	bl	8003178 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800329e:	20e0      	movs	r0, #224	; 0xe0
 80032a0:	f7ff ff5c 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80032a4:	200f      	movs	r0, #15
 80032a6:	f7ff ff67 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80032aa:	2026      	movs	r0, #38	; 0x26
 80032ac:	f7ff ff64 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80032b0:	2024      	movs	r0, #36	; 0x24
 80032b2:	f7ff ff61 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80032b6:	200b      	movs	r0, #11
 80032b8:	f7ff ff5e 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80032bc:	200e      	movs	r0, #14
 80032be:	f7ff ff5b 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80032c2:	2009      	movs	r0, #9
 80032c4:	f7ff ff58 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80032c8:	2054      	movs	r0, #84	; 0x54
 80032ca:	f7ff ff55 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80032ce:	20a8      	movs	r0, #168	; 0xa8
 80032d0:	f7ff ff52 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80032d4:	2046      	movs	r0, #70	; 0x46
 80032d6:	f7ff ff4f 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80032da:	200c      	movs	r0, #12
 80032dc:	f7ff ff4c 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80032e0:	2017      	movs	r0, #23
 80032e2:	f7ff ff49 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80032e6:	2009      	movs	r0, #9
 80032e8:	f7ff ff46 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80032ec:	200f      	movs	r0, #15
 80032ee:	f7ff ff43 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80032f2:	2007      	movs	r0, #7
 80032f4:	f7ff ff40 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7ff ff3d 	bl	8003178 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80032fe:	20e1      	movs	r0, #225	; 0xe1
 8003300:	f7ff ff2c 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8003304:	2000      	movs	r0, #0
 8003306:	f7ff ff37 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800330a:	2019      	movs	r0, #25
 800330c:	f7ff ff34 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8003310:	201b      	movs	r0, #27
 8003312:	f7ff ff31 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8003316:	2004      	movs	r0, #4
 8003318:	f7ff ff2e 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800331c:	2010      	movs	r0, #16
 800331e:	f7ff ff2b 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8003322:	2007      	movs	r0, #7
 8003324:	f7ff ff28 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8003328:	202a      	movs	r0, #42	; 0x2a
 800332a:	f7ff ff25 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800332e:	2047      	movs	r0, #71	; 0x47
 8003330:	f7ff ff22 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8003334:	2039      	movs	r0, #57	; 0x39
 8003336:	f7ff ff1f 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800333a:	2003      	movs	r0, #3
 800333c:	f7ff ff1c 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8003340:	2006      	movs	r0, #6
 8003342:	f7ff ff19 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8003346:	2006      	movs	r0, #6
 8003348:	f7ff ff16 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800334c:	2030      	movs	r0, #48	; 0x30
 800334e:	f7ff ff13 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8003352:	2038      	movs	r0, #56	; 0x38
 8003354:	f7ff ff10 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8003358:	200f      	movs	r0, #15
 800335a:	f7ff ff0d 	bl	8003178 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800335e:	2036      	movs	r0, #54	; 0x36
 8003360:	f7ff fefc 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8003364:	20c8      	movs	r0, #200	; 0xc8
 8003366:	f7ff ff07 	bl	8003178 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800336a:	202a      	movs	r0, #42	; 0x2a
 800336c:	f7ff fef6 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8003370:	2000      	movs	r0, #0
 8003372:	f7ff ff01 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003376:	2000      	movs	r0, #0
 8003378:	f7ff fefe 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800337c:	2000      	movs	r0, #0
 800337e:	f7ff fefb 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8003382:	20ef      	movs	r0, #239	; 0xef
 8003384:	f7ff fef8 	bl	8003178 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8003388:	202b      	movs	r0, #43	; 0x2b
 800338a:	f7ff fee7 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800338e:	2000      	movs	r0, #0
 8003390:	f7ff fef2 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8003394:	2000      	movs	r0, #0
 8003396:	f7ff feef 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800339a:	2001      	movs	r0, #1
 800339c:	f7ff feec 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80033a0:	203f      	movs	r0, #63	; 0x3f
 80033a2:	f7ff fee9 	bl	8003178 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80033a6:	203a      	movs	r0, #58	; 0x3a
 80033a8:	f7ff fed8 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80033ac:	2055      	movs	r0, #85	; 0x55
 80033ae:	f7ff fee3 	bl	8003178 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80033b2:	2011      	movs	r0, #17
 80033b4:	f7ff fed2 	bl	800315c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80033b8:	4803      	ldr	r0, [pc, #12]	; (80033c8 <LCD_REG_Config+0x230>)
 80033ba:	f7ff fe73 	bl	80030a4 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80033be:	2029      	movs	r0, #41	; 0x29
 80033c0:	f7ff fecc 	bl	800315c <LCD_Write_Cmd>
	
	
}
 80033c4:	bf00      	nop
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	0002bffc 	.word	0x0002bffc

080033cc <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4604      	mov	r4, r0
 80033d4:	4608      	mov	r0, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	461a      	mov	r2, r3
 80033da:	4623      	mov	r3, r4
 80033dc:	80fb      	strh	r3, [r7, #6]
 80033de:	4603      	mov	r3, r0
 80033e0:	80bb      	strh	r3, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	807b      	strh	r3, [r7, #2]
 80033e6:	4613      	mov	r3, r2
 80033e8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80033ea:	202a      	movs	r0, #42	; 0x2a
 80033ec:	f7ff feb6 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff febe 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	b29b      	uxth	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff feb8 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	4413      	add	r3, r2
 800340e:	3b01      	subs	r3, #1
 8003410:	121b      	asrs	r3, r3, #8
 8003412:	b29b      	uxth	r3, r3
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff feaf 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800341a:	88fa      	ldrh	r2, [r7, #6]
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	4413      	add	r3, r2
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29b      	uxth	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	b29b      	uxth	r3, r3
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fea4 	bl	8003178 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8003430:	202b      	movs	r0, #43	; 0x2b
 8003432:	f7ff fe93 	bl	800315c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8003436:	88bb      	ldrh	r3, [r7, #4]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	b29b      	uxth	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe9b 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8003442:	88bb      	ldrh	r3, [r7, #4]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	b29b      	uxth	r3, r3
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fe95 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800344e:	88ba      	ldrh	r2, [r7, #4]
 8003450:	883b      	ldrh	r3, [r7, #0]
 8003452:	4413      	add	r3, r2
 8003454:	3b01      	subs	r3, #1
 8003456:	121b      	asrs	r3, r3, #8
 8003458:	b29b      	uxth	r3, r3
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fe8c 	bl	8003178 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8003460:	88ba      	ldrh	r2, [r7, #4]
 8003462:	883b      	ldrh	r3, [r7, #0]
 8003464:	4413      	add	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29b      	uxth	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	b29b      	uxth	r3, r3
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fe81 	bl	8003178 <LCD_Write_Data>
	
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bd90      	pop	{r4, r7, pc}

0800347e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800348e:	202c      	movs	r0, #44	; 0x2c
 8003490:	f7ff fe64 	bl	800315c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e006      	b.n	80034a8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800349a:	887b      	ldrh	r3, [r7, #2]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fe6b 	bl	8003178 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3301      	adds	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d3f4      	bcc.n	800349a <LCD_FillColor+0x1c>
		
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80034ba:	b590      	push	{r4, r7, lr}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4604      	mov	r4, r0
 80034c2:	4608      	mov	r0, r1
 80034c4:	4611      	mov	r1, r2
 80034c6:	461a      	mov	r2, r3
 80034c8:	4623      	mov	r3, r4
 80034ca:	80fb      	strh	r3, [r7, #6]
 80034cc:	4603      	mov	r3, r0
 80034ce:	80bb      	strh	r3, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
 80034d4:	4613      	mov	r3, r2
 80034d6:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80034d8:	883b      	ldrh	r3, [r7, #0]
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	88b9      	ldrh	r1, [r7, #4]
 80034de:	88f8      	ldrh	r0, [r7, #6]
 80034e0:	f7ff ff74 	bl	80033cc <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	883a      	ldrh	r2, [r7, #0]
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	8b3b      	ldrh	r3, [r7, #24]
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7ff ffc3 	bl	800347e <LCD_FillColor>
	
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd90      	pop	{r4, r7, pc}

08003500 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor )
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	4604      	mov	r4, r0
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4623      	mov	r3, r4
 8003510:	80fb      	strh	r3, [r7, #6]
 8003512:	4603      	mov	r3, r0
 8003514:	80bb      	strh	r3, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	70fb      	strb	r3, [r7, #3]
 800351a:	4613      	mov	r3, r2
 800351c:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	3b20      	subs	r3, #32
 8003522:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8003524:	88b9      	ldrh	r1, [r7, #4]
 8003526:	88f8      	ldrh	r0, [r7, #6]
 8003528:	2310      	movs	r3, #16
 800352a:	2208      	movs	r2, #8
 800352c:	f7ff ff4e 	bl	80033cc <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8003530:	202c      	movs	r0, #44	; 0x2c
 8003532:	f7ff fe13 	bl	800315c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003536:	2300      	movs	r3, #0
 8003538:	73bb      	strb	r3, [r7, #14]
 800353a:	e024      	b.n	8003586 <LCD_DrawChar+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800353c:	7b3a      	ldrb	r2, [r7, #12]
 800353e:	7bbb      	ldrb	r3, [r7, #14]
 8003540:	4915      	ldr	r1, [pc, #84]	; (8003598 <LCD_DrawChar+0x98>)
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	440a      	add	r2, r1
 8003546:	4413      	add	r3, r2
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800354c:	2300      	movs	r3, #0
 800354e:	737b      	strb	r3, [r7, #13]
 8003550:	e013      	b.n	800357a <LCD_DrawChar+0x7a>
		{
			if ( ucTemp & 0x01 )
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <LCD_DrawChar+0x66>
				LCD_Write_Data ( usColor );
 800355c:	883b      	ldrh	r3, [r7, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fe0a 	bl	8003178 <LCD_Write_Data>
 8003564:	e003      	b.n	800356e <LCD_DrawChar+0x6e>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8003566:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800356a:	f7ff fe05 	bl	8003178 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003574:	7b7b      	ldrb	r3, [r7, #13]
 8003576:	3301      	adds	r3, #1
 8003578:	737b      	strb	r3, [r7, #13]
 800357a:	7b7b      	ldrb	r3, [r7, #13]
 800357c:	2b07      	cmp	r3, #7
 800357e:	d9e8      	bls.n	8003552 <LCD_DrawChar+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003580:	7bbb      	ldrb	r3, [r7, #14]
 8003582:	3301      	adds	r3, #1
 8003584:	73bb      	strb	r3, [r7, #14]
 8003586:	7bbb      	ldrb	r3, [r7, #14]
 8003588:	2b0f      	cmp	r3, #15
 800358a:	d9d7      	bls.n	800353c <LCD_DrawChar+0x3c>
			
		}
		
	}
	
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	bd90      	pop	{r4, r7, pc}
 8003596:	bf00      	nop
 8003598:	080159a0 	.word	0x080159a0

0800359c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60ba      	str	r2, [r7, #8]
 80035a4:	461a      	mov	r2, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	81fb      	strh	r3, [r7, #14]
 80035aa:	460b      	mov	r3, r1
 80035ac:	81bb      	strh	r3, [r7, #12]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' && *pStr != '\n')
 80035b2:	e047      	b.n	8003644 <LCD_DrawString+0xa8>
	{
		if (*pStr == ' '){	// do word wrap
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d126      	bne.n	800360a <LCD_DrawString+0x6e>
			const char * wordend = pStr;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	61fb      	str	r3, [r7, #28]
			int length = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
			wordend++;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	3301      	adds	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
			while (*wordend != ' ' && *wordend!= '\0') {	// check for word end position
 80035ca:	e005      	b.n	80035d8 <LCD_DrawString+0x3c>
				wordend ++;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	3301      	adds	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
				length ++;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	3301      	adds	r3, #1
 80035d6:	61bb      	str	r3, [r7, #24]
			while (*wordend != ' ' && *wordend!= '\0') {	// check for word end position
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d003      	beq.n	80035e8 <LCD_DrawString+0x4c>
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f1      	bne.n	80035cc <LCD_DrawString+0x30>
			}
			int result = ((usC - LCD_DispWindow_Start_COLUMN) + (WIDTH_EN_CHAR * (length+1)));
 80035e8:	89fa      	ldrh	r2, [r7, #14]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	3301      	adds	r3, #1
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
			if (result > LCD_DispWindow_COLUMN){
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2bf0      	cmp	r3, #240	; 0xf0
 80035f8:	dd07      	ble.n	800360a <LCD_DrawString+0x6e>
				pStr++;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	3301      	adds	r3, #1
 80035fe:	60bb      	str	r3, [r7, #8]
				usC = LCD_DispWindow_Start_COLUMN;
 8003600:	2300      	movs	r3, #0
 8003602:	81fb      	strh	r3, [r7, #14]
				usP += HEIGHT_EN_CHAR;
 8003604:	89bb      	ldrh	r3, [r7, #12]
 8003606:	3310      	adds	r3, #16
 8003608:	81bb      	strh	r3, [r7, #12]
			}
		}

		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800360a:	89fb      	ldrh	r3, [r7, #14]
 800360c:	2be8      	cmp	r3, #232	; 0xe8
 800360e:	d904      	bls.n	800361a <LCD_DrawString+0x7e>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003610:	2300      	movs	r3, #0
 8003612:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8003614:	89bb      	ldrh	r3, [r7, #12]
 8003616:	3310      	adds	r3, #16
 8003618:	81bb      	strh	r3, [r7, #12]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800361a:	89bb      	ldrh	r3, [r7, #12]
 800361c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003620:	d903      	bls.n	800362a <LCD_DrawString+0x8e>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003622:	2300      	movs	r3, #0
 8003624:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8003626:	2300      	movs	r3, #0
 8003628:	81bb      	strh	r3, [r7, #12]
		}


		LCD_DrawChar ( usC, usP, * pStr , usColor);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	89b9      	ldrh	r1, [r7, #12]
 8003632:	89f8      	ldrh	r0, [r7, #14]
 8003634:	f7ff ff64 	bl	8003500 <LCD_DrawChar>
		pStr ++;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	3301      	adds	r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
		usC += WIDTH_EN_CHAR;
 800363e:	89fb      	ldrh	r3, [r7, #14]
 8003640:	3308      	adds	r3, #8
 8003642:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' && *pStr != '\n')
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <LCD_DrawString+0xb8>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b0a      	cmp	r3, #10
 8003652:	d1af      	bne.n	80035b4 <LCD_DrawString+0x18>
		
	}
}
 8003654:	bf00      	nop
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <LCD_DrawBox>:
/*
 * start x,y, color, size
 * create a sizexsize box
 */
void LCD_DrawBox(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor, uint8_t size)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	4604      	mov	r4, r0
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4623      	mov	r3, r4
 800366c:	80fb      	strh	r3, [r7, #6]
 800366e:	4603      	mov	r3, r0
 8003670:	80bb      	strh	r3, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	807b      	strh	r3, [r7, #2]
 8003676:	4613      	mov	r3, r2
 8003678:	707b      	strb	r3, [r7, #1]
	for(int i=0; i<size; i++){
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e013      	b.n	80036a8 <LCD_DrawBox+0x4c>
		LCD_OpenWindow ( usCOLUMN, usPAGE+i, size, 1 );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	b29a      	uxth	r2, r3
 8003684:	88bb      	ldrh	r3, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	b299      	uxth	r1, r3
 800368a:	787b      	ldrb	r3, [r7, #1]
 800368c:	b29a      	uxth	r2, r3
 800368e:	88f8      	ldrh	r0, [r7, #6]
 8003690:	2301      	movs	r3, #1
 8003692:	f7ff fe9b 	bl	80033cc <LCD_OpenWindow>
		LCD_FillColor(size, usColor);
 8003696:	787b      	ldrb	r3, [r7, #1]
 8003698:	887a      	ldrh	r2, [r7, #2]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff feee 	bl	800347e <LCD_FillColor>
	for(int i=0; i<size; i++){
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3301      	adds	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	787b      	ldrb	r3, [r7, #1]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dbe7      	blt.n	8003680 <LCD_DrawBox+0x24>
	}

}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd90      	pop	{r4, r7, pc}

080036ba <LCD_DrawDot>:


void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	80fb      	strh	r3, [r7, #6]
 80036c4:	460b      	mov	r3, r1
 80036c6:	80bb      	strh	r3, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	807b      	strh	r3, [r7, #2]

	LCD_OpenWindow ( usCOLUMN, usPAGE, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80036cc:	88b9      	ldrh	r1, [r7, #4]
 80036ce:	88f8      	ldrh	r0, [r7, #6]
 80036d0:	2310      	movs	r3, #16
 80036d2:	2208      	movs	r2, #8
 80036d4:	f7ff fe7a 	bl	80033cc <LCD_OpenWindow>
	LCD_FillColor(1, usColor);
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	4619      	mov	r1, r3
 80036dc:	2001      	movs	r0, #1
 80036de:	f7ff fece 	bl	800347e <LCD_FillColor>

		
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <LCD_maze>:

void LCD_maze(uint8_t **maze, uint16_t usColumn, uint16_t usPage, uint8_t size, uint8_t row, uint8_t col){
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	817b      	strh	r3, [r7, #10]
 80036fe:	460b      	mov	r3, r1
 8003700:	813b      	strh	r3, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]
			//if == 3 -> green
			// if == 4 -> yellow
			// if >4(obstacles) -> blue

	// or try to display simple # to check array correctness*****
	for (int i = 0; i < row; i++) {
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e26e      	b.n	8003bea <LCD_maze+0x4fe>
	        for (int j = 0; j < col; j++) {
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	e262      	b.n	8003bd8 <LCD_maze+0x4ec>
	            if (maze[i][j] == 1) {
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4413      	add	r3, r2
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d118      	bne.n	8003758 <LCD_maze+0x6c>
	                LCD_DrawBox(usColumn+j*size, usPage+i*size, BLACK, size);  // Print wall
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	b29b      	uxth	r3, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	b292      	uxth	r2, r2
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	b29a      	uxth	r2, r3
 8003734:	897b      	ldrh	r3, [r7, #10]
 8003736:	4413      	add	r3, r2
 8003738:	b298      	uxth	r0, r3
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	b29b      	uxth	r3, r3
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	b292      	uxth	r2, r2
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	b29a      	uxth	r2, r3
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	4413      	add	r3, r2
 800374c:	b299      	uxth	r1, r3
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	2200      	movs	r2, #0
 8003752:	f7ff ff83 	bl	800365c <LCD_DrawBox>
 8003756:	e23c      	b.n	8003bd2 <LCD_maze+0x4e6>
	            } else if(maze[i][j] == 0) {
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d119      	bne.n	80037a0 <LCD_maze+0xb4>
	            	LCD_DrawBox(usColumn+j*size, usPage+i*size, WHITE, size);  // Print empty space
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	b29b      	uxth	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	b292      	uxth	r2, r2
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	b29a      	uxth	r2, r3
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	4413      	add	r3, r2
 800377e:	b298      	uxth	r0, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	b29b      	uxth	r3, r3
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	b292      	uxth	r2, r2
 8003788:	fb02 f303 	mul.w	r3, r2, r3
 800378c:	b29a      	uxth	r2, r3
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	4413      	add	r3, r2
 8003792:	b299      	uxth	r1, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800379a:	f7ff ff5f 	bl	800365c <LCD_DrawBox>
 800379e:	e218      	b.n	8003bd2 <LCD_maze+0x4e6>
	            } else if (maze[i][j] == 2){
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d119      	bne.n	80037e8 <LCD_maze+0xfc>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, start, RED);   // print start
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	b292      	uxth	r2, r2
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	893b      	ldrh	r3, [r7, #8]
 80037c4:	4413      	add	r3, r2
 80037c6:	b298      	uxth	r0, r3
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	b292      	uxth	r2, r2
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	4413      	add	r3, r2
 80037da:	b299      	uxth	r1, r3
 80037dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037e0:	4a91      	ldr	r2, [pc, #580]	; (8003a28 <LCD_maze+0x33c>)
 80037e2:	f000 fa15 	bl	8003c10 <LCD_Drawelement>
 80037e6:	e1f4      	b.n	8003bd2 <LCD_maze+0x4e6>
	            } else if (maze[i][j] == 3){
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d119      	bne.n	8003830 <LCD_maze+0x144>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, endpt, 0xFD20);   // print end
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	b292      	uxth	r2, r2
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	b29a      	uxth	r2, r3
 800380a:	893b      	ldrh	r3, [r7, #8]
 800380c:	4413      	add	r3, r2
 800380e:	b298      	uxth	r0, r3
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	b29b      	uxth	r3, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	b292      	uxth	r2, r2
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	b29a      	uxth	r2, r3
 800381e:	897b      	ldrh	r3, [r7, #10]
 8003820:	4413      	add	r3, r2
 8003822:	b299      	uxth	r1, r3
 8003824:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003828:	4a80      	ldr	r2, [pc, #512]	; (8003a2c <LCD_maze+0x340>)
 800382a:	f000 f9f1 	bl	8003c10 <LCD_Drawelement>
 800382e:	e1d0      	b.n	8003bd2 <LCD_maze+0x4e6>
	            } else if (maze[i][j]==4){
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4413      	add	r3, r2
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b04      	cmp	r3, #4
 8003842:	d119      	bne.n	8003878 <LCD_maze+0x18c>

	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, elekey, YELLOW);	// print key
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	b29b      	uxth	r3, r3
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	b292      	uxth	r2, r2
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	b29a      	uxth	r2, r3
 8003852:	893b      	ldrh	r3, [r7, #8]
 8003854:	4413      	add	r3, r2
 8003856:	b298      	uxth	r0, r3
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	b29b      	uxth	r3, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	b292      	uxth	r2, r2
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	b29a      	uxth	r2, r3
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	4413      	add	r3, r2
 800386a:	b299      	uxth	r1, r3
 800386c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003870:	4a6f      	ldr	r2, [pc, #444]	; (8003a30 <LCD_maze+0x344>)
 8003872:	f000 f9cd 	bl	8003c10 <LCD_Drawelement>
 8003876:	e1ac      	b.n	8003bd2 <LCD_maze+0x4e6>

	            } else if (maze[i][j]==5){//light pattern
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b05      	cmp	r3, #5
 800388a:	d119      	bne.n	80038c0 <LCD_maze+0x1d4>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, game, GREEN);	// test for individual task
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	b29b      	uxth	r3, r3
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	b292      	uxth	r2, r2
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	b29a      	uxth	r2, r3
 800389a:	893b      	ldrh	r3, [r7, #8]
 800389c:	4413      	add	r3, r2
 800389e:	b298      	uxth	r0, r3
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	b292      	uxth	r2, r2
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	4413      	add	r3, r2
 80038b2:	b299      	uxth	r1, r3
 80038b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038b8:	4a5e      	ldr	r2, [pc, #376]	; (8003a34 <LCD_maze+0x348>)
 80038ba:	f000 f9a9 	bl	8003c10 <LCD_Drawelement>
 80038be:	e188      	b.n	8003bd2 <LCD_maze+0x4e6>
	            }
	            else if ( maze[i][j]==6){ // clap game
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d118      	bne.n	8003906 <LCD_maze+0x21a>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, game, BLUE);	//draw game
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	b292      	uxth	r2, r2
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	893b      	ldrh	r3, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	b298      	uxth	r0, r3
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	b292      	uxth	r2, r2
 80038f0:	fb02 f303 	mul.w	r3, r2, r3
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	897b      	ldrh	r3, [r7, #10]
 80038f8:	4413      	add	r3, r2
 80038fa:	b299      	uxth	r1, r3
 80038fc:	231f      	movs	r3, #31
 80038fe:	4a4d      	ldr	r2, [pc, #308]	; (8003a34 <LCD_maze+0x348>)
 8003900:	f000 f986 	bl	8003c10 <LCD_Drawelement>
 8003904:	e165      	b.n	8003bd2 <LCD_maze+0x4e6>

	            }else if (maze[i][j]==7){ // distance game
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b07      	cmp	r3, #7
 8003918:	d119      	bne.n	800394e <LCD_maze+0x262>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, game, RED);	//draw game
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	b29b      	uxth	r3, r3
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	b292      	uxth	r2, r2
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	b29a      	uxth	r2, r3
 8003928:	893b      	ldrh	r3, [r7, #8]
 800392a:	4413      	add	r3, r2
 800392c:	b298      	uxth	r0, r3
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	b29b      	uxth	r3, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	b292      	uxth	r2, r2
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	b29a      	uxth	r2, r3
 800393c:	897b      	ldrh	r3, [r7, #10]
 800393e:	4413      	add	r3, r2
 8003940:	b299      	uxth	r1, r3
 8003942:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003946:	4a3b      	ldr	r2, [pc, #236]	; (8003a34 <LCD_maze+0x348>)
 8003948:	f000 f962 	bl	8003c10 <LCD_Drawelement>
 800394c:	e141      	b.n	8003bd2 <LCD_maze+0x4e6>

	            } else if (maze[i][j]==8){//dark
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b08      	cmp	r3, #8
 8003960:	d119      	bne.n	8003996 <LCD_maze+0x2aa>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, GREEN);	// test for individual task
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	b29b      	uxth	r3, r3
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	b292      	uxth	r2, r2
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	b29a      	uxth	r2, r3
 8003970:	893b      	ldrh	r3, [r7, #8]
 8003972:	4413      	add	r3, r2
 8003974:	b298      	uxth	r0, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	b29b      	uxth	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	b292      	uxth	r2, r2
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	b29a      	uxth	r2, r3
 8003984:	897b      	ldrh	r3, [r7, #10]
 8003986:	4413      	add	r3, r2
 8003988:	b299      	uxth	r1, r3
 800398a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800398e:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <LCD_maze+0x34c>)
 8003990:	f000 f93e 	bl	8003c10 <LCD_Drawelement>
 8003994:	e11d      	b.n	8003bd2 <LCD_maze+0x4e6>
	            }else if (maze[i][j]==9){//bright //purple
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4413      	add	r3, r2
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b09      	cmp	r3, #9
 80039a8:	d119      	bne.n	80039de <LCD_maze+0x2f2>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, 0xF81F);	// test for individual task
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	b292      	uxth	r2, r2
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	893b      	ldrh	r3, [r7, #8]
 80039ba:	4413      	add	r3, r2
 80039bc:	b298      	uxth	r0, r3
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	b292      	uxth	r2, r2
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	897b      	ldrh	r3, [r7, #10]
 80039ce:	4413      	add	r3, r2
 80039d0:	b299      	uxth	r1, r3
 80039d2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <LCD_maze+0x34c>)
 80039d8:	f000 f91a 	bl	8003c10 <LCD_Drawelement>
 80039dc:	e0f9      	b.n	8003bd2 <LCD_maze+0x4e6>

	            }else if (maze[i][j]==10){//ice
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4413      	add	r3, r2
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b0a      	cmp	r3, #10
 80039f0:	d124      	bne.n	8003a3c <LCD_maze+0x350>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, RED);	// test for individual task
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	b292      	uxth	r2, r2
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	893b      	ldrh	r3, [r7, #8]
 8003a02:	4413      	add	r3, r2
 8003a04:	b298      	uxth	r0, r3
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	b292      	uxth	r2, r2
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	897b      	ldrh	r3, [r7, #10]
 8003a16:	4413      	add	r3, r2
 8003a18:	b299      	uxth	r1, r3
 8003a1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a1e:	4a06      	ldr	r2, [pc, #24]	; (8003a38 <LCD_maze+0x34c>)
 8003a20:	f000 f8f6 	bl	8003c10 <LCD_Drawelement>
 8003a24:	e0d5      	b.n	8003bd2 <LCD_maze+0x4e6>
 8003a26:	bf00      	nop
 8003a28:	08016054 	.word	0x08016054
 8003a2c:	08016074 	.word	0x08016074
 8003a30:	08016094 	.word	0x08016094
 8003a34:	080160b4 	.word	0x080160b4
 8003a38:	080160d4 	.word	0x080160d4

	            }else if (maze[i][j]==11){//heat
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b0b      	cmp	r3, #11
 8003a4e:	d118      	bne.n	8003a82 <LCD_maze+0x396>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, BLUE);	// test for individual task
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	b292      	uxth	r2, r2
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	893b      	ldrh	r3, [r7, #8]
 8003a60:	4413      	add	r3, r2
 8003a62:	b298      	uxth	r0, r3
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	897b      	ldrh	r3, [r7, #10]
 8003a74:	4413      	add	r3, r2
 8003a76:	b299      	uxth	r1, r3
 8003a78:	231f      	movs	r3, #31
 8003a7a:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <LCD_maze+0x514>)
 8003a7c:	f000 f8c8 	bl	8003c10 <LCD_Drawelement>
 8003a80:	e0a7      	b.n	8003bd2 <LCD_maze+0x4e6>

	            }else if (maze[i][j]==12){//quiz
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d119      	bne.n	8003aca <LCD_maze+0x3de>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, YELLOW);	// test for individual task
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	b292      	uxth	r2, r2
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	893b      	ldrh	r3, [r7, #8]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	b298      	uxth	r0, r3
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	897b      	ldrh	r3, [r7, #10]
 8003aba:	4413      	add	r3, r2
 8003abc:	b299      	uxth	r1, r3
 8003abe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ac2:	4a4f      	ldr	r2, [pc, #316]	; (8003c00 <LCD_maze+0x514>)
 8003ac4:	f000 f8a4 	bl	8003c10 <LCD_Drawelement>
 8003ac8:	e083      	b.n	8003bd2 <LCD_maze+0x4e6>

	            }else if (maze[i][j]==15){//add heart
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	d119      	bne.n	8003b12 <LCD_maze+0x426>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, sheart, RED);	// test for individual task
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	b292      	uxth	r2, r2
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	893b      	ldrh	r3, [r7, #8]
 8003aee:	4413      	add	r3, r2
 8003af0:	b298      	uxth	r0, r3
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	b292      	uxth	r2, r2
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	897b      	ldrh	r3, [r7, #10]
 8003b02:	4413      	add	r3, r2
 8003b04:	b299      	uxth	r1, r3
 8003b06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b0a:	4a3e      	ldr	r2, [pc, #248]	; (8003c04 <LCD_maze+0x518>)
 8003b0c:	f000 f880 	bl	8003c10 <LCD_Drawelement>
 8003b10:	e05f      	b.n	8003bd2 <LCD_maze+0x4e6>

	            }else if (maze[i][j]==16){//toxic
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d118      	bne.n	8003b58 <LCD_maze+0x46c>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, toxic, BLACK);	// test for individual task
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	b292      	uxth	r2, r2
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	893b      	ldrh	r3, [r7, #8]
 8003b36:	4413      	add	r3, r2
 8003b38:	b298      	uxth	r0, r3
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	b292      	uxth	r2, r2
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	897b      	ldrh	r3, [r7, #10]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	b299      	uxth	r1, r3
 8003b4e:	2300      	movs	r3, #0
 8003b50:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <LCD_maze+0x51c>)
 8003b52:	f000 f85d 	bl	8003c10 <LCD_Drawelement>
 8003b56:	e03c      	b.n	8003bd2 <LCD_maze+0x4e6>

	            }else if (maze[i][j]==17){//random
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4413      	add	r3, r2
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b11      	cmp	r3, #17
 8003b6a:	d119      	bne.n	8003ba0 <LCD_maze+0x4b4>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, random_move, 0xF81F);	// test for individual task
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	b292      	uxth	r2, r2
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	893b      	ldrh	r3, [r7, #8]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	b298      	uxth	r0, r3
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	b292      	uxth	r2, r2
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	897b      	ldrh	r3, [r7, #10]
 8003b90:	4413      	add	r3, r2
 8003b92:	b299      	uxth	r1, r3
 8003b94:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <LCD_maze+0x520>)
 8003b9a:	f000 f839 	bl	8003c10 <LCD_Drawelement>
 8003b9e:	e018      	b.n	8003bd2 <LCD_maze+0x4e6>

	            }else LCD_Drawelement(usPage+i*size, usColumn+j*size, event, 0xB543);	// draw remaining obs
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	b292      	uxth	r2, r2
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	893b      	ldrh	r3, [r7, #8]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b298      	uxth	r0, r3
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	fb02 f303 	mul.w	r3, r2, r3
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	f24b 5343 	movw	r3, #46403	; 0xb543
 8003bcc:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <LCD_maze+0x514>)
 8003bce:	f000 f81f 	bl	8003c10 <LCD_Drawelement>
	        for (int j = 0; j < col; j++) {
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	f6ff ad97 	blt.w	8003712 <LCD_maze+0x26>
	for (int i = 0; i < row; i++) {
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3301      	adds	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	f6ff ad8b 	blt.w	800370c <LCD_maze+0x20>
	        }
	}

}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	080160d4 	.word	0x080160d4
 8003c04:	080160f4 	.word	0x080160f4
 8003c08:	08016114 	.word	0x08016114
 8003c0c:	08016134 	.word	0x08016134

08003c10 <LCD_Drawelement>:



void LCD_Drawelement(uint16_t startx, uint16_t starty, uint8_t element[], uint16_t color){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60ba      	str	r2, [r7, #8]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	81fb      	strh	r3, [r7, #14]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	81bb      	strh	r3, [r7, #12]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]

	//LCD_OpenWindow(100, 100, 32, 32);	// open the write window
	LCD_Write_Cmd(CMD_SetPixel);	// set the write mode
 8003c26:	202c      	movs	r0, #44	; 0x2c
 8003c28:	f7ff fa98 	bl	800315c <LCD_Write_Cmd>

	for (int k = 0; k < 16; k++){	// loop for each row
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e04f      	b.n	8003cd2 <LCD_Drawelement+0xc2>

		for (int i = 0; i < 2; i++){  // 2 array elements per row on LCD
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e046      	b.n	8003cc6 <LCD_Drawelement+0xb6>
			int ucTemp = element[k*2 + i];
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005a      	lsls	r2, r3, #1
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	4413      	add	r3, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4413      	add	r3, r2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	617b      	str	r3, [r7, #20]

			for(int j = 0; j < 8; j++){	// loop for each column of a row
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	e034      	b.n	8003cba <LCD_Drawelement+0xaa>
				if(ucTemp & 0x01)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d014      	beq.n	8003c84 <LCD_Drawelement+0x74>
					LCD_DrawDot(starty+(i*8+j), startx+k, color);
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	89bb      	ldrh	r3, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b298      	uxth	r0, r3
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	89fb      	ldrh	r3, [r7, #14]
 8003c76:	4413      	add	r3, r2
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f7ff fd1c 	bl	80036ba <LCD_DrawDot>
 8003c82:	e014      	b.n	8003cae <LCD_Drawelement+0x9e>
				else
					LCD_DrawDot(starty+(i*8+j), startx+k, WHITE);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	89bb      	ldrh	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	b298      	uxth	r0, r3
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	89fb      	ldrh	r3, [r7, #14]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f7ff fd06 	bl	80036ba <LCD_DrawDot>
				ucTemp >>= 1;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	105b      	asrs	r3, r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
			for(int j = 0; j < 8; j++){	// loop for each column of a row
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b07      	cmp	r3, #7
 8003cbe:	ddc7      	ble.n	8003c50 <LCD_Drawelement+0x40>
		for (int i = 0; i < 2; i++){  // 2 array elements per row on LCD
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	ddb5      	ble.n	8003c38 <LCD_Drawelement+0x28>
	for (int k = 0; k < 16; k++){	// loop for each row
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	ddac      	ble.n	8003c32 <LCD_Drawelement+0x22>
			}
		}
	}
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <LCD_Drawkey>:

void LCD_Drawkey(uint16_t startx, uint16_t starty){
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	460a      	mov	r2, r1
 8003cee:	80fb      	strh	r3, [r7, #6]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	80bb      	strh	r3, [r7, #4]

	//LCD_OpenWindow(100, 100, 32, 32);	// open the write window
	LCD_Write_Cmd(CMD_SetPixel);	// set the write mode
 8003cf4:	202c      	movs	r0, #44	; 0x2c
 8003cf6:	f7ff fa31 	bl	800315c <LCD_Write_Cmd>

	for (int k = 0; k < 24; k++){	// loop for each row
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e04e      	b.n	8003d9e <LCD_Drawkey+0xba>

		for (int i = 0; i < 4; i++){  // 4 array elements per row on LCD
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	e045      	b.n	8003d92 <LCD_Drawkey+0xae>
			int ucTemp = key[k*4 + i];
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	009a      	lsls	r2, r3, #2
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <LCD_Drawkey+0xcc>)
 8003d10:	5cd3      	ldrb	r3, [r2, r3]
 8003d12:	60fb      	str	r3, [r7, #12]

			for(int j = 0; j < 8; j++){	// loop for each column of a row
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	e035      	b.n	8003d86 <LCD_Drawkey+0xa2>
				if(ucTemp & 0x01)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <LCD_Drawkey+0x6c>
					LCD_DrawDot(starty+(i*8+j), startx+k, YELLOW);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	88bb      	ldrh	r3, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	b298      	uxth	r0, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	4413      	add	r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f7ff fcb6 	bl	80036ba <LCD_DrawDot>
 8003d4e:	e014      	b.n	8003d7a <LCD_Drawkey+0x96>
				else
					LCD_DrawDot(starty+(i*8+j), startx+k, WHITE);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	88bb      	ldrh	r3, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	b298      	uxth	r0, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7ff fca0 	bl	80036ba <LCD_DrawDot>
				ucTemp >>= 1;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	105b      	asrs	r3, r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
			for(int j = 0; j < 8; j++){	// loop for each column of a row
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b07      	cmp	r3, #7
 8003d8a:	ddc6      	ble.n	8003d1a <LCD_Drawkey+0x36>
		for (int i = 0; i < 4; i++){  // 4 array elements per row on LCD
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	ddb6      	ble.n	8003d06 <LCD_Drawkey+0x22>
	for (int k = 0; k < 24; k++){	// loop for each row
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b17      	cmp	r3, #23
 8003da2:	ddad      	ble.n	8003d00 <LCD_Drawkey+0x1c>
			}
		}
	}
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	08015f94 	.word	0x08015f94

08003db4 <LCD_Drawheart>:

void LCD_Drawheart(uint16_t startx, uint16_t starty){
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	460a      	mov	r2, r1
 8003dbe:	80fb      	strh	r3, [r7, #6]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80bb      	strh	r3, [r7, #4]

	//LCD_OpenWindow(100, 100, 32, 32);	// open the write window
	LCD_Write_Cmd(CMD_SetPixel);	// set the write mode
 8003dc4:	202c      	movs	r0, #44	; 0x2c
 8003dc6:	f7ff f9c9 	bl	800315c <LCD_Write_Cmd>

	for (int k = 0; k < 24; k++){	// loop for each row
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	e04e      	b.n	8003e6e <LCD_Drawheart+0xba>

		for (int i = 0; i < 4; i++){  // 4 array elements per row on LCD
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	e045      	b.n	8003e62 <LCD_Drawheart+0xae>
			int ucTemp = heart[k*4 + i];
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	009a      	lsls	r2, r3, #2
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	4a28      	ldr	r2, [pc, #160]	; (8003e80 <LCD_Drawheart+0xcc>)
 8003de0:	5cd3      	ldrb	r3, [r2, r3]
 8003de2:	60fb      	str	r3, [r7, #12]

			for(int j = 0; j < 8; j++){	// loop for each column of a row
 8003de4:	2300      	movs	r3, #0
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	e035      	b.n	8003e56 <LCD_Drawheart+0xa2>
				if(ucTemp & 0x01)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d015      	beq.n	8003e20 <LCD_Drawheart+0x6c>
					LCD_DrawDot(starty+(i*8+j), startx+k, RED);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	88bb      	ldrh	r3, [r7, #4]
 8003e06:	4413      	add	r3, r2
 8003e08:	b298      	uxth	r0, r3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	4413      	add	r3, r2
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f7ff fc4e 	bl	80036ba <LCD_DrawDot>
 8003e1e:	e014      	b.n	8003e4a <LCD_Drawheart+0x96>
				else
					LCD_DrawDot(starty+(i*8+j), startx+k, WHITE);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	88bb      	ldrh	r3, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	b298      	uxth	r0, r3
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e44:	4619      	mov	r1, r3
 8003e46:	f7ff fc38 	bl	80036ba <LCD_DrawDot>
				ucTemp >>= 1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	105b      	asrs	r3, r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
			for(int j = 0; j < 8; j++){	// loop for each column of a row
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b07      	cmp	r3, #7
 8003e5a:	ddc6      	ble.n	8003dea <LCD_Drawheart+0x36>
		for (int i = 0; i < 4; i++){  // 4 array elements per row on LCD
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	ddb6      	ble.n	8003dd6 <LCD_Drawheart+0x22>
	for (int k = 0; k < 24; k++){	// loop for each row
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b17      	cmp	r3, #23
 8003e72:	ddad      	ble.n	8003dd0 <LCD_Drawheart+0x1c>
			}
		}
	}
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	08015ff4 	.word	0x08015ff4

08003e84 <LCD_DrawChar_Color>:


void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4623      	mov	r3, r4
 8003e94:	80fb      	strh	r3, [r7, #6]
 8003e96:	4603      	mov	r3, r0
 8003e98:	80bb      	strh	r3, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	3b20      	subs	r3, #32
 8003ea6:	733b      	strb	r3, [r7, #12]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8003ea8:	88b9      	ldrh	r1, [r7, #4]
 8003eaa:	88f8      	ldrh	r0, [r7, #6]
 8003eac:	2310      	movs	r3, #16
 8003eae:	2208      	movs	r2, #8
 8003eb0:	f7ff fa8c 	bl	80033cc <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8003eb4:	202c      	movs	r0, #44	; 0x2c
 8003eb6:	f7ff f951 	bl	800315c <LCD_Write_Cmd>

	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73bb      	strb	r3, [r7, #14]
 8003ebe:	e024      	b.n	8003f0a <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8003ec0:	7b3a      	ldrb	r2, [r7, #12]
 8003ec2:	7bbb      	ldrb	r3, [r7, #14]
 8003ec4:	4915      	ldr	r1, [pc, #84]	; (8003f1c <LCD_DrawChar_Color+0x98>)
 8003ec6:	0112      	lsls	r2, r2, #4
 8003ec8:	440a      	add	r2, r1
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	73fb      	strb	r3, [r7, #15]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	737b      	strb	r3, [r7, #13]
 8003ed4:	e013      	b.n	8003efe <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8003ee0:	8c3b      	ldrh	r3, [r7, #32]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff f948 	bl	8003178 <LCD_Write_Data>
 8003ee8:	e003      	b.n	8003ef2 <LCD_DrawChar_Color+0x6e>

			else
				LCD_Write_Data ( usColor_Background );
 8003eea:	883b      	ldrh	r3, [r7, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff f943 	bl	8003178 <LCD_Write_Data>

			ucTemp >>= 1;
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8003ef8:	7b7b      	ldrb	r3, [r7, #13]
 8003efa:	3301      	adds	r3, #1
 8003efc:	737b      	strb	r3, [r7, #13]
 8003efe:	7b7b      	ldrb	r3, [r7, #13]
 8003f00:	2b07      	cmp	r3, #7
 8003f02:	d9e8      	bls.n	8003ed6 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8003f04:	7bbb      	ldrb	r3, [r7, #14]
 8003f06:	3301      	adds	r3, #1
 8003f08:	73bb      	strb	r3, [r7, #14]
 8003f0a:	7bbb      	ldrb	r3, [r7, #14]
 8003f0c:	2b0f      	cmp	r3, #15
 8003f0e:	d9d7      	bls.n	8003ec0 <LCD_DrawChar_Color+0x3c>

		}

	}

}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd90      	pop	{r4, r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	080159a0 	.word	0x080159a0

08003f20 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	4603      	mov	r3, r0
 8003f28:	460a      	mov	r2, r1
 8003f2a:	80fb      	strh	r3, [r7, #6]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	3b0a      	subs	r3, #10
 8003f34:	b298      	uxth	r0, r3
 8003f36:	88b9      	ldrh	r1, [r7, #4]
 8003f38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2301      	movs	r3, #1
 8003f40:	2214      	movs	r2, #20
 8003f42:	f7ff faba 	bl	80034ba <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 8003f46:	88bb      	ldrh	r3, [r7, #4]
 8003f48:	3b0a      	subs	r3, #10
 8003f4a:	b299      	uxth	r1, r3
 8003f4c:	88f8      	ldrh	r0, [r7, #6]
 8003f4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2314      	movs	r3, #20
 8003f56:	2201      	movs	r2, #1
 8003f58:	f7ff faaf 	bl	80034ba <LCD_Clear>

}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60ba      	str	r2, [r7, #8]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	81fb      	strh	r3, [r7, #14]
 8003f72:	460b      	mov	r3, r1
 8003f74:	81bb      	strh	r3, [r7, #12]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8003f7a:	e01f      	b.n	8003fbc <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8003f7c:	89fb      	ldrh	r3, [r7, #14]
 8003f7e:	2be8      	cmp	r3, #232	; 0xe8
 8003f80:	d904      	bls.n	8003f8c <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003f82:	2300      	movs	r3, #0
 8003f84:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8003f86:	89bb      	ldrh	r3, [r7, #12]
 8003f88:	3310      	adds	r3, #16
 8003f8a:	81bb      	strh	r3, [r7, #12]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8003f8c:	89bb      	ldrh	r3, [r7, #12]
 8003f8e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003f92:	d903      	bls.n	8003f9c <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003f94:	2300      	movs	r3, #0
 8003f96:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	81bb      	strh	r3, [r7, #12]
		}

		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	88fc      	ldrh	r4, [r7, #6]
 8003fa2:	89b9      	ldrh	r1, [r7, #12]
 8003fa4:	89f8      	ldrh	r0, [r7, #14]
 8003fa6:	8c3b      	ldrh	r3, [r7, #32]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4623      	mov	r3, r4
 8003fac:	f7ff ff6a 	bl	8003e84 <LCD_DrawChar_Color>

		pStr ++;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60bb      	str	r3, [r7, #8]

		usC += WIDTH_EN_CHAR;
 8003fb6:	89fb      	ldrh	r3, [r7, #14]
 8003fb8:	3308      	adds	r3, #8
 8003fba:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1db      	bne.n	8003f7c <LCD_DrawString_Color+0x18>

	}

}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd90      	pop	{r4, r7, pc}
	...

08003fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fd4:	f003 fcd2 	bl	800797c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fd8:	f000 f858 	bl	800408c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fdc:	f000 fb4c 	bl	8004678 <MX_GPIO_Init>
  MX_FSMC_Init();
 8003fe0:	f000 fc6e 	bl	80048c0 <MX_FSMC_Init>
  MX_DMA_Init();
 8003fe4:	f000 fb0e 	bl	8004604 <MX_DMA_Init>
  MX_ADC1_Init();
 8003fe8:	f000 f8b0 	bl	800414c <MX_ADC1_Init>
  MX_TIM3_Init();
 8003fec:	f000 fa92 	bl	8004514 <MX_TIM3_Init>
  MX_TIM1_Init();
 8003ff0:	f000 f9f4 	bl	80043dc <MX_TIM1_Init>
  MX_I2S2_Init();
 8003ff4:	f000 f964 	bl	80042c0 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8003ff8:	f000 f98a 	bl	8004310 <MX_SDIO_SD_Init>
  MX_ADC3_Init();
 8003ffc:	f000 f8e4 	bl	80041c8 <MX_ADC3_Init>
  MX_FATFS_Init();
 8004000:	f00a fb6e 	bl	800e6e0 <MX_FATFS_Init>
  MX_SPI1_Init();
 8004004:	f000 f9b4 	bl	8004370 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004008:	f000 fad2 	bl	80045b0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800400c:	f000 fa36 	bl	800447c <MX_TIM2_Init>
  MX_I2C2_Init();
 8004010:	f000 f928 	bl	8004264 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init ();
 8004014:	f001 fd3e 	bl	8005a94 <MPU6050_Init>
  macXPT2046_CS_DISABLE();
 8004018:	2200      	movs	r2, #0
 800401a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800401e:	4814      	ldr	r0, [pc, #80]	; (8004070 <main+0xa0>)
 8004020:	f005 f9af 	bl	8009382 <HAL_GPIO_WritePin>
  LCD_INIT();
 8004024:	f7ff f84f 	bl	80030c6 <LCD_INIT>
  HAL_TIM_Base_Start_IT(&htim3);
 8004028:	4812      	ldr	r0, [pc, #72]	; (8004074 <main+0xa4>)
 800402a:	f008 ff75 	bl	800cf18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800402e:	4812      	ldr	r0, [pc, #72]	; (8004078 <main+0xa8>)
 8004030:	f008 ff72 	bl	800cf18 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);	//adc calibration
 8004034:	4811      	ldr	r0, [pc, #68]	; (800407c <main+0xac>)
 8004036:	f004 fac5 	bl	80085c4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3);	//adc calibration
 800403a:	4811      	ldr	r0, [pc, #68]	; (8004080 <main+0xb0>)
 800403c:	f004 fac2 	bl	80085c4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joy, 2);
 8004040:	2202      	movs	r2, #2
 8004042:	4910      	ldr	r1, [pc, #64]	; (8004084 <main+0xb4>)
 8004044:	480e      	ldr	r0, [pc, #56]	; (8004080 <main+0xb0>)
 8004046:	f003 ffbd 	bl	8007fc4 <HAL_ADC_Start_DMA>
  max7219_Init();
 800404a:	f000 fd15 	bl	8004a78 <max7219_Init>
  //HAL_ADC_Stop(&hadc3);
  HAL_TIM_Base_Start(&htim2);
 800404e:	480e      	ldr	r0, [pc, #56]	; (8004088 <main+0xb8>)
 8004050:	f008 ff0a 	bl	800ce68 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while( ! XPT2046_Touch_Calibrate () );
 8004054:	bf00      	nop
 8004056:	f003 f925 	bl	80072a4 <XPT2046_Touch_Calibrate>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0fa      	beq.n	8004056 <main+0x86>

  setRandomSeed();	//random the seed
 8004060:	f000 ff5e 	bl	8004f20 <setRandomSeed>
  maze_all();
 8004064:	f000 fdae 	bl	8004bc4 <maze_all>
  //interrupt - k1 -> next round

  while (1)
  {
	  //handle movement
	 move();
 8004068:	f001 fbd8 	bl	800581c <move>
 800406c:	e7fc      	b.n	8004068 <main+0x98>
 800406e:	bf00      	nop
 8004070:	40011400 	.word	0x40011400
 8004074:	2000279c 	.word	0x2000279c
 8004078:	2000270c 	.word	0x2000270c
 800407c:	20002474 	.word	0x20002474
 8004080:	200024a4 	.word	0x200024a4
 8004084:	20002884 	.word	0x20002884
 8004088:	20002754 	.word	0x20002754

0800408c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b096      	sub	sp, #88	; 0x58
 8004090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004096:	2228      	movs	r2, #40	; 0x28
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f00e f9c0 	bl	8012420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a0:	f107 031c 	add.w	r3, r7, #28
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	605a      	str	r2, [r3, #4]
 80040b8:	609a      	str	r2, [r3, #8]
 80040ba:	60da      	str	r2, [r3, #12]
 80040bc:	611a      	str	r2, [r3, #16]
 80040be:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80040ca:	2300      	movs	r3, #0
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040ce:	2301      	movs	r3, #1
 80040d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040d2:	2302      	movs	r3, #2
 80040d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80040dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80040e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040e6:	4618      	mov	r0, r3
 80040e8:	f006 fc68 	bl	800a9bc <HAL_RCC_OscConfig>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80040f2:	f000 fc69 	bl	80049c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040f6:	230f      	movs	r3, #15
 80040f8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040fa:	2302      	movs	r3, #2
 80040fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040fe:	2300      	movs	r3, #0
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004108:	2300      	movs	r3, #0
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800410c:	f107 031c 	add.w	r3, r7, #28
 8004110:	2102      	movs	r1, #2
 8004112:	4618      	mov	r0, r3
 8004114:	f006 fed4 	bl	800aec0 <HAL_RCC_ClockConfig>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800411e:	f000 fc53 	bl	80049c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2S2;
 8004122:	2306      	movs	r3, #6
 8004124:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	4618      	mov	r0, r3
 8004134:	f007 f85c 	bl	800b1f0 <HAL_RCCEx_PeriphCLKConfig>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800413e:	f000 fc43 	bl	80049c8 <Error_Handler>
  }
}
 8004142:	bf00      	nop
 8004144:	3758      	adds	r7, #88	; 0x58
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800415c:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <MX_ADC1_Init+0x74>)
 800415e:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <MX_ADC1_Init+0x78>)
 8004160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004162:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <MX_ADC1_Init+0x74>)
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <MX_ADC1_Init+0x74>)
 800416a:	2200      	movs	r2, #0
 800416c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800416e:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <MX_ADC1_Init+0x74>)
 8004170:	2200      	movs	r2, #0
 8004172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004174:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <MX_ADC1_Init+0x74>)
 8004176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800417a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <MX_ADC1_Init+0x74>)
 800417e:	2200      	movs	r2, #0
 8004180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <MX_ADC1_Init+0x74>)
 8004184:	2201      	movs	r2, #1
 8004186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004188:	480d      	ldr	r0, [pc, #52]	; (80041c0 <MX_ADC1_Init+0x74>)
 800418a:	f003 fc7d 	bl	8007a88 <HAL_ADC_Init>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8004194:	f000 fc18 	bl	80049c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004198:	230d      	movs	r3, #13
 800419a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800419c:	2301      	movs	r3, #1
 800419e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4805      	ldr	r0, [pc, #20]	; (80041c0 <MX_ADC1_Init+0x74>)
 80041aa:	f004 f811 	bl	80081d0 <HAL_ADC_ConfigChannel>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80041b4:	f000 fc08 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20002474 	.word	0x20002474
 80041c4:	40012400 	.word	0x40012400

080041c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80041d8:	4b20      	ldr	r3, [pc, #128]	; (800425c <MX_ADC3_Init+0x94>)
 80041da:	4a21      	ldr	r2, [pc, #132]	; (8004260 <MX_ADC3_Init+0x98>)
 80041dc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80041de:	4b1f      	ldr	r3, [pc, #124]	; (800425c <MX_ADC3_Init+0x94>)
 80041e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <MX_ADC3_Init+0x94>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <MX_ADC3_Init+0x94>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041f2:	4b1a      	ldr	r3, [pc, #104]	; (800425c <MX_ADC3_Init+0x94>)
 80041f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80041f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041fa:	4b18      	ldr	r3, [pc, #96]	; (800425c <MX_ADC3_Init+0x94>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 2;
 8004200:	4b16      	ldr	r3, [pc, #88]	; (800425c <MX_ADC3_Init+0x94>)
 8004202:	2202      	movs	r2, #2
 8004204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004206:	4815      	ldr	r0, [pc, #84]	; (800425c <MX_ADC3_Init+0x94>)
 8004208:	f003 fc3e 	bl	8007a88 <HAL_ADC_Init>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_ADC3_Init+0x4e>
  {
    Error_Handler();
 8004212:	f000 fbd9 	bl	80049c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004216:	230a      	movs	r3, #10
 8004218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800421a:	2301      	movs	r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800421e:	2307      	movs	r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004222:	1d3b      	adds	r3, r7, #4
 8004224:	4619      	mov	r1, r3
 8004226:	480d      	ldr	r0, [pc, #52]	; (800425c <MX_ADC3_Init+0x94>)
 8004228:	f003 ffd2 	bl	80081d0 <HAL_ADC_ConfigChannel>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8004232:	f000 fbc9 	bl	80049c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004236:	230c      	movs	r3, #12
 8004238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800423a:	2302      	movs	r3, #2
 800423c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	4619      	mov	r1, r3
 8004242:	4806      	ldr	r0, [pc, #24]	; (800425c <MX_ADC3_Init+0x94>)
 8004244:	f003 ffc4 	bl	80081d0 <HAL_ADC_ConfigChannel>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800424e:	f000 fbbb 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200024a4 	.word	0x200024a4
 8004260:	40013c00 	.word	0x40013c00

08004264 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <MX_I2C2_Init+0x50>)
 800426a:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <MX_I2C2_Init+0x54>)
 800426c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <MX_I2C2_Init+0x50>)
 8004270:	4a12      	ldr	r2, [pc, #72]	; (80042bc <MX_I2C2_Init+0x58>)
 8004272:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <MX_I2C2_Init+0x50>)
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <MX_I2C2_Init+0x50>)
 800427c:	2200      	movs	r2, #0
 800427e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <MX_I2C2_Init+0x50>)
 8004282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004286:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <MX_I2C2_Init+0x50>)
 800428a:	2200      	movs	r2, #0
 800428c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <MX_I2C2_Init+0x50>)
 8004290:	2200      	movs	r2, #0
 8004292:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004294:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <MX_I2C2_Init+0x50>)
 8004296:	2200      	movs	r2, #0
 8004298:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <MX_I2C2_Init+0x50>)
 800429c:	2200      	movs	r2, #0
 800429e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80042a0:	4804      	ldr	r0, [pc, #16]	; (80042b4 <MX_I2C2_Init+0x50>)
 80042a2:	f005 f8a9 	bl	80093f8 <HAL_I2C_Init>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80042ac:	f000 fb8c 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20002518 	.word	0x20002518
 80042b8:	40005800 	.word	0x40005800
 80042bc:	00061a80 	.word	0x00061a80

080042c0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <MX_I2S2_Init+0x48>)
 80042c6:	4a11      	ldr	r2, [pc, #68]	; (800430c <MX_I2S2_Init+0x4c>)
 80042c8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <MX_I2S2_Init+0x48>)
 80042cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <MX_I2S2_Init+0x48>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <MX_I2S2_Init+0x48>)
 80042da:	2200      	movs	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <MX_I2S2_Init+0x48>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80042e4:	4b08      	ldr	r3, [pc, #32]	; (8004308 <MX_I2S2_Init+0x48>)
 80042e6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80042ea:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <MX_I2S2_Init+0x48>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80042f2:	4805      	ldr	r0, [pc, #20]	; (8004308 <MX_I2S2_Init+0x48>)
 80042f4:	f006 f880 	bl	800a3f8 <HAL_I2S_Init>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80042fe:	f000 fb63 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000256c 	.word	0x2000256c
 800430c:	40003800 	.word	0x40003800

08004310 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <MX_SDIO_SD_Init+0x58>)
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <MX_SDIO_SD_Init+0x5c>)
 8004318:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <MX_SDIO_SD_Init+0x58>)
 800431c:	2200      	movs	r2, #0
 800431e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004320:	4b11      	ldr	r3, [pc, #68]	; (8004368 <MX_SDIO_SD_Init+0x58>)
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <MX_SDIO_SD_Init+0x58>)
 8004328:	2200      	movs	r2, #0
 800432a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <MX_SDIO_SD_Init+0x58>)
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8004332:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <MX_SDIO_SD_Init+0x58>)
 8004334:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004338:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 6;
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <MX_SDIO_SD_Init+0x58>)
 800433c:	2206      	movs	r2, #6
 800433e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK){Error_Handler();}
 8004340:	4809      	ldr	r0, [pc, #36]	; (8004368 <MX_SDIO_SD_Init+0x58>)
 8004342:	f007 f8ef 	bl	800b524 <HAL_SD_Init>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <MX_SDIO_SD_Init+0x40>
 800434c:	f000 fb3c 	bl	80049c8 <Error_Handler>
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK){Error_Handler();}
 8004350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004354:	4804      	ldr	r0, [pc, #16]	; (8004368 <MX_SDIO_SD_Init+0x58>)
 8004356:	f007 fec7 	bl	800c0e8 <HAL_SD_ConfigWideBusOperation>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_SDIO_SD_Init+0x54>
 8004360:	f000 fb32 	bl	80049c8 <Error_Handler>
  /* USER CODE END SDIO_Init 2 */

}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}
 8004368:	200025ec 	.word	0x200025ec
 800436c:	40018000 	.word	0x40018000

08004370 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004374:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <MX_SPI1_Init+0x64>)
 8004376:	4a18      	ldr	r2, [pc, #96]	; (80043d8 <MX_SPI1_Init+0x68>)
 8004378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800437a:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <MX_SPI1_Init+0x64>)
 800437c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <MX_SPI1_Init+0x64>)
 8004384:	2200      	movs	r2, #0
 8004386:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004388:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <MX_SPI1_Init+0x64>)
 800438a:	2200      	movs	r2, #0
 800438c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <MX_SPI1_Init+0x64>)
 8004390:	2200      	movs	r2, #0
 8004392:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <MX_SPI1_Init+0x64>)
 8004396:	2200      	movs	r2, #0
 8004398:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800439a:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <MX_SPI1_Init+0x64>)
 800439c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <MX_SPI1_Init+0x64>)
 80043a4:	2210      	movs	r2, #16
 80043a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <MX_SPI1_Init+0x64>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <MX_SPI1_Init+0x64>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b4:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <MX_SPI1_Init+0x64>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <MX_SPI1_Init+0x64>)
 80043bc:	220a      	movs	r2, #10
 80043be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043c0:	4804      	ldr	r0, [pc, #16]	; (80043d4 <MX_SPI1_Init+0x64>)
 80043c2:	f008 fa38 	bl	800c836 <HAL_SPI_Init>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80043cc:	f000 fafc 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20002670 	.word	0x20002670
 80043d8:	40013000 	.word	0x40013000

080043dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043e2:	f107 0308 	add.w	r3, r7, #8
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f0:	463b      	mov	r3, r7
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043f8:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <MX_TIM1_Init+0x98>)
 80043fa:	4a1f      	ldr	r2, [pc, #124]	; (8004478 <MX_TIM1_Init+0x9c>)
 80043fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80043fe:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <MX_TIM1_Init+0x98>)
 8004400:	2247      	movs	r2, #71	; 0x47
 8004402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004404:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <MX_TIM1_Init+0x98>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800440a:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <MX_TIM1_Init+0x98>)
 800440c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004410:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004412:	4b18      	ldr	r3, [pc, #96]	; (8004474 <MX_TIM1_Init+0x98>)
 8004414:	2200      	movs	r2, #0
 8004416:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004418:	4b16      	ldr	r3, [pc, #88]	; (8004474 <MX_TIM1_Init+0x98>)
 800441a:	2200      	movs	r2, #0
 800441c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800441e:	4b15      	ldr	r3, [pc, #84]	; (8004474 <MX_TIM1_Init+0x98>)
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004424:	4813      	ldr	r0, [pc, #76]	; (8004474 <MX_TIM1_Init+0x98>)
 8004426:	f008 fcd0 	bl	800cdca <HAL_TIM_Base_Init>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004430:	f000 faca 	bl	80049c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004438:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800443a:	f107 0308 	add.w	r3, r7, #8
 800443e:	4619      	mov	r1, r3
 8004440:	480c      	ldr	r0, [pc, #48]	; (8004474 <MX_TIM1_Init+0x98>)
 8004442:	f008 fed1 	bl	800d1e8 <HAL_TIM_ConfigClockSource>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800444c:	f000 fabc 	bl	80049c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004454:	2300      	movs	r3, #0
 8004456:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004458:	463b      	mov	r3, r7
 800445a:	4619      	mov	r1, r3
 800445c:	4805      	ldr	r0, [pc, #20]	; (8004474 <MX_TIM1_Init+0x98>)
 800445e:	f009 f8bb 	bl	800d5d8 <HAL_TIMEx_MasterConfigSynchronization>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004468:	f000 faae 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800446c:	bf00      	nop
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	2000270c 	.word	0x2000270c
 8004478:	40012c00 	.word	0x40012c00

0800447c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004482:	f107 0308 	add.w	r3, r7, #8
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004490:	463b      	mov	r3, r7
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <MX_TIM2_Init+0x94>)
 800449a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800449e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <MX_TIM2_Init+0x94>)
 80044a2:	2247      	movs	r2, #71	; 0x47
 80044a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <MX_TIM2_Init+0x94>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80044ac:	4b18      	ldr	r3, [pc, #96]	; (8004510 <MX_TIM2_Init+0x94>)
 80044ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <MX_TIM2_Init+0x94>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <MX_TIM2_Init+0x94>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044c0:	4813      	ldr	r0, [pc, #76]	; (8004510 <MX_TIM2_Init+0x94>)
 80044c2:	f008 fc82 	bl	800cdca <HAL_TIM_Base_Init>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80044cc:	f000 fa7c 	bl	80049c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044d6:	f107 0308 	add.w	r3, r7, #8
 80044da:	4619      	mov	r1, r3
 80044dc:	480c      	ldr	r0, [pc, #48]	; (8004510 <MX_TIM2_Init+0x94>)
 80044de:	f008 fe83 	bl	800d1e8 <HAL_TIM_ConfigClockSource>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80044e8:	f000 fa6e 	bl	80049c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ec:	2300      	movs	r3, #0
 80044ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044f4:	463b      	mov	r3, r7
 80044f6:	4619      	mov	r1, r3
 80044f8:	4805      	ldr	r0, [pc, #20]	; (8004510 <MX_TIM2_Init+0x94>)
 80044fa:	f009 f86d 	bl	800d5d8 <HAL_TIMEx_MasterConfigSynchronization>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004504:	f000 fa60 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20002754 	.word	0x20002754

08004514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800451a:	f107 0308 	add.w	r3, r7, #8
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	609a      	str	r2, [r3, #8]
 8004526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004528:	463b      	mov	r3, r7
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004530:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <MX_TIM3_Init+0x94>)
 8004532:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <MX_TIM3_Init+0x98>)
 8004534:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <MX_TIM3_Init+0x94>)
 8004538:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800453c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800453e:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <MX_TIM3_Init+0x94>)
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8004544:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <MX_TIM3_Init+0x94>)
 8004546:	f242 7210 	movw	r2, #10000	; 0x2710
 800454a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800454c:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <MX_TIM3_Init+0x94>)
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004552:	4b15      	ldr	r3, [pc, #84]	; (80045a8 <MX_TIM3_Init+0x94>)
 8004554:	2200      	movs	r2, #0
 8004556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004558:	4813      	ldr	r0, [pc, #76]	; (80045a8 <MX_TIM3_Init+0x94>)
 800455a:	f008 fc36 	bl	800cdca <HAL_TIM_Base_Init>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004564:	f000 fa30 	bl	80049c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800456c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800456e:	f107 0308 	add.w	r3, r7, #8
 8004572:	4619      	mov	r1, r3
 8004574:	480c      	ldr	r0, [pc, #48]	; (80045a8 <MX_TIM3_Init+0x94>)
 8004576:	f008 fe37 	bl	800d1e8 <HAL_TIM_ConfigClockSource>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004580:	f000 fa22 	bl	80049c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800458c:	463b      	mov	r3, r7
 800458e:	4619      	mov	r1, r3
 8004590:	4805      	ldr	r0, [pc, #20]	; (80045a8 <MX_TIM3_Init+0x94>)
 8004592:	f009 f821 	bl	800d5d8 <HAL_TIMEx_MasterConfigSynchronization>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800459c:	f000 fa14 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80045a0:	bf00      	nop
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	2000279c 	.word	0x2000279c
 80045ac:	40000400 	.word	0x40000400

080045b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045b4:	4b11      	ldr	r3, [pc, #68]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <MX_USART1_UART_Init+0x50>)
 80045b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80045c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045c2:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045d6:	220c      	movs	r2, #12
 80045d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045e6:	4805      	ldr	r0, [pc, #20]	; (80045fc <MX_USART1_UART_Init+0x4c>)
 80045e8:	f009 f874 	bl	800d6d4 <HAL_UART_Init>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045f2:	f000 f9e9 	bl	80049c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	200027e4 	.word	0x200027e4
 8004600:	40013800 	.word	0x40013800

08004604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800460a:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <MX_DMA_Init+0x70>)
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	4a19      	ldr	r2, [pc, #100]	; (8004674 <MX_DMA_Init+0x70>)
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	6153      	str	r3, [r2, #20]
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <MX_DMA_Init+0x70>)
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <MX_DMA_Init+0x70>)
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	4a13      	ldr	r2, [pc, #76]	; (8004674 <MX_DMA_Init+0x70>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6153      	str	r3, [r2, #20]
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <MX_DMA_Init+0x70>)
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800463a:	2200      	movs	r2, #0
 800463c:	2100      	movs	r1, #0
 800463e:	200d      	movs	r0, #13
 8004640:	f004 f943 	bl	80088ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004644:	200d      	movs	r0, #13
 8004646:	f004 f95c 	bl	8008902 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800464a:	2200      	movs	r2, #0
 800464c:	2100      	movs	r1, #0
 800464e:	200f      	movs	r0, #15
 8004650:	f004 f93b 	bl	80088ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004654:	200f      	movs	r0, #15
 8004656:	f004 f954 	bl	8008902 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	203b      	movs	r0, #59	; 0x3b
 8004660:	f004 f933 	bl	80088ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8004664:	203b      	movs	r0, #59	; 0x3b
 8004666:	f004 f94c 	bl	8008902 <HAL_NVIC_EnableIRQ>

}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000

08004678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467e:	f107 0318 	add.w	r3, r7, #24
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	609a      	str	r2, [r3, #8]
 800468a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800468c:	4b85      	ldr	r3, [pc, #532]	; (80048a4 <MX_GPIO_Init+0x22c>)
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	4a84      	ldr	r2, [pc, #528]	; (80048a4 <MX_GPIO_Init+0x22c>)
 8004692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004696:	6193      	str	r3, [r2, #24]
 8004698:	4b82      	ldr	r3, [pc, #520]	; (80048a4 <MX_GPIO_Init+0x22c>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a4:	4b7f      	ldr	r3, [pc, #508]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	4a7e      	ldr	r2, [pc, #504]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046aa:	f043 0310 	orr.w	r3, r3, #16
 80046ae:	6193      	str	r3, [r2, #24]
 80046b0:	4b7c      	ldr	r3, [pc, #496]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046bc:	4b79      	ldr	r3, [pc, #484]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	4a78      	ldr	r2, [pc, #480]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046c2:	f043 0304 	orr.w	r3, r3, #4
 80046c6:	6193      	str	r3, [r2, #24]
 80046c8:	4b76      	ldr	r3, [pc, #472]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d4:	4b73      	ldr	r3, [pc, #460]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	4a72      	ldr	r2, [pc, #456]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046da:	f043 0308 	orr.w	r3, r3, #8
 80046de:	6193      	str	r3, [r2, #24]
 80046e0:	4b70      	ldr	r3, [pc, #448]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046ec:	4b6d      	ldr	r3, [pc, #436]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	4a6c      	ldr	r2, [pc, #432]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046f2:	f043 0320 	orr.w	r3, r3, #32
 80046f6:	6193      	str	r3, [r2, #24]
 80046f8:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <MX_GPIO_Init+0x22c>)
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_touch_Pin|LCD_touchE0_Pin|LCDE1_Pin, GPIO_PIN_RESET);
 8004704:	2200      	movs	r2, #0
 8004706:	2107      	movs	r1, #7
 8004708:	4867      	ldr	r0, [pc, #412]	; (80048a8 <MX_GPIO_Init+0x230>)
 800470a:	f004 fe3a 	bl	8009382 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800470e:	2200      	movs	r2, #0
 8004710:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004714:	4865      	ldr	r0, [pc, #404]	; (80048ac <MX_GPIO_Init+0x234>)
 8004716:	f004 fe34 	bl	8009382 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green_LED_Pin|blue_LED_Pin|red_LED_Pin, GPIO_PIN_SET);
 800471a:	2201      	movs	r2, #1
 800471c:	2123      	movs	r1, #35	; 0x23
 800471e:	4864      	ldr	r0, [pc, #400]	; (80048b0 <MX_GPIO_Init+0x238>)
 8004720:	f004 fe2f 	bl	8009382 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800472a:	4862      	ldr	r0, [pc, #392]	; (80048b4 <MX_GPIO_Init+0x23c>)
 800472c:	f004 fe29 	bl	8009382 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004736:	485e      	ldr	r0, [pc, #376]	; (80048b0 <MX_GPIO_Init+0x238>)
 8004738:	f004 fe23 	bl	8009382 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_touch_Pin LCD_touchE0_Pin LCDE1_Pin */
  GPIO_InitStruct.Pin = LCD_touch_Pin|LCD_touchE0_Pin|LCDE1_Pin;
 800473c:	2307      	movs	r3, #7
 800473e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004740:	2301      	movs	r3, #1
 8004742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004748:	2303      	movs	r3, #3
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800474c:	f107 0318 	add.w	r3, r7, #24
 8004750:	4619      	mov	r1, r3
 8004752:	4855      	ldr	r0, [pc, #340]	; (80048a8 <MX_GPIO_Init+0x230>)
 8004754:	f004 fc6a 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_touchE3_Pin */
  GPIO_InitStruct.Pin = LCD_touchE3_Pin;
 8004758:	2308      	movs	r3, #8
 800475a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004760:	2301      	movs	r3, #1
 8004762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_touchE3_GPIO_Port, &GPIO_InitStruct);
 8004764:	f107 0318 	add.w	r3, r7, #24
 8004768:	4619      	mov	r1, r3
 800476a:	484f      	ldr	r0, [pc, #316]	; (80048a8 <MX_GPIO_Init+0x230>)
 800476c:	f004 fc5e 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_touchE4_Pin */
  GPIO_InitStruct.Pin = LCD_touchE4_Pin;
 8004770:	2310      	movs	r3, #16
 8004772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004774:	4b50      	ldr	r3, [pc, #320]	; (80048b8 <MX_GPIO_Init+0x240>)
 8004776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_touchE4_GPIO_Port, &GPIO_InitStruct);
 800477c:	f107 0318 	add.w	r3, r7, #24
 8004780:	4619      	mov	r1, r3
 8004782:	4849      	ldr	r0, [pc, #292]	; (80048a8 <MX_GPIO_Init+0x230>)
 8004784:	f004 fc52 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004788:	2360      	movs	r3, #96	; 0x60
 800478a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	2300      	movs	r3, #0
 8004792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004794:	f107 0318 	add.w	r3, r7, #24
 8004798:	4619      	mov	r1, r3
 800479a:	4843      	ldr	r0, [pc, #268]	; (80048a8 <MX_GPIO_Init+0x230>)
 800479c:	f004 fc46 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80047a0:	f242 0320 	movw	r3, #8224	; 0x2020
 80047a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ae:	f107 0318 	add.w	r3, r7, #24
 80047b2:	4619      	mov	r1, r3
 80047b4:	4841      	ldr	r0, [pc, #260]	; (80048bc <MX_GPIO_Init+0x244>)
 80047b6:	f004 fc39 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pin : K1_button_Pin */
  GPIO_InitStruct.Pin = K1_button_Pin;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047be:	4b3e      	ldr	r3, [pc, #248]	; (80048b8 <MX_GPIO_Init+0x240>)
 80047c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K1_button_GPIO_Port, &GPIO_InitStruct);
 80047c6:	f107 0318 	add.w	r3, r7, #24
 80047ca:	4619      	mov	r1, r3
 80047cc:	4837      	ldr	r0, [pc, #220]	; (80048ac <MX_GPIO_Init+0x234>)
 80047ce:	f004 fc2d 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pins : blue_button_Pin PA3 PA8 */
  GPIO_InitStruct.Pin = blue_button_Pin|GPIO_PIN_3|GPIO_PIN_8;
 80047d2:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80047d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e0:	f107 0318 	add.w	r3, r7, #24
 80047e4:	4619      	mov	r1, r3
 80047e6:	4831      	ldr	r0, [pc, #196]	; (80048ac <MX_GPIO_Init+0x234>)
 80047e8:	f004 fc20 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 80047ec:	f44f 53c2 	mov.w	r3, #6208	; 0x1840
 80047f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f2:	2301      	movs	r3, #1
 80047f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047fa:	2303      	movs	r3, #3
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fe:	f107 0318 	add.w	r3, r7, #24
 8004802:	4619      	mov	r1, r3
 8004804:	4829      	ldr	r0, [pc, #164]	; (80048ac <MX_GPIO_Init+0x234>)
 8004806:	f004 fc11 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pins : green_LED_Pin blue_LED_Pin red_LED_Pin */
  GPIO_InitStruct.Pin = green_LED_Pin|blue_LED_Pin|red_LED_Pin;
 800480a:	2323      	movs	r3, #35	; 0x23
 800480c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800480e:	2301      	movs	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004816:	2303      	movs	r3, #3
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481a:	f107 0318 	add.w	r3, r7, #24
 800481e:	4619      	mov	r1, r3
 8004820:	4823      	ldr	r0, [pc, #140]	; (80048b0 <MX_GPIO_Init+0x238>)
 8004822:	f004 fc03 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Pin PD13 */
  GPIO_InitStruct.Pin = LCD_Pin|GPIO_PIN_13;
 8004826:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800482a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800482c:	2301      	movs	r3, #1
 800482e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	2300      	movs	r3, #0
 8004832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004834:	2303      	movs	r3, #3
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004838:	f107 0318 	add.w	r3, r7, #24
 800483c:	4619      	mov	r1, r3
 800483e:	481d      	ldr	r0, [pc, #116]	; (80048b4 <MX_GPIO_Init+0x23c>)
 8004840:	f004 fbf4 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004852:	f107 0318 	add.w	r3, r7, #24
 8004856:	4619      	mov	r1, r3
 8004858:	4815      	ldr	r0, [pc, #84]	; (80048b0 <MX_GPIO_Init+0x238>)
 800485a:	f004 fbe7 	bl	800902c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800485e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004864:	2301      	movs	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486c:	2302      	movs	r3, #2
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004870:	f107 0318 	add.w	r3, r7, #24
 8004874:	4619      	mov	r1, r3
 8004876:	480e      	ldr	r0, [pc, #56]	; (80048b0 <MX_GPIO_Init+0x238>)
 8004878:	f004 fbd8 	bl	800902c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800487c:	2200      	movs	r2, #0
 800487e:	2100      	movs	r1, #0
 8004880:	2006      	movs	r0, #6
 8004882:	f004 f822 	bl	80088ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004886:	2006      	movs	r0, #6
 8004888:	f004 f83b 	bl	8008902 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800488c:	2200      	movs	r2, #0
 800488e:	2100      	movs	r1, #0
 8004890:	200a      	movs	r0, #10
 8004892:	f004 f81a 	bl	80088ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004896:	200a      	movs	r0, #10
 8004898:	f004 f833 	bl	8008902 <HAL_NVIC_EnableIRQ>

}
 800489c:	bf00      	nop
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40011800 	.word	0x40011800
 80048ac:	40010800 	.word	0x40010800
 80048b0:	40010c00 	.word	0x40010c00
 80048b4:	40011400 	.word	0x40011400
 80048b8:	10110000 	.word	0x10110000
 80048bc:	40011000 	.word	0x40011000

080048c0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80048c6:	1d3b      	adds	r3, r7, #4
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
 80048d4:	615a      	str	r2, [r3, #20]
 80048d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80048d8:	4b28      	ldr	r3, [pc, #160]	; (800497c <MX_FSMC_Init+0xbc>)
 80048da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80048de:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80048e0:	4b26      	ldr	r3, [pc, #152]	; (800497c <MX_FSMC_Init+0xbc>)
 80048e2:	4a27      	ldr	r2, [pc, #156]	; (8004980 <MX_FSMC_Init+0xc0>)
 80048e4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80048e6:	4b25      	ldr	r3, [pc, #148]	; (800497c <MX_FSMC_Init+0xbc>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80048ec:	4b23      	ldr	r3, [pc, #140]	; (800497c <MX_FSMC_Init+0xbc>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80048f2:	4b22      	ldr	r3, [pc, #136]	; (800497c <MX_FSMC_Init+0xbc>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80048f8:	4b20      	ldr	r3, [pc, #128]	; (800497c <MX_FSMC_Init+0xbc>)
 80048fa:	2210      	movs	r2, #16
 80048fc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80048fe:	4b1f      	ldr	r3, [pc, #124]	; (800497c <MX_FSMC_Init+0xbc>)
 8004900:	2200      	movs	r2, #0
 8004902:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004904:	4b1d      	ldr	r3, [pc, #116]	; (800497c <MX_FSMC_Init+0xbc>)
 8004906:	2200      	movs	r2, #0
 8004908:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800490a:	4b1c      	ldr	r3, [pc, #112]	; (800497c <MX_FSMC_Init+0xbc>)
 800490c:	2200      	movs	r2, #0
 800490e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004910:	4b1a      	ldr	r3, [pc, #104]	; (800497c <MX_FSMC_Init+0xbc>)
 8004912:	2200      	movs	r2, #0
 8004914:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004916:	4b19      	ldr	r3, [pc, #100]	; (800497c <MX_FSMC_Init+0xbc>)
 8004918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800491c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800491e:	4b17      	ldr	r3, [pc, #92]	; (800497c <MX_FSMC_Init+0xbc>)
 8004920:	2200      	movs	r2, #0
 8004922:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004924:	4b15      	ldr	r3, [pc, #84]	; (800497c <MX_FSMC_Init+0xbc>)
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <MX_FSMC_Init+0xbc>)
 800492c:	2200      	movs	r2, #0
 800492e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <MX_FSMC_Init+0xbc>)
 8004932:	2200      	movs	r2, #0
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004936:	230f      	movs	r3, #15
 8004938:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800493a:	230f      	movs	r3, #15
 800493c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800493e:	23ff      	movs	r3, #255	; 0xff
 8004940:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8004942:	230f      	movs	r3, #15
 8004944:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8004946:	2310      	movs	r3, #16
 8004948:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800494a:	2311      	movs	r3, #17
 800494c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	2200      	movs	r2, #0
 8004956:	4619      	mov	r1, r3
 8004958:	4808      	ldr	r0, [pc, #32]	; (800497c <MX_FSMC_Init+0xbc>)
 800495a:	f008 f9e9 	bl	800cd30 <HAL_SRAM_Init>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8004964:	f000 f830 	bl	80049c8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <MX_FSMC_Init+0xc4>)
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	4a05      	ldr	r2, [pc, #20]	; (8004984 <MX_FSMC_Init+0xc4>)
 800496e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004972:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004974:	bf00      	nop
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20002828 	.word	0x20002828
 8004980:	a0000104 	.word	0xa0000104
 8004984:	40010000 	.word	0x40010000

08004988 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){	//one second timer for timer3
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
	if (timer >= 0) {
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	db09      	blt.n	80049ac <HAL_TIM_PeriodElapsedCallback+0x24>
		print_digit(timer);
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f000 f819 	bl	80049d4 <print_digit>
		timer--;
 80049a2:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	4a05      	ldr	r2, [pc, #20]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80049aa:	6013      	str	r3, [r2, #0]
	}
	if (duration >= 0) duration++;
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80049b6:	701a      	strb	r2, [r3, #0]
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000004 	.word	0x20000004
 80049c4:	20000008 	.word	0x20000008

080049c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049cc:	b672      	cpsid	i
}
 80049ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049d0:	e7fe      	b.n	80049d0 <Error_Handler+0x8>
	...

080049d4 <print_digit>:
#define CS_SET() 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET)
#define CS_RESET() 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET)

extern volatile bool fail;

void print_digit(int number){
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	int ten_digit = number/10;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a24      	ldr	r2, [pc, #144]	; (8004a70 <print_digit+0x9c>)
 80049e0:	fb82 1203 	smull	r1, r2, r2, r3
 80049e4:	1092      	asrs	r2, r2, #2
 80049e6:	17db      	asrs	r3, r3, #31
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	613b      	str	r3, [r7, #16]
	int last_digit = number%10;
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <print_digit+0x9c>)
 80049f0:	fb83 1302 	smull	r1, r3, r3, r2
 80049f4:	1099      	asrs	r1, r3, #2
 80049f6:	17d3      	asrs	r3, r2, #31
 80049f8:	1ac9      	subs	r1, r1, r3
 80049fa:	460b      	mov	r3, r1
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	60fb      	str	r3, [r7, #12]

	//if ten digit == 0, print empty


	uint8_t col = 0x02;
 8004a06:	2302      	movs	r3, #2
 8004a08:	75fb      	strb	r3, [r7, #23]
	max7219_SendData(0x01, 0x00, 0x01, 0x00);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2001      	movs	r0, #1
 8004a12:	f000 f875 	bl	8004b00 <max7219_SendData>
	for (col = 2; col < 7; ++col){
 8004a16:	2302      	movs	r3, #2
 8004a18:	75fb      	strb	r3, [r7, #23]
 8004a1a:	e01b      	b.n	8004a54 <print_digit+0x80>
		max7219_SendData(col, font[last_digit][col-2], col, font[ten_digit][col-2]);
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
 8004a1e:	1e99      	subs	r1, r3, #2
 8004a20:	4814      	ldr	r0, [pc, #80]	; (8004a74 <print_digit+0xa0>)
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	4403      	add	r3, r0
 8004a2c:	440b      	add	r3, r1
 8004a2e:	781c      	ldrb	r4, [r3, #0]
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	1e99      	subs	r1, r3, #2
 8004a34:	480f      	ldr	r0, [pc, #60]	; (8004a74 <print_digit+0xa0>)
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	4403      	add	r3, r0
 8004a40:	440b      	add	r3, r1
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	7dfa      	ldrb	r2, [r7, #23]
 8004a46:	7df8      	ldrb	r0, [r7, #23]
 8004a48:	4621      	mov	r1, r4
 8004a4a:	f000 f859 	bl	8004b00 <max7219_SendData>
	for (col = 2; col < 7; ++col){
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	3301      	adds	r3, #1
 8004a52:	75fb      	strb	r3, [r7, #23]
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b06      	cmp	r3, #6
 8004a58:	d9e0      	bls.n	8004a1c <print_digit+0x48>
	}
	max7219_SendData(0x08, 0x00, 0x08, 0x00);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2008      	movs	r0, #8
 8004a62:	f000 f84d 	bl	8004b00 <max7219_SendData>


}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd90      	pop	{r4, r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	66666667 	.word	0x66666667
 8004a74:	2000000c 	.word	0x2000000c

08004a78 <max7219_Init>:


//datasheet - initialize the dot matrix
void max7219_Init()
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	max7219_SendData(0x09, 0x00, 0x09, 0x00);	//decode mode
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2209      	movs	r2, #9
 8004a80:	2100      	movs	r1, #0
 8004a82:	2009      	movs	r0, #9
 8004a84:	f000 f83c 	bl	8004b00 <max7219_SendData>
	max7219_SendData(0x0a, 0x01, 0x0a, 0x01);	//intensity
 8004a88:	2301      	movs	r3, #1
 8004a8a:	220a      	movs	r2, #10
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	200a      	movs	r0, #10
 8004a90:	f000 f836 	bl	8004b00 <max7219_SendData>
	max7219_SendData(0x0b, 0x07, 0x0b, 0x07);	//scan limit
 8004a94:	2307      	movs	r3, #7
 8004a96:	220b      	movs	r2, #11
 8004a98:	2107      	movs	r1, #7
 8004a9a:	200b      	movs	r0, #11
 8004a9c:	f000 f830 	bl	8004b00 <max7219_SendData>
	max7219_SendData(0x0c, 0x01, 0x0c, 0x01);	//display on
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	220c      	movs	r2, #12
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	200c      	movs	r0, #12
 8004aa8:	f000 f82a 	bl	8004b00 <max7219_SendData>
	max7219_SendData(0x0f, 0x00, 0x0f, 0x00);	//disable display test
 8004aac:	2300      	movs	r3, #0
 8004aae:	220f      	movs	r2, #15
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	200f      	movs	r0, #15
 8004ab4:	f000 f824 	bl	8004b00 <max7219_SendData>
	max7219_Clean();
 8004ab8:	f000 f802 	bl	8004ac0 <max7219_Clean>
}
 8004abc:	bf00      	nop
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <max7219_Clean>:

//clean up the dot matrix with no dot
void max7219_Clean()
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < 8; ++i)
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	e00e      	b.n	8004aee <max7219_Clean+0x2e>
	{
		max7219_SendData(i + 1, clear, i + 1, clear);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	b2d8      	uxtb	r0, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	78f9      	ldrb	r1, [r7, #3]
 8004ae4:	f000 f80c 	bl	8004b00 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3301      	adds	r3, #1
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b07      	cmp	r3, #7
 8004af2:	dded      	ble.n	8004ad0 <max7219_Clean+0x10>
	}
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <max7219_SendData>:

//send data to the two dot matrix
//addr1, data1 for the second matrix
//addr2, data2 for the first matrix
void max7219_SendData(uint8_t addr1, uint8_t data1, uint8_t addr2, uint8_t data2)
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4604      	mov	r4, r0
 8004b08:	4608      	mov	r0, r1
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4623      	mov	r3, r4
 8004b10:	71fb      	strb	r3, [r7, #7]
 8004b12:	4603      	mov	r3, r0
 8004b14:	71bb      	strb	r3, [r7, #6]
 8004b16:	460b      	mov	r3, r1
 8004b18:	717b      	strb	r3, [r7, #5]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	713b      	strb	r3, [r7, #4]
	CS_SET();
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2140      	movs	r1, #64	; 0x40
 8004b22:	4812      	ldr	r0, [pc, #72]	; (8004b6c <max7219_SendData+0x6c>)
 8004b24:	f004 fc2d 	bl	8009382 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, &addr1, 1);
 8004b28:	1dfb      	adds	r3, r7, #7
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4810      	ldr	r0, [pc, #64]	; (8004b70 <max7219_SendData+0x70>)
 8004b30:	f007 ff06 	bl	800c940 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi1, &data1, 1);
 8004b34:	1dbb      	adds	r3, r7, #6
 8004b36:	2201      	movs	r2, #1
 8004b38:	4619      	mov	r1, r3
 8004b3a:	480d      	ldr	r0, [pc, #52]	; (8004b70 <max7219_SendData+0x70>)
 8004b3c:	f007 ff00 	bl	800c940 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi1, &addr2, 1);
 8004b40:	1d7b      	adds	r3, r7, #5
 8004b42:	2201      	movs	r2, #1
 8004b44:	4619      	mov	r1, r3
 8004b46:	480a      	ldr	r0, [pc, #40]	; (8004b70 <max7219_SendData+0x70>)
 8004b48:	f007 fefa 	bl	800c940 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi1, &data2, 1);
 8004b4c:	1d3b      	adds	r3, r7, #4
 8004b4e:	2201      	movs	r2, #1
 8004b50:	4619      	mov	r1, r3
 8004b52:	4807      	ldr	r0, [pc, #28]	; (8004b70 <max7219_SendData+0x70>)
 8004b54:	f007 fef4 	bl	800c940 <HAL_SPI_Transmit_DMA>
	CS_RESET();
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2140      	movs	r1, #64	; 0x40
 8004b5c:	4803      	ldr	r0, [pc, #12]	; (8004b6c <max7219_SendData+0x6c>)
 8004b5e:	f004 fc10 	bl	8009382 <HAL_GPIO_WritePin>
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd90      	pop	{r4, r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40010800 	.word	0x40010800
 8004b70:	20002670 	.word	0x20002670

08004b74 <restart>:
uint8_t width_margin, height_margin, boundary, base_obs, rcstart, rsize, csize, level;	//easy-1 //medium-2 //diffcult-3
extern const uint8_t block_size;
extern uint8_t Rxstr;
extern UART_HandleTypeDef huart1;

void restart(){
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af02      	add	r7, sp, #8
	restart_flag = 0;	//test
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <restart+0x44>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
	duration = -1;
 8004b80:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <restart+0x48>)
 8004b82:	22ff      	movs	r2, #255	; 0xff
 8004b84:	701a      	strb	r2, [r3, #0]
	keys = 0;
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <restart+0x4c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8004b8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b90:	f002 ff56 	bl	8007a40 <HAL_Delay>
	free_maze_array();
 8004b94:	f000 fc08 	bl	80053a8 <free_maze_array>
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8004b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004ba2:	22f0      	movs	r2, #240	; 0xf0
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fe fc87 	bl	80034ba <LCD_Clear>
	maze_all();
 8004bac:	f000 f80a 	bl	8004bc4 <maze_all>
}
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20002880 	.word	0x20002880
 8004bbc:	20000008 	.word	0x20000008
 8004bc0:	2000287f 	.word	0x2000287f

08004bc4 <maze_all>:


void maze_all(){
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
	start_page();
 8004bc8:	f000 f80c 	bl	8004be4 <start_page>
	generate_whole_maze();
 8004bcc:	f000 f944 	bl	8004e58 <generate_whole_maze>
	LCD_Display();
 8004bd0:	f000 f8ca 	bl	8004d68 <LCD_Display>
	duration = 0;
 8004bd4:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <maze_all+0x1c>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000008 	.word	0x20000008

08004be4 <start_page>:



void start_page(){
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af02      	add	r7, sp, #8
	//start page - touch option
	level = 0;
 8004bea:	4b32      	ldr	r3, [pc, #200]	; (8004cb4 <start_page+0xd0>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
	LCD_Clear (0, 0, 240, 320, WHITE);
 8004bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004bfa:	22f0      	movs	r2, #240	; 0xf0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f7fe fc5b 	bl	80034ba <LCD_Clear>
    LCD_DrawString(0, 0, "Discover a treasure under a *flag* in an maze by finding three elusive *keys*. Are you up for the challenge?", BLUE);
 8004c04:	231f      	movs	r3, #31
 8004c06:	4a2c      	ldr	r2, [pc, #176]	; (8004cb8 <start_page+0xd4>)
 8004c08:	2100      	movs	r1, #0
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f7fe fcc6 	bl	800359c <LCD_DrawString>

    LCD_Clear ( 0, 100, 240, 50, RED );
 8004c10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2332      	movs	r3, #50	; 0x32
 8004c18:	22f0      	movs	r2, #240	; 0xf0
 8004c1a:	2164      	movs	r1, #100	; 0x64
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f7fe fc4c 	bl	80034ba <LCD_Clear>
    LCD_DrawString(110, 120, "easy", 0x03E0);
 8004c22:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004c26:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <start_page+0xd8>)
 8004c28:	2178      	movs	r1, #120	; 0x78
 8004c2a:	206e      	movs	r0, #110	; 0x6e
 8004c2c:	f7fe fcb6 	bl	800359c <LCD_DrawString>

    LCD_Clear ( 0, 180, 240, 50, GREEN );
 8004c30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	2332      	movs	r3, #50	; 0x32
 8004c38:	22f0      	movs	r2, #240	; 0xf0
 8004c3a:	21b4      	movs	r1, #180	; 0xb4
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f7fe fc3c 	bl	80034ba <LCD_Clear>
    LCD_DrawString(103, 200, "medium", 0x8008);
 8004c42:	f248 0308 	movw	r3, #32776	; 0x8008
 8004c46:	4a1e      	ldr	r2, [pc, #120]	; (8004cc0 <start_page+0xdc>)
 8004c48:	21c8      	movs	r1, #200	; 0xc8
 8004c4a:	2067      	movs	r0, #103	; 0x67
 8004c4c:	f7fe fca6 	bl	800359c <LCD_DrawString>

    LCD_Clear ( 0, 260, 240, 50, YELLOW );
 8004c50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2332      	movs	r3, #50	; 0x32
 8004c58:	22f0      	movs	r2, #240	; 0xf0
 8004c5a:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004c5e:	2000      	movs	r0, #0
 8004c60:	f7fe fc2b 	bl	80034ba <LCD_Clear>
    LCD_DrawString(110, 280, "hard", 0xF800);
 8004c64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c68:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <start_page+0xe0>)
 8004c6a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004c6e:	206e      	movs	r0, #110	; 0x6e
 8004c70:	f7fe fc94 	bl	800359c <LCD_DrawString>

    while (level == 0){	//loop until a level is chosen
 8004c74:	e00c      	b.n	8004c90 <start_page+0xac>
    	 if ( ucXPT2046_TouchFlag == 1 ){
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <start_page+0xe4>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d104      	bne.n	8004c8a <start_page+0xa6>
    		Check_touchkey();
 8004c80:	f002 fdd4 	bl	800782c <Check_touchkey>
    		ucXPT2046_TouchFlag = 0;
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <start_page+0xe4>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	701a      	strb	r2, [r3, #0]
    	 }
    	HAL_Delay(50);
 8004c8a:	2032      	movs	r0, #50	; 0x32
 8004c8c:	f002 fed8 	bl	8007a40 <HAL_Delay>
    while (level == 0){	//loop until a level is chosen
 8004c90:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <start_page+0xd0>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ee      	beq.n	8004c76 <start_page+0x92>
    }

    LCD_Clear (0, 0, 240, 320, WHITE);
 8004c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004ca2:	22f0      	movs	r2, #240	; 0xf0
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7fe fc07 	bl	80034ba <LCD_Clear>
				else{ base_obs = Rxstr -'0'; break; }
			}
		}
    }
    LCD_Clear (0, 0, 240, 320, WHITE);*/
}
 8004cac:	bf00      	nop
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20002893 	.word	0x20002893
 8004cb8:	0801577c 	.word	0x0801577c
 8004cbc:	080157ec 	.word	0x080157ec
 8004cc0:	080157f4 	.word	0x080157f4
 8004cc4:	080157fc 	.word	0x080157fc
 8004cc8:	20006235 	.word	0x20006235

08004ccc <adjust_level>:

/*
 * adjust the parameter for different level
 * num_obstacles, hearts, row&col range
 */
void adjust_level(){
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
	switch(level){
 8004cd0:	4b1f      	ldr	r3, [pc, #124]	; (8004d50 <adjust_level+0x84>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d026      	beq.n	8004d26 <adjust_level+0x5a>
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	dc34      	bgt.n	8004d46 <adjust_level+0x7a>
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d002      	beq.n	8004ce6 <adjust_level+0x1a>
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d010      	beq.n	8004d06 <adjust_level+0x3a>
		rcstart = 13;
		rsize = 5;
		csize = 3;
		break;

	default: break; //error
 8004ce4:	e02f      	b.n	8004d46 <adjust_level+0x7a>
		hearts = 3;
 8004ce6:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <adjust_level+0x88>)
 8004ce8:	2203      	movs	r2, #3
 8004cea:	701a      	strb	r2, [r3, #0]
		base_obs = 4;
 8004cec:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <adjust_level+0x8c>)
 8004cee:	2204      	movs	r2, #4
 8004cf0:	701a      	strb	r2, [r3, #0]
		rcstart = 9;
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <adjust_level+0x90>)
 8004cf4:	2209      	movs	r2, #9
 8004cf6:	701a      	strb	r2, [r3, #0]
		rsize = 3;
 8004cf8:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <adjust_level+0x94>)
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	701a      	strb	r2, [r3, #0]
		csize = 3;
 8004cfe:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <adjust_level+0x98>)
 8004d00:	2203      	movs	r2, #3
 8004d02:	701a      	strb	r2, [r3, #0]
		break;
 8004d04:	e020      	b.n	8004d48 <adjust_level+0x7c>
		hearts = 3;
 8004d06:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <adjust_level+0x88>)
 8004d08:	2203      	movs	r2, #3
 8004d0a:	701a      	strb	r2, [r3, #0]
		base_obs = 7;
 8004d0c:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <adjust_level+0x8c>)
 8004d0e:	2207      	movs	r2, #7
 8004d10:	701a      	strb	r2, [r3, #0]
		rcstart = 11;
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <adjust_level+0x90>)
 8004d14:	220b      	movs	r2, #11
 8004d16:	701a      	strb	r2, [r3, #0]
		rsize = 3;
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <adjust_level+0x94>)
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	701a      	strb	r2, [r3, #0]
		csize = 3;
 8004d1e:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <adjust_level+0x98>)
 8004d20:	2203      	movs	r2, #3
 8004d22:	701a      	strb	r2, [r3, #0]
		break;
 8004d24:	e010      	b.n	8004d48 <adjust_level+0x7c>
		hearts = 2;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <adjust_level+0x88>)
 8004d28:	2202      	movs	r2, #2
 8004d2a:	701a      	strb	r2, [r3, #0]
		base_obs = 9;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <adjust_level+0x8c>)
 8004d2e:	2209      	movs	r2, #9
 8004d30:	701a      	strb	r2, [r3, #0]
		rcstart = 13;
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <adjust_level+0x90>)
 8004d34:	220d      	movs	r2, #13
 8004d36:	701a      	strb	r2, [r3, #0]
		rsize = 5;
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <adjust_level+0x94>)
 8004d3a:	2205      	movs	r2, #5
 8004d3c:	701a      	strb	r2, [r3, #0]
		csize = 3;
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <adjust_level+0x98>)
 8004d40:	2203      	movs	r2, #3
 8004d42:	701a      	strb	r2, [r3, #0]
		break;
 8004d44:	e000      	b.n	8004d48 <adjust_level+0x7c>
	default: break; //error
 8004d46:	bf00      	nop
	}
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr
 8004d50:	20002893 	.word	0x20002893
 8004d54:	2000287e 	.word	0x2000287e
 8004d58:	2000288f 	.word	0x2000288f
 8004d5c:	20002890 	.word	0x20002890
 8004d60:	20002891 	.word	0x20002891
 8004d64:	20002892 	.word	0x20002892

08004d68 <LCD_Display>:

void LCD_Display(){	//display
 8004d68:	b5b0      	push	{r4, r5, r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af02      	add	r7, sp, #8

	for (int i = 0; i<keys; i++){	//display key
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	e00c      	b.n	8004d8e <LCD_Display+0x26>
			  LCD_Drawkey(10, 15+i*32);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	015b      	lsls	r3, r3, #5
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	330f      	adds	r3, #15
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	4619      	mov	r1, r3
 8004d82:	200a      	movs	r0, #10
 8004d84:	f7fe ffae 	bl	8003ce4 <LCD_Drawkey>
	for (int i = 0; i<keys; i++){	//display key
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <LCD_Display+0xd0>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4293      	cmp	r3, r2
 8004d98:	dbec      	blt.n	8004d74 <LCD_Display+0xc>
	}

	for (int i = 0; i<hearts; i++){	//display heart
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	603b      	str	r3, [r7, #0]
 8004d9e:	e00c      	b.n	8004dba <LCD_Display+0x52>
	  LCD_Drawheart(10, 130+i*32);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	015b      	lsls	r3, r3, #5
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3382      	adds	r3, #130	; 0x82
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	4619      	mov	r1, r3
 8004dae:	200a      	movs	r0, #10
 8004db0:	f7ff f800 	bl	8003db4 <LCD_Drawheart>
	for (int i = 0; i<hearts; i++){	//display heart
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	3301      	adds	r3, #1
 8004db8:	603b      	str	r3, [r7, #0]
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <LCD_Display+0xd4>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	dbec      	blt.n	8004da0 <LCD_Display+0x38>
	}

	//draw the maze
	width_margin = (240-columns*block_size)/2;	//decide the start position
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <LCD_Display+0xd8>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <LCD_Display+0xdc>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	fb02 f303 	mul.w	r3, r2, r3
 8004dd4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8004dd8:	0fda      	lsrs	r2, r3, #31
 8004dda:	4413      	add	r3, r2
 8004ddc:	105b      	asrs	r3, r3, #1
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <LCD_Display+0xe0>)
 8004de2:	701a      	strb	r2, [r3, #0]
	height_margin = (280 - rows*block_size)/2 + 40;
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <LCD_Display+0xe4>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <LCD_Display+0xdc>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 8004df6:	0fda      	lsrs	r2, r3, #31
 8004df8:	4413      	add	r3, r2
 8004dfa:	105b      	asrs	r3, r3, #1
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	3328      	adds	r3, #40	; 0x28
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <LCD_Display+0xe8>)
 8004e04:	701a      	strb	r2, [r3, #0]
	LCD_maze(maze, width_margin, height_margin, block_size, rows, columns);
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <LCD_Display+0xec>)
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <LCD_Display+0xe0>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b299      	uxth	r1, r3
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <LCD_Display+0xe8>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	b29c      	uxth	r4, r3
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <LCD_Display+0xdc>)
 8004e18:	781d      	ldrb	r5, [r3, #0]
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <LCD_Display+0xe4>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <LCD_Display+0xd8>)
 8004e20:	7812      	ldrb	r2, [r2, #0]
 8004e22:	9201      	str	r2, [sp, #4]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	462b      	mov	r3, r5
 8004e28:	4622      	mov	r2, r4
 8004e2a:	f7fe fc5f 	bl	80036ec <LCD_maze>

}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bdb0      	pop	{r4, r5, r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000287f 	.word	0x2000287f
 8004e3c:	2000287e 	.word	0x2000287e
 8004e40:	20002875 	.word	0x20002875
 8004e44:	08015f90 	.word	0x08015f90
 8004e48:	2000288c 	.word	0x2000288c
 8004e4c:	20002874 	.word	0x20002874
 8004e50:	2000288d 	.word	0x2000288d
 8004e54:	20002870 	.word	0x20002870

08004e58 <generate_whole_maze>:


void generate_whole_maze(){
 8004e58:	b590      	push	{r4, r7, lr}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
	//random the row and col, start_x, start_y, end_x, end_y
	  adjust_level();
 8004e5e:	f7ff ff35 	bl	8004ccc <adjust_level>
	  get_random_row_col();
 8004e62:	f000 f8df 	bl	8005024 <get_random_row_col>
	  get_random_start();
 8004e66:	f000 f923 	bl	80050b0 <get_random_start>

	  // allocatae memory for the maze array (need to do in main)
	  maze = (uint8_t **)malloc(rows * sizeof(uint8_t *));
 8004e6a:	4b24      	ldr	r3, [pc, #144]	; (8004efc <generate_whole_maze+0xa4>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f00d fac5 	bl	8012400 <malloc>
 8004e76:	4603      	mov	r3, r0
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <generate_whole_maze+0xa8>)
 8004e7c:	601a      	str	r2, [r3, #0]
	  // Allocate memory for the columns of each row
	  for (int i = 0; i < rows; i++) {
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	e00f      	b.n	8004ea4 <generate_whole_maze+0x4c>
		maze[i] = (uint8_t *)malloc(columns * sizeof(uint8_t));
 8004e84:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <generate_whole_maze+0xac>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <generate_whole_maze+0xa8>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	18d4      	adds	r4, r2, r3
 8004e94:	4608      	mov	r0, r1
 8004e96:	f00d fab3 	bl	8012400 <malloc>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < rows; i++) {
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	607b      	str	r3, [r7, #4]
 8004ea4:	4b15      	ldr	r3, [pc, #84]	; (8004efc <generate_whole_maze+0xa4>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4293      	cmp	r3, r2
 8004eae:	dbe9      	blt.n	8004e84 <generate_whole_maze+0x2c>
	  }

	  init_maze_array();  // init maze with all wall
 8004eb0:	f000 fa48 	bl	8005344 <init_maze_array>
	  generate_maze(start_x, start_y);    // have the array with path
 8004eb4:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <generate_whole_maze+0xb0>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <generate_whole_maze+0xb4>)
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 faa4 	bl	800540c <generate_maze>
	  get_random_end();
 8004ec4:	f000 f98a 	bl	80051dc <get_random_end>

	  add_start_end_maze(); //add the start, end position into the array
 8004ec8:	f000 fb66 	bl	8005598 <add_start_end_maze>
	  add_key_maze();     // add the three keys in the array
 8004ecc:	f000 fb8c 	bl	80055e8 <add_key_maze>
	  add_obstacle_maze();    // add obstacle into array ***
 8004ed0:	f000 fc04 	bl	80056dc <add_obstacle_maze>

	  current_x = start_x;
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <generate_whole_maze+0xb0>)
 8004ed6:	781a      	ldrb	r2, [r3, #0]
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <generate_whole_maze+0xb8>)
 8004eda:	701a      	strb	r2, [r3, #0]
	  current_y = start_y;
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <generate_whole_maze+0xb4>)
 8004ede:	781a      	ldrb	r2, [r3, #0]
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <generate_whole_maze+0xbc>)
 8004ee2:	701a      	strb	r2, [r3, #0]
	  next_x = start_x;
 8004ee4:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <generate_whole_maze+0xb0>)
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <generate_whole_maze+0xc0>)
 8004eea:	701a      	strb	r2, [r3, #0]
	  next_y = start_y;
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <generate_whole_maze+0xb4>)
 8004eee:	781a      	ldrb	r2, [r3, #0]
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <generate_whole_maze+0xc4>)
 8004ef2:	701a      	strb	r2, [r3, #0]

}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd90      	pop	{r4, r7, pc}
 8004efc:	20002874 	.word	0x20002874
 8004f00:	20002870 	.word	0x20002870
 8004f04:	20002875 	.word	0x20002875
 8004f08:	20002876 	.word	0x20002876
 8004f0c:	20002878 	.word	0x20002878
 8004f10:	2000287a 	.word	0x2000287a
 8004f14:	2000287b 	.word	0x2000287b
 8004f18:	2000287c 	.word	0x2000287c
 8004f1c:	2000287d 	.word	0x2000287d

08004f20 <setRandomSeed>:

void setRandomSeed() {
 8004f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f24:	b092      	sub	sp, #72	; 0x48
 8004f26:	af00      	add	r7, sp, #0
    struct timeval tv;
    gettimeofday(&tv, NULL);
 8004f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f00e f870 	bl	8013014 <gettimeofday>
    long long seed = tv.tv_sec * 1000LL + tv.tv_usec / 1000;
 8004f34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f38:	4622      	mov	r2, r4
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	f04f 0000 	mov.w	r0, #0
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	0159      	lsls	r1, r3, #5
 8004f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f4a:	0150      	lsls	r0, r2, #5
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	ebb2 0804 	subs.w	r8, r2, r4
 8004f54:	eb63 0905 	sbc.w	r9, r3, r5
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8004f64:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8004f68:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004f6c:	4690      	mov	r8, r2
 8004f6e:	4699      	mov	r9, r3
 8004f70:	eb18 0a04 	adds.w	sl, r8, r4
 8004f74:	eb49 0b05 	adc.w	fp, r9, r5
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8c:	4692      	mov	sl, r2
 8004f8e:	469b      	mov	fp, r3
 8004f90:	4654      	mov	r4, sl
 8004f92:	465d      	mov	r5, fp
 8004f94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f96:	4b22      	ldr	r3, [pc, #136]	; (8005020 <setRandomSeed+0x100>)
 8004f98:	fb83 2301 	smull	r2, r3, r3, r1
 8004f9c:	119a      	asrs	r2, r3, #6
 8004f9e:	17cb      	asrs	r3, r1, #31
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	17da      	asrs	r2, r3, #31
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004fac:	460b      	mov	r3, r1
 8004fae:	18e3      	adds	r3, r4, r3
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	eb45 0303 	adc.w	r3, r5, r3
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004fbe:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    seed ^= getpid();
 8004fc2:	f00e f821 	bl	8013008 <getpid>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	17da      	asrs	r2, r3, #31
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	627a      	str	r2, [r7, #36]	; 0x24
 8004fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4054      	eors	r4, r2
 8004fda:	60bc      	str	r4, [r7, #8]
 8004fdc:	4059      	eors	r1, r3
 8004fde:	60f9      	str	r1, [r7, #12]
 8004fe0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004fe4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    seed ^= (uintptr_t)&tv;
 8004fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fec:	2200      	movs	r2, #0
 8004fee:	61bb      	str	r3, [r7, #24]
 8004ff0:	61fa      	str	r2, [r7, #28]
 8004ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ff6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4054      	eors	r4, r2
 8004ffe:	603c      	str	r4, [r7, #0]
 8005000:	4059      	eors	r1, r3
 8005002:	6079      	str	r1, [r7, #4]
 8005004:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005008:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    srand(seed);
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	4618      	mov	r0, r3
 8005010:	f00d ff4a 	bl	8012ea8 <srand>
}
 8005014:	bf00      	nop
 8005016:	3748      	adds	r7, #72	; 0x48
 8005018:	46bd      	mov	sp, r7
 800501a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800501e:	bf00      	nop
 8005020:	10624dd3 	.word	0x10624dd3

08005024 <get_random_row_col>:

/*
 * set the random height, width for the maze (17,19,21,23)
 */
void get_random_row_col(){
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
    // get the random row and column size of maze array
    rows = 0;
 8005028:	4b1c      	ldr	r3, [pc, #112]	; (800509c <get_random_row_col+0x78>)
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
    columns = 0;
 800502e:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <get_random_row_col+0x7c>)
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]
    do {    // for row size
        rows = rcstart + (rand() % rsize);  //random
 8005034:	f00d ff66 	bl	8012f04 <rand>
 8005038:	4603      	mov	r3, r0
 800503a:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <get_random_row_col+0x80>)
 800503c:	7812      	ldrb	r2, [r2, #0]
 800503e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005042:	fb01 f202 	mul.w	r2, r1, r2
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	b2da      	uxtb	r2, r3
 800504a:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <get_random_row_col+0x84>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	4413      	add	r3, r2
 8005050:	b2da      	uxtb	r2, r3
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <get_random_row_col+0x78>)
 8005054:	701a      	strb	r2, [r3, #0]
    } while (rows % 2 == 0);
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <get_random_row_col+0x78>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0e7      	beq.n	8005034 <get_random_row_col+0x10>

    do {    // for col size
        columns = rcstart + (rand() % csize);  //random
 8005064:	f00d ff4e 	bl	8012f04 <rand>
 8005068:	4603      	mov	r3, r0
 800506a:	4a10      	ldr	r2, [pc, #64]	; (80050ac <get_random_row_col+0x88>)
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005072:	fb01 f202 	mul.w	r2, r1, r2
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	b2da      	uxtb	r2, r3
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <get_random_row_col+0x84>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	4413      	add	r3, r2
 8005080:	b2da      	uxtb	r2, r3
 8005082:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <get_random_row_col+0x7c>)
 8005084:	701a      	strb	r2, [r3, #0]
    } while (columns % 2 == 0);
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <get_random_row_col+0x7c>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0e7      	beq.n	8005064 <get_random_row_col+0x40>
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20002874 	.word	0x20002874
 80050a0:	20002875 	.word	0x20002875
 80050a4:	20002891 	.word	0x20002891
 80050a8:	20002890 	.word	0x20002890
 80050ac:	20002892 	.word	0x20002892

080050b0 <get_random_start>:

/*
 * randomly set a start position on boundary
 * end point should opposite to the start point
 */
void get_random_start(){
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
    // get the random value for start and end position
    // start and end - should be in opposite boundary
    boundary = rand() % 4;  // Randomly choose one of the four boundaries
 80050b4:	f00d ff26 	bl	8012f04 <rand>
 80050b8:	4603      	mov	r3, r0
 80050ba:	425a      	negs	r2, r3
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	f002 0203 	and.w	r2, r2, #3
 80050c4:	bf58      	it	pl
 80050c6:	4253      	negpl	r3, r2
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <get_random_start+0x118>)
 80050cc:	701a      	strb	r2, [r3, #0]
    switch (boundary) {
 80050ce:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <get_random_start+0x118>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d874      	bhi.n	80051c0 <get_random_start+0x110>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <get_random_start+0x2c>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	0800511f 	.word	0x0800511f
 80050e4:	08005157 	.word	0x08005157
 80050e8:	08005189 	.word	0x08005189
        case 0:  // Top boundary
            start_x = 1;
 80050ec:	4b37      	ldr	r3, [pc, #220]	; (80051cc <get_random_start+0x11c>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]
            start_y = (rand() % ((columns - 1) / 2)) * 2 + 1;  // odd from 1 to col-2
 80050f2:	f00d ff07 	bl	8012f04 <rand>
 80050f6:	4602      	mov	r2, r0
 80050f8:	4b35      	ldr	r3, [pc, #212]	; (80051d0 <get_random_start+0x120>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	0fd9      	lsrs	r1, r3, #31
 8005100:	440b      	add	r3, r1
 8005102:	105b      	asrs	r3, r3, #1
 8005104:	fb92 f1f3 	sdiv	r1, r2, r3
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	3301      	adds	r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	4b2e      	ldr	r3, [pc, #184]	; (80051d4 <get_random_start+0x124>)
 800511a:	701a      	strb	r2, [r3, #0]
            break;
 800511c:	e051      	b.n	80051c2 <get_random_start+0x112>
        case 1:  // Bottom boundary
            start_x = rows - 2;
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <get_random_start+0x128>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	3b02      	subs	r3, #2
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4b29      	ldr	r3, [pc, #164]	; (80051cc <get_random_start+0x11c>)
 8005128:	701a      	strb	r2, [r3, #0]
            start_y = (rand() % ((columns - 1) / 2)) * 2 + 1;  // odd from1 to col-2
 800512a:	f00d feeb 	bl	8012f04 <rand>
 800512e:	4602      	mov	r2, r0
 8005130:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <get_random_start+0x120>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	3b01      	subs	r3, #1
 8005136:	0fd9      	lsrs	r1, r3, #31
 8005138:	440b      	add	r3, r1
 800513a:	105b      	asrs	r3, r3, #1
 800513c:	fb92 f1f3 	sdiv	r1, r2, r3
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	3301      	adds	r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <get_random_start+0x124>)
 8005152:	701a      	strb	r2, [r3, #0]
            break;
 8005154:	e035      	b.n	80051c2 <get_random_start+0x112>
        case 2:  // Left boundary
            start_x = (rand() % ((rows - 1) / 2)) * 2 + 1;  // odd from 1 to row-2
 8005156:	f00d fed5 	bl	8012f04 <rand>
 800515a:	4602      	mov	r2, r0
 800515c:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <get_random_start+0x128>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	3b01      	subs	r3, #1
 8005162:	0fd9      	lsrs	r1, r3, #31
 8005164:	440b      	add	r3, r1
 8005166:	105b      	asrs	r3, r3, #1
 8005168:	fb92 f1f3 	sdiv	r1, r2, r3
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	b2db      	uxtb	r3, r3
 8005178:	3301      	adds	r3, #1
 800517a:	b2da      	uxtb	r2, r3
 800517c:	4b13      	ldr	r3, [pc, #76]	; (80051cc <get_random_start+0x11c>)
 800517e:	701a      	strb	r2, [r3, #0]
            start_y = 1;
 8005180:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <get_random_start+0x124>)
 8005182:	2201      	movs	r2, #1
 8005184:	701a      	strb	r2, [r3, #0]
            break;
 8005186:	e01c      	b.n	80051c2 <get_random_start+0x112>
        case 3:  // Right boundary
            start_x = (rand() % ((rows - 1) / 2)) * 2 + 1;  // odd from 1 to row-2
 8005188:	f00d febc 	bl	8012f04 <rand>
 800518c:	4602      	mov	r2, r0
 800518e:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <get_random_start+0x128>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	3b01      	subs	r3, #1
 8005194:	0fd9      	lsrs	r1, r3, #31
 8005196:	440b      	add	r3, r1
 8005198:	105b      	asrs	r3, r3, #1
 800519a:	fb92 f1f3 	sdiv	r1, r2, r3
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	3301      	adds	r3, #1
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <get_random_start+0x11c>)
 80051b0:	701a      	strb	r2, [r3, #0]
            start_y = columns - 2;
 80051b2:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <get_random_start+0x120>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	3b02      	subs	r3, #2
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <get_random_start+0x124>)
 80051bc:	701a      	strb	r2, [r3, #0]
            break;
 80051be:	e000      	b.n	80051c2 <get_random_start+0x112>
        default:
            break;
 80051c0:	bf00      	nop
    }
}
 80051c2:	bf00      	nop
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2000288e 	.word	0x2000288e
 80051cc:	20002876 	.word	0x20002876
 80051d0:	20002875 	.word	0x20002875
 80051d4:	20002878 	.word	0x20002878
 80051d8:	20002874 	.word	0x20002874

080051dc <get_random_end>:


/*
 * randomly set a end position/opposite to start
 */
void get_random_end(){
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
    switch (boundary) {
 80051e0:	4b52      	ldr	r3, [pc, #328]	; (800532c <get_random_end+0x150>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	f200 809d 	bhi.w	8005324 <get_random_end+0x148>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <get_random_end+0x14>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005201 	.word	0x08005201
 80051f4:	0800524d 	.word	0x0800524d
 80051f8:	08005293 	.word	0x08005293
 80051fc:	080052df 	.word	0x080052df
        case 0:  // start in Top boundary
            while(1){
                end_x = rows - 2;
 8005200:	4b4b      	ldr	r3, [pc, #300]	; (8005330 <get_random_end+0x154>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	3b02      	subs	r3, #2
 8005206:	b2da      	uxtb	r2, r3
 8005208:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <get_random_end+0x158>)
 800520a:	701a      	strb	r2, [r3, #0]
                end_y = rand() % (columns - 2) + 1;    // 1 to col-2
 800520c:	f00d fe7a 	bl	8012f04 <rand>
 8005210:	4602      	mov	r2, r0
 8005212:	4b49      	ldr	r3, [pc, #292]	; (8005338 <get_random_end+0x15c>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	3b02      	subs	r3, #2
 8005218:	fb92 f1f3 	sdiv	r1, r2, r3
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	b2db      	uxtb	r3, r3
 8005224:	3301      	adds	r3, #1
 8005226:	b2da      	uxtb	r2, r3
 8005228:	4b44      	ldr	r3, [pc, #272]	; (800533c <get_random_end+0x160>)
 800522a:	701a      	strb	r2, [r3, #0]
                if(maze[end_x][end_y] == 0){
 800522c:	4b44      	ldr	r3, [pc, #272]	; (8005340 <get_random_end+0x164>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4b40      	ldr	r3, [pc, #256]	; (8005334 <get_random_end+0x158>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a40      	ldr	r2, [pc, #256]	; (800533c <get_random_end+0x160>)
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	4413      	add	r3, r2
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d000      	beq.n	8005248 <get_random_end+0x6c>
                end_x = rows - 2;
 8005246:	e7db      	b.n	8005200 <get_random_end+0x24>
                    //end_x += 1;
                    break;
 8005248:	bf00      	nop
                }
            }
            break;
 800524a:	e06c      	b.n	8005326 <get_random_end+0x14a>
        case 1:  // start in Bottom boundary
            while(1){
                end_x = 1;
 800524c:	4b39      	ldr	r3, [pc, #228]	; (8005334 <get_random_end+0x158>)
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
                end_y = rand() % (columns - 2) + 1;    // 1 ro col-2
 8005252:	f00d fe57 	bl	8012f04 <rand>
 8005256:	4602      	mov	r2, r0
 8005258:	4b37      	ldr	r3, [pc, #220]	; (8005338 <get_random_end+0x15c>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	3b02      	subs	r3, #2
 800525e:	fb92 f1f3 	sdiv	r1, r2, r3
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	b2db      	uxtb	r3, r3
 800526a:	3301      	adds	r3, #1
 800526c:	b2da      	uxtb	r2, r3
 800526e:	4b33      	ldr	r3, [pc, #204]	; (800533c <get_random_end+0x160>)
 8005270:	701a      	strb	r2, [r3, #0]
                if(maze[end_x][end_y] == 0){
 8005272:	4b33      	ldr	r3, [pc, #204]	; (8005340 <get_random_end+0x164>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b2f      	ldr	r3, [pc, #188]	; (8005334 <get_random_end+0x158>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2e      	ldr	r2, [pc, #184]	; (800533c <get_random_end+0x160>)
 8005282:	7812      	ldrb	r2, [r2, #0]
 8005284:	4413      	add	r3, r2
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d000      	beq.n	800528e <get_random_end+0xb2>
                end_x = 1;
 800528c:	e7de      	b.n	800524c <get_random_end+0x70>
                    //end_x -= 1;
                    break;
 800528e:	bf00      	nop
                }
            }
            break;
 8005290:	e049      	b.n	8005326 <get_random_end+0x14a>
        case 2:  // start in Left boundary
            while(1){
                end_x = rand() % (rows - 2) + 1;    // 1 to row-2
 8005292:	f00d fe37 	bl	8012f04 <rand>
 8005296:	4602      	mov	r2, r0
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <get_random_end+0x154>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	3b02      	subs	r3, #2
 800529e:	fb92 f1f3 	sdiv	r1, r2, r3
 80052a2:	fb01 f303 	mul.w	r3, r1, r3
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	3301      	adds	r3, #1
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	4b21      	ldr	r3, [pc, #132]	; (8005334 <get_random_end+0x158>)
 80052b0:	701a      	strb	r2, [r3, #0]
                end_y = columns - 2;
 80052b2:	4b21      	ldr	r3, [pc, #132]	; (8005338 <get_random_end+0x15c>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	3b02      	subs	r3, #2
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <get_random_end+0x160>)
 80052bc:	701a      	strb	r2, [r3, #0]
                if(maze[end_x][end_y] == 0){
 80052be:	4b20      	ldr	r3, [pc, #128]	; (8005340 <get_random_end+0x164>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <get_random_end+0x158>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1b      	ldr	r2, [pc, #108]	; (800533c <get_random_end+0x160>)
 80052ce:	7812      	ldrb	r2, [r2, #0]
 80052d0:	4413      	add	r3, r2
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d000      	beq.n	80052da <get_random_end+0xfe>
                end_x = rand() % (rows - 2) + 1;    // 1 to row-2
 80052d8:	e7db      	b.n	8005292 <get_random_end+0xb6>
                    //end_y += 1;
                    break;
 80052da:	bf00      	nop
                }
            }
            break;
 80052dc:	e023      	b.n	8005326 <get_random_end+0x14a>
        case 3:  // Right boundary
            while(1){
                end_x = rand() % (rows - 2) + 1;    // 1 to row-2
 80052de:	f00d fe11 	bl	8012f04 <rand>
 80052e2:	4602      	mov	r2, r0
 80052e4:	4b12      	ldr	r3, [pc, #72]	; (8005330 <get_random_end+0x154>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	3b02      	subs	r3, #2
 80052ea:	fb92 f1f3 	sdiv	r1, r2, r3
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	3301      	adds	r3, #1
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <get_random_end+0x158>)
 80052fc:	701a      	strb	r2, [r3, #0]
                end_y = 1;
 80052fe:	4b0f      	ldr	r3, [pc, #60]	; (800533c <get_random_end+0x160>)
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
                if(maze[end_x][end_y] == 0){
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <get_random_end+0x164>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <get_random_end+0x158>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <get_random_end+0x160>)
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	4413      	add	r3, r2
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d000      	beq.n	8005320 <get_random_end+0x144>
                end_x = rand() % (rows - 2) + 1;    // 1 to row-2
 800531e:	e7de      	b.n	80052de <get_random_end+0x102>
                    //end_x -= 1;
                    break;
 8005320:	bf00      	nop
                }
            }
            break;
 8005322:	e000      	b.n	8005326 <get_random_end+0x14a>
        default:
            break;
 8005324:	bf00      	nop
    }
}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	2000288e 	.word	0x2000288e
 8005330:	20002874 	.word	0x20002874
 8005334:	20002877 	.word	0x20002877
 8005338:	20002875 	.word	0x20002875
 800533c:	20002879 	.word	0x20002879
 8005340:	20002870 	.word	0x20002870

08005344 <init_maze_array>:


/*
 * initialise the maze array to all wall
 */
void init_maze_array(){
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
    // initial the array with all wall
    // wall = 1
    for (int i = 0; i < rows; i++) {
 800534a:	2300      	movs	r3, #0
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	e018      	b.n	8005382 <init_maze_array+0x3e>
        for (int j = 0; j < columns; j++){
 8005350:	2300      	movs	r3, #0
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	e00c      	b.n	8005370 <init_maze_array+0x2c>
            maze[i][j] = 1;
 8005356:	4b11      	ldr	r3, [pc, #68]	; (800539c <init_maze_array+0x58>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	4413      	add	r3, r2
 8005366:	2201      	movs	r2, #1
 8005368:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < columns; j++){
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	3301      	adds	r3, #1
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <init_maze_array+0x5c>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	4293      	cmp	r3, r2
 800537a:	dbec      	blt.n	8005356 <init_maze_array+0x12>
    for (int i = 0; i < rows; i++) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3301      	adds	r3, #1
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <init_maze_array+0x60>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4293      	cmp	r3, r2
 800538c:	dbe0      	blt.n	8005350 <init_maze_array+0xc>
        }
    }
}
 800538e:	bf00      	nop
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20002870 	.word	0x20002870
 80053a0:	20002875 	.word	0x20002875
 80053a4:	20002874 	.word	0x20002874

080053a8 <free_maze_array>:

/*
 * free up the memory allocated to maze array
 */
void free_maze_array(){
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
	//free the dynamically allocated array
	// used when go to next round
    for (int i = 0; i < rows; i++) {
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	e013      	b.n	80053dc <free_maze_array+0x34>
	        if(maze[i] != NULL) free(maze[i]);
 80053b4:	4b13      	ldr	r3, [pc, #76]	; (8005404 <free_maze_array+0x5c>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <free_maze_array+0x2e>
 80053c4:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <free_maze_array+0x5c>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f00d f81d 	bl	8012410 <free>
    for (int i = 0; i < rows; i++) {
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3301      	adds	r3, #1
 80053da:	607b      	str	r3, [r7, #4]
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <free_maze_array+0x60>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4293      	cmp	r3, r2
 80053e6:	dbe5      	blt.n	80053b4 <free_maze_array+0xc>
	}
    if(maze != NULL) free(maze);
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <free_maze_array+0x5c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <free_maze_array+0x52>
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <free_maze_array+0x5c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f00d f80b 	bl	8012410 <free>
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20002870 	.word	0x20002870
 8005408:	20002874 	.word	0x20002874

0800540c <generate_maze>:

/*
 * recursive backtracking algorithm - generate maze with path
 * parameter : start xy position
 */
void generate_maze(uint8_t startx, uint8_t starty) {
 800540c:	b5b0      	push	{r4, r5, r7, lr}
 800540e:	b098      	sub	sp, #96	; 0x60
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	460a      	mov	r2, r1
 8005416:	71fb      	strb	r3, [r7, #7]
 8005418:	4613      	mov	r3, r2
 800541a:	71bb      	strb	r3, [r7, #6]
	//generate the maze array with 1 as wall and 0 as the empty path
    int directions[4][2] = {{0, 2}, {2, 0}, {0, -2}, {-2, 0}};  // Right, Down, Left, Up
 800541c:	4b59      	ldr	r3, [pc, #356]	; (8005584 <generate_maze+0x178>)
 800541e:	f107 0418 	add.w	r4, r7, #24
 8005422:	461d      	mov	r5, r3
 8005424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005428:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800542c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int shuffle[4] = {0, 1, 2, 3};
 8005430:	4b55      	ldr	r3, [pc, #340]	; (8005588 <generate_maze+0x17c>)
 8005432:	f107 0408 	add.w	r4, r7, #8
 8005436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Shuffle the directions randomly
    for (int i = 3; i > 0; i--) {
 800543c:	2303      	movs	r3, #3
 800543e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005440:	e027      	b.n	8005492 <generate_maze+0x86>
        int j = rand() % (i + 1);
 8005442:	f00d fd5f 	bl	8012f04 <rand>
 8005446:	4602      	mov	r2, r0
 8005448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800544a:	3301      	adds	r3, #1
 800544c:	fb92 f1f3 	sdiv	r1, r2, r3
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
        int temp = shuffle[i];
 8005458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	3360      	adds	r3, #96	; 0x60
 800545e:	443b      	add	r3, r7
 8005460:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8005464:	63bb      	str	r3, [r7, #56]	; 0x38
        shuffle[i] = shuffle[j];
 8005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	3360      	adds	r3, #96	; 0x60
 800546c:	443b      	add	r3, r7
 800546e:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	3360      	adds	r3, #96	; 0x60
 8005478:	443b      	add	r3, r7
 800547a:	f843 2c58 	str.w	r2, [r3, #-88]
        shuffle[j] = temp;
 800547e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	3360      	adds	r3, #96	; 0x60
 8005484:	443b      	add	r3, r7
 8005486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005488:	f843 2c58 	str.w	r2, [r3, #-88]
    for (int i = 3; i > 0; i--) {
 800548c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548e:	3b01      	subs	r3, #1
 8005490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005494:	2b00      	cmp	r3, #0
 8005496:	dcd4      	bgt.n	8005442 <generate_maze+0x36>
    }

    // Mark the current cell as empty space
    //printf("%d %d\n", row, col);
    maze[startx][starty] = 0;
 8005498:	4b3c      	ldr	r3, [pc, #240]	; (800558c <generate_maze+0x180>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	79bb      	ldrb	r3, [r7, #6]
 80054a6:	4413      	add	r3, r2
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 4; i++) {
 80054ac:	2300      	movs	r3, #0
 80054ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b0:	e05f      	b.n	8005572 <generate_maze+0x166>
        int dx = directions[shuffle[i]][0];
 80054b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	3360      	adds	r3, #96	; 0x60
 80054b8:	443b      	add	r3, r7
 80054ba:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	3360      	adds	r3, #96	; 0x60
 80054c2:	443b      	add	r3, r7
 80054c4:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80054c8:	657b      	str	r3, [r7, #84]	; 0x54
        int dy = directions[shuffle[i]][1];
 80054ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	3360      	adds	r3, #96	; 0x60
 80054d0:	443b      	add	r3, r7
 80054d2:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	3360      	adds	r3, #96	; 0x60
 80054da:	443b      	add	r3, r7
 80054dc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80054e0:	653b      	str	r3, [r7, #80]	; 0x50
        int newRow = startx + dy;  // Neighbor row
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054e6:	4413      	add	r3, r2
 80054e8:	64fb      	str	r3, [r7, #76]	; 0x4c
        int newCol = starty + dx;  // Neighbor column
 80054ea:	79bb      	ldrb	r3, [r7, #6]
 80054ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054ee:	4413      	add	r3, r2
 80054f0:	64bb      	str	r3, [r7, #72]	; 0x48
        int midRow = startx + dy / 2;  // Midpoint row
 80054f2:	79fa      	ldrb	r2, [r7, #7]
 80054f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f6:	0fd9      	lsrs	r1, r3, #31
 80054f8:	440b      	add	r3, r1
 80054fa:	105b      	asrs	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	647b      	str	r3, [r7, #68]	; 0x44
        int midCol = starty + dx / 2;  // Midpoint column
 8005500:	79ba      	ldrb	r2, [r7, #6]
 8005502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005504:	0fd9      	lsrs	r1, r3, #31
 8005506:	440b      	add	r3, r1
 8005508:	105b      	asrs	r3, r3, #1
 800550a:	4413      	add	r3, r2
 800550c:	643b      	str	r3, [r7, #64]	; 0x40

        // Check if the neighbor coordinates are within the maze boundaries
        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < columns && maze[newRow][newCol] == 1) {
 800550e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005510:	2b00      	cmp	r3, #0
 8005512:	db2b      	blt.n	800556c <generate_maze+0x160>
 8005514:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <generate_maze+0x184>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	4293      	cmp	r3, r2
 800551e:	da25      	bge.n	800556c <generate_maze+0x160>
 8005520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005522:	2b00      	cmp	r3, #0
 8005524:	db22      	blt.n	800556c <generate_maze+0x160>
 8005526:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <generate_maze+0x188>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552e:	4293      	cmp	r3, r2
 8005530:	da1c      	bge.n	800556c <generate_maze+0x160>
 8005532:	4b16      	ldr	r3, [pc, #88]	; (800558c <generate_maze+0x180>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005540:	4413      	add	r3, r2
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d111      	bne.n	800556c <generate_maze+0x160>
            // Carve a path between the current cell and the neighbor
            //printf("%d %d\n", midRow, midCol);
            maze[midRow][midCol] = 0;
 8005548:	4b10      	ldr	r3, [pc, #64]	; (800558c <generate_maze+0x180>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005556:	4413      	add	r3, r2
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
            generate_maze(newRow, newCol);  // Recursively generate the maze from the neighbor cell
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	b2db      	uxtb	r3, r3
 8005560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff ff50 	bl	800540c <generate_maze>
    for (int i = 0; i < 4; i++) {
 800556c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800556e:	3301      	adds	r3, #1
 8005570:	65bb      	str	r3, [r7, #88]	; 0x58
 8005572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005574:	2b03      	cmp	r3, #3
 8005576:	dd9c      	ble.n	80054b2 <generate_maze+0xa6>
        }
    }
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	3760      	adds	r7, #96	; 0x60
 800557e:	46bd      	mov	sp, r7
 8005580:	bdb0      	pop	{r4, r5, r7, pc}
 8005582:	bf00      	nop
 8005584:	08015804 	.word	0x08015804
 8005588:	08015824 	.word	0x08015824
 800558c:	20002870 	.word	0x20002870
 8005590:	20002874 	.word	0x20002874
 8005594:	20002875 	.word	0x20002875

08005598 <add_start_end_maze>:


/*
 * add the start and end position to the maze
 */
void add_start_end_maze(){
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
    // add the start, end point to maze array
    maze[start_x][start_y] = 2; // 2 - start positiojn
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <add_start_end_maze+0x3c>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <add_start_end_maze+0x40>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a0c      	ldr	r2, [pc, #48]	; (80055dc <add_start_end_maze+0x44>)
 80055ac:	7812      	ldrb	r2, [r2, #0]
 80055ae:	4413      	add	r3, r2
 80055b0:	2202      	movs	r2, #2
 80055b2:	701a      	strb	r2, [r3, #0]
    maze[end_x][end_y] = 3;     // 3 - end position
 80055b4:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <add_start_end_maze+0x3c>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <add_start_end_maze+0x48>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <add_start_end_maze+0x4c>)
 80055c4:	7812      	ldrb	r2, [r2, #0]
 80055c6:	4413      	add	r3, r2
 80055c8:	2203      	movs	r2, #3
 80055ca:	701a      	strb	r2, [r3, #0]
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	20002870 	.word	0x20002870
 80055d8:	20002876 	.word	0x20002876
 80055dc:	20002878 	.word	0x20002878
 80055e0:	20002877 	.word	0x20002877
 80055e4:	20002879 	.word	0x20002879

080055e8 <add_key_maze>:

/*
 * add the three keys to the maze
 */
void add_key_maze(){    //key = 4, three key intotal
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
    uint8_t num_key = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	71fb      	strb	r3, [r7, #7]
    while(num_key < 3){
 80055f2:	e033      	b.n	800565c <add_key_maze+0x74>
        uint8_t ran_row = rand() % (rows - 2) + 1;
 80055f4:	f00d fc86 	bl	8012f04 <rand>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b1c      	ldr	r3, [pc, #112]	; (800566c <add_key_maze+0x84>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	3b02      	subs	r3, #2
 8005600:	fb92 f1f3 	sdiv	r1, r2, r3
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	b2db      	uxtb	r3, r3
 800560c:	3301      	adds	r3, #1
 800560e:	71bb      	strb	r3, [r7, #6]
        uint8_t ran_col = rand() % (columns - 2) + 1;
 8005610:	f00d fc78 	bl	8012f04 <rand>
 8005614:	4602      	mov	r2, r0
 8005616:	4b16      	ldr	r3, [pc, #88]	; (8005670 <add_key_maze+0x88>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	3b02      	subs	r3, #2
 800561c:	fb92 f1f3 	sdiv	r1, r2, r3
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	3301      	adds	r3, #1
 800562a:	717b      	strb	r3, [r7, #5]
        if(maze[ran_row][ran_col] == 0){
 800562c:	4b11      	ldr	r3, [pc, #68]	; (8005674 <add_key_maze+0x8c>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	79bb      	ldrb	r3, [r7, #6]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	797b      	ldrb	r3, [r7, #5]
 800563a:	4413      	add	r3, r2
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10c      	bne.n	800565c <add_key_maze+0x74>
            maze[ran_row][ran_col] = 4;
 8005642:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <add_key_maze+0x8c>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	79bb      	ldrb	r3, [r7, #6]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	797b      	ldrb	r3, [r7, #5]
 8005650:	4413      	add	r3, r2
 8005652:	2204      	movs	r2, #4
 8005654:	701a      	strb	r2, [r3, #0]
            num_key++;
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	3301      	adds	r3, #1
 800565a:	71fb      	strb	r3, [r7, #7]
    while(num_key < 3){
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d9c8      	bls.n	80055f4 <add_key_maze+0xc>
        }
    }
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20002874 	.word	0x20002874
 8005670:	20002875 	.word	0x20002875
 8005674:	20002870 	.word	0x20002870

08005678 <shuffle_array>:


/*
 * random rearrange a array
 */
void shuffle_array(uint8_t arr[], uint8_t size) {    // randomize the array order
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
    for (int i = size - 1; i > 0; i--) {
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	3b01      	subs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e01f      	b.n	80056cc <shuffle_array+0x54>
        int j = rand() % (i + 1);
 800568c:	f00d fc3a 	bl	8012f04 <rand>
 8005690:	4602      	mov	r2, r0
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	3301      	adds	r3, #1
 8005696:	fb92 f1f3 	sdiv	r1, r2, r3
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	613b      	str	r3, [r7, #16]
        uint8_t temp = arr[i];
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4413      	add	r3, r2
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	73fb      	strb	r3, [r7, #15]
        arr[i] = arr[j];
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	441a      	add	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	440b      	add	r3, r1
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	701a      	strb	r2, [r3, #0]
        arr[j] = temp;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	7bfa      	ldrb	r2, [r7, #15]
 80056c4:	701a      	strb	r2, [r3, #0]
    for (int i = size - 1; i > 0; i--) {
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dcdc      	bgt.n	800568c <shuffle_array+0x14>
    }
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <add_obstacle_maze>:

/*
 * randomly add 8-10 obstacles to the array
 */
void add_obstacle_maze(){    // obstacle - 4 to 9(hardware), 10 - 12(optional software)
 80056dc:	b590      	push	{r4, r7, lr}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
    uint8_t obstacle_array[13] = {5,6,7,8,9,10,11,12,13,14,15,16,17}; // list of array
 80056e2:	4b48      	ldr	r3, [pc, #288]	; (8005804 <add_obstacle_maze+0x128>)
 80056e4:	1d3c      	adds	r4, r7, #4
 80056e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056e8:	c407      	stmia	r4!, {r0, r1, r2}
 80056ea:	7023      	strb	r3, [r4, #0]
    //uint8_t obstacle_array[13] = {12,12,12,12,12,12,12,12,12,12,12,12,12}; // list of array
    shuffle_array(obstacle_array, 13);  //redorder the array
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	210d      	movs	r1, #13
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff ffc1 	bl	8005678 <shuffle_array>

    // find the random num_obstacles (8-10)
    uint8_t num_obstacles = rand() % 3 + base_obs;
 80056f6:	f00d fc05 	bl	8012f04 <rand>
 80056fa:	4602      	mov	r2, r0
 80056fc:	4b42      	ldr	r3, [pc, #264]	; (8005808 <add_obstacle_maze+0x12c>)
 80056fe:	fb83 3102 	smull	r3, r1, r3, r2
 8005702:	17d3      	asrs	r3, r2, #31
 8005704:	1ac9      	subs	r1, r1, r3
 8005706:	460b      	mov	r3, r1
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	440b      	add	r3, r1
 800570c:	1ad1      	subs	r1, r2, r3
 800570e:	b2ca      	uxtb	r2, r1
 8005710:	4b3e      	ldr	r3, [pc, #248]	; (800580c <add_obstacle_maze+0x130>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	4413      	add	r3, r2
 8005716:	75bb      	strb	r3, [r7, #22]

    //for demo use
    //if(level == 3) {num_obstacles = 13; hearts = 5;}

    uint8_t i = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	75fb      	strb	r3, [r7, #23]
    while(i < num_obstacles){   // randomly place the obstacles
 800571c:	e069      	b.n	80057f2 <add_obstacle_maze+0x116>
        uint8_t ran_row = rand() % (rows - 2) + 1;
 800571e:	f00d fbf1 	bl	8012f04 <rand>
 8005722:	4602      	mov	r2, r0
 8005724:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <add_obstacle_maze+0x134>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	3b02      	subs	r3, #2
 800572a:	fb92 f1f3 	sdiv	r1, r2, r3
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	b2db      	uxtb	r3, r3
 8005736:	3301      	adds	r3, #1
 8005738:	757b      	strb	r3, [r7, #21]
        uint8_t ran_col = rand() % (columns - 2) + 1;
 800573a:	f00d fbe3 	bl	8012f04 <rand>
 800573e:	4602      	mov	r2, r0
 8005740:	4b34      	ldr	r3, [pc, #208]	; (8005814 <add_obstacle_maze+0x138>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	3b02      	subs	r3, #2
 8005746:	fb92 f1f3 	sdiv	r1, r2, r3
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	b2db      	uxtb	r3, r3
 8005752:	3301      	adds	r3, #1
 8005754:	753b      	strb	r3, [r7, #20]
        if(maze[ran_row][ran_col] == 0 && !(maze[ran_row+1][ran_col]>4) &&
 8005756:	4b30      	ldr	r3, [pc, #192]	; (8005818 <add_obstacle_maze+0x13c>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	7d7b      	ldrb	r3, [r7, #21]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	7d3b      	ldrb	r3, [r7, #20]
 8005764:	4413      	add	r3, r2
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d142      	bne.n	80057f2 <add_obstacle_maze+0x116>
 800576c:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <add_obstacle_maze+0x13c>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	7d7b      	ldrb	r3, [r7, #21]
 8005772:	3301      	adds	r3, #1
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	7d3b      	ldrb	r3, [r7, #20]
 800577c:	4413      	add	r3, r2
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b04      	cmp	r3, #4
 8005782:	d836      	bhi.n	80057f2 <add_obstacle_maze+0x116>
        !(maze[ran_row][ran_col+1]>4) && !(maze[ran_row-1][ran_col]>4) && !(maze[ran_row][ran_col-1]>4)){  // avoid two obstacles next to each other
 8005784:	4b24      	ldr	r3, [pc, #144]	; (8005818 <add_obstacle_maze+0x13c>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	7d7b      	ldrb	r3, [r7, #21]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	7d3b      	ldrb	r3, [r7, #20]
 8005792:	3301      	adds	r3, #1
 8005794:	4413      	add	r3, r2
 8005796:	781b      	ldrb	r3, [r3, #0]
        if(maze[ran_row][ran_col] == 0 && !(maze[ran_row+1][ran_col]>4) &&
 8005798:	2b04      	cmp	r3, #4
 800579a:	d82a      	bhi.n	80057f2 <add_obstacle_maze+0x116>
        !(maze[ran_row][ran_col+1]>4) && !(maze[ran_row-1][ran_col]>4) && !(maze[ran_row][ran_col-1]>4)){  // avoid two obstacles next to each other
 800579c:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <add_obstacle_maze+0x13c>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	7d7b      	ldrb	r3, [r7, #21]
 80057a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057a6:	3b01      	subs	r3, #1
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	7d3b      	ldrb	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d81c      	bhi.n	80057f2 <add_obstacle_maze+0x116>
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <add_obstacle_maze+0x13c>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	7d7b      	ldrb	r3, [r7, #21]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	7d3b      	ldrb	r3, [r7, #20]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	4413      	add	r3, r2
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d810      	bhi.n	80057f2 <add_obstacle_maze+0x116>
            maze[ran_row][ran_col] = obstacle_array[i];
 80057d0:	7dfa      	ldrb	r2, [r7, #23]
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <add_obstacle_maze+0x13c>)
 80057d4:	6819      	ldr	r1, [r3, #0]
 80057d6:	7d7b      	ldrb	r3, [r7, #21]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	6819      	ldr	r1, [r3, #0]
 80057de:	7d3b      	ldrb	r3, [r7, #20]
 80057e0:	440b      	add	r3, r1
 80057e2:	3218      	adds	r2, #24
 80057e4:	443a      	add	r2, r7
 80057e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80057ea:	701a      	strb	r2, [r3, #0]
            i++;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	3301      	adds	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
    while(i < num_obstacles){   // randomly place the obstacles
 80057f2:	7dfa      	ldrb	r2, [r7, #23]
 80057f4:	7dbb      	ldrb	r3, [r7, #22]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d391      	bcc.n	800571e <add_obstacle_maze+0x42>
        }
    }
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	bd90      	pop	{r4, r7, pc}
 8005804:	08015834 	.word	0x08015834
 8005808:	55555556 	.word	0x55555556
 800580c:	2000288f 	.word	0x2000288f
 8005810:	20002874 	.word	0x20002874
 8005814:	20002875 	.word	0x20002875
 8005818:	20002870 	.word	0x20002870

0800581c <move>:
extern uint32_t joy[];
extern ADC_HandleTypeDef hadc3;



void move(){
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
	//buttom2 - down
	//buttom3 - left
	//buttom4 - right
	//HAL_ADC_Start_DMA(&hadc3, joy, 2);

	if(hearts == 0) handle_lose();
 8005820:	4b1f      	ldr	r3, [pc, #124]	; (80058a0 <move+0x84>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <move+0x10>
 8005828:	f7fc f954 	bl	8001ad4 <handle_lose>
	}else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET){
		move_right();
		HAL_Delay(500);
	}*/

	if (joy[1]>=4000){
 800582c:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <move+0x88>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005834:	d306      	bcc.n	8005844 <move+0x28>
		move_up();
 8005836:	f000 f837 	bl	80058a8 <move_up>
		HAL_Delay(300);
 800583a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800583e:	f002 f8ff 	bl	8007a40 <HAL_Delay>

	}else if (joy[0]>0 && joy[0]<=800){
		move_right();
		HAL_Delay(300);
	}
}
 8005842:	e02a      	b.n	800589a <move+0x7e>
	}else if (joy[1]>0 && joy[1]<=800){
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <move+0x88>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <move+0x48>
 800584c:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <move+0x88>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005854:	d806      	bhi.n	8005864 <move+0x48>
		move_down();
 8005856:	f000 f83f 	bl	80058d8 <move_down>
		HAL_Delay(300);
 800585a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800585e:	f002 f8ef 	bl	8007a40 <HAL_Delay>
}
 8005862:	e01a      	b.n	800589a <move+0x7e>
	}else if (joy[0]>=4000){
 8005864:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <move+0x88>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800586c:	d306      	bcc.n	800587c <move+0x60>
		move_left();
 800586e:	f000 f84b 	bl	8005908 <move_left>
		HAL_Delay(300);
 8005872:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005876:	f002 f8e3 	bl	8007a40 <HAL_Delay>
}
 800587a:	e00e      	b.n	800589a <move+0x7e>
	}else if (joy[0]>0 && joy[0]<=800){
 800587c:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <move+0x88>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <move+0x7e>
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <move+0x88>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800588c:	d805      	bhi.n	800589a <move+0x7e>
		move_right();
 800588e:	f000 f853 	bl	8005938 <move_right>
		HAL_Delay(300);
 8005892:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005896:	f002 f8d3 	bl	8007a40 <HAL_Delay>
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	2000287e 	.word	0x2000287e
 80058a4:	20002884 	.word	0x20002884

080058a8 <move_up>:

void move_up(){
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
	next_x = current_x - 1;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <move_up+0x20>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <move_up+0x24>)
 80058b6:	701a      	strb	r2, [r3, #0]
	next_y = current_y;
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <move_up+0x28>)
 80058ba:	781a      	ldrb	r2, [r3, #0]
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <move_up+0x2c>)
 80058be:	701a      	strb	r2, [r3, #0]
	handle_move();
 80058c0:	f000 f852 	bl	8005968 <handle_move>
}
 80058c4:	bf00      	nop
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	2000287a 	.word	0x2000287a
 80058cc:	2000287c 	.word	0x2000287c
 80058d0:	2000287b 	.word	0x2000287b
 80058d4:	2000287d 	.word	0x2000287d

080058d8 <move_down>:


void move_down(){
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
	next_x = current_x + 1;
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <move_down+0x20>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <move_down+0x24>)
 80058e6:	701a      	strb	r2, [r3, #0]
	next_y = current_y;
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <move_down+0x28>)
 80058ea:	781a      	ldrb	r2, [r3, #0]
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <move_down+0x2c>)
 80058ee:	701a      	strb	r2, [r3, #0]
	handle_move();
 80058f0:	f000 f83a 	bl	8005968 <handle_move>
}
 80058f4:	bf00      	nop
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	2000287a 	.word	0x2000287a
 80058fc:	2000287c 	.word	0x2000287c
 8005900:	2000287b 	.word	0x2000287b
 8005904:	2000287d 	.word	0x2000287d

08005908 <move_left>:


void move_left(){
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
	next_y = current_y - 1;
 800590c:	4b06      	ldr	r3, [pc, #24]	; (8005928 <move_left+0x20>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	3b01      	subs	r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <move_left+0x24>)
 8005916:	701a      	strb	r2, [r3, #0]
	next_x = current_x;
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <move_left+0x28>)
 800591a:	781a      	ldrb	r2, [r3, #0]
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <move_left+0x2c>)
 800591e:	701a      	strb	r2, [r3, #0]
	handle_move();
 8005920:	f000 f822 	bl	8005968 <handle_move>
}
 8005924:	bf00      	nop
 8005926:	bd80      	pop	{r7, pc}
 8005928:	2000287b 	.word	0x2000287b
 800592c:	2000287d 	.word	0x2000287d
 8005930:	2000287a 	.word	0x2000287a
 8005934:	2000287c 	.word	0x2000287c

08005938 <move_right>:


void move_right(){
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
	next_y = current_y + 1;
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <move_right+0x20>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	b2da      	uxtb	r2, r3
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <move_right+0x24>)
 8005946:	701a      	strb	r2, [r3, #0]
	next_x = current_x;
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <move_right+0x28>)
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <move_right+0x2c>)
 800594e:	701a      	strb	r2, [r3, #0]
	handle_move();
 8005950:	f000 f80a 	bl	8005968 <handle_move>
}
 8005954:	bf00      	nop
 8005956:	bd80      	pop	{r7, pc}
 8005958:	2000287b 	.word	0x2000287b
 800595c:	2000287d 	.word	0x2000287d
 8005960:	2000287a 	.word	0x2000287a
 8005964:	2000287c 	.word	0x2000287c

08005968 <handle_move>:

void handle_move(){
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
	int valid = check_valid();
 800596e:	f000 f875 	bl	8005a5c <check_valid>
 8005972:	6078      	str	r0, [r7, #4]
	if (valid == 1){	//handle each movement case
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d164      	bne.n	8005a44 <handle_move+0xdc>
		switch(maze[next_x][next_y]){
 800597a:	4b35      	ldr	r3, [pc, #212]	; (8005a50 <handle_move+0xe8>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b35      	ldr	r3, [pc, #212]	; (8005a54 <handle_move+0xec>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a33      	ldr	r2, [pc, #204]	; (8005a58 <handle_move+0xf0>)
 800598a:	7812      	ldrb	r2, [r2, #0]
 800598c:	4413      	add	r3, r2
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b11      	cmp	r3, #17
 8005992:	d859      	bhi.n	8005a48 <handle_move+0xe0>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <handle_move+0x34>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059e5 	.word	0x080059e5
 80059a0:	08005a49 	.word	0x08005a49
 80059a4:	08005a49 	.word	0x08005a49
 80059a8:	080059eb 	.word	0x080059eb
 80059ac:	080059f1 	.word	0x080059f1
 80059b0:	080059f7 	.word	0x080059f7
 80059b4:	080059fd 	.word	0x080059fd
 80059b8:	08005a03 	.word	0x08005a03
 80059bc:	08005a09 	.word	0x08005a09
 80059c0:	08005a0f 	.word	0x08005a0f
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005a1b 	.word	0x08005a1b
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	08005a27 	.word	0x08005a27
 80059d4:	08005a2d 	.word	0x08005a2d
 80059d8:	08005a33 	.word	0x08005a33
 80059dc:	08005a39 	.word	0x08005a39
 80059e0:	08005a3f 	.word	0x08005a3f

		case 0:	//empty
			handle_empty(); break;
 80059e4:	f7fc f8ae 	bl	8001b44 <handle_empty>
 80059e8:	e02f      	b.n	8005a4a <handle_move+0xe2>
		case 3:
			handle_endpt(); break;
 80059ea:	f7fc f8db 	bl	8001ba4 <handle_endpt>
 80059ee:	e02c      	b.n	8005a4a <handle_move+0xe2>
		case 4:
			handle_key(); break;
 80059f0:	f7fc f95e 	bl	8001cb0 <handle_key>
 80059f4:	e029      	b.n	8005a4a <handle_move+0xe2>
		case 5:
			handle_game1(); break;	//light pattern
 80059f6:	f7fc f99f 	bl	8001d38 <handle_game1>
 80059fa:	e026      	b.n	8005a4a <handle_move+0xe2>
		case 6:
			handle_game2(); break;
 80059fc:	f7fc fa34 	bl	8001e68 <handle_game2>
 8005a00:	e023      	b.n	8005a4a <handle_move+0xe2>
		case 7:
			handle_game3(); break;
 8005a02:	f7fc fb03 	bl	800200c <handle_game3>
 8005a06:	e020      	b.n	8005a4a <handle_move+0xe2>
		case 8:
			handle_dark(); break;
 8005a08:	f7fc fb98 	bl	800213c <handle_dark>
 8005a0c:	e01d      	b.n	8005a4a <handle_move+0xe2>
		case 9:
			handle_bright(); break;
 8005a0e:	f7fc fc93 	bl	8002338 <handle_bright>
 8005a12:	e01a      	b.n	8005a4a <handle_move+0xe2>
		case 10:
			handle_ice(); break;
 8005a14:	f7fc fd90 	bl	8002538 <handle_ice>
 8005a18:	e017      	b.n	8005a4a <handle_move+0xe2>
		case 11:
			handle_fire(); break;
 8005a1a:	f7fc fe6b 	bl	80026f4 <handle_fire>
 8005a1e:	e014      	b.n	8005a4a <handle_move+0xe2>
		case 12:
			handle_ghost(); break;
 8005a20:	f7fc ff46 	bl	80028b0 <handle_ghost>
 8005a24:	e011      	b.n	8005a4a <handle_move+0xe2>
		case 13:
			handle_stone(); break;
 8005a26:	f7fd f837 	bl	8002a98 <handle_stone>
 8005a2a:	e00e      	b.n	8005a4a <handle_move+0xe2>
		case 14:
			handle_door(); break;
 8005a2c:	f7fd f8d0 	bl	8002bd0 <handle_door>
 8005a30:	e00b      	b.n	8005a4a <handle_move+0xe2>
		case 15:
			handle_addheart(); break;
 8005a32:	f7fd f969 	bl	8002d08 <handle_addheart>
 8005a36:	e008      	b.n	8005a4a <handle_move+0xe2>
		case 16:
			handle_prison(); break;
 8005a38:	f7fd f9d0 	bl	8002ddc <handle_prison>
 8005a3c:	e005      	b.n	8005a4a <handle_move+0xe2>
		case 17:
			handle_hidden(); break;
 8005a3e:	f7fd fa13 	bl	8002e68 <handle_hidden>
 8005a42:	e002      	b.n	8005a4a <handle_move+0xe2>
		default: break;


		}

	}else return;	// no moving action for non valid move
 8005a44:	bf00      	nop
 8005a46:	e000      	b.n	8005a4a <handle_move+0xe2>
		default: break;
 8005a48:	bf00      	nop
}
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20002870 	.word	0x20002870
 8005a54:	2000287c 	.word	0x2000287c
 8005a58:	2000287d 	.word	0x2000287d

08005a5c <check_valid>:

int check_valid(){	// check if valid movement
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
	if (maze[next_x][next_y] == 1)  return 0;	//move to wall
 8005a60:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <check_valid+0x2c>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <check_valid+0x30>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <check_valid+0x34>)
 8005a70:	7812      	ldrb	r2, [r2, #0]
 8005a72:	4413      	add	r3, r2
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <check_valid+0x22>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e000      	b.n	8005a80 <check_valid+0x24>
	//if (maze[next_x][next_y] == 3 && keys != 3) return 0;	//go to end point without all keys
	else return 1;
 8005a7e:	2301      	movs	r3, #1
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr
 8005a88:	20002870 	.word	0x20002870
 8005a8c:	2000287c 	.word	0x2000287c
 8005a90:	2000287d 	.word	0x2000287d

08005a94 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8005a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a9e:	9302      	str	r3, [sp, #8]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	1dfb      	adds	r3, r7, #7
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	2275      	movs	r2, #117	; 0x75
 8005aac:	21d0      	movs	r1, #208	; 0xd0
 8005aae:	4823      	ldr	r0, [pc, #140]	; (8005b3c <MPU6050_Init+0xa8>)
 8005ab0:	f003 fee0 	bl	8009874 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	2b68      	cmp	r3, #104	; 0x68
 8005ab8:	d13b      	bne.n	8005b32 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8005abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ac2:	9302      	str	r3, [sp, #8]
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	1dbb      	adds	r3, r7, #6
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2301      	movs	r3, #1
 8005ace:	226b      	movs	r2, #107	; 0x6b
 8005ad0:	21d0      	movs	r1, #208	; 0xd0
 8005ad2:	481a      	ldr	r0, [pc, #104]	; (8005b3c <MPU6050_Init+0xa8>)
 8005ad4:	f003 fdd4 	bl	8009680 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8005ad8:	2307      	movs	r3, #7
 8005ada:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8005adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ae0:	9302      	str	r3, [sp, #8]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	1dbb      	adds	r3, r7, #6
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	2301      	movs	r3, #1
 8005aec:	2219      	movs	r2, #25
 8005aee:	21d0      	movs	r1, #208	; 0xd0
 8005af0:	4812      	ldr	r0, [pc, #72]	; (8005b3c <MPU6050_Init+0xa8>)
 8005af2:	f003 fdc5 	bl	8009680 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 8005af6:	2300      	movs	r3, #0
 8005af8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8005afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005afe:	9302      	str	r3, [sp, #8]
 8005b00:	2301      	movs	r3, #1
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	1dbb      	adds	r3, r7, #6
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	221c      	movs	r2, #28
 8005b0c:	21d0      	movs	r1, #208	; 0xd0
 8005b0e:	480b      	ldr	r0, [pc, #44]	; (8005b3c <MPU6050_Init+0xa8>)
 8005b10:	f003 fdb6 	bl	8009680 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ∞/s
		Data = 0x00;
 8005b14:	2300      	movs	r3, #0
 8005b16:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8005b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b1c:	9302      	str	r3, [sp, #8]
 8005b1e:	2301      	movs	r3, #1
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	1dbb      	adds	r3, r7, #6
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	2301      	movs	r3, #1
 8005b28:	221b      	movs	r2, #27
 8005b2a:	21d0      	movs	r1, #208	; 0xd0
 8005b2c:	4803      	ldr	r0, [pc, #12]	; (8005b3c <MPU6050_Init+0xa8>)
 8005b2e:	f003 fda7 	bl	8009680 <HAL_I2C_Mem_Write>
	}
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20002518 	.word	0x20002518

08005b40 <MPU6050_Read_Accel>:
void MPU6050_Read_Accel (void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8005b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b4a:	9302      	str	r3, [sp, #8]
 8005b4c:	2306      	movs	r3, #6
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	463b      	mov	r3, r7
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	2301      	movs	r3, #1
 8005b56:	223b      	movs	r2, #59	; 0x3b
 8005b58:	21d0      	movs	r1, #208	; 0xd0
 8005b5a:	482f      	ldr	r0, [pc, #188]	; (8005c18 <MPU6050_Read_Accel+0xd8>)
 8005b5c:	f003 fe8a 	bl	8009874 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8005b60:	783b      	ldrb	r3, [r7, #0]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	b21a      	sxth	r2, r3
 8005b66:	787b      	ldrb	r3, [r7, #1]
 8005b68:	b21b      	sxth	r3, r3
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	b21a      	sxth	r2, r3
 8005b6e:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <MPU6050_Read_Accel+0xdc>)
 8005b70:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8005b72:	78bb      	ldrb	r3, [r7, #2]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	b21a      	sxth	r2, r3
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	b21a      	sxth	r2, r3
 8005b80:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <MPU6050_Read_Accel+0xe0>)
 8005b82:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8005b84:	793b      	ldrb	r3, [r7, #4]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	b21a      	sxth	r2, r3
 8005b8a:	797b      	ldrb	r3, [r7, #5]
 8005b8c:	b21b      	sxth	r3, r3
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	b21a      	sxth	r2, r3
 8005b92:	4b24      	ldr	r3, [pc, #144]	; (8005c24 <MPU6050_Read_Accel+0xe4>)
 8005b94:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8005b96:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <MPU6050_Read_Accel+0xdc>)
 8005b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fa fc9d 	bl	80004dc <__aeabi_i2d>
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	4b20      	ldr	r3, [pc, #128]	; (8005c28 <MPU6050_Read_Accel+0xe8>)
 8005ba8:	f7fa fe2c 	bl	8000804 <__aeabi_ddiv>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f7fa fff4 	bl	8000ba0 <__aeabi_d2f>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <MPU6050_Read_Accel+0xec>)
 8005bbc:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8005bbe:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <MPU6050_Read_Accel+0xe0>)
 8005bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fa fc89 	bl	80004dc <__aeabi_i2d>
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <MPU6050_Read_Accel+0xe8>)
 8005bd0:	f7fa fe18 	bl	8000804 <__aeabi_ddiv>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4619      	mov	r1, r3
 8005bdc:	f7fa ffe0 	bl	8000ba0 <__aeabi_d2f>
 8005be0:	4603      	mov	r3, r0
 8005be2:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <MPU6050_Read_Accel+0xf0>)
 8005be4:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <MPU6050_Read_Accel+0xe4>)
 8005be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fa fc75 	bl	80004dc <__aeabi_i2d>
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <MPU6050_Read_Accel+0xe8>)
 8005bf8:	f7fa fe04 	bl	8000804 <__aeabi_ddiv>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4610      	mov	r0, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	f7fa ffcc 	bl	8000ba0 <__aeabi_d2f>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <MPU6050_Read_Accel+0xf4>)
 8005c0c:	6013      	str	r3, [r2, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20002518 	.word	0x20002518
 8005c1c:	20002894 	.word	0x20002894
 8005c20:	20002896 	.word	0x20002896
 8005c24:	20002898 	.word	0x20002898
 8005c28:	40d00000 	.word	0x40d00000
 8005c2c:	2000289c 	.word	0x2000289c
 8005c30:	200028a0 	.word	0x200028a0
 8005c34:	200028a4 	.word	0x200028a4

08005c38 <push>:
	Gz = Gyro_Z_RAW/131.0;
}



int push() {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
	timer = 10;
 8005c3e:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <push+0x78>)
 8005c40:	220a      	movs	r2, #10
 8005c42:	601a      	str	r2, [r3, #0]
    while (1) {
  	  MPU6050_Read_Accel();
 8005c44:	f7ff ff7c 	bl	8005b40 <MPU6050_Read_Accel>
    	double X = Ax;
 8005c48:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <push+0x7c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fc57 	bl	8000500 <__aeabi_f2d>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	e9c7 2302 	strd	r2, r3, [r7, #8]

    	char textangle[] = "X";
 8005c5a:	2358      	movs	r3, #88	; 0x58
 8005c5c:	80bb      	strh	r3, [r7, #4]
    	//LCD_DrawString(40, 60, textangle);
    	char angleString[4];
    	sprintf(angleString, "%.2f", X);
 8005c5e:	4638      	mov	r0, r7
 8005c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c64:	4914      	ldr	r1, [pc, #80]	; (8005cb8 <push+0x80>)
 8005c66:	f00d f99b 	bl	8012fa0 <siprintf>
    	//LCD_DrawString(80, 80, angleString);
    	HAL_Delay(200);
 8005c6a:	20c8      	movs	r0, #200	; 0xc8
 8005c6c:	f001 fee8 	bl	8007a40 <HAL_Delay>
    	//LCD_DrawString(80, 80, "                ");

        if (X >=0.3) {
 8005c70:	a30d      	add	r3, pc, #52	; (adr r3, 8005ca8 <push+0x70>)
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c7a:	f7fa ff1f 	bl	8000abc <__aeabi_dcmpge>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <push+0x56>
            //LCD_DrawChar(60,60, 'F');
            HAL_Delay(100);
 8005c84:	2064      	movs	r0, #100	; 0x64
 8005c86:	f001 fedb 	bl	8007a40 <HAL_Delay>
            return 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e005      	b.n	8005c9a <push+0x62>

        }
        if (timer == -1) return 1;
 8005c8e:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <push+0x78>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c96:	d1d5      	bne.n	8005c44 <push+0xc>
 8005c98:	2301      	movs	r3, #1
    }
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	33333333 	.word	0x33333333
 8005cac:	3fd33333 	.word	0x3fd33333
 8005cb0:	20000004 	.word	0x20000004
 8005cb4:	2000289c 	.word	0x2000289c
 8005cb8:	08015844 	.word	0x08015844
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <pull>:

int pull() {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
	timer = 10;
 8005cc6:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <pull+0x78>)
 8005cc8:	220a      	movs	r2, #10
 8005cca:	601a      	str	r2, [r3, #0]
    while (1) {
  	  MPU6050_Read_Accel();
 8005ccc:	f7ff ff38 	bl	8005b40 <MPU6050_Read_Accel>
    	double X = Ax;
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <pull+0x7c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fa fc13 	bl	8000500 <__aeabi_f2d>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	e9c7 2302 	strd	r2, r3, [r7, #8]

    	char textangle[] = "X";
 8005ce2:	2358      	movs	r3, #88	; 0x58
 8005ce4:	80bb      	strh	r3, [r7, #4]
    	//LCD_DrawString(40, 60, textangle);
    	char angleString[4];
    	sprintf(angleString, "%.2f", X);
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cec:	4914      	ldr	r1, [pc, #80]	; (8005d40 <pull+0x80>)
 8005cee:	f00d f957 	bl	8012fa0 <siprintf>
    	//LCD_DrawString(80, 80, angleString);
    	HAL_Delay(200);
 8005cf2:	20c8      	movs	r0, #200	; 0xc8
 8005cf4:	f001 fea4 	bl	8007a40 <HAL_Delay>
    	//LCD_DrawString(80, 80, "                ");

        if (X <= -0.3){
 8005cf8:	a30d      	add	r3, pc, #52	; (adr r3, 8005d30 <pull+0x70>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d02:	f7fa fed1 	bl	8000aa8 <__aeabi_dcmple>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <pull+0x56>
            //LCD_DrawChar(60,60, 'B');
            HAL_Delay(100);
 8005d0c:	2064      	movs	r0, #100	; 0x64
 8005d0e:	f001 fe97 	bl	8007a40 <HAL_Delay>
            return 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e005      	b.n	8005d22 <pull+0x62>

        }
        if(timer == -1) return 1;
 8005d16:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <pull+0x78>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d1e:	d1d5      	bne.n	8005ccc <pull+0xc>
 8005d20:	2301      	movs	r3, #1
    }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	f3af 8000 	nop.w
 8005d30:	33333333 	.word	0x33333333
 8005d34:	bfd33333 	.word	0xbfd33333
 8005d38:	20000004 	.word	0x20000004
 8005d3c:	2000289c 	.word	0x2000289c
 8005d40:	08015844 	.word	0x08015844

08005d44 <game_record>:
 * no of task finished/failure  -
 * difficulty level  - level
 * round time - duration
 */

void game_record(){
 8005d44:	b580      	push	{r7, lr}
 8005d46:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
	  //test sd card write
	  FATFS myFATFS;
	  FIL myFILE;
	  char str[30];
	  //UINT numberofbytes;
	  char myPath[] = "game.txt\0";
 8005d4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d52:	4a68      	ldr	r2, [pc, #416]	; (8005ef4 <game_record+0x1b0>)
 8005d54:	3b8c      	subs	r3, #140	; 0x8c
 8005d56:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d58:	c303      	stmia	r3!, {r0, r1}
 8005d5a:	801a      	strh	r2, [r3, #0]

	  FRESULT res;
	  res = f_mount(&myFATFS,SDPath,1);
 8005d5c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8005d60:	f103 0310 	add.w	r3, r3, #16
 8005d64:	3b14      	subs	r3, #20
 8005d66:	2201      	movs	r2, #1
 8005d68:	4963      	ldr	r1, [pc, #396]	; (8005ef8 <game_record+0x1b4>)
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f00a fdc8 	bl	8010900 <f_mount>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8005d76:	f102 020f 	add.w	r2, r2, #15
 8005d7a:	7013      	strb	r3, [r2, #0]

	  if (res == FR_OK){
 8005d7c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8005d80:	f103 030f 	add.w	r3, r3, #15
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f040 80a7 	bne.w	8005eda <game_record+0x196>
	  LCD_DrawString(0,0,"start",RED);
 8005d8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005d90:	4a5a      	ldr	r2, [pc, #360]	; (8005efc <game_record+0x1b8>)
 8005d92:	2100      	movs	r1, #0
 8005d94:	2000      	movs	r0, #0
 8005d96:	f7fd fc01 	bl	800359c <LCD_DrawString>
	  HAL_Delay(100);
 8005d9a:	2064      	movs	r0, #100	; 0x64
 8005d9c:	f001 fe50 	bl	8007a40 <HAL_Delay>
	  f_open(&myFILE, myPath, FA_WRITE | FA_OPEN_ALWAYS);
 8005da0:	f107 0110 	add.w	r1, r7, #16
 8005da4:	390c      	subs	r1, #12
 8005da6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005daa:	3b20      	subs	r3, #32
 8005dac:	2212      	movs	r2, #18
 8005dae:	4618      	mov	r0, r3
 8005db0:	f00a fdf0 	bl	8010994 <f_open>
	  f_lseek(&myFILE, f_size(&myFILE));
 8005db4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005db8:	f8d3 2fac 	ldr.w	r2, [r3, #4012]	; 0xfac
 8005dbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005dc0:	3b20      	subs	r3, #32
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f00b fe05 	bl	80119d4 <f_lseek>
	  //f_write(&myFILE, array, sizeof(array), &numberofbytes);
	  //write record
	  f_puts("\n\n", &myFILE);
 8005dca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005dce:	3b20      	subs	r3, #32
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	484b      	ldr	r0, [pc, #300]	; (8005f00 <game_record+0x1bc>)
 8005dd4:	f00c f969 	bl	80120aa <f_puts>

	  if(status == 0) f_puts("win! ^_^\n", &myFILE);
 8005dd8:	4b4a      	ldr	r3, [pc, #296]	; (8005f04 <game_record+0x1c0>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d107      	bne.n	8005df0 <game_record+0xac>
 8005de0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005de4:	3b20      	subs	r3, #32
 8005de6:	4619      	mov	r1, r3
 8005de8:	4847      	ldr	r0, [pc, #284]	; (8005f08 <game_record+0x1c4>)
 8005dea:	f00c f95e 	bl	80120aa <f_puts>
 8005dee:	e006      	b.n	8005dfe <game_record+0xba>
	  else f_puts("lose! T_T\n", &myFILE);
 8005df0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005df4:	3b20      	subs	r3, #32
 8005df6:	4619      	mov	r1, r3
 8005df8:	4844      	ldr	r0, [pc, #272]	; (8005f0c <game_record+0x1c8>)
 8005dfa:	f00c f956 	bl	80120aa <f_puts>

	  uint8_t min = duration/60;
 8005dfe:	4b44      	ldr	r3, [pc, #272]	; (8005f10 <game_record+0x1cc>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	4a44      	ldr	r2, [pc, #272]	; (8005f14 <game_record+0x1d0>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8005e0e:	f102 020e 	add.w	r2, r2, #14
 8005e12:	7013      	strb	r3, [r2, #0]
	  uint8_t sec = duration%60;
 8005e14:	4b3e      	ldr	r3, [pc, #248]	; (8005f10 <game_record+0x1cc>)
 8005e16:	781a      	ldrb	r2, [r3, #0]
 8005e18:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <game_record+0x1d0>)
 8005e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1e:	0959      	lsrs	r1, r3, #5
 8005e20:	460b      	mov	r3, r1
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	1a5b      	subs	r3, r3, r1
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8005e2e:	f102 020d 	add.w	r2, r2, #13
 8005e32:	7013      	strb	r3, [r2, #0]
	  sprintf(str, "time spend: %u:%u \n",min, sec);
 8005e34:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8005e38:	f103 030e 	add.w	r3, r3, #14
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8005e42:	f103 030d 	add.w	r3, r3, #13
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f107 0010 	add.w	r0, r7, #16
 8005e4c:	4932      	ldr	r1, [pc, #200]	; (8005f18 <game_record+0x1d4>)
 8005e4e:	f00d f8a7 	bl	8012fa0 <siprintf>
	  f_puts(str, &myFILE);
 8005e52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005e56:	3b20      	subs	r3, #32
 8005e58:	f107 0210 	add.w	r2, r7, #16
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f00c f923 	bl	80120aa <f_puts>

	  if(level == 1) f_puts("difficulty level: easy", &myFILE);
 8005e64:	4b2d      	ldr	r3, [pc, #180]	; (8005f1c <game_record+0x1d8>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d107      	bne.n	8005e7c <game_record+0x138>
 8005e6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005e70:	3b20      	subs	r3, #32
 8005e72:	4619      	mov	r1, r3
 8005e74:	482a      	ldr	r0, [pc, #168]	; (8005f20 <game_record+0x1dc>)
 8005e76:	f00c f918 	bl	80120aa <f_puts>
 8005e7a:	e016      	b.n	8005eaa <game_record+0x166>
	  else if(level == 2) f_puts("difficulty level: medium", &myFILE);
 8005e7c:	4b27      	ldr	r3, [pc, #156]	; (8005f1c <game_record+0x1d8>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d107      	bne.n	8005e94 <game_record+0x150>
 8005e84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005e88:	3b20      	subs	r3, #32
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4825      	ldr	r0, [pc, #148]	; (8005f24 <game_record+0x1e0>)
 8005e8e:	f00c f90c 	bl	80120aa <f_puts>
 8005e92:	e00a      	b.n	8005eaa <game_record+0x166>
	  else if(level == 3) f_puts("difficulty level: hard", &myFILE);
 8005e94:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <game_record+0x1d8>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d106      	bne.n	8005eaa <game_record+0x166>
 8005e9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ea0:	3b20      	subs	r3, #32
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4820      	ldr	r0, [pc, #128]	; (8005f28 <game_record+0x1e4>)
 8005ea6:	f00c f900 	bl	80120aa <f_puts>


	  f_close(&myFILE);
 8005eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005eae:	3b20      	subs	r3, #32
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f00b fd64 	bl	801197e <f_close>
	  LCD_DrawString(0,0,"end",RED);
 8005eb6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005eba:	4a1c      	ldr	r2, [pc, #112]	; (8005f2c <game_record+0x1e8>)
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f7fd fb6c 	bl	800359c <LCD_DrawString>
	  f_mount(&myFATFS, " ", 0);
 8005ec4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8005ec8:	f103 0310 	add.w	r3, r3, #16
 8005ecc:	3b14      	subs	r3, #20
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4917      	ldr	r1, [pc, #92]	; (8005f30 <game_record+0x1ec>)
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f00a fd14 	bl	8010900 <f_mount>
  	f_write(&myFILE, myData, sizeof(myData), &numberofbytes);
  	f_close(&myFILE);
  	LCD_DrawString(0,0,"end",RED);
    }else LCD_DrawString(0,0,"failure",RED);*/

}
 8005ed8:	e006      	b.n	8005ee8 <game_record+0x1a4>
	  }else LCD_DrawString(0,0,"failure",RED);
 8005eda:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ede:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <game_record+0x1f0>)
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	f7fd fb5a 	bl	800359c <LCD_DrawString>
}
 8005ee8:	bf00      	nop
 8005eea:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	080158e0 	.word	0x080158e0
 8005ef8:	20006240 	.word	0x20006240
 8005efc:	0801584c 	.word	0x0801584c
 8005f00:	08015854 	.word	0x08015854
 8005f04:	20000286 	.word	0x20000286
 8005f08:	08015858 	.word	0x08015858
 8005f0c:	08015864 	.word	0x08015864
 8005f10:	20000008 	.word	0x20000008
 8005f14:	88888889 	.word	0x88888889
 8005f18:	08015870 	.word	0x08015870
 8005f1c:	20002893 	.word	0x20002893
 8005f20:	08015884 	.word	0x08015884
 8005f24:	0801589c 	.word	0x0801589c
 8005f28:	080158b8 	.word	0x080158b8
 8005f2c:	080158d0 	.word	0x080158d0
 8005f30:	080158d4 	.word	0x080158d4
 8005f34:	080158d8 	.word	0x080158d8

08005f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005f3e:	4b15      	ldr	r3, [pc, #84]	; (8005f94 <HAL_MspInit+0x5c>)
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <HAL_MspInit+0x5c>)
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	6193      	str	r3, [r2, #24]
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <HAL_MspInit+0x5c>)
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	60bb      	str	r3, [r7, #8]
 8005f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f56:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <HAL_MspInit+0x5c>)
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	4a0e      	ldr	r2, [pc, #56]	; (8005f94 <HAL_MspInit+0x5c>)
 8005f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f60:	61d3      	str	r3, [r2, #28]
 8005f62:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <HAL_MspInit+0x5c>)
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	607b      	str	r3, [r7, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <HAL_MspInit+0x60>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	4a04      	ldr	r2, [pc, #16]	; (8005f98 <HAL_MspInit+0x60>)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40010000 	.word	0x40010000

08005f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa4:	f107 0318 	add.w	r3, r7, #24
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	609a      	str	r2, [r3, #8]
 8005fb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a3c      	ldr	r2, [pc, #240]	; (80060a8 <HAL_ADC_MspInit+0x10c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d122      	bne.n	8006002 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005fbc:	4b3b      	ldr	r3, [pc, #236]	; (80060ac <HAL_ADC_MspInit+0x110>)
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	4a3a      	ldr	r2, [pc, #232]	; (80060ac <HAL_ADC_MspInit+0x110>)
 8005fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fc6:	6193      	str	r3, [r2, #24]
 8005fc8:	4b38      	ldr	r3, [pc, #224]	; (80060ac <HAL_ADC_MspInit+0x110>)
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fd4:	4b35      	ldr	r3, [pc, #212]	; (80060ac <HAL_ADC_MspInit+0x110>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	4a34      	ldr	r2, [pc, #208]	; (80060ac <HAL_ADC_MspInit+0x110>)
 8005fda:	f043 0310 	orr.w	r3, r3, #16
 8005fde:	6193      	str	r3, [r2, #24]
 8005fe0:	4b32      	ldr	r3, [pc, #200]	; (80060ac <HAL_ADC_MspInit+0x110>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN13_Pin;
 8005fec:	2308      	movs	r3, #8
 8005fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN13_GPIO_Port, &GPIO_InitStruct);
 8005ff4:	f107 0318 	add.w	r3, r7, #24
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	482d      	ldr	r0, [pc, #180]	; (80060b0 <HAL_ADC_MspInit+0x114>)
 8005ffc:	f003 f816 	bl	800902c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8006000:	e04e      	b.n	80060a0 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2b      	ldr	r2, [pc, #172]	; (80060b4 <HAL_ADC_MspInit+0x118>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d149      	bne.n	80060a0 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800600c:	4b27      	ldr	r3, [pc, #156]	; (80060ac <HAL_ADC_MspInit+0x110>)
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	4a26      	ldr	r2, [pc, #152]	; (80060ac <HAL_ADC_MspInit+0x110>)
 8006012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006016:	6193      	str	r3, [r2, #24]
 8006018:	4b24      	ldr	r3, [pc, #144]	; (80060ac <HAL_ADC_MspInit+0x110>)
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006024:	4b21      	ldr	r3, [pc, #132]	; (80060ac <HAL_ADC_MspInit+0x110>)
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	4a20      	ldr	r2, [pc, #128]	; (80060ac <HAL_ADC_MspInit+0x110>)
 800602a:	f043 0310 	orr.w	r3, r3, #16
 800602e:	6193      	str	r3, [r2, #24]
 8006030:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <HAL_ADC_MspInit+0x110>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800603c:	2305      	movs	r3, #5
 800603e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006040:	2303      	movs	r3, #3
 8006042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006044:	f107 0318 	add.w	r3, r7, #24
 8006048:	4619      	mov	r1, r3
 800604a:	4819      	ldr	r0, [pc, #100]	; (80060b0 <HAL_ADC_MspInit+0x114>)
 800604c:	f002 ffee 	bl	800902c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8006050:	4b19      	ldr	r3, [pc, #100]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 8006052:	4a1a      	ldr	r2, [pc, #104]	; (80060bc <HAL_ADC_MspInit+0x120>)
 8006054:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006056:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 8006058:	2200      	movs	r2, #0
 800605a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800605c:	4b16      	ldr	r3, [pc, #88]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 800605e:	2200      	movs	r2, #0
 8006060:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 8006064:	2280      	movs	r2, #128	; 0x80
 8006066:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006068:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 800606a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006070:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 8006072:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006076:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8006078:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 800607a:	2220      	movs	r2, #32
 800607c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800607e:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 8006080:	2200      	movs	r2, #0
 8006082:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8006084:	480c      	ldr	r0, [pc, #48]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 8006086:	f002 fc57 	bl	8008938 <HAL_DMA_Init>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 8006090:	f7fe fc9a 	bl	80049c8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 8006098:	621a      	str	r2, [r3, #32]
 800609a:	4a07      	ldr	r2, [pc, #28]	; (80060b8 <HAL_ADC_MspInit+0x11c>)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6253      	str	r3, [r2, #36]	; 0x24
}
 80060a0:	bf00      	nop
 80060a2:	3728      	adds	r7, #40	; 0x28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40012400 	.word	0x40012400
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40011000 	.word	0x40011000
 80060b4:	40013c00 	.word	0x40013c00
 80060b8:	200024d4 	.word	0x200024d4
 80060bc:	40020458 	.word	0x40020458

080060c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c8:	f107 0310 	add.w	r3, r7, #16
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a16      	ldr	r2, [pc, #88]	; (8006134 <HAL_I2C_MspInit+0x74>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d124      	bne.n	800612a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060e0:	4b15      	ldr	r3, [pc, #84]	; (8006138 <HAL_I2C_MspInit+0x78>)
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	4a14      	ldr	r2, [pc, #80]	; (8006138 <HAL_I2C_MspInit+0x78>)
 80060e6:	f043 0308 	orr.w	r3, r3, #8
 80060ea:	6193      	str	r3, [r2, #24]
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <HAL_I2C_MspInit+0x78>)
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80060f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80060fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060fe:	2312      	movs	r3, #18
 8006100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006102:	2303      	movs	r3, #3
 8006104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006106:	f107 0310 	add.w	r3, r7, #16
 800610a:	4619      	mov	r1, r3
 800610c:	480b      	ldr	r0, [pc, #44]	; (800613c <HAL_I2C_MspInit+0x7c>)
 800610e:	f002 ff8d 	bl	800902c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006112:	4b09      	ldr	r3, [pc, #36]	; (8006138 <HAL_I2C_MspInit+0x78>)
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	4a08      	ldr	r2, [pc, #32]	; (8006138 <HAL_I2C_MspInit+0x78>)
 8006118:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800611c:	61d3      	str	r3, [r2, #28]
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HAL_I2C_MspInit+0x78>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006126:	60bb      	str	r3, [r7, #8]
 8006128:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800612a:	bf00      	nop
 800612c:	3720      	adds	r7, #32
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40005800 	.word	0x40005800
 8006138:	40021000 	.word	0x40021000
 800613c:	40010c00 	.word	0x40010c00

08006140 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006148:	f107 0310 	add.w	r3, r7, #16
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	609a      	str	r2, [r3, #8]
 8006154:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2a      	ldr	r2, [pc, #168]	; (8006204 <HAL_I2S_MspInit+0xc4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d14c      	bne.n	80061fa <HAL_I2S_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006160:	4b29      	ldr	r3, [pc, #164]	; (8006208 <HAL_I2S_MspInit+0xc8>)
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	4a28      	ldr	r2, [pc, #160]	; (8006208 <HAL_I2S_MspInit+0xc8>)
 8006166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800616a:	61d3      	str	r3, [r2, #28]
 800616c:	4b26      	ldr	r3, [pc, #152]	; (8006208 <HAL_I2S_MspInit+0xc8>)
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006178:	4b23      	ldr	r3, [pc, #140]	; (8006208 <HAL_I2S_MspInit+0xc8>)
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	4a22      	ldr	r2, [pc, #136]	; (8006208 <HAL_I2S_MspInit+0xc8>)
 800617e:	f043 0308 	orr.w	r3, r3, #8
 8006182:	6193      	str	r3, [r2, #24]
 8006184:	4b20      	ldr	r3, [pc, #128]	; (8006208 <HAL_I2S_MspInit+0xc8>)
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	60bb      	str	r3, [r7, #8]
 800618e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006190:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8006194:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006196:	2302      	movs	r3, #2
 8006198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800619a:	2302      	movs	r3, #2
 800619c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800619e:	f107 0310 	add.w	r3, r7, #16
 80061a2:	4619      	mov	r1, r3
 80061a4:	4819      	ldr	r0, [pc, #100]	; (800620c <HAL_I2S_MspInit+0xcc>)
 80061a6:	f002 ff41 	bl	800902c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80061aa:	4b19      	ldr	r3, [pc, #100]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061ac:	4a19      	ldr	r2, [pc, #100]	; (8006214 <HAL_I2S_MspInit+0xd4>)
 80061ae:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061b0:	4b17      	ldr	r3, [pc, #92]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061b2:	2210      	movs	r2, #16
 80061b4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061b6:	4b16      	ldr	r3, [pc, #88]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061bc:	4b14      	ldr	r3, [pc, #80]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061be:	2280      	movs	r2, #128	; 0x80
 80061c0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80061c2:	4b13      	ldr	r3, [pc, #76]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061c8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80061ca:	4b11      	ldr	r3, [pc, #68]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061d0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80061d2:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061d4:	2220      	movs	r2, #32
 80061d6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061d8:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061da:	2200      	movs	r2, #0
 80061dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80061de:	480c      	ldr	r0, [pc, #48]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061e0:	f002 fbaa 	bl	8008938 <HAL_DMA_Init>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_I2S_MspInit+0xae>
    {
      Error_Handler();
 80061ea:	f7fe fbed 	bl	80049c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a07      	ldr	r2, [pc, #28]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80061f4:	4a06      	ldr	r2, [pc, #24]	; (8006210 <HAL_I2S_MspInit+0xd0>)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80061fa:	bf00      	nop
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40003800 	.word	0x40003800
 8006208:	40021000 	.word	0x40021000
 800620c:	40010c00 	.word	0x40010c00
 8006210:	200025a8 	.word	0x200025a8
 8006214:	40020058 	.word	0x40020058

08006218 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	; 0x28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006220:	f107 0318 	add.w	r3, r7, #24
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
 800622a:	609a      	str	r2, [r3, #8]
 800622c:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a22      	ldr	r2, [pc, #136]	; (80062bc <HAL_SD_MspInit+0xa4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d13c      	bne.n	80062b2 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006238:	4b21      	ldr	r3, [pc, #132]	; (80062c0 <HAL_SD_MspInit+0xa8>)
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <HAL_SD_MspInit+0xa8>)
 800623e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006242:	6153      	str	r3, [r2, #20]
 8006244:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <HAL_SD_MspInit+0xa8>)
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006250:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <HAL_SD_MspInit+0xa8>)
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	4a1a      	ldr	r2, [pc, #104]	; (80062c0 <HAL_SD_MspInit+0xa8>)
 8006256:	f043 0310 	orr.w	r3, r3, #16
 800625a:	6193      	str	r3, [r2, #24]
 800625c:	4b18      	ldr	r3, [pc, #96]	; (80062c0 <HAL_SD_MspInit+0xa8>)
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006268:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <HAL_SD_MspInit+0xa8>)
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	4a14      	ldr	r2, [pc, #80]	; (80062c0 <HAL_SD_MspInit+0xa8>)
 800626e:	f043 0320 	orr.w	r3, r3, #32
 8006272:	6193      	str	r3, [r2, #24]
 8006274:	4b12      	ldr	r3, [pc, #72]	; (80062c0 <HAL_SD_MspInit+0xa8>)
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8006280:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8006284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006286:	2302      	movs	r3, #2
 8006288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800628a:	2303      	movs	r3, #3
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800628e:	f107 0318 	add.w	r3, r7, #24
 8006292:	4619      	mov	r1, r3
 8006294:	480b      	ldr	r0, [pc, #44]	; (80062c4 <HAL_SD_MspInit+0xac>)
 8006296:	f002 fec9 	bl	800902c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800629a:	2304      	movs	r3, #4
 800629c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629e:	2302      	movs	r3, #2
 80062a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062a2:	2303      	movs	r3, #3
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062a6:	f107 0318 	add.w	r3, r7, #24
 80062aa:	4619      	mov	r1, r3
 80062ac:	4806      	ldr	r0, [pc, #24]	; (80062c8 <HAL_SD_MspInit+0xb0>)
 80062ae:	f002 febd 	bl	800902c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80062b2:	bf00      	nop
 80062b4:	3728      	adds	r7, #40	; 0x28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40018000 	.word	0x40018000
 80062c0:	40021000 	.word	0x40021000
 80062c4:	40011000 	.word	0x40011000
 80062c8:	40011400 	.word	0x40011400

080062cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d4:	f107 0310 	add.w	r3, r7, #16
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	605a      	str	r2, [r3, #4]
 80062de:	609a      	str	r2, [r3, #8]
 80062e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a28      	ldr	r2, [pc, #160]	; (8006388 <HAL_SPI_MspInit+0xbc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d149      	bne.n	8006380 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80062ec:	4b27      	ldr	r3, [pc, #156]	; (800638c <HAL_SPI_MspInit+0xc0>)
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	4a26      	ldr	r2, [pc, #152]	; (800638c <HAL_SPI_MspInit+0xc0>)
 80062f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062f6:	6193      	str	r3, [r2, #24]
 80062f8:	4b24      	ldr	r3, [pc, #144]	; (800638c <HAL_SPI_MspInit+0xc0>)
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006304:	4b21      	ldr	r3, [pc, #132]	; (800638c <HAL_SPI_MspInit+0xc0>)
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	4a20      	ldr	r2, [pc, #128]	; (800638c <HAL_SPI_MspInit+0xc0>)
 800630a:	f043 0304 	orr.w	r3, r3, #4
 800630e:	6193      	str	r3, [r2, #24]
 8006310:	4b1e      	ldr	r3, [pc, #120]	; (800638c <HAL_SPI_MspInit+0xc0>)
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800631c:	23a0      	movs	r3, #160	; 0xa0
 800631e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006320:	2302      	movs	r3, #2
 8006322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006324:	2303      	movs	r3, #3
 8006326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006328:	f107 0310 	add.w	r3, r7, #16
 800632c:	4619      	mov	r1, r3
 800632e:	4818      	ldr	r0, [pc, #96]	; (8006390 <HAL_SPI_MspInit+0xc4>)
 8006330:	f002 fe7c 	bl	800902c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8006334:	4b17      	ldr	r3, [pc, #92]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 8006336:	4a18      	ldr	r2, [pc, #96]	; (8006398 <HAL_SPI_MspInit+0xcc>)
 8006338:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800633a:	4b16      	ldr	r3, [pc, #88]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 800633c:	2210      	movs	r2, #16
 800633e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006340:	4b14      	ldr	r3, [pc, #80]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 8006342:	2200      	movs	r2, #0
 8006344:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 8006348:	2280      	movs	r2, #128	; 0x80
 800634a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800634c:	4b11      	ldr	r3, [pc, #68]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 800634e:	2200      	movs	r2, #0
 8006350:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006352:	4b10      	ldr	r3, [pc, #64]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 8006354:	2200      	movs	r2, #0
 8006356:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006358:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 800635a:	2200      	movs	r2, #0
 800635c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 8006360:	2200      	movs	r2, #0
 8006362:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006364:	480b      	ldr	r0, [pc, #44]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 8006366:	f002 fae7 	bl	8008938 <HAL_DMA_Init>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8006370:	f7fe fb2a 	bl	80049c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a07      	ldr	r2, [pc, #28]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 8006378:	649a      	str	r2, [r3, #72]	; 0x48
 800637a:	4a06      	ldr	r2, [pc, #24]	; (8006394 <HAL_SPI_MspInit+0xc8>)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006380:	bf00      	nop
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40013000 	.word	0x40013000
 800638c:	40021000 	.word	0x40021000
 8006390:	40010800 	.word	0x40010800
 8006394:	200026c8 	.word	0x200026c8
 8006398:	40020030 	.word	0x40020030

0800639c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <HAL_TIM_Base_MspInit+0x8c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d10c      	bne.n	80063c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80063ae:	4b1f      	ldr	r3, [pc, #124]	; (800642c <HAL_TIM_Base_MspInit+0x90>)
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	4a1e      	ldr	r2, [pc, #120]	; (800642c <HAL_TIM_Base_MspInit+0x90>)
 80063b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063b8:	6193      	str	r3, [r2, #24]
 80063ba:	4b1c      	ldr	r3, [pc, #112]	; (800642c <HAL_TIM_Base_MspInit+0x90>)
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80063c6:	e02a      	b.n	800641e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d0:	d10c      	bne.n	80063ec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80063d2:	4b16      	ldr	r3, [pc, #88]	; (800642c <HAL_TIM_Base_MspInit+0x90>)
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	4a15      	ldr	r2, [pc, #84]	; (800642c <HAL_TIM_Base_MspInit+0x90>)
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	61d3      	str	r3, [r2, #28]
 80063de:	4b13      	ldr	r3, [pc, #76]	; (800642c <HAL_TIM_Base_MspInit+0x90>)
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	693b      	ldr	r3, [r7, #16]
}
 80063ea:	e018      	b.n	800641e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a0f      	ldr	r2, [pc, #60]	; (8006430 <HAL_TIM_Base_MspInit+0x94>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d113      	bne.n	800641e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80063f6:	4b0d      	ldr	r3, [pc, #52]	; (800642c <HAL_TIM_Base_MspInit+0x90>)
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	4a0c      	ldr	r2, [pc, #48]	; (800642c <HAL_TIM_Base_MspInit+0x90>)
 80063fc:	f043 0302 	orr.w	r3, r3, #2
 8006400:	61d3      	str	r3, [r2, #28]
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <HAL_TIM_Base_MspInit+0x90>)
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800640e:	2200      	movs	r2, #0
 8006410:	2101      	movs	r1, #1
 8006412:	201d      	movs	r0, #29
 8006414:	f002 fa59 	bl	80088ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006418:	201d      	movs	r0, #29
 800641a:	f002 fa72 	bl	8008902 <HAL_NVIC_EnableIRQ>
}
 800641e:	bf00      	nop
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40021000 	.word	0x40021000
 8006430:	40000400 	.word	0x40000400

08006434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800643c:	f107 0310 	add.w	r3, r7, #16
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	605a      	str	r2, [r3, #4]
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1c      	ldr	r2, [pc, #112]	; (80064c0 <HAL_UART_MspInit+0x8c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d131      	bne.n	80064b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006454:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <HAL_UART_MspInit+0x90>)
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <HAL_UART_MspInit+0x90>)
 800645a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800645e:	6193      	str	r3, [r2, #24]
 8006460:	4b18      	ldr	r3, [pc, #96]	; (80064c4 <HAL_UART_MspInit+0x90>)
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <HAL_UART_MspInit+0x90>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <HAL_UART_MspInit+0x90>)
 8006472:	f043 0304 	orr.w	r3, r3, #4
 8006476:	6193      	str	r3, [r2, #24]
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_UART_MspInit+0x90>)
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800648a:	2302      	movs	r3, #2
 800648c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800648e:	2303      	movs	r3, #3
 8006490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006492:	f107 0310 	add.w	r3, r7, #16
 8006496:	4619      	mov	r1, r3
 8006498:	480b      	ldr	r0, [pc, #44]	; (80064c8 <HAL_UART_MspInit+0x94>)
 800649a:	f002 fdc7 	bl	800902c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800649e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ac:	f107 0310 	add.w	r3, r7, #16
 80064b0:	4619      	mov	r1, r3
 80064b2:	4805      	ldr	r0, [pc, #20]	; (80064c8 <HAL_UART_MspInit+0x94>)
 80064b4:	f002 fdba 	bl	800902c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80064b8:	bf00      	nop
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40013800 	.word	0x40013800
 80064c4:	40021000 	.word	0x40021000
 80064c8:	40010800 	.word	0x40010800

080064cc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80064d2:	f107 0308 	add.w	r3, r7, #8
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	605a      	str	r2, [r3, #4]
 80064dc:	609a      	str	r2, [r3, #8]
 80064de:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80064e0:	4b18      	ldr	r3, [pc, #96]	; (8006544 <HAL_FSMC_MspInit+0x78>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d129      	bne.n	800653c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80064e8:	4b16      	ldr	r3, [pc, #88]	; (8006544 <HAL_FSMC_MspInit+0x78>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80064ee:	4b16      	ldr	r3, [pc, #88]	; (8006548 <HAL_FSMC_MspInit+0x7c>)
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	4a15      	ldr	r2, [pc, #84]	; (8006548 <HAL_FSMC_MspInit+0x7c>)
 80064f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f8:	6153      	str	r3, [r2, #20]
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <HAL_FSMC_MspInit+0x7c>)
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8006506:	f64f 7380 	movw	r3, #65408	; 0xff80
 800650a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650c:	2302      	movs	r3, #2
 800650e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006510:	2303      	movs	r3, #3
 8006512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006514:	f107 0308 	add.w	r3, r7, #8
 8006518:	4619      	mov	r1, r3
 800651a:	480c      	ldr	r0, [pc, #48]	; (800654c <HAL_FSMC_MspInit+0x80>)
 800651c:	f002 fd86 	bl	800902c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006520:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8006524:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006526:	2302      	movs	r3, #2
 8006528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800652a:	2303      	movs	r3, #3
 800652c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800652e:	f107 0308 	add.w	r3, r7, #8
 8006532:	4619      	mov	r1, r3
 8006534:	4806      	ldr	r0, [pc, #24]	; (8006550 <HAL_FSMC_MspInit+0x84>)
 8006536:	f002 fd79 	bl	800902c <HAL_GPIO_Init>
 800653a:	e000      	b.n	800653e <HAL_FSMC_MspInit+0x72>
    return;
 800653c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	200028a8 	.word	0x200028a8
 8006548:	40021000 	.word	0x40021000
 800654c:	40011800 	.word	0x40011800
 8006550:	40011400 	.word	0x40011400

08006554 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800655c:	f7ff ffb6 	bl	80064cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800656c:	e7fe      	b.n	800656c <NMI_Handler+0x4>

0800656e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800656e:	b480      	push	{r7}
 8006570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006572:	e7fe      	b.n	8006572 <HardFault_Handler+0x4>

08006574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006578:	e7fe      	b.n	8006578 <MemManage_Handler+0x4>

0800657a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800657a:	b480      	push	{r7}
 800657c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800657e:	e7fe      	b.n	800657e <BusFault_Handler+0x4>

08006580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006584:	e7fe      	b.n	8006584 <UsageFault_Handler+0x4>

08006586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006586:	b480      	push	{r7}
 8006588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800658a:	bf00      	nop
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr

08006592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006592:	b480      	push	{r7}
 8006594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006596:	bf00      	nop
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800659e:	b480      	push	{r7}
 80065a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065a2:	bf00      	nop
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065ae:	f001 fa2b 	bl	8007a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065b2:	bf00      	nop
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	//restart the game

  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET){	//if k1 press
 80065bc:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <EXTI0_IRQHandler+0x2c>)
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <EXTI0_IRQHandler+0x22>

	  //restart_flag = 1;
	  //restart();
	  hearts = 0;
 80065c8:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <EXTI0_IRQHandler+0x30>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]

	 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80065ce:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <EXTI0_IRQHandler+0x2c>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	615a      	str	r2, [r3, #20]
	 HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 80065d4:	2001      	movs	r0, #1
 80065d6:	f002 ff05 	bl	80093e4 <HAL_GPIO_EXTI_Callback>

  }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K1_button_Pin);
 80065da:	2001      	movs	r0, #1
 80065dc:	f002 feea 	bl	80093b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80065e0:	bf00      	nop
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40010400 	.word	0x40010400
 80065e8:	2000287e 	.word	0x2000287e

080065ec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	//touch screen
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET){
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <EXTI4_IRQHandler+0x2c>)
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f003 0310 	and.w	r3, r3, #16
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d008      	beq.n	800660e <EXTI4_IRQHandler+0x22>
	ucXPT2046_TouchFlag = 1;
 80065fc:	4b07      	ldr	r3, [pc, #28]	; (800661c <EXTI4_IRQHandler+0x30>)
 80065fe:	2201      	movs	r2, #1
 8006600:	701a      	strb	r2, [r3, #0]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8006602:	4b05      	ldr	r3, [pc, #20]	; (8006618 <EXTI4_IRQHandler+0x2c>)
 8006604:	2210      	movs	r2, #16
 8006606:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8006608:	2010      	movs	r0, #16
 800660a:	f002 feeb 	bl	80093e4 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_touchE4_Pin);
 800660e:	2010      	movs	r0, #16
 8006610:	f002 fed0 	bl	80093b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006614:	bf00      	nop
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40010400 	.word	0x40010400
 800661c:	20006235 	.word	0x20006235

08006620 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006624:	4802      	ldr	r0, [pc, #8]	; (8006630 <DMA1_Channel3_IRQHandler+0x10>)
 8006626:	f002 fa97 	bl	8008b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800662a:	bf00      	nop
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	200026c8 	.word	0x200026c8

08006634 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006638:	4802      	ldr	r0, [pc, #8]	; (8006644 <DMA1_Channel5_IRQHandler+0x10>)
 800663a:	f002 fa8d 	bl	8008b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800663e:	bf00      	nop
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	200025a8 	.word	0x200025a8

08006648 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800664c:	4802      	ldr	r0, [pc, #8]	; (8006658 <TIM3_IRQHandler+0x10>)
 800664e:	f006 fcc3 	bl	800cfd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	2000279c 	.word	0x2000279c

0800665c <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8006660:	4802      	ldr	r0, [pc, #8]	; (800666c <DMA2_Channel4_5_IRQHandler+0x10>)
 8006662:	f002 fa79 	bl	8008b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8006666:	bf00      	nop
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	200024d4 	.word	0x200024d4

08006670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
	return 1;
 8006674:	2301      	movs	r3, #1
}
 8006676:	4618      	mov	r0, r3
 8006678:	46bd      	mov	sp, r7
 800667a:	bc80      	pop	{r7}
 800667c:	4770      	bx	lr

0800667e <_kill>:

int _kill(int pid, int sig)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006688:	f00b fe90 	bl	80123ac <__errno>
 800668c:	4603      	mov	r3, r0
 800668e:	2216      	movs	r2, #22
 8006690:	601a      	str	r2, [r3, #0]
	return -1;
 8006692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <_exit>:

void _exit (int status)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80066a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff ffe7 	bl	800667e <_kill>
	while (1) {}		/* Make sure we hang here */
 80066b0:	e7fe      	b.n	80066b0 <_exit+0x12>

080066b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	e00a      	b.n	80066da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80066c4:	f3af 8000 	nop.w
 80066c8:	4601      	mov	r1, r0
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	60ba      	str	r2, [r7, #8]
 80066d0:	b2ca      	uxtb	r2, r1
 80066d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	3301      	adds	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	429a      	cmp	r2, r3
 80066e0:	dbf0      	blt.n	80066c4 <_read+0x12>
	}

return len;
 80066e2:	687b      	ldr	r3, [r7, #4]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e009      	b.n	8006712 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	60ba      	str	r2, [r7, #8]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	3301      	adds	r3, #1
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	429a      	cmp	r2, r3
 8006718:	dbf1      	blt.n	80066fe <_write+0x12>
	}
	return len;
 800671a:	687b      	ldr	r3, [r7, #4]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <_close>:

int _close(int file)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	return -1;
 800672c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800674a:	605a      	str	r2, [r3, #4]
	return 0;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <_isatty>:

int _isatty(int file)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	return 1;
 8006760:	2301      	movs	r3, #1
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
	return 0;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr

08006784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800678c:	4a14      	ldr	r2, [pc, #80]	; (80067e0 <_sbrk+0x5c>)
 800678e:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <_sbrk+0x60>)
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006798:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <_sbrk+0x64>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d102      	bne.n	80067a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <_sbrk+0x64>)
 80067a2:	4a12      	ldr	r2, [pc, #72]	; (80067ec <_sbrk+0x68>)
 80067a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80067a6:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <_sbrk+0x64>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d207      	bcs.n	80067c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067b4:	f00b fdfa 	bl	80123ac <__errno>
 80067b8:	4603      	mov	r3, r0
 80067ba:	220c      	movs	r2, #12
 80067bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067c2:	e009      	b.n	80067d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80067c4:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <_sbrk+0x64>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <_sbrk+0x64>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	4a05      	ldr	r2, [pc, #20]	; (80067e8 <_sbrk+0x64>)
 80067d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20010000 	.word	0x20010000
 80067e4:	00000400 	.word	0x00000400
 80067e8:	200028ac 	.word	0x200028ac
 80067ec:	20006280 	.word	0x20006280

080067f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr

080067fc <delay>:
uint16_t temp;
float temperature;
extern TIM_HandleTypeDef htim1;

void delay (uint32_t us)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim1,0);
 8006804:	4b08      	ldr	r3, [pc, #32]	; (8006828 <delay+0x2c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2200      	movs	r2, #0
 800680a:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim1))<us);
 800680c:	bf00      	nop
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <delay+0x2c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d8f9      	bhi.n	800680e <delay+0x12>
}
 800681a:	bf00      	nop
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	2000270c 	.word	0x2000270c

0800682c <gpio_set_input>:
GPIO_InitTypeDef GPIO_InitStruct;

void gpio_set_input (void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006830:	4b07      	ldr	r3, [pc, #28]	; (8006850 <gpio_set_input+0x24>)
 8006832:	2220      	movs	r2, #32
 8006834:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006836:	4b06      	ldr	r3, [pc, #24]	; (8006850 <gpio_set_input+0x24>)
 8006838:	2200      	movs	r2, #0
 800683a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <gpio_set_input+0x24>)
 800683e:	2201      	movs	r2, #1
 8006840:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006842:	4903      	ldr	r1, [pc, #12]	; (8006850 <gpio_set_input+0x24>)
 8006844:	4803      	ldr	r0, [pc, #12]	; (8006854 <gpio_set_input+0x28>)
 8006846:	f002 fbf1 	bl	800902c <HAL_GPIO_Init>
}
 800684a:	bf00      	nop
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	200028b8 	.word	0x200028b8
 8006854:	40011000 	.word	0x40011000

08006858 <gpio_set_output>:


void gpio_set_output (void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800685c:	4b08      	ldr	r3, [pc, #32]	; (8006880 <gpio_set_output+0x28>)
 800685e:	2220      	movs	r2, #32
 8006860:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <gpio_set_output+0x28>)
 8006864:	2201      	movs	r2, #1
 8006866:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <gpio_set_output+0x28>)
 800686a:	2200      	movs	r2, #0
 800686c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800686e:	4b04      	ldr	r3, [pc, #16]	; (8006880 <gpio_set_output+0x28>)
 8006870:	2202      	movs	r2, #2
 8006872:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006874:	4902      	ldr	r1, [pc, #8]	; (8006880 <gpio_set_output+0x28>)
 8006876:	4803      	ldr	r0, [pc, #12]	; (8006884 <gpio_set_output+0x2c>)
 8006878:	f002 fbd8 	bl	800902c <HAL_GPIO_Init>
}
 800687c:	bf00      	nop
 800687e:	bd80      	pop	{r7, pc}
 8006880:	200028b8 	.word	0x200028b8
 8006884:	40011000 	.word	0x40011000

08006888 <ds18b20_init>:


uint8_t ds18b20_init (void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
	gpio_set_output ();   // set the pin as output
 800688c:	f7ff ffe4 	bl	8006858 <gpio_set_output>
	HAL_GPIO_WritePin (GPIOC, GPIO_PIN_5, 0);  // pull the pin low
 8006890:	2200      	movs	r2, #0
 8006892:	2120      	movs	r1, #32
 8006894:	480f      	ldr	r0, [pc, #60]	; (80068d4 <ds18b20_init+0x4c>)
 8006896:	f002 fd74 	bl	8009382 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 800689a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800689e:	f7ff ffad 	bl	80067fc <delay>

	gpio_set_input ();    // set the pin as input
 80068a2:	f7ff ffc3 	bl	800682c <gpio_set_input>
	delay (80);    // delay according to datasheet
 80068a6:	2050      	movs	r0, #80	; 0x50
 80068a8:	f7ff ffa8 	bl	80067fc <delay>

	if (!(HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_5)))    // if the pin is low i.e the presence pulse is there
 80068ac:	2120      	movs	r1, #32
 80068ae:	4809      	ldr	r0, [pc, #36]	; (80068d4 <ds18b20_init+0x4c>)
 80068b0:	f002 fd50 	bl	8009354 <HAL_GPIO_ReadPin>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d105      	bne.n	80068c6 <ds18b20_init+0x3e>
	{
		delay (400);  // wait for 400 us
 80068ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80068be:	f7ff ff9d 	bl	80067fc <delay>
		return 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e004      	b.n	80068d0 <ds18b20_init+0x48>
	}

	else
	{
		delay (400);
 80068c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80068ca:	f7ff ff97 	bl	80067fc <delay>
		return 1;
 80068ce:	2301      	movs	r3, #1
	}
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40011000 	.word	0x40011000

080068d8 <write_ds>:

void write_ds (uint8_t data)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	71fb      	strb	r3, [r7, #7]
	gpio_set_output ();   // set as output
 80068e2:	f7ff ffb9 	bl	8006858 <gpio_set_output>

	for (int i=0; i<8; i++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	e026      	b.n	800693a <write_ds+0x62>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80068ec:	79fa      	ldrb	r2, [r7, #7]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	fa42 f303 	asr.w	r3, r2, r3
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00f      	beq.n	800691c <write_ds+0x44>
		{
			// write 1

			gpio_set_output ();  // set as output
 80068fc:	f7ff ffac 	bl	8006858 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOC, GPIO_PIN_5, 0);  // pull the pin LOW
 8006900:	2200      	movs	r2, #0
 8006902:	2120      	movs	r1, #32
 8006904:	4811      	ldr	r0, [pc, #68]	; (800694c <write_ds+0x74>)
 8006906:	f002 fd3c 	bl	8009382 <HAL_GPIO_WritePin>
			delay (1);  // wait for  us
 800690a:	2001      	movs	r0, #1
 800690c:	f7ff ff76 	bl	80067fc <delay>

			gpio_set_input ();  // set as input
 8006910:	f7ff ff8c 	bl	800682c <gpio_set_input>
			delay (60);  // wait for 60 us
 8006914:	203c      	movs	r0, #60	; 0x3c
 8006916:	f7ff ff71 	bl	80067fc <delay>
 800691a:	e00b      	b.n	8006934 <write_ds+0x5c>

		else  // if the bit is low
		{
			// write 0

			gpio_set_output ();
 800691c:	f7ff ff9c 	bl	8006858 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOC, GPIO_PIN_5, 0);  // pull the pin LOW
 8006920:	2200      	movs	r2, #0
 8006922:	2120      	movs	r1, #32
 8006924:	4809      	ldr	r0, [pc, #36]	; (800694c <write_ds+0x74>)
 8006926:	f002 fd2c 	bl	8009382 <HAL_GPIO_WritePin>
			delay (60);  // wait for 60 us
 800692a:	203c      	movs	r0, #60	; 0x3c
 800692c:	f7ff ff66 	bl	80067fc <delay>

			gpio_set_input ();
 8006930:	f7ff ff7c 	bl	800682c <gpio_set_input>
	for (int i=0; i<8; i++)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b07      	cmp	r3, #7
 800693e:	ddd5      	ble.n	80068ec <write_ds+0x14>
		}
	}
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40011000 	.word	0x40011000

08006950 <read_ds>:


uint8_t read_ds (void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8006956:	2300      	movs	r3, #0
 8006958:	71fb      	strb	r3, [r7, #7]
	gpio_set_input ();
 800695a:	f7ff ff67 	bl	800682c <gpio_set_input>

	for (int i=0;i<8;i++)
 800695e:	2300      	movs	r3, #0
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	e022      	b.n	80069aa <read_ds+0x5a>
	{
		gpio_set_output ();   // set as output
 8006964:	f7ff ff78 	bl	8006858 <gpio_set_output>

		HAL_GPIO_WritePin (GPIOC, GPIO_PIN_5, 0);  // pull the data pin LOW
 8006968:	2200      	movs	r2, #0
 800696a:	2120      	movs	r1, #32
 800696c:	4813      	ldr	r0, [pc, #76]	; (80069bc <read_ds+0x6c>)
 800696e:	f002 fd08 	bl	8009382 <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 8006972:	2002      	movs	r0, #2
 8006974:	f7ff ff42 	bl	80067fc <delay>

		gpio_set_input ();  // set as input
 8006978:	f7ff ff58 	bl	800682c <gpio_set_input>
		if (HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_5))  // if the pin is HIGH
 800697c:	2120      	movs	r1, #32
 800697e:	480f      	ldr	r0, [pc, #60]	; (80069bc <read_ds+0x6c>)
 8006980:	f002 fce8 	bl	8009354 <HAL_GPIO_ReadPin>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <read_ds+0x4e>
		{
			value |= 1<<i;  // read = 1
 800698a:	2201      	movs	r2, #1
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	b25a      	sxtb	r2, r3
 8006994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006998:	4313      	orrs	r3, r2
 800699a:	b25b      	sxtb	r3, r3
 800699c:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);  // wait for 60 us
 800699e:	203c      	movs	r0, #60	; 0x3c
 80069a0:	f7ff ff2c 	bl	80067fc <delay>
	for (int i=0;i<8;i++)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b07      	cmp	r3, #7
 80069ae:	ddd9      	ble.n	8006964 <read_ds+0x14>
	}
	return value;
 80069b0:	79fb      	ldrb	r3, [r7, #7]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40011000 	.word	0x40011000

080069c0 <temp_value>:

float temp_value(){
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
	check = ds18b20_init ();
 80069c4:	f7ff ff60 	bl	8006888 <ds18b20_init>
 80069c8:	4603      	mov	r3, r0
 80069ca:	461a      	mov	r2, r3
 80069cc:	4b1f      	ldr	r3, [pc, #124]	; (8006a4c <temp_value+0x8c>)
 80069ce:	701a      	strb	r2, [r3, #0]
	write_ds (0xCC);  // skip ROM
 80069d0:	20cc      	movs	r0, #204	; 0xcc
 80069d2:	f7ff ff81 	bl	80068d8 <write_ds>
	write_ds (0x44);  // convert t
 80069d6:	2044      	movs	r0, #68	; 0x44
 80069d8:	f7ff ff7e 	bl	80068d8 <write_ds>

	HAL_Delay (500);
 80069dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069e0:	f001 f82e 	bl	8007a40 <HAL_Delay>

	ds18b20_init ();
 80069e4:	f7ff ff50 	bl	8006888 <ds18b20_init>
	write_ds (0xCC);  // skip ROM
 80069e8:	20cc      	movs	r0, #204	; 0xcc
 80069ea:	f7ff ff75 	bl	80068d8 <write_ds>
	write_ds (0xBE);  // Read Scratchpad
 80069ee:	20be      	movs	r0, #190	; 0xbe
 80069f0:	f7ff ff72 	bl	80068d8 <write_ds>

	temp_l = read_ds();
 80069f4:	f7ff ffac 	bl	8006950 <read_ds>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <temp_value+0x90>)
 80069fe:	701a      	strb	r2, [r3, #0]
	temp_h = read_ds();
 8006a00:	f7ff ffa6 	bl	8006950 <read_ds>
 8006a04:	4603      	mov	r3, r0
 8006a06:	461a      	mov	r2, r3
 8006a08:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <temp_value+0x94>)
 8006a0a:	701a      	strb	r2, [r3, #0]
	temp = (temp_h<<8)|temp_l;
 8006a0c:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <temp_value+0x94>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	b21a      	sxth	r2, r3
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <temp_value+0x90>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b21b      	sxth	r3, r3
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <temp_value+0x98>)
 8006a22:	801a      	strh	r2, [r3, #0]
	temperature = (float)temp/16;
 8006a24:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <temp_value+0x98>)
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fa f9bf 	bl	8000dac <__aeabi_ui2f>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fa fac5 	bl	8000fc4 <__aeabi_fdiv>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <temp_value+0x9c>)
 8006a40:	601a      	str	r2, [r3, #0]

	return temperature;
 8006a42:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <temp_value+0x9c>)
 8006a44:	681b      	ldr	r3, [r3, #0]

}
 8006a46:	4618      	mov	r0, r3
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000044 	.word	0x20000044
 8006a50:	200028b0 	.word	0x200028b0
 8006a54:	200028b1 	.word	0x200028b1
 8006a58:	200028b2 	.word	0x200028b2
 8006a5c:	200028b4 	.word	0x200028b4

08006a60 <play_audio>:
uint32_t recording_size = 0;
uint32_t played_size = 0;

Callback_Result_t callback_result = UNKNOWN;

void play_audio(char *filename){
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 callback_result = UNKNOWN;
 8006a68:	4b3a      	ldr	r3, [pc, #232]	; (8006b54 <play_audio+0xf4>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	701a      	strb	r2, [r3, #0]
 fread_size = 0;
 8006a6e:	4b3a      	ldr	r3, [pc, #232]	; (8006b58 <play_audio+0xf8>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
 recording_size = 0;
 8006a74:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <play_audio+0xfc>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
 played_size = 0;
 8006a7a:	4b39      	ldr	r3, [pc, #228]	; (8006b60 <play_audio+0x100>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

 fresult = f_mount(&fatfs,SDPath,1);
 8006a80:	2201      	movs	r2, #1
 8006a82:	4938      	ldr	r1, [pc, #224]	; (8006b64 <play_audio+0x104>)
 8006a84:	4838      	ldr	r0, [pc, #224]	; (8006b68 <play_audio+0x108>)
 8006a86:	f009 ff3b 	bl	8010900 <f_mount>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	4b37      	ldr	r3, [pc, #220]	; (8006b6c <play_audio+0x10c>)
 8006a90:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) return;
 8006a92:	4b36      	ldr	r3, [pc, #216]	; (8006b6c <play_audio+0x10c>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d156      	bne.n	8006b48 <play_audio+0xe8>

  fresult = f_open(&fil, filename, FA_OPEN_EXISTING|FA_READ); // WIN3 & LOSE2.wav
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4834      	ldr	r0, [pc, #208]	; (8006b70 <play_audio+0x110>)
 8006aa0:	f009 ff78 	bl	8010994 <f_open>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	4b30      	ldr	r3, [pc, #192]	; (8006b6c <play_audio+0x10c>)
 8006aaa:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) return;
 8006aac:	4b2f      	ldr	r3, [pc, #188]	; (8006b6c <play_audio+0x10c>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d14b      	bne.n	8006b4c <play_audio+0xec>

  f_lseek(&fil, 40); //wav file header 40th byte -> size of file
 8006ab4:	2128      	movs	r1, #40	; 0x28
 8006ab6:	482e      	ldr	r0, [pc, #184]	; (8006b70 <play_audio+0x110>)
 8006ab8:	f00a ff8c 	bl	80119d4 <f_lseek>
  //LCD_DrawString(0,0,"recording seek", BLUE);

  f_read(&fil, &recording_size, 4, &fread_size);
 8006abc:	4b26      	ldr	r3, [pc, #152]	; (8006b58 <play_audio+0xf8>)
 8006abe:	2204      	movs	r2, #4
 8006ac0:	4926      	ldr	r1, [pc, #152]	; (8006b5c <play_audio+0xfc>)
 8006ac2:	482b      	ldr	r0, [pc, #172]	; (8006b70 <play_audio+0x110>)
 8006ac4:	f00a fa6c 	bl	8010fa0 <f_read>
  //LCD_DrawString(0,0,"recording size", BLUE);

  recording_size /= 2;	// 2 means 2B (16 bit per sample)
 8006ac8:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <play_audio+0xfc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	4a23      	ldr	r2, [pc, #140]	; (8006b5c <play_audio+0xfc>)
 8006ad0:	6013      	str	r3, [r2, #0]

  f_read(&fil,samples, 6400, &fread_size);
 8006ad2:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <play_audio+0xf8>)
 8006ad4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8006ad8:	4926      	ldr	r1, [pc, #152]	; (8006b74 <play_audio+0x114>)
 8006ada:	4825      	ldr	r0, [pc, #148]	; (8006b70 <play_audio+0x110>)
 8006adc:	f00a fa60 	bl	8010fa0 <f_read>

  HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t *) samples, 3200);
 8006ae0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8006ae4:	4923      	ldr	r1, [pc, #140]	; (8006b74 <play_audio+0x114>)
 8006ae6:	4824      	ldr	r0, [pc, #144]	; (8006b78 <play_audio+0x118>)
 8006ae8:	f003 fd6c 	bl	800a5c4 <HAL_I2S_Transmit_DMA>

  //LCD_DrawString(0,0,"start   while", RED);

  while (1)
    {
  	  if(callback_result == HALF_COMPLETED)
 8006aec:	4b19      	ldr	r3, [pc, #100]	; (8006b54 <play_audio+0xf4>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d109      	bne.n	8006b08 <play_audio+0xa8>
  	  	  {
  	  		  f_read(&fil, samples, 3200, &fread_size);
 8006af4:	4b18      	ldr	r3, [pc, #96]	; (8006b58 <play_audio+0xf8>)
 8006af6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8006afa:	491e      	ldr	r1, [pc, #120]	; (8006b74 <play_audio+0x114>)
 8006afc:	481c      	ldr	r0, [pc, #112]	; (8006b70 <play_audio+0x110>)
 8006afe:	f00a fa4f 	bl	8010fa0 <f_read>
  	  		  callback_result = UNKNOWN;
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <play_audio+0xf4>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
  	  	  }

  	  	  if(callback_result == FULL_COMPLETED)
 8006b08:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <play_audio+0xf4>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d109      	bne.n	8006b24 <play_audio+0xc4>
  	  	  {
  	  		  f_read(&fil, &samples[1600], 3200, &fread_size);
 8006b10:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <play_audio+0xf8>)
 8006b12:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8006b16:	4919      	ldr	r1, [pc, #100]	; (8006b7c <play_audio+0x11c>)
 8006b18:	4815      	ldr	r0, [pc, #84]	; (8006b70 <play_audio+0x110>)
 8006b1a:	f00a fa41 	bl	8010fa0 <f_read>
  	  		  callback_result = UNKNOWN;
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <play_audio+0xf4>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
  	  	  }

  	  	  if(played_size >= recording_size)
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <play_audio+0x100>)
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <play_audio+0xfc>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d3dd      	bcc.n	8006aec <play_audio+0x8c>
  	  	  {
  	  		  HAL_I2S_DMAStop(&hi2s2);
 8006b30:	4811      	ldr	r0, [pc, #68]	; (8006b78 <play_audio+0x118>)
 8006b32:	f003 fdef 	bl	800a714 <HAL_I2S_DMAStop>
  	  		//LCD_DrawString(0,0,"stop     ", RED);
  	  		f_close(&fil);
 8006b36:	480e      	ldr	r0, [pc, #56]	; (8006b70 <play_audio+0x110>)
 8006b38:	f00a ff21 	bl	801197e <f_close>
  	  		 f_mount(&fatfs," ",0);
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4910      	ldr	r1, [pc, #64]	; (8006b80 <play_audio+0x120>)
 8006b40:	4809      	ldr	r0, [pc, #36]	; (8006b68 <play_audio+0x108>)
 8006b42:	f009 fedd 	bl	8010900 <f_mount>
  	  		break;
 8006b46:	e002      	b.n	8006b4e <play_audio+0xee>
  if (fresult != FR_OK) return;
 8006b48:	bf00      	nop
 8006b4a:	e000      	b.n	8006b4e <play_audio+0xee>
  if (fresult != FR_OK) return;
 8006b4c:	bf00      	nop
  	  	  }
    }
}
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20006234 	.word	0x20006234
 8006b58:	20006228 	.word	0x20006228
 8006b5c:	2000622c 	.word	0x2000622c
 8006b60:	20006230 	.word	0x20006230
 8006b64:	20006240 	.word	0x20006240
 8006b68:	200041c8 	.word	0x200041c8
 8006b6c:	20006224 	.word	0x20006224
 8006b70:	200051f8 	.word	0x200051f8
 8006b74:	200028c8 	.word	0x200028c8
 8006b78:	2000256c 	.word	0x2000256c
 8006b7c:	20003548 	.word	0x20003548
 8006b80:	080158ec 	.word	0x080158ec

08006b84 <HAL_I2S_TxHalfCpltCallback>:

  void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
  {
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  	callback_result = HALF_COMPLETED;
 8006b8c:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <HAL_I2S_TxHalfCpltCallback+0x18>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
  }
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr
 8006b9c:	20006234 	.word	0x20006234

08006ba0 <HAL_I2S_TxCpltCallback>:
  void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
  {
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  	callback_result = FULL_COMPLETED;
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <HAL_I2S_TxCpltCallback+0x24>)
 8006baa:	2202      	movs	r2, #2
 8006bac:	701a      	strb	r2, [r3, #0]
  	played_size += 3200;
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <HAL_I2S_TxCpltCallback+0x28>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8006bb6:	4a04      	ldr	r2, [pc, #16]	; (8006bc8 <HAL_I2S_TxCpltCallback+0x28>)
 8006bb8:	6013      	str	r3, [r2, #0]
  }
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr
 8006bc4:	20006234 	.word	0x20006234
 8006bc8:	20006230 	.word	0x20006230

08006bcc <XPT2046_DelayUS>:
// touch v+/vref * width


// for doing delay for touch pad
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e00a      	b.n	8006bf0 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;
 8006bda:	230c      	movs	r3, #12
 8006bdc:	72fb      	strb	r3, [r7, #11]

		while ( uc -- );
 8006bde:	bf00      	nop
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	1e5a      	subs	r2, r3, #1
 8006be4:	72fa      	strb	r2, [r7, #11]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1fa      	bne.n	8006be0 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d3f0      	bcc.n	8006bda <XPT2046_DelayUS+0xe>

	}

}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <XPT2046_WriteCMD>:
 * write command
 * 0x90 - y+
 * 0xd0 - x+
 */
static void XPT2046_WriteCMD ( uint8_t ucCmd )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2104      	movs	r1, #4
 8006c12:	481d      	ldr	r0, [pc, #116]	; (8006c88 <XPT2046_WriteCMD+0x84>)
 8006c14:	f002 fbb5 	bl	8009382 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	481a      	ldr	r0, [pc, #104]	; (8006c88 <XPT2046_WriteCMD+0x84>)
 8006c1e:	f002 fbb0 	bl	8009382 <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ )
 8006c22:	2300      	movs	r3, #0
 8006c24:	73fb      	strb	r3, [r7, #15]
 8006c26:	e027      	b.n	8006c78 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8006c28:	79fa      	ldrb	r2, [r7, #7]
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	f1c3 0307 	rsb	r3, r3, #7
 8006c30:	fa42 f303 	asr.w	r3, r2, r3
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <XPT2046_WriteCMD+0x44>
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	2104      	movs	r1, #4
 8006c40:	4811      	ldr	r0, [pc, #68]	; (8006c88 <XPT2046_WriteCMD+0x84>)
 8006c42:	f002 fb9e 	bl	8009382 <HAL_GPIO_WritePin>
 8006c46:	e004      	b.n	8006c52 <XPT2046_WriteCMD+0x4e>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2104      	movs	r1, #4
 8006c4c:	480e      	ldr	r0, [pc, #56]	; (8006c88 <XPT2046_WriteCMD+0x84>)
 8006c4e:	f002 fb98 	bl	8009382 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 8006c52:	2005      	movs	r0, #5
 8006c54:	f7ff ffba 	bl	8006bcc <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8006c58:	2201      	movs	r2, #1
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	480a      	ldr	r0, [pc, #40]	; (8006c88 <XPT2046_WriteCMD+0x84>)
 8006c5e:	f002 fb90 	bl	8009382 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 8006c62:	2005      	movs	r0, #5
 8006c64:	f7ff ffb2 	bl	8006bcc <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4806      	ldr	r0, [pc, #24]	; (8006c88 <XPT2046_WriteCMD+0x84>)
 8006c6e:	f002 fb88 	bl	8009382 <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ )
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	3301      	adds	r3, #1
 8006c76:	73fb      	strb	r3, [r7, #15]
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b07      	cmp	r3, #7
 8006c7c:	d9d4      	bls.n	8006c28 <XPT2046_WriteCMD+0x24>
	}

}
 8006c7e:	bf00      	nop
 8006c80:	bf00      	nop
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40011800 	.word	0x40011800

08006c8c <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 8006c92:	2300      	movs	r3, #0
 8006c94:	80bb      	strh	r3, [r7, #4]



	macXPT2046_MOSI_0();
 8006c96:	2200      	movs	r2, #0
 8006c98:	2104      	movs	r1, #4
 8006c9a:	4819      	ldr	r0, [pc, #100]	; (8006d00 <XPT2046_ReadCMD+0x74>)
 8006c9c:	f002 fb71 	bl	8009382 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	4816      	ldr	r0, [pc, #88]	; (8006d00 <XPT2046_ReadCMD+0x74>)
 8006ca6:	f002 fb6c 	bl	8009382 <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ )
 8006caa:	2300      	movs	r3, #0
 8006cac:	71fb      	strb	r3, [r7, #7]
 8006cae:	e01e      	b.n	8006cee <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	4812      	ldr	r0, [pc, #72]	; (8006d00 <XPT2046_ReadCMD+0x74>)
 8006cb6:	f002 fb64 	bl	8009382 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 8006cba:	2108      	movs	r1, #8
 8006cbc:	4810      	ldr	r0, [pc, #64]	; (8006d00 <XPT2046_ReadCMD+0x74>)
 8006cbe:	f002 fb49 	bl	8009354 <HAL_GPIO_ReadPin>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << ( 11 - i );
 8006cc6:	887a      	ldrh	r2, [r7, #2]
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	f1c3 030b 	rsb	r3, r3, #11
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	b21a      	sxth	r2, r3
 8006cd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	4807      	ldr	r0, [pc, #28]	; (8006d00 <XPT2046_ReadCMD+0x74>)
 8006ce4:	f002 fb4d 	bl	8009382 <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ )
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	3301      	adds	r3, #1
 8006cec:	71fb      	strb	r3, [r7, #7]
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	2b0b      	cmp	r3, #11
 8006cf2:	d9dd      	bls.n	8006cb0 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8006cf4:	88bb      	ldrh	r3, [r7, #4]

}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	40011800 	.word	0x40011800

08006d04 <XPT2046_ReadAdc>:
/*
 * take a channel, open adc and then send back adc value
 * channel : x+ 0xd0 y+ 0x90
 */
static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff ff77 	bl	8006c04 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8006d16:	f7ff ffb9 	bl	8006c8c <XPT2046_ReadCMD>
 8006d1a:	4603      	mov	r3, r0

}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <XPT2046_ReadAdc_XY>:

/*
 * read the adc value for x and y channel in 12 bit
 */
static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;



	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8006d2e:	2090      	movs	r0, #144	; 0x90
 8006d30:	f7ff ffe8 	bl	8006d04 <XPT2046_ReadAdc>
 8006d34:	4603      	mov	r3, r0
 8006d36:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 );
 8006d38:	2001      	movs	r0, #1
 8006d3a:	f7ff ff47 	bl	8006bcc <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y );
 8006d3e:	20d0      	movs	r0, #208	; 0xd0
 8006d40:	f7ff ffe0 	bl	8006d04 <XPT2046_ReadAdc>
 8006d44:	4603      	mov	r3, r0
 8006d46:	81bb      	strh	r3, [r7, #12]


	* sX_Ad = sX_Ad_Temp;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	89fa      	ldrh	r2, [r7, #14]
 8006d4c:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	89ba      	ldrh	r2, [r7, #12]
 8006d52:	801a      	strh	r2, [r3, #0]


}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <XPT2046_ReadAdc_Smooth_XY>:
}


#else
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b092      	sub	sp, #72	; 0x48
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8006d64:	2300      	movs	r3, #0
 8006d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };
 8006d6a:	f107 0308 	add.w	r3, r7, #8
 8006d6e:	2228      	movs	r2, #40	; 0x28
 8006d70:	2100      	movs	r1, #0
 8006d72:	4618      	mov	r0, r3
 8006d74:	f00b fb54 	bl	8012420 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do
	{
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );
 8006d78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d7c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff ffce 	bl	8006d24 <XPT2046_ReadAdc_XY>

		sBufferArray [ 0 ] [ ucCount ] = sAD_X;
 8006d88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d8c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	3348      	adds	r3, #72	; 0x48
 8006d94:	443b      	add	r3, r7
 8006d96:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8006d9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d9e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8006da2:	330a      	adds	r3, #10
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	3348      	adds	r3, #72	; 0x48
 8006da8:	443b      	add	r3, r7
 8006daa:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount ++;
 8006dae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006db2:	3301      	adds	r3, #1
 8006db4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8006db8:	2110      	movs	r1, #16
 8006dba:	4871      	ldr	r0, [pc, #452]	; (8006f80 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006dbc:	f002 faca 	bl	8009354 <HAL_GPIO_ReadPin>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <XPT2046_ReadAdc_Smooth_XY+0x72>
 8006dc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006dca:	2b09      	cmp	r3, #9
 8006dcc:	d9d4      	bls.n	8006d78 <XPT2046_ReadAdc_Smooth_XY+0x1c>


	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 8006dce:	2110      	movs	r1, #16
 8006dd0:	486b      	ldr	r0, [pc, #428]	; (8006f80 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006dd2:	f002 fabf 	bl	8009354 <HAL_GPIO_ReadPin>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8006ddc:	4b69      	ldr	r3, [pc, #420]	; (8006f84 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )
 8006de2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006de6:	2b0a      	cmp	r3, #10
 8006de8:	f040 80c4 	bne.w	8006f74 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8006dec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006df0:	643b      	str	r3, [r7, #64]	; 0x40
 8006df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df4:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];
 8006df6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34

		for ( i = 1; i < 10; i ++ )
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006e06:	e02b      	b.n	8006e60 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8006e08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	3348      	adds	r3, #72	; 0x48
 8006e10:	443b      	add	r3, r7
 8006e12:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006e16:	461a      	mov	r2, r3
 8006e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	dd08      	ble.n	8006e30 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8006e1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	3348      	adds	r3, #72	; 0x48
 8006e26:	443b      	add	r3, r7
 8006e28:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e2e:	e012      	b.n	8006e56 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8006e30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	3348      	adds	r3, #72	; 0x48
 8006e38:	443b      	add	r3, r7
 8006e3a:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e42:	4293      	cmp	r3, r2
 8006e44:	da07      	bge.n	8006e56 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 8006e46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	3348      	adds	r3, #72	; 0x48
 8006e4e:	443b      	add	r3, r7
 8006e50:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 8006e56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006e60:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e64:	2b09      	cmp	r3, #9
 8006e66:	d9cf      	bls.n	8006e08 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for ( i = 1; i < 10; i ++ )
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006e6e:	e02f      	b.n	8006ed0 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8006e70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e74:	330a      	adds	r3, #10
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	3348      	adds	r3, #72	; 0x48
 8006e7a:	443b      	add	r3, r7
 8006e7c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	4293      	cmp	r3, r2
 8006e86:	dd09      	ble.n	8006e9c <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8006e88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e8c:	330a      	adds	r3, #10
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	3348      	adds	r3, #72	; 0x48
 8006e92:	443b      	add	r3, r7
 8006e94:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e9a:	e014      	b.n	8006ec6 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8006e9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006ea0:	330a      	adds	r3, #10
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	3348      	adds	r3, #72	; 0x48
 8006ea6:	443b      	add	r3, r7
 8006ea8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	da08      	bge.n	8006ec6 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8006eb4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006eb8:	330a      	adds	r3, #10
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	3348      	adds	r3, #72	; 0x48
 8006ebe:	443b      	add	r3, r7
 8006ec0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 8006ec6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006eca:	3301      	adds	r3, #1
 8006ecc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006ed0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006ed4:	2b09      	cmp	r3, #9
 8006ed6:	d9cb      	bls.n	8006e70 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		// count out min and max

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8006ed8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006edc:	461a      	mov	r2, r3
 8006ede:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006ef4:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8006ef6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8006efa:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8006efc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006f00:	4413      	add	r3, r2
 8006f02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006f06:	4413      	add	r3, r2
 8006f08:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006f12:	441a      	add	r2, r3
 8006f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 8006f24:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006f34:	4413      	add	r3, r2
 8006f36:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006f40:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3;
 8006f42:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 8006f46:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3;
 8006f48:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006f52:	4413      	add	r3, r2
 8006f54:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8006f58:	4413      	add	r3, r2
 8006f5a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006f5e:	441a      	add	r2, r3
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	1ad2      	subs	r2, r2, r3
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	805a      	strh	r2, [r3, #2]


		return 1;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <XPT2046_ReadAdc_Smooth_XY+0x21a>


	}


	return 0;
 8006f74:	2300      	movs	r3, #0


}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3748      	adds	r7, #72	; 0x48
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40011800 	.word	0x40011800
 8006f84:	20006235 	.word	0x20006235

08006f88 <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	3204      	adds	r2, #4
 8006faa:	8852      	ldrh	r2, [r2, #2]
 8006fac:	4611      	mov	r1, r2
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	3208      	adds	r2, #8
 8006fb2:	8852      	ldrh	r2, [r2, #2]
 8006fb4:	1a8a      	subs	r2, r1, r2
 8006fb6:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	1acb      	subs	r3, r1, r3
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	8849      	ldrh	r1, [r1, #2]
 8006fce:	4608      	mov	r0, r1
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	3108      	adds	r1, #8
 8006fd4:	8849      	ldrh	r1, [r1, #2]
 8006fd6:	1a41      	subs	r1, r0, r1
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7f9 fa7c 	bl	80004dc <__aeabi_i2d>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30


	if (  pCalibrationFactor -> Divider == 0  )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	f7f9 fd40 	bl	8000a80 <__aeabi_dcmpeq>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	75fb      	strb	r3, [r7, #23]
 800700a:	e145      	b.n	8007298 <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3308      	adds	r3, #8
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	3204      	adds	r2, #4
 800701e:	8852      	ldrh	r2, [r2, #2]
 8007020:	4611      	mov	r1, r2
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	3208      	adds	r2, #8
 8007026:	8852      	ldrh	r2, [r2, #2]
 8007028:	1a8a      	subs	r2, r1, r2
 800702a:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3304      	adds	r3, #4
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	4619      	mov	r1, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3308      	adds	r3, #8
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	1acb      	subs	r3, r1, r3
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	8849      	ldrh	r1, [r1, #2]
 8007042:	4608      	mov	r0, r1
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	3108      	adds	r1, #8
 8007048:	8849      	ldrh	r1, [r1, #2]
 800704a:	1a41      	subs	r1, r0, r1
 800704c:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	4618      	mov	r0, r3
 8007054:	f7f9 fa42 	bl	80004dc <__aeabi_i2d>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) -
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	3308      	adds	r3, #8
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	3204      	adds	r2, #4
 8007074:	8812      	ldrh	r2, [r2, #0]
 8007076:	4611      	mov	r1, r2
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	3208      	adds	r2, #8
 800707c:	8812      	ldrh	r2, [r2, #0]
 800707e:	1a8a      	subs	r2, r1, r2
 8007080:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	4619      	mov	r1, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3308      	adds	r3, #8
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	1acb      	subs	r3, r1, r3
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	3104      	adds	r1, #4
 8007096:	8809      	ldrh	r1, [r1, #0]
 8007098:	4608      	mov	r0, r1
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	3108      	adds	r1, #8
 800709e:	8809      	ldrh	r1, [r1, #0]
 80070a0:	1a41      	subs	r1, r0, r1
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) -
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7f9 fa17 	bl	80004dc <__aeabi_i2d>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3308      	adds	r3, #8
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3304      	adds	r3, #4
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	fb03 f202 	mul.w	r2, r3, r2
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3304      	adds	r3, #4
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	4619      	mov	r1, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3308      	adds	r3, #8
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	fb01 f303 	mul.w	r3, r1, r3
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	8852      	ldrh	r2, [r2, #2]
 80070e2:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	4619      	mov	r1, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3308      	adds	r3, #8
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	fb03 f101 	mul.w	r1, r3, r1
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	3308      	adds	r3, #8
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	fb00 f303 	mul.w	r3, r0, r3
 8007106:	1acb      	subs	r3, r1, r3
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	3104      	adds	r1, #4
 800710c:	8849      	ldrh	r1, [r1, #2]
 800710e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8007112:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	3304      	adds	r3, #4
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	4619      	mov	r1, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	fb03 f101 	mul.w	r1, r3, r1
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3304      	adds	r3, #4
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	fb00 f303 	mul.w	r3, r0, r3
 8007134:	1acb      	subs	r3, r1, r3
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	3108      	adds	r1, #8
 800713a:	8849      	ldrh	r1, [r1, #2]
 800713c:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8007140:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8007142:	4618      	mov	r0, r3
 8007144:	f7f9 f9ca 	bl	80004dc <__aeabi_i2d>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	885b      	ldrh	r3, [r3, #2]
 8007156:	461a      	mov	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3308      	adds	r3, #8
 800715c:	885b      	ldrh	r3, [r3, #2]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	3204      	adds	r2, #4
 8007164:	8852      	ldrh	r2, [r2, #2]
 8007166:	4611      	mov	r1, r2
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	3208      	adds	r2, #8
 800716c:	8852      	ldrh	r2, [r2, #2]
 800716e:	1a8a      	subs	r2, r1, r2
 8007170:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3304      	adds	r3, #4
 8007178:	885b      	ldrh	r3, [r3, #2]
 800717a:	4619      	mov	r1, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3308      	adds	r3, #8
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	1acb      	subs	r3, r1, r3
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	8849      	ldrh	r1, [r1, #2]
 8007188:	4608      	mov	r0, r1
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	3108      	adds	r1, #8
 800718e:	8849      	ldrh	r1, [r1, #2]
 8007190:	1a41      	subs	r1, r0, r1
 8007192:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	4618      	mov	r0, r3
 800719a:	f7f9 f99f 	bl	80004dc <__aeabi_i2d>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) -
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	3308      	adds	r3, #8
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	3204      	adds	r2, #4
 80071ba:	8852      	ldrh	r2, [r2, #2]
 80071bc:	4611      	mov	r1, r2
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	3208      	adds	r2, #8
 80071c2:	8852      	ldrh	r2, [r2, #2]
 80071c4:	1a8a      	subs	r2, r1, r2
 80071c6:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	885b      	ldrh	r3, [r3, #2]
 80071ce:	4619      	mov	r1, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3308      	adds	r3, #8
 80071d4:	885b      	ldrh	r3, [r3, #2]
 80071d6:	1acb      	subs	r3, r1, r3
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	3104      	adds	r1, #4
 80071dc:	8809      	ldrh	r1, [r1, #0]
 80071de:	4608      	mov	r0, r1
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	3108      	adds	r1, #8
 80071e4:	8809      	ldrh	r1, [r1, #0]
 80071e6:	1a41      	subs	r1, r0, r1
 80071e8:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) -
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7f9 f974 	bl	80004dc <__aeabi_i2d>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	e9c1 2308 	strd	r2, r3, [r1, #32]


		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	3308      	adds	r3, #8
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3304      	adds	r3, #4
 800720a:	885b      	ldrh	r3, [r3, #2]
 800720c:	fb03 f202 	mul.w	r2, r3, r2
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3304      	adds	r3, #4
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	4619      	mov	r1, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3308      	adds	r3, #8
 800721c:	885b      	ldrh	r3, [r3, #2]
 800721e:	fb01 f303 	mul.w	r3, r1, r3
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	8852      	ldrh	r2, [r2, #2]
 8007228:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	4619      	mov	r1, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3308      	adds	r3, #8
 8007236:	885b      	ldrh	r3, [r3, #2]
 8007238:	fb03 f101 	mul.w	r1, r3, r1
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	3308      	adds	r3, #8
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	4618      	mov	r0, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	885b      	ldrh	r3, [r3, #2]
 8007248:	fb00 f303 	mul.w	r3, r0, r3
 800724c:	1acb      	subs	r3, r1, r3
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	3104      	adds	r1, #4
 8007252:	8849      	ldrh	r1, [r1, #2]
 8007254:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8007258:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	3304      	adds	r3, #4
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	4619      	mov	r1, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	885b      	ldrh	r3, [r3, #2]
 8007266:	fb03 f101 	mul.w	r1, r3, r1
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3304      	adds	r3, #4
 8007274:	885b      	ldrh	r3, [r3, #2]
 8007276:	fb00 f303 	mul.w	r3, r0, r3
 800727a:	1acb      	subs	r3, r1, r3
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	3108      	adds	r1, #8
 8007280:	8849      	ldrh	r1, [r1, #2]
 8007282:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8007286:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8007288:	4618      	mov	r0, r3
 800728a:	f7f9 f927 	bl	80004dc <__aeabi_i2d>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}


	return ucRet;
 8007298:	7dfb      	ldrb	r3, [r7, #23]


}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
	...

080072a4 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 80072a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80072a8:	b0a0      	sub	sp, #128	; 0x80
 80072aa:	af02      	add	r7, sp, #8
		uint8_t i;

		char cStr [ 10 ];

    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80072b2:	2300      	movs	r3, #0
 80072b4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80072b8:	2300      	movs	r3, #0
 80072ba:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80072be:	2300      	movs	r3, #0
 80072c0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	  char * pStr = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	66bb      	str	r3, [r7, #104]	; 0x68

	  strType_XPT2046_Calibration CalibrationFactor;


		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 80072c8:	23f0      	movs	r3, #240	; 0xf0
 80072ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 80072ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80072d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	  #endif



		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 80072d6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80072da:	089b      	lsrs	r3, r3, #2
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 80072e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072e6:	089b      	lsrs	r3, r3, #2
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 80072ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80072f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 80072f6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80072fa:	4613      	mov	r3, r2
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	4413      	add	r3, r2
 8007300:	109b      	asrs	r3, r3, #2
 8007302:	b29b      	uxth	r3, r3
 8007304:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 8007308:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800730c:	4613      	mov	r3, r2
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	4413      	add	r3, r2
 8007312:	109b      	asrs	r3, r3, #2
 8007314:	b29b      	uxth	r3, r3
 8007316:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 800731a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800731e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 8007322:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007326:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;
 800732a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800732e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56


		for ( i = 0; i < 4; i ++ )
 8007332:	2300      	movs	r3, #0
 8007334:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007338:	e066      	b.n	8007408 <XPT2046_Touch_Calibrate+0x164>
		{
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 800733a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800733e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8007342:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007346:	9100      	str	r1, [sp, #0]
 8007348:	2100      	movs	r1, #0
 800734a:	2000      	movs	r0, #0
 800734c:	f7fc f8b5 	bl	80034ba <LCD_Clear>

			pStr = "Touch Calibrate ......";
 8007350:	4bc5      	ldr	r3, [pc, #788]	; (8007668 <XPT2046_Touch_Calibrate+0x3c4>)
 8007352:	66bb      	str	r3, [r7, #104]	; 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );
 8007354:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8007358:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800735a:	f7f8 ff65 	bl	8000228 <strlen>
 800735e:	4603      	mov	r3, r0
 8007360:	3b07      	subs	r3, #7
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	1ae3      	subs	r3, r4, r3
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	b298      	uxth	r0, r3
 800736a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	b299      	uxth	r1, r3
 8007372:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800737c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800737e:	f7fc fdf1 	bl	8003f64 <LCD_DrawString_Color>

			sprintf ( cStr, "%d", i + 1 );
 8007382:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800738c:	49b7      	ldr	r1, [pc, #732]	; (800766c <XPT2046_Touch_Calibrate+0x3c8>)
 800738e:	4618      	mov	r0, r3
 8007390:	f00b fe06 	bl	8012fa0 <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 8007394:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	b298      	uxth	r0, r3
 800739c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80073a0:	085b      	lsrs	r3, r3, #1
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	3b10      	subs	r3, #16
 80073a6:	b299      	uxth	r1, r3
 80073a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80073ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073b6:	f7fc fdd5 	bl	8003f64 <LCD_DrawString_Color>

			XPT2046_DelayUS ( 100000 );
 80073ba:	48ad      	ldr	r0, [pc, #692]	; (8007670 <XPT2046_Touch_Calibrate+0x3cc>)
 80073bc:	f7ff fc06 	bl	8006bcc <XPT2046_DelayUS>

			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );
 80073c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	3378      	adds	r3, #120	; 0x78
 80073c8:	443b      	add	r3, r7
 80073ca:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80073ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	3378      	adds	r3, #120	; 0x78
 80073d6:	443b      	add	r3, r7
 80073d8:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f7fc fd9e 	bl	8003f20 <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );
 80073e4:	bf00      	nop
 80073e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80073ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fcb2 	bl	8006d5c <XPT2046_ReadAdc_Smooth_XY>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f3      	beq.n	80073e6 <XPT2046_Touch_Calibrate+0x142>
		for ( i = 0; i < 4; i ++ )
 80073fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007402:	3301      	adds	r3, #1
 8007404:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007408:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800740c:	2b03      	cmp	r3, #3
 800740e:	d994      	bls.n	800733a <XPT2046_Touch_Calibrate+0x96>

		}


		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;
 8007410:	463a      	mov	r2, r7
 8007412:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007416:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fdb4 	bl	8006f88 <XPT2046_Calculate_CalibrationFactor>

		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8007420:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	f7f9 fb28 	bl	8000a80 <__aeabi_dcmpeq>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	f040 8116 	bne.w	8007664 <XPT2046_Touch_Calibrate+0x3c0>


		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;
 8007438:	e9d7 4500 	ldrd	r4, r5, [r7]
 800743c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007440:	4618      	mov	r0, r3
 8007442:	f7f9 f84b 	bl	80004dc <__aeabi_i2d>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4620      	mov	r0, r4
 800744c:	4629      	mov	r1, r5
 800744e:	f7f9 f8af 	bl	80005b0 <__aeabi_dmul>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4690      	mov	r8, r2
 8007458:	4699      	mov	r9, r3
 800745a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800745e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007462:	4618      	mov	r0, r3
 8007464:	f7f9 f83a 	bl	80004dc <__aeabi_i2d>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4620      	mov	r0, r4
 800746e:	4629      	mov	r1, r5
 8007470:	f7f9 f89e 	bl	80005b0 <__aeabi_dmul>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4640      	mov	r0, r8
 800747a:	4649      	mov	r1, r9
 800747c:	f7f8 fee2 	bl	8000244 <__adddf3>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4610      	mov	r0, r2
 8007486:	4619      	mov	r1, r3
 8007488:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800748c:	f7f8 feda 	bl	8000244 <__adddf3>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4610      	mov	r0, r2
 8007496:	4619      	mov	r1, r3
 8007498:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800749c:	f7f9 f9b2 	bl	8000804 <__aeabi_ddiv>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4610      	mov	r0, r2
 80074a6:	4619      	mov	r1, r3
 80074a8:	f7f9 fb5a 	bl	8000b60 <__aeabi_d2uiz>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;
 80074b2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80074b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7f9 f80e 	bl	80004dc <__aeabi_i2d>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4620      	mov	r0, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	f7f9 f872 	bl	80005b0 <__aeabi_dmul>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4690      	mov	r8, r2
 80074d2:	4699      	mov	r9, r3
 80074d4:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80074d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80074dc:	4618      	mov	r0, r3
 80074de:	f7f8 fffd 	bl	80004dc <__aeabi_i2d>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4620      	mov	r0, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f9 f861 	bl	80005b0 <__aeabi_dmul>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4640      	mov	r0, r8
 80074f4:	4649      	mov	r1, r9
 80074f6:	f7f8 fea5 	bl	8000244 <__adddf3>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4610      	mov	r0, r2
 8007500:	4619      	mov	r1, r3
 8007502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007506:	f7f8 fe9d 	bl	8000244 <__adddf3>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4610      	mov	r0, r2
 8007510:	4619      	mov	r1, r3
 8007512:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007516:	f7f9 f975 	bl	8000804 <__aeabi_ddiv>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4610      	mov	r0, r2
 8007520:	4619      	mov	r1, r3
 8007522:	f7f9 fb1d 	bl	8000b60 <__aeabi_d2uiz>
 8007526:	4603      	mov	r3, r0
 8007528:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );
 800752c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007530:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8007534:	429a      	cmp	r2, r3
 8007536:	d906      	bls.n	8007546 <XPT2046_Touch_Calibrate+0x2a2>
 8007538:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800753c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	b29b      	uxth	r3, r3
 8007544:	e005      	b.n	8007552 <XPT2046_Touch_Calibrate+0x2ae>
 8007546:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800754a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	b29b      	uxth	r3, r3
 8007552:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );
 8007556:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800755a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800755e:	429a      	cmp	r2, r3
 8007560:	d906      	bls.n	8007570 <XPT2046_Touch_Calibrate+0x2cc>
 8007562:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007566:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	b29b      	uxth	r3, r3
 800756e:	e005      	b.n	800757c <XPT2046_Touch_Calibrate+0x2d8>
 8007570:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8007574:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	b29b      	uxth	r3, r3
 800757c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;
 8007580:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8007584:	2b0a      	cmp	r3, #10
 8007586:	d87b      	bhi.n	8007680 <XPT2046_Touch_Calibrate+0x3dc>
 8007588:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800758c:	2b0a      	cmp	r3, #10
 800758e:	d877      	bhi.n	8007680 <XPT2046_Touch_Calibrate+0x3dc>


		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 8007590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007594:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007598:	f7f9 f934 	bl	8000804 <__aeabi_ddiv>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4934      	ldr	r1, [pc, #208]	; (8007674 <XPT2046_Touch_Calibrate+0x3d0>)
 80075a2:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 80075a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075ae:	f7f9 f929 	bl	8000804 <__aeabi_ddiv>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	492f      	ldr	r1, [pc, #188]	; (8007674 <XPT2046_Touch_Calibrate+0x3d0>)
 80075b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 80075bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80075c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075c4:	f7f9 f91e 	bl	8000804 <__aeabi_ddiv>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4929      	ldr	r1, [pc, #164]	; (8007674 <XPT2046_Touch_Calibrate+0x3d0>)
 80075ce:	e9c1 2304 	strd	r2, r3, [r1, #16]

		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 80075d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80075d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075da:	f7f9 f913 	bl	8000804 <__aeabi_ddiv>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4924      	ldr	r1, [pc, #144]	; (8007674 <XPT2046_Touch_Calibrate+0x3d0>)
 80075e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 80075e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80075ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075f0:	f7f9 f908 	bl	8000804 <__aeabi_ddiv>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	491e      	ldr	r1, [pc, #120]	; (8007674 <XPT2046_Touch_Calibrate+0x3d0>)
 80075fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 80075fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007602:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007606:	f7f9 f8fd 	bl	8000804 <__aeabi_ddiv>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4919      	ldr	r1, [pc, #100]	; (8007674 <XPT2046_Touch_Calibrate+0x3d0>)
 8007610:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28


	#endif


	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 8007614:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007618:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800761c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007620:	9100      	str	r1, [sp, #0]
 8007622:	2100      	movs	r1, #0
 8007624:	2000      	movs	r0, #0
 8007626:	f7fb ff48 	bl	80034ba <LCD_Clear>

	pStr = "Calibrate Succed";
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <XPT2046_Touch_Calibrate+0x3d4>)
 800762c:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );
 800762e:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8007632:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007634:	f7f8 fdf8 	bl	8000228 <strlen>
 8007638:	4603      	mov	r3, r0
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	1ae3      	subs	r3, r4, r3
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	b298      	uxth	r0, r3
 8007642:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	b299      	uxth	r1, r3
 800764a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007654:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007656:	f7fc fc85 	bl	8003f64 <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 800765a:	4808      	ldr	r0, [pc, #32]	; (800767c <XPT2046_Touch_Calibrate+0x3d8>)
 800765c:	f7ff fab6 	bl	8006bcc <XPT2046_DelayUS>

	return 1;
 8007660:	2301      	movs	r3, #1
 8007662:	e04f      	b.n	8007704 <XPT2046_Touch_Calibrate+0x460>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8007664:	bf00      	nop
 8007666:	e00c      	b.n	8007682 <XPT2046_Touch_Calibrate+0x3de>
 8007668:	080158f0 	.word	0x080158f0
 800766c:	08015908 	.word	0x08015908
 8007670:	000186a0 	.word	0x000186a0
 8007674:	20000048 	.word	0x20000048
 8007678:	0801590c 	.word	0x0801590c
 800767c:	00030d40 	.word	0x00030d40
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;
 8007680:	bf00      	nop


	Failure:

	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 8007682:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007686:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800768a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800768e:	9100      	str	r1, [sp, #0]
 8007690:	2100      	movs	r1, #0
 8007692:	2000      	movs	r0, #0
 8007694:	f7fb ff11 	bl	80034ba <LCD_Clear>

	pStr = "Calibrate fail";
 8007698:	4b1d      	ldr	r3, [pc, #116]	; (8007710 <XPT2046_Touch_Calibrate+0x46c>)
 800769a:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );
 800769c:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80076a0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80076a2:	f7f8 fdc1 	bl	8000228 <strlen>
 80076a6:	4603      	mov	r3, r0
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	1ae3      	subs	r3, r4, r3
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	b298      	uxth	r0, r3
 80076b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	b299      	uxth	r1, r3
 80076b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076c4:	f7fc fc4e 	bl	8003f64 <LCD_DrawString_Color>

	pStr = "try again";
 80076c8:	4b12      	ldr	r3, [pc, #72]	; (8007714 <XPT2046_Touch_Calibrate+0x470>)
 80076ca:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );
 80076cc:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80076d0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80076d2:	f7f8 fda9 	bl	8000228 <strlen>
 80076d6:	4603      	mov	r3, r0
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	1ae3      	subs	r3, r4, r3
 80076dc:	085b      	lsrs	r3, r3, #1
 80076de:	b298      	uxth	r0, r3
 80076e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3310      	adds	r3, #16
 80076ea:	b299      	uxth	r1, r3
 80076ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076f8:	f7fc fc34 	bl	8003f64 <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );
 80076fc:	4806      	ldr	r0, [pc, #24]	; (8007718 <XPT2046_Touch_Calibrate+0x474>)
 80076fe:	f7ff fa65 	bl	8006bcc <XPT2046_DelayUS>

	return 0;
 8007702:	2300      	movs	r3, #0


}
 8007704:	4618      	mov	r0, r3
 8007706:	3778      	adds	r7, #120	; 0x78
 8007708:	46bd      	mov	sp, r7
 800770a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800770e:	bf00      	nop
 8007710:	08015920 	.word	0x08015920
 8007714:	08015930 	.word	0x08015930
 8007718:	000f4240 	.word	0x000f4240

0800771c <XPT2046_Get_TouchedPoint>:



uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 800771c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8007728:	2301      	movs	r3, #1
 800772a:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;


  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 800772c:	f107 0308 	add.w	r3, r7, #8
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff fb13 	bl	8006d5c <XPT2046_ReadAdc_Smooth_XY>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d06e      	beq.n	800781a <XPT2046_Get_TouchedPoint+0xfe>
  {
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007742:	893b      	ldrh	r3, [r7, #8]
 8007744:	4618      	mov	r0, r3
 8007746:	f7f8 fec9 	bl	80004dc <__aeabi_i2d>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f8 ff2d 	bl	80005b0 <__aeabi_dmul>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4690      	mov	r8, r2
 800775c:	4699      	mov	r9, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007764:	897b      	ldrh	r3, [r7, #10]
 8007766:	4618      	mov	r0, r3
 8007768:	f7f8 feb8 	bl	80004dc <__aeabi_i2d>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4620      	mov	r0, r4
 8007772:	4629      	mov	r1, r5
 8007774:	f7f8 ff1c 	bl	80005b0 <__aeabi_dmul>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f8 fd60 	bl	8000244 <__adddf3>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4610      	mov	r0, r2
 800778a:	4619      	mov	r1, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007792:	f7f8 fd57 	bl	8000244 <__adddf3>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4610      	mov	r0, r2
 800779c:	4619      	mov	r1, r3
 800779e:	f7f9 f9df 	bl	8000b60 <__aeabi_d2uiz>
 80077a2:	4603      	mov	r3, r0
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80077b0:	893b      	ldrh	r3, [r7, #8]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7f8 fe92 	bl	80004dc <__aeabi_i2d>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4620      	mov	r0, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	f7f8 fef6 	bl	80005b0 <__aeabi_dmul>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4690      	mov	r8, r2
 80077ca:	4699      	mov	r9, r3
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80077d2:	897b      	ldrh	r3, [r7, #10]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7f8 fe81 	bl	80004dc <__aeabi_i2d>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4620      	mov	r0, r4
 80077e0:	4629      	mov	r1, r5
 80077e2:	f7f8 fee5 	bl	80005b0 <__aeabi_dmul>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f8 fd29 	bl	8000244 <__adddf3>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4610      	mov	r0, r2
 80077f8:	4619      	mov	r1, r3
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007800:	f7f8 fd20 	bl	8000244 <__adddf3>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4610      	mov	r0, r2
 800780a:	4619      	mov	r1, r3
 800780c:	f7f9 f9a8 	bl	8000b60 <__aeabi_d2uiz>
 8007810:	4603      	mov	r3, r0
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	805a      	strh	r2, [r3, #2]
 8007818:	e001      	b.n	800781e <XPT2046_Get_TouchedPoint+0x102>

  }

	else ucRet = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 800781e:	7bfb      	ldrb	r3, [r7, #15]


}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800782c <Check_touchkey>:


void Check_touchkey(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
	strType_XPT2046_Coordinate strDisplayCoordinate;

	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 8007832:	1d3b      	adds	r3, r7, #4
 8007834:	4913      	ldr	r1, [pc, #76]	; (8007884 <Check_touchkey+0x58>)
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff ff70 	bl	800771c <XPT2046_Get_TouchedPoint>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01c      	beq.n	800787c <Check_touchkey+0x50>
	{

			if ( ( strDisplayCoordinate .y > 100 ) && ( strDisplayCoordinate .y < 150 ) ){
 8007842:	88fb      	ldrh	r3, [r7, #6]
 8007844:	2b64      	cmp	r3, #100	; 0x64
 8007846:	d905      	bls.n	8007854 <Check_touchkey+0x28>
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	2b95      	cmp	r3, #149	; 0x95
 800784c:	d802      	bhi.n	8007854 <Check_touchkey+0x28>
				//if ( ( strDisplayCoordinate .x > 95 ) && ( strDisplayCoordinate .x < 145 ) )
				//{
					level = 1;
 800784e:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <Check_touchkey+0x5c>)
 8007850:	2201      	movs	r2, #1
 8007852:	701a      	strb	r2, [r3, #0]
				//}
			}

			if ( ( strDisplayCoordinate .y > 180 ) && ( strDisplayCoordinate .y < 230 ) ){
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	2bb4      	cmp	r3, #180	; 0xb4
 8007858:	d905      	bls.n	8007866 <Check_touchkey+0x3a>
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	2be5      	cmp	r3, #229	; 0xe5
 800785e:	d802      	bhi.n	8007866 <Check_touchkey+0x3a>
				//if ( ( strDisplayCoordinate .x > 95 ) && ( strDisplayCoordinate .x < 145 ) )
				//{
					level = 2;
 8007860:	4b09      	ldr	r3, [pc, #36]	; (8007888 <Check_touchkey+0x5c>)
 8007862:	2202      	movs	r2, #2
 8007864:	701a      	strb	r2, [r3, #0]
				//}
			}

			if ( ( strDisplayCoordinate .y > 260 ) && ( strDisplayCoordinate .y < 310 ) ){
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800786c:	d906      	bls.n	800787c <Check_touchkey+0x50>
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8007874:	d202      	bcs.n	800787c <Check_touchkey+0x50>
			   //if ( ( strDisplayCoordinate .x > 95 ) && ( strDisplayCoordinate .x < 145 ) )
			   //{
			   		level = 3;
 8007876:	4b04      	ldr	r3, [pc, #16]	; (8007888 <Check_touchkey+0x5c>)
 8007878:	2203      	movs	r2, #3
 800787a:	701a      	strb	r2, [r3, #0]
			   //}
			}


	}
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	20000048 	.word	0x20000048
 8007888:	20002893 	.word	0x20002893

0800788c <Check_touchkey_start>:



void Check_touchkey_start(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
		strType_XPT2046_Coordinate strDisplayCoordinate;

	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 8007892:	1d3b      	adds	r3, r7, #4
 8007894:	490d      	ldr	r1, [pc, #52]	; (80078cc <Check_touchkey_start+0x40>)
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff ff40 	bl	800771c <XPT2046_Get_TouchedPoint>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00f      	beq.n	80078c2 <Check_touchkey_start+0x36>
	{
 		//LCD_DrawString(20, 200, "happy");

		if ( ( strDisplayCoordinate .y > 200 ) && ( strDisplayCoordinate .y < 300 ) )
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	2bc8      	cmp	r3, #200	; 0xc8
 80078a6:	d90c      	bls.n	80078c2 <Check_touchkey_start+0x36>
 80078a8:	88fb      	ldrh	r3, [r7, #6]
 80078aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80078ae:	d208      	bcs.n	80078c2 <Check_touchkey_start+0x36>
				{
					if ( ( strDisplayCoordinate .x > 95 ) && ( strDisplayCoordinate .x < 145 ) )
 80078b0:	88bb      	ldrh	r3, [r7, #4]
 80078b2:	2b5f      	cmp	r3, #95	; 0x5f
 80078b4:	d905      	bls.n	80078c2 <Check_touchkey_start+0x36>
 80078b6:	88bb      	ldrh	r3, [r7, #4]
 80078b8:	2b90      	cmp	r3, #144	; 0x90
 80078ba:	d802      	bhi.n	80078c2 <Check_touchkey_start+0x36>
					{
						restart_flag = 1;
 80078bc:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <Check_touchkey_start+0x44>)
 80078be:	2201      	movs	r2, #1
 80078c0:	701a      	strb	r2, [r3, #0]
					}
				}

	}

}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000048 	.word	0x20000048
 80078d0:	20002880 	.word	0x20002880

080078d4 <Check_touchkey_flag>:

int Check_touchkey_flag(int x1, int x2, int y1, int y2)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
		strType_XPT2046_Coordinate strDisplayCoordinate;

	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 80078e2:	f107 0314 	add.w	r3, r7, #20
 80078e6:	4911      	ldr	r1, [pc, #68]	; (800792c <Check_touchkey_flag+0x58>)
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff ff17 	bl	800771c <XPT2046_Get_TouchedPoint>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d015      	beq.n	8007920 <Check_touchkey_flag+0x4c>
	{
 		//LCD_DrawString(20, 200, "happy");

		if ( ( strDisplayCoordinate .y > y1 ) && ( strDisplayCoordinate .y < y2 ) )
 80078f4:	8afb      	ldrh	r3, [r7, #22]
 80078f6:	461a      	mov	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4293      	cmp	r3, r2
 80078fc:	da10      	bge.n	8007920 <Check_touchkey_flag+0x4c>
 80078fe:	8afb      	ldrh	r3, [r7, #22]
 8007900:	461a      	mov	r2, r3
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	4293      	cmp	r3, r2
 8007906:	dd0b      	ble.n	8007920 <Check_touchkey_flag+0x4c>
				{
					if ( ( strDisplayCoordinate .x > x1 ) && ( strDisplayCoordinate .x < x2 ) )
 8007908:	8abb      	ldrh	r3, [r7, #20]
 800790a:	461a      	mov	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4293      	cmp	r3, r2
 8007910:	da06      	bge.n	8007920 <Check_touchkey_flag+0x4c>
 8007912:	8abb      	ldrh	r3, [r7, #20]
 8007914:	461a      	mov	r2, r3
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	4293      	cmp	r3, r2
 800791a:	dd01      	ble.n	8007920 <Check_touchkey_flag+0x4c>
					{
						return 1;
 800791c:	2301      	movs	r3, #1
 800791e:	e000      	b.n	8007922 <Check_touchkey_flag+0x4e>
					}
				}

	}
	return 0;
 8007920:	2300      	movs	r3, #0

}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000048 	.word	0x20000048

08007930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007930:	f7fe ff5e 	bl	80067f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007934:	480b      	ldr	r0, [pc, #44]	; (8007964 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007936:	490c      	ldr	r1, [pc, #48]	; (8007968 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007938:	4a0c      	ldr	r2, [pc, #48]	; (800796c <LoopFillZerobss+0x16>)
  movs r3, #0
 800793a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800793c:	e002      	b.n	8007944 <LoopCopyDataInit>

0800793e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800793e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007942:	3304      	adds	r3, #4

08007944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007948:	d3f9      	bcc.n	800793e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800794a:	4a09      	ldr	r2, [pc, #36]	; (8007970 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800794c:	4c09      	ldr	r4, [pc, #36]	; (8007974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800794e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007950:	e001      	b.n	8007956 <LoopFillZerobss>

08007952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007954:	3204      	adds	r2, #4

08007956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007958:	d3fb      	bcc.n	8007952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800795a:	f00a fd2d 	bl	80123b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800795e:	f7fc fb37 	bl	8003fd0 <main>
  bx lr
 8007962:	4770      	bx	lr
  ldr r0, =_sdata
 8007964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007968:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 800796c:	08016644 	.word	0x08016644
  ldr r2, =_sbss
 8007970:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8007974:	20006280 	.word	0x20006280

08007978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007978:	e7fe      	b.n	8007978 <ADC1_2_IRQHandler>
	...

0800797c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007980:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <HAL_Init+0x28>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a07      	ldr	r2, [pc, #28]	; (80079a4 <HAL_Init+0x28>)
 8007986:	f043 0310 	orr.w	r3, r3, #16
 800798a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800798c:	2003      	movs	r0, #3
 800798e:	f000 ff91 	bl	80088b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007992:	200f      	movs	r0, #15
 8007994:	f000 f808 	bl	80079a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007998:	f7fe face 	bl	8005f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	40022000 	.word	0x40022000

080079a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80079b0:	4b12      	ldr	r3, [pc, #72]	; (80079fc <HAL_InitTick+0x54>)
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	4b12      	ldr	r3, [pc, #72]	; (8007a00 <HAL_InitTick+0x58>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4619      	mov	r1, r3
 80079ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079be:	fbb3 f3f1 	udiv	r3, r3, r1
 80079c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 ffa9 	bl	800891e <HAL_SYSTICK_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e00e      	b.n	80079f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b0f      	cmp	r3, #15
 80079da:	d80a      	bhi.n	80079f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079dc:	2200      	movs	r2, #0
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079e4:	f000 ff71 	bl	80088ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80079e8:	4a06      	ldr	r2, [pc, #24]	; (8007a04 <HAL_InitTick+0x5c>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e000      	b.n	80079f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000040 	.word	0x20000040
 8007a00:	2000007c 	.word	0x2000007c
 8007a04:	20000078 	.word	0x20000078

08007a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <HAL_IncTick+0x1c>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <HAL_IncTick+0x20>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4413      	add	r3, r2
 8007a18:	4a03      	ldr	r2, [pc, #12]	; (8007a28 <HAL_IncTick+0x20>)
 8007a1a:	6013      	str	r3, [r2, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr
 8007a24:	2000007c 	.word	0x2000007c
 8007a28:	20006238 	.word	0x20006238

08007a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8007a30:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <HAL_GetTick+0x10>)
 8007a32:	681b      	ldr	r3, [r3, #0]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	20006238 	.word	0x20006238

08007a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a48:	f7ff fff0 	bl	8007a2c <HAL_GetTick>
 8007a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a58:	d005      	beq.n	8007a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <HAL_Delay+0x44>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a66:	bf00      	nop
 8007a68:	f7ff ffe0 	bl	8007a2c <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d8f7      	bhi.n	8007a68 <HAL_Delay+0x28>
  {
  }
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	2000007c 	.word	0x2000007c

08007a88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e0ce      	b.n	8007c48 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fe fa68 	bl	8005f9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fcd1 	bl	8008474 <ADC_ConversionStop_Disable>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ada:	f003 0310 	and.w	r3, r3, #16
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 80a9 	bne.w	8007c36 <HAL_ADC_Init+0x1ae>
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f040 80a5 	bne.w	8007c36 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007af4:	f023 0302 	bic.w	r3, r3, #2
 8007af8:	f043 0202 	orr.w	r2, r3, #2
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4951      	ldr	r1, [pc, #324]	; (8007c50 <HAL_ADC_Init+0x1c8>)
 8007b0a:	428b      	cmp	r3, r1
 8007b0c:	d10a      	bne.n	8007b24 <HAL_ADC_Init+0x9c>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007b16:	d002      	beq.n	8007b1e <HAL_ADC_Init+0x96>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	e004      	b.n	8007b28 <HAL_ADC_Init+0xa0>
 8007b1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b22:	e001      	b.n	8007b28 <HAL_ADC_Init+0xa0>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007b28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7b1b      	ldrb	r3, [r3, #12]
 8007b2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007b30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b40:	d003      	beq.n	8007b4a <HAL_ADC_Init+0xc2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d102      	bne.n	8007b50 <HAL_ADC_Init+0xc8>
 8007b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b4e:	e000      	b.n	8007b52 <HAL_ADC_Init+0xca>
 8007b50:	2300      	movs	r3, #0
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7d1b      	ldrb	r3, [r3, #20]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d119      	bne.n	8007b94 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7b1b      	ldrb	r3, [r3, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d109      	bne.n	8007b7c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	035a      	lsls	r2, r3, #13
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	e00b      	b.n	8007b94 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	f043 0220 	orr.w	r2, r3, #32
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	f043 0201 	orr.w	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689a      	ldr	r2, [r3, #8]
 8007bae:	4b29      	ldr	r3, [pc, #164]	; (8007c54 <HAL_ADC_Init+0x1cc>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc4:	d003      	beq.n	8007bce <HAL_ADC_Init+0x146>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d104      	bne.n	8007bd8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	051b      	lsls	r3, r3, #20
 8007bd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <HAL_ADC_Init+0x1d0>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d10b      	bne.n	8007c14 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	f043 0201 	orr.w	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007c12:	e018      	b.n	8007c46 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	f023 0312 	bic.w	r3, r3, #18
 8007c1c:	f043 0210 	orr.w	r2, r3, #16
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	f043 0201 	orr.w	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007c34:	e007      	b.n	8007c46 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	f043 0210 	orr.w	r2, r3, #16
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	40013c00 	.word	0x40013c00
 8007c54:	ffe1f7fd 	.word	0xffe1f7fd
 8007c58:	ff1f0efe 	.word	0xff1f0efe

08007c5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <HAL_ADC_Start+0x1a>
 8007c72:	2302      	movs	r3, #2
 8007c74:	e098      	b.n	8007da8 <HAL_ADC_Start+0x14c>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fb9e 	bl	80083c0 <ADC_Enable>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f040 8087 	bne.w	8007d9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a41      	ldr	r2, [pc, #260]	; (8007db0 <HAL_ADC_Start+0x154>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d105      	bne.n	8007cba <HAL_ADC_Start+0x5e>
 8007cae:	4b41      	ldr	r3, [pc, #260]	; (8007db4 <HAL_ADC_Start+0x158>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d115      	bne.n	8007ce6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d026      	beq.n	8007d22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007cdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007ce4:	e01d      	b.n	8007d22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a2f      	ldr	r2, [pc, #188]	; (8007db4 <HAL_ADC_Start+0x158>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d004      	beq.n	8007d06 <HAL_ADC_Start+0xaa>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a2b      	ldr	r2, [pc, #172]	; (8007db0 <HAL_ADC_Start+0x154>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10d      	bne.n	8007d22 <HAL_ADC_Start+0xc6>
 8007d06:	4b2b      	ldr	r3, [pc, #172]	; (8007db4 <HAL_ADC_Start+0x158>)
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	f023 0206 	bic.w	r2, r3, #6
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d3a:	e002      	b.n	8007d42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f06f 0202 	mvn.w	r2, #2
 8007d52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007d5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007d62:	d113      	bne.n	8007d8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007d68:	4a11      	ldr	r2, [pc, #68]	; (8007db0 <HAL_ADC_Start+0x154>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d105      	bne.n	8007d7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007d6e:	4b11      	ldr	r3, [pc, #68]	; (8007db4 <HAL_ADC_Start+0x158>)
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d108      	bne.n	8007d8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007d88:	609a      	str	r2, [r3, #8]
 8007d8a:	e00c      	b.n	8007da6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007d9a:	609a      	str	r2, [r3, #8]
 8007d9c:	e003      	b.n	8007da6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	40012800 	.word	0x40012800
 8007db4:	40012400 	.word	0x40012400

08007db8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007db8:	b590      	push	{r4, r7, lr}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8007dce:	f7ff fe2d 	bl	8007a2c <HAL_GetTick>
 8007dd2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	f043 0220 	orr.w	r2, r3, #32
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e0d3      	b.n	8007fa2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d131      	bne.n	8007e6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d12a      	bne.n	8007e6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007e16:	e021      	b.n	8007e5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e1e:	d01d      	beq.n	8007e5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <HAL_ADC_PollForConversion+0x7e>
 8007e26:	f7ff fe01 	bl	8007a2c <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d212      	bcs.n	8007e5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10b      	bne.n	8007e5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e48:	f043 0204 	orr.w	r2, r3, #4
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e0a2      	b.n	8007fa2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0d6      	beq.n	8007e18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007e6a:	e070      	b.n	8007f4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007e6c:	4b4f      	ldr	r3, [pc, #316]	; (8007fac <HAL_ADC_PollForConversion+0x1f4>)
 8007e6e:	681c      	ldr	r4, [r3, #0]
 8007e70:	2002      	movs	r0, #2
 8007e72:	f003 fa73 	bl	800b35c <HAL_RCCEx_GetPeriphCLKFreq>
 8007e76:	4603      	mov	r3, r0
 8007e78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6919      	ldr	r1, [r3, #16]
 8007e82:	4b4b      	ldr	r3, [pc, #300]	; (8007fb0 <HAL_ADC_PollForConversion+0x1f8>)
 8007e84:	400b      	ands	r3, r1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d118      	bne.n	8007ebc <HAL_ADC_PollForConversion+0x104>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68d9      	ldr	r1, [r3, #12]
 8007e90:	4b48      	ldr	r3, [pc, #288]	; (8007fb4 <HAL_ADC_PollForConversion+0x1fc>)
 8007e92:	400b      	ands	r3, r1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d111      	bne.n	8007ebc <HAL_ADC_PollForConversion+0x104>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6919      	ldr	r1, [r3, #16]
 8007e9e:	4b46      	ldr	r3, [pc, #280]	; (8007fb8 <HAL_ADC_PollForConversion+0x200>)
 8007ea0:	400b      	ands	r3, r1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d108      	bne.n	8007eb8 <HAL_ADC_PollForConversion+0x100>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68d9      	ldr	r1, [r3, #12]
 8007eac:	4b43      	ldr	r3, [pc, #268]	; (8007fbc <HAL_ADC_PollForConversion+0x204>)
 8007eae:	400b      	ands	r3, r1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_ADC_PollForConversion+0x100>
 8007eb4:	2314      	movs	r3, #20
 8007eb6:	e020      	b.n	8007efa <HAL_ADC_PollForConversion+0x142>
 8007eb8:	2329      	movs	r3, #41	; 0x29
 8007eba:	e01e      	b.n	8007efa <HAL_ADC_PollForConversion+0x142>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6919      	ldr	r1, [r3, #16]
 8007ec2:	4b3d      	ldr	r3, [pc, #244]	; (8007fb8 <HAL_ADC_PollForConversion+0x200>)
 8007ec4:	400b      	ands	r3, r1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <HAL_ADC_PollForConversion+0x120>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68d9      	ldr	r1, [r3, #12]
 8007ed0:	4b3a      	ldr	r3, [pc, #232]	; (8007fbc <HAL_ADC_PollForConversion+0x204>)
 8007ed2:	400b      	ands	r3, r1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00d      	beq.n	8007ef4 <HAL_ADC_PollForConversion+0x13c>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6919      	ldr	r1, [r3, #16]
 8007ede:	4b38      	ldr	r3, [pc, #224]	; (8007fc0 <HAL_ADC_PollForConversion+0x208>)
 8007ee0:	400b      	ands	r3, r1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d108      	bne.n	8007ef8 <HAL_ADC_PollForConversion+0x140>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68d9      	ldr	r1, [r3, #12]
 8007eec:	4b34      	ldr	r3, [pc, #208]	; (8007fc0 <HAL_ADC_PollForConversion+0x208>)
 8007eee:	400b      	ands	r3, r1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <HAL_ADC_PollForConversion+0x140>
 8007ef4:	2354      	movs	r3, #84	; 0x54
 8007ef6:	e000      	b.n	8007efa <HAL_ADC_PollForConversion+0x142>
 8007ef8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8007efa:	fb02 f303 	mul.w	r3, r2, r3
 8007efe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007f00:	e021      	b.n	8007f46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f08:	d01a      	beq.n	8007f40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d007      	beq.n	8007f20 <HAL_ADC_PollForConversion+0x168>
 8007f10:	f7ff fd8c 	bl	8007a2c <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d20f      	bcs.n	8007f40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d90b      	bls.n	8007f40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	f043 0204 	orr.w	r2, r3, #4
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e030      	b.n	8007fa2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3301      	adds	r3, #1
 8007f44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d8d9      	bhi.n	8007f02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f06f 0212 	mvn.w	r2, #18
 8007f56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007f6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007f72:	d115      	bne.n	8007fa0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d111      	bne.n	8007fa0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d105      	bne.n	8007fa0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	f043 0201 	orr.w	r2, r3, #1
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd90      	pop	{r4, r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000040 	.word	0x20000040
 8007fb0:	24924924 	.word	0x24924924
 8007fb4:	00924924 	.word	0x00924924
 8007fb8:	12492492 	.word	0x12492492
 8007fbc:	00492492 	.word	0x00492492
 8007fc0:	00249249 	.word	0x00249249

08007fc4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a64      	ldr	r2, [pc, #400]	; (800816c <HAL_ADC_Start_DMA+0x1a8>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <HAL_ADC_Start_DMA+0x24>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a63      	ldr	r2, [pc, #396]	; (8008170 <HAL_ADC_Start_DMA+0x1ac>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d106      	bne.n	8007ff6 <HAL_ADC_Start_DMA+0x32>
 8007fe8:	4b60      	ldr	r3, [pc, #384]	; (800816c <HAL_ADC_Start_DMA+0x1a8>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f040 80b3 	bne.w	800815c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_ADC_Start_DMA+0x40>
 8008000:	2302      	movs	r3, #2
 8008002:	e0ae      	b.n	8008162 <HAL_ADC_Start_DMA+0x19e>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 f9d7 	bl	80083c0 <ADC_Enable>
 8008012:	4603      	mov	r3, r0
 8008014:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f040 809a 	bne.w	8008152 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008026:	f023 0301 	bic.w	r3, r3, #1
 800802a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a4e      	ldr	r2, [pc, #312]	; (8008170 <HAL_ADC_Start_DMA+0x1ac>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d105      	bne.n	8008048 <HAL_ADC_Start_DMA+0x84>
 800803c:	4b4b      	ldr	r3, [pc, #300]	; (800816c <HAL_ADC_Start_DMA+0x1a8>)
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d115      	bne.n	8008074 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800805e:	2b00      	cmp	r3, #0
 8008060:	d026      	beq.n	80080b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800806a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008072:	e01d      	b.n	80080b0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a39      	ldr	r2, [pc, #228]	; (800816c <HAL_ADC_Start_DMA+0x1a8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d004      	beq.n	8008094 <HAL_ADC_Start_DMA+0xd0>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a38      	ldr	r2, [pc, #224]	; (8008170 <HAL_ADC_Start_DMA+0x1ac>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d10d      	bne.n	80080b0 <HAL_ADC_Start_DMA+0xec>
 8008094:	4b35      	ldr	r3, [pc, #212]	; (800816c <HAL_ADC_Start_DMA+0x1a8>)
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800809c:	2b00      	cmp	r3, #0
 800809e:	d007      	beq.n	80080b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80080a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d006      	beq.n	80080ca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	f023 0206 	bic.w	r2, r3, #6
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80080c8:	e002      	b.n	80080d0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	4a25      	ldr	r2, [pc, #148]	; (8008174 <HAL_ADC_Start_DMA+0x1b0>)
 80080de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	4a24      	ldr	r2, [pc, #144]	; (8008178 <HAL_ADC_Start_DMA+0x1b4>)
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	4a23      	ldr	r2, [pc, #140]	; (800817c <HAL_ADC_Start_DMA+0x1b8>)
 80080ee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0202 	mvn.w	r2, #2
 80080f8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008108:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6a18      	ldr	r0, [r3, #32]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	334c      	adds	r3, #76	; 0x4c
 8008114:	4619      	mov	r1, r3
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f000 fc83 	bl	8008a24 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008128:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800812c:	d108      	bne.n	8008140 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800813c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800813e:	e00f      	b.n	8008160 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689a      	ldr	r2, [r3, #8]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800814e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8008150:	e006      	b.n	8008160 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800815a:	e001      	b.n	8008160 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40012400 	.word	0x40012400
 8008170:	40012800 	.word	0x40012800
 8008174:	080084f7 	.word	0x080084f7
 8008178:	08008573 	.word	0x08008573
 800817c:	0800858f 	.word	0x0800858f

08008180 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr

08008198 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr

080081aa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr

080081bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr
	...

080081d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_ADC_ConfigChannel+0x20>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e0dc      	b.n	80083aa <HAL_ADC_ConfigChannel+0x1da>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2b06      	cmp	r3, #6
 80081fe:	d81c      	bhi.n	800823a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	3b05      	subs	r3, #5
 8008212:	221f      	movs	r2, #31
 8008214:	fa02 f303 	lsl.w	r3, r2, r3
 8008218:	43db      	mvns	r3, r3
 800821a:	4019      	ands	r1, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	3b05      	subs	r3, #5
 800822c:	fa00 f203 	lsl.w	r2, r0, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	635a      	str	r2, [r3, #52]	; 0x34
 8008238:	e03c      	b.n	80082b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b0c      	cmp	r3, #12
 8008240:	d81c      	bhi.n	800827c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	3b23      	subs	r3, #35	; 0x23
 8008254:	221f      	movs	r2, #31
 8008256:	fa02 f303 	lsl.w	r3, r2, r3
 800825a:	43db      	mvns	r3, r3
 800825c:	4019      	ands	r1, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	3b23      	subs	r3, #35	; 0x23
 800826e:	fa00 f203 	lsl.w	r2, r0, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	631a      	str	r2, [r3, #48]	; 0x30
 800827a:	e01b      	b.n	80082b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	3b41      	subs	r3, #65	; 0x41
 800828e:	221f      	movs	r2, #31
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	43db      	mvns	r3, r3
 8008296:	4019      	ands	r1, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	3b41      	subs	r3, #65	; 0x41
 80082a8:	fa00 f203 	lsl.w	r2, r0, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b09      	cmp	r3, #9
 80082ba:	d91c      	bls.n	80082f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68d9      	ldr	r1, [r3, #12]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4613      	mov	r3, r2
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4413      	add	r3, r2
 80082cc:	3b1e      	subs	r3, #30
 80082ce:	2207      	movs	r2, #7
 80082d0:	fa02 f303 	lsl.w	r3, r2, r3
 80082d4:	43db      	mvns	r3, r3
 80082d6:	4019      	ands	r1, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	6898      	ldr	r0, [r3, #8]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4613      	mov	r3, r2
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	4413      	add	r3, r2
 80082e6:	3b1e      	subs	r3, #30
 80082e8:	fa00 f203 	lsl.w	r2, r0, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	60da      	str	r2, [r3, #12]
 80082f4:	e019      	b.n	800832a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6919      	ldr	r1, [r3, #16]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	4613      	mov	r3, r2
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	4413      	add	r3, r2
 8008306:	2207      	movs	r2, #7
 8008308:	fa02 f303 	lsl.w	r3, r2, r3
 800830c:	43db      	mvns	r3, r3
 800830e:	4019      	ands	r1, r3
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	6898      	ldr	r0, [r3, #8]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	4613      	mov	r3, r2
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	4413      	add	r3, r2
 800831e:	fa00 f203 	lsl.w	r2, r0, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b10      	cmp	r3, #16
 8008330:	d003      	beq.n	800833a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008336:	2b11      	cmp	r3, #17
 8008338:	d132      	bne.n	80083a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a1d      	ldr	r2, [pc, #116]	; (80083b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d125      	bne.n	8008390 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d126      	bne.n	80083a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008360:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b10      	cmp	r3, #16
 8008368:	d11a      	bne.n	80083a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800836a:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a13      	ldr	r2, [pc, #76]	; (80083bc <HAL_ADC_ConfigChannel+0x1ec>)
 8008370:	fba2 2303 	umull	r2, r3, r2, r3
 8008374:	0c9a      	lsrs	r2, r3, #18
 8008376:	4613      	mov	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008380:	e002      	b.n	8008388 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	3b01      	subs	r3, #1
 8008386:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f9      	bne.n	8008382 <HAL_ADC_ConfigChannel+0x1b2>
 800838e:	e007      	b.n	80083a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	f043 0220 	orr.w	r2, r3, #32
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bc80      	pop	{r7}
 80083b2:	4770      	bx	lr
 80083b4:	40012400 	.word	0x40012400
 80083b8:	20000040 	.word	0x20000040
 80083bc:	431bde83 	.word	0x431bde83

080083c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d040      	beq.n	8008460 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f042 0201 	orr.w	r2, r2, #1
 80083ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <ADC_Enable+0xac>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a1f      	ldr	r2, [pc, #124]	; (8008470 <ADC_Enable+0xb0>)
 80083f4:	fba2 2303 	umull	r2, r3, r2, r3
 80083f8:	0c9b      	lsrs	r3, r3, #18
 80083fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80083fc:	e002      	b.n	8008404 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	3b01      	subs	r3, #1
 8008402:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f9      	bne.n	80083fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800840a:	f7ff fb0f 	bl	8007a2c <HAL_GetTick>
 800840e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008410:	e01f      	b.n	8008452 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008412:	f7ff fb0b 	bl	8007a2c <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d918      	bls.n	8008452 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b01      	cmp	r3, #1
 800842c:	d011      	beq.n	8008452 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008432:	f043 0210 	orr.w	r2, r3, #16
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	f043 0201 	orr.w	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e007      	b.n	8008462 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b01      	cmp	r3, #1
 800845e:	d1d8      	bne.n	8008412 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000040 	.word	0x20000040
 8008470:	431bde83 	.word	0x431bde83

08008474 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b01      	cmp	r3, #1
 800848c:	d12e      	bne.n	80084ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0201 	bic.w	r2, r2, #1
 800849c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800849e:	f7ff fac5 	bl	8007a2c <HAL_GetTick>
 80084a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80084a4:	e01b      	b.n	80084de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80084a6:	f7ff fac1 	bl	8007a2c <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d914      	bls.n	80084de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d10d      	bne.n	80084de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c6:	f043 0210 	orr.w	r2, r3, #16
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	f043 0201 	orr.w	r2, r3, #1
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e007      	b.n	80084ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d0dc      	beq.n	80084a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800850c:	2b00      	cmp	r3, #0
 800850e:	d127      	bne.n	8008560 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008526:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800852a:	d115      	bne.n	8008558 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008530:	2b00      	cmp	r3, #0
 8008532:	d111      	bne.n	8008558 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d105      	bne.n	8008558 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008550:	f043 0201 	orr.w	r2, r3, #1
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f7ff fe1d 	bl	8008198 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800855e:	e004      	b.n	800856a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	4798      	blx	r3
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7ff fe12 	bl	80081aa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	f043 0204 	orr.w	r2, r3, #4
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7ff fe01 	bl	80081bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80085c4:	b590      	push	{r4, r7, lr}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80085de:	2302      	movs	r3, #2
 80085e0:	e095      	b.n	800870e <HAL_ADCEx_Calibration_Start+0x14a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff ff42 	bl	8008474 <ADC_ConversionStop_Disable>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f040 8084 	bne.w	8008704 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008600:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008604:	f023 0302 	bic.w	r3, r3, #2
 8008608:	f043 0202 	orr.w	r2, r3, #2
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8008610:	4b41      	ldr	r3, [pc, #260]	; (8008718 <HAL_ADCEx_Calibration_Start+0x154>)
 8008612:	681c      	ldr	r4, [r3, #0]
 8008614:	2002      	movs	r0, #2
 8008616:	f002 fea1 	bl	800b35c <HAL_RCCEx_GetPeriphCLKFreq>
 800861a:	4603      	mov	r3, r0
 800861c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8008620:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8008622:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8008624:	e002      	b.n	800862c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3b01      	subs	r3, #1
 800862a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f9      	bne.n	8008626 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff fec4 	bl	80083c0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0208 	orr.w	r2, r2, #8
 8008646:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8008648:	f7ff f9f0 	bl	8007a2c <HAL_GetTick>
 800864c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800864e:	e01b      	b.n	8008688 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008650:	f7ff f9ec 	bl	8007a2c <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b0a      	cmp	r3, #10
 800865c:	d914      	bls.n	8008688 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00d      	beq.n	8008688 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	f023 0312 	bic.w	r3, r3, #18
 8008674:	f043 0210 	orr.w	r2, r3, #16
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e042      	b.n	800870e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1dc      	bne.n	8008650 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689a      	ldr	r2, [r3, #8]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0204 	orr.w	r2, r2, #4
 80086a4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80086a6:	f7ff f9c1 	bl	8007a2c <HAL_GetTick>
 80086aa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80086ac:	e01b      	b.n	80086e6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80086ae:	f7ff f9bd 	bl	8007a2c <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	2b0a      	cmp	r3, #10
 80086ba:	d914      	bls.n	80086e6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00d      	beq.n	80086e6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ce:	f023 0312 	bic.w	r3, r3, #18
 80086d2:	f043 0210 	orr.w	r2, r3, #16
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e013      	b.n	800870e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1dc      	bne.n	80086ae <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f8:	f023 0303 	bic.w	r3, r3, #3
 80086fc:	f043 0201 	orr.w	r2, r3, #1
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
}
 800870e:	4618      	mov	r0, r3
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	bd90      	pop	{r4, r7, pc}
 8008716:	bf00      	nop
 8008718:	20000040 	.word	0x20000040

0800871c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800872c:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <__NVIC_SetPriorityGrouping+0x44>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008738:	4013      	ands	r3, r2
 800873a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800874e:	4a04      	ldr	r2, [pc, #16]	; (8008760 <__NVIC_SetPriorityGrouping+0x44>)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	60d3      	str	r3, [r2, #12]
}
 8008754:	bf00      	nop
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	e000ed00 	.word	0xe000ed00

08008764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008768:	4b04      	ldr	r3, [pc, #16]	; (800877c <__NVIC_GetPriorityGrouping+0x18>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	0a1b      	lsrs	r3, r3, #8
 800876e:	f003 0307 	and.w	r3, r3, #7
}
 8008772:	4618      	mov	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	e000ed00 	.word	0xe000ed00

08008780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800878a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800878e:	2b00      	cmp	r3, #0
 8008790:	db0b      	blt.n	80087aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	f003 021f 	and.w	r2, r3, #31
 8008798:	4906      	ldr	r1, [pc, #24]	; (80087b4 <__NVIC_EnableIRQ+0x34>)
 800879a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	2001      	movs	r0, #1
 80087a2:	fa00 f202 	lsl.w	r2, r0, r2
 80087a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bc80      	pop	{r7}
 80087b2:	4770      	bx	lr
 80087b4:	e000e100 	.word	0xe000e100

080087b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	6039      	str	r1, [r7, #0]
 80087c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	db0a      	blt.n	80087e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	490c      	ldr	r1, [pc, #48]	; (8008804 <__NVIC_SetPriority+0x4c>)
 80087d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087d6:	0112      	lsls	r2, r2, #4
 80087d8:	b2d2      	uxtb	r2, r2
 80087da:	440b      	add	r3, r1
 80087dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80087e0:	e00a      	b.n	80087f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	4908      	ldr	r1, [pc, #32]	; (8008808 <__NVIC_SetPriority+0x50>)
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	f003 030f 	and.w	r3, r3, #15
 80087ee:	3b04      	subs	r3, #4
 80087f0:	0112      	lsls	r2, r2, #4
 80087f2:	b2d2      	uxtb	r2, r2
 80087f4:	440b      	add	r3, r1
 80087f6:	761a      	strb	r2, [r3, #24]
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	e000e100 	.word	0xe000e100
 8008808:	e000ed00 	.word	0xe000ed00

0800880c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800880c:	b480      	push	{r7}
 800880e:	b089      	sub	sp, #36	; 0x24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f003 0307 	and.w	r3, r3, #7
 800881e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	f1c3 0307 	rsb	r3, r3, #7
 8008826:	2b04      	cmp	r3, #4
 8008828:	bf28      	it	cs
 800882a:	2304      	movcs	r3, #4
 800882c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	3304      	adds	r3, #4
 8008832:	2b06      	cmp	r3, #6
 8008834:	d902      	bls.n	800883c <NVIC_EncodePriority+0x30>
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	3b03      	subs	r3, #3
 800883a:	e000      	b.n	800883e <NVIC_EncodePriority+0x32>
 800883c:	2300      	movs	r3, #0
 800883e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	fa02 f303 	lsl.w	r3, r2, r3
 800884a:	43da      	mvns	r2, r3
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	401a      	ands	r2, r3
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	fa01 f303 	lsl.w	r3, r1, r3
 800885e:	43d9      	mvns	r1, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008864:	4313      	orrs	r3, r2
         );
}
 8008866:	4618      	mov	r0, r3
 8008868:	3724      	adds	r7, #36	; 0x24
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3b01      	subs	r3, #1
 800887c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008880:	d301      	bcc.n	8008886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008882:	2301      	movs	r3, #1
 8008884:	e00f      	b.n	80088a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008886:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <SysTick_Config+0x40>)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3b01      	subs	r3, #1
 800888c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800888e:	210f      	movs	r1, #15
 8008890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008894:	f7ff ff90 	bl	80087b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <SysTick_Config+0x40>)
 800889a:	2200      	movs	r2, #0
 800889c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800889e:	4b04      	ldr	r3, [pc, #16]	; (80088b0 <SysTick_Config+0x40>)
 80088a0:	2207      	movs	r2, #7
 80088a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	e000e010 	.word	0xe000e010

080088b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff ff2d 	bl	800871c <__NVIC_SetPriorityGrouping>
}
 80088c2:	bf00      	nop
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b086      	sub	sp, #24
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	4603      	mov	r3, r0
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80088d8:	2300      	movs	r3, #0
 80088da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80088dc:	f7ff ff42 	bl	8008764 <__NVIC_GetPriorityGrouping>
 80088e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	68b9      	ldr	r1, [r7, #8]
 80088e6:	6978      	ldr	r0, [r7, #20]
 80088e8:	f7ff ff90 	bl	800880c <NVIC_EncodePriority>
 80088ec:	4602      	mov	r2, r0
 80088ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088f2:	4611      	mov	r1, r2
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff ff5f 	bl	80087b8 <__NVIC_SetPriority>
}
 80088fa:	bf00      	nop
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	4603      	mov	r3, r0
 800890a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800890c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008910:	4618      	mov	r0, r3
 8008912:	f7ff ff35 	bl	8008780 <__NVIC_EnableIRQ>
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7ff ffa2 	bl	8008870 <SysTick_Config>
 800892c:	4603      	mov	r3, r0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e059      	b.n	8008a02 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	4b2d      	ldr	r3, [pc, #180]	; (8008a0c <HAL_DMA_Init+0xd4>)
 8008956:	429a      	cmp	r2, r3
 8008958:	d80f      	bhi.n	800897a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	4b2b      	ldr	r3, [pc, #172]	; (8008a10 <HAL_DMA_Init+0xd8>)
 8008962:	4413      	add	r3, r2
 8008964:	4a2b      	ldr	r2, [pc, #172]	; (8008a14 <HAL_DMA_Init+0xdc>)
 8008966:	fba2 2303 	umull	r2, r3, r2, r3
 800896a:	091b      	lsrs	r3, r3, #4
 800896c:	009a      	lsls	r2, r3, #2
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a28      	ldr	r2, [pc, #160]	; (8008a18 <HAL_DMA_Init+0xe0>)
 8008976:	63da      	str	r2, [r3, #60]	; 0x3c
 8008978:	e00e      	b.n	8008998 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	4b26      	ldr	r3, [pc, #152]	; (8008a1c <HAL_DMA_Init+0xe4>)
 8008982:	4413      	add	r3, r2
 8008984:	4a23      	ldr	r2, [pc, #140]	; (8008a14 <HAL_DMA_Init+0xdc>)
 8008986:	fba2 2303 	umull	r2, r3, r2, r3
 800898a:	091b      	lsrs	r3, r3, #4
 800898c:	009a      	lsls	r2, r3, #2
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <HAL_DMA_Init+0xe8>)
 8008996:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80089ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80089b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80089bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc80      	pop	{r7}
 8008a0a:	4770      	bx	lr
 8008a0c:	40020407 	.word	0x40020407
 8008a10:	bffdfff8 	.word	0xbffdfff8
 8008a14:	cccccccd 	.word	0xcccccccd
 8008a18:	40020000 	.word	0x40020000
 8008a1c:	bffdfbf8 	.word	0xbffdfbf8
 8008a20:	40020400 	.word	0x40020400

08008a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_DMA_Start_IT+0x20>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e04a      	b.n	8008ada <HAL_DMA_Start_IT+0xb6>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d13a      	bne.n	8008acc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0201 	bic.w	r2, r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 faa8 	bl	8008fd0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d008      	beq.n	8008a9a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 020e 	orr.w	r2, r2, #14
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	e00f      	b.n	8008aba <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0204 	bic.w	r2, r2, #4
 8008aa8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f042 020a 	orr.w	r2, r2, #10
 8008ab8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f042 0201 	orr.w	r2, r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	e005      	b.n	8008ad8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d008      	beq.n	8008b0a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2204      	movs	r2, #4
 8008afc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e020      	b.n	8008b4c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 020e 	bic.w	r2, r2, #14
 8008b18:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0201 	bic.w	r2, r2, #1
 8008b28:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b32:	2101      	movs	r1, #1
 8008b34:	fa01 f202 	lsl.w	r2, r1, r2
 8008b38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr
	...

08008b58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	2204      	movs	r2, #4
 8008b76:	409a      	lsls	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80f1 	beq.w	8008d64 <HAL_DMA_IRQHandler+0x20c>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 80eb 	beq.w	8008d64 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d107      	bne.n	8008bac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0204 	bic.w	r2, r2, #4
 8008baa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4b5f      	ldr	r3, [pc, #380]	; (8008d30 <HAL_DMA_IRQHandler+0x1d8>)
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d958      	bls.n	8008c6a <HAL_DMA_IRQHandler+0x112>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a5d      	ldr	r2, [pc, #372]	; (8008d34 <HAL_DMA_IRQHandler+0x1dc>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d04f      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x10a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a5c      	ldr	r2, [pc, #368]	; (8008d38 <HAL_DMA_IRQHandler+0x1e0>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d048      	beq.n	8008c5e <HAL_DMA_IRQHandler+0x106>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a5a      	ldr	r2, [pc, #360]	; (8008d3c <HAL_DMA_IRQHandler+0x1e4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d040      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x100>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a59      	ldr	r2, [pc, #356]	; (8008d40 <HAL_DMA_IRQHandler+0x1e8>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d038      	beq.n	8008c52 <HAL_DMA_IRQHandler+0xfa>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a57      	ldr	r2, [pc, #348]	; (8008d44 <HAL_DMA_IRQHandler+0x1ec>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d030      	beq.n	8008c4c <HAL_DMA_IRQHandler+0xf4>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a56      	ldr	r2, [pc, #344]	; (8008d48 <HAL_DMA_IRQHandler+0x1f0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d028      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xee>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a4d      	ldr	r2, [pc, #308]	; (8008d30 <HAL_DMA_IRQHandler+0x1d8>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d020      	beq.n	8008c40 <HAL_DMA_IRQHandler+0xe8>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a52      	ldr	r2, [pc, #328]	; (8008d4c <HAL_DMA_IRQHandler+0x1f4>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d019      	beq.n	8008c3c <HAL_DMA_IRQHandler+0xe4>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a50      	ldr	r2, [pc, #320]	; (8008d50 <HAL_DMA_IRQHandler+0x1f8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d012      	beq.n	8008c38 <HAL_DMA_IRQHandler+0xe0>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a4f      	ldr	r2, [pc, #316]	; (8008d54 <HAL_DMA_IRQHandler+0x1fc>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00a      	beq.n	8008c32 <HAL_DMA_IRQHandler+0xda>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a4d      	ldr	r2, [pc, #308]	; (8008d58 <HAL_DMA_IRQHandler+0x200>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d102      	bne.n	8008c2c <HAL_DMA_IRQHandler+0xd4>
 8008c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c2a:	e01b      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c30:	e018      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c36:	e015      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c38:	2340      	movs	r3, #64	; 0x40
 8008c3a:	e013      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c3c:	2304      	movs	r3, #4
 8008c3e:	e011      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c44:	e00e      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c4a:	e00b      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c50:	e008      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c56:	e005      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c5c:	e002      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c5e:	2340      	movs	r3, #64	; 0x40
 8008c60:	e000      	b.n	8008c64 <HAL_DMA_IRQHandler+0x10c>
 8008c62:	2304      	movs	r3, #4
 8008c64:	4a3d      	ldr	r2, [pc, #244]	; (8008d5c <HAL_DMA_IRQHandler+0x204>)
 8008c66:	6053      	str	r3, [r2, #4]
 8008c68:	e057      	b.n	8008d1a <HAL_DMA_IRQHandler+0x1c2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a31      	ldr	r2, [pc, #196]	; (8008d34 <HAL_DMA_IRQHandler+0x1dc>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d04f      	beq.n	8008d14 <HAL_DMA_IRQHandler+0x1bc>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a2f      	ldr	r2, [pc, #188]	; (8008d38 <HAL_DMA_IRQHandler+0x1e0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d048      	beq.n	8008d10 <HAL_DMA_IRQHandler+0x1b8>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a2e      	ldr	r2, [pc, #184]	; (8008d3c <HAL_DMA_IRQHandler+0x1e4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d040      	beq.n	8008d0a <HAL_DMA_IRQHandler+0x1b2>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a2c      	ldr	r2, [pc, #176]	; (8008d40 <HAL_DMA_IRQHandler+0x1e8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d038      	beq.n	8008d04 <HAL_DMA_IRQHandler+0x1ac>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a2b      	ldr	r2, [pc, #172]	; (8008d44 <HAL_DMA_IRQHandler+0x1ec>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d030      	beq.n	8008cfe <HAL_DMA_IRQHandler+0x1a6>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a29      	ldr	r2, [pc, #164]	; (8008d48 <HAL_DMA_IRQHandler+0x1f0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d028      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x1a0>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a21      	ldr	r2, [pc, #132]	; (8008d30 <HAL_DMA_IRQHandler+0x1d8>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d020      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0x19a>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a25      	ldr	r2, [pc, #148]	; (8008d4c <HAL_DMA_IRQHandler+0x1f4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d019      	beq.n	8008cee <HAL_DMA_IRQHandler+0x196>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a24      	ldr	r2, [pc, #144]	; (8008d50 <HAL_DMA_IRQHandler+0x1f8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d012      	beq.n	8008cea <HAL_DMA_IRQHandler+0x192>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a22      	ldr	r2, [pc, #136]	; (8008d54 <HAL_DMA_IRQHandler+0x1fc>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00a      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x18c>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a21      	ldr	r2, [pc, #132]	; (8008d58 <HAL_DMA_IRQHandler+0x200>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d102      	bne.n	8008cde <HAL_DMA_IRQHandler+0x186>
 8008cd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cdc:	e01b      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008cde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ce2:	e018      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ce8:	e015      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008cea:	2340      	movs	r3, #64	; 0x40
 8008cec:	e013      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008cee:	2304      	movs	r3, #4
 8008cf0:	e011      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008cf2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008cf6:	e00e      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008cf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008cfc:	e00b      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008cfe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d02:	e008      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008d04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d08:	e005      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d0e:	e002      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008d10:	2340      	movs	r3, #64	; 0x40
 8008d12:	e000      	b.n	8008d16 <HAL_DMA_IRQHandler+0x1be>
 8008d14:	2304      	movs	r3, #4
 8008d16:	4a12      	ldr	r2, [pc, #72]	; (8008d60 <HAL_DMA_IRQHandler+0x208>)
 8008d18:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 8136 	beq.w	8008f90 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008d2c:	e130      	b.n	8008f90 <HAL_DMA_IRQHandler+0x438>
 8008d2e:	bf00      	nop
 8008d30:	40020080 	.word	0x40020080
 8008d34:	40020008 	.word	0x40020008
 8008d38:	4002001c 	.word	0x4002001c
 8008d3c:	40020030 	.word	0x40020030
 8008d40:	40020044 	.word	0x40020044
 8008d44:	40020058 	.word	0x40020058
 8008d48:	4002006c 	.word	0x4002006c
 8008d4c:	40020408 	.word	0x40020408
 8008d50:	4002041c 	.word	0x4002041c
 8008d54:	40020430 	.word	0x40020430
 8008d58:	40020444 	.word	0x40020444
 8008d5c:	40020400 	.word	0x40020400
 8008d60:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d68:	2202      	movs	r2, #2
 8008d6a:	409a      	lsls	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 80dd 	beq.w	8008f30 <HAL_DMA_IRQHandler+0x3d8>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80d7 	beq.w	8008f30 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0320 	and.w	r3, r3, #32
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10b      	bne.n	8008da8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 020a 	bic.w	r2, r2, #10
 8008d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	4b7b      	ldr	r3, [pc, #492]	; (8008f9c <HAL_DMA_IRQHandler+0x444>)
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d958      	bls.n	8008e66 <HAL_DMA_IRQHandler+0x30e>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a79      	ldr	r2, [pc, #484]	; (8008fa0 <HAL_DMA_IRQHandler+0x448>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d04f      	beq.n	8008e5e <HAL_DMA_IRQHandler+0x306>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a78      	ldr	r2, [pc, #480]	; (8008fa4 <HAL_DMA_IRQHandler+0x44c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d048      	beq.n	8008e5a <HAL_DMA_IRQHandler+0x302>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a76      	ldr	r2, [pc, #472]	; (8008fa8 <HAL_DMA_IRQHandler+0x450>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d040      	beq.n	8008e54 <HAL_DMA_IRQHandler+0x2fc>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a75      	ldr	r2, [pc, #468]	; (8008fac <HAL_DMA_IRQHandler+0x454>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d038      	beq.n	8008e4e <HAL_DMA_IRQHandler+0x2f6>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a73      	ldr	r2, [pc, #460]	; (8008fb0 <HAL_DMA_IRQHandler+0x458>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d030      	beq.n	8008e48 <HAL_DMA_IRQHandler+0x2f0>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a72      	ldr	r2, [pc, #456]	; (8008fb4 <HAL_DMA_IRQHandler+0x45c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d028      	beq.n	8008e42 <HAL_DMA_IRQHandler+0x2ea>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a69      	ldr	r2, [pc, #420]	; (8008f9c <HAL_DMA_IRQHandler+0x444>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d020      	beq.n	8008e3c <HAL_DMA_IRQHandler+0x2e4>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a6e      	ldr	r2, [pc, #440]	; (8008fb8 <HAL_DMA_IRQHandler+0x460>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d019      	beq.n	8008e38 <HAL_DMA_IRQHandler+0x2e0>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a6c      	ldr	r2, [pc, #432]	; (8008fbc <HAL_DMA_IRQHandler+0x464>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d012      	beq.n	8008e34 <HAL_DMA_IRQHandler+0x2dc>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a6b      	ldr	r2, [pc, #428]	; (8008fc0 <HAL_DMA_IRQHandler+0x468>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00a      	beq.n	8008e2e <HAL_DMA_IRQHandler+0x2d6>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a69      	ldr	r2, [pc, #420]	; (8008fc4 <HAL_DMA_IRQHandler+0x46c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d102      	bne.n	8008e28 <HAL_DMA_IRQHandler+0x2d0>
 8008e22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e26:	e01b      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e2c:	e018      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e32:	e015      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e34:	2320      	movs	r3, #32
 8008e36:	e013      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e011      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e40:	e00e      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e46:	e00b      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e4c:	e008      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e52:	e005      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e58:	e002      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e5a:	2320      	movs	r3, #32
 8008e5c:	e000      	b.n	8008e60 <HAL_DMA_IRQHandler+0x308>
 8008e5e:	2302      	movs	r3, #2
 8008e60:	4a59      	ldr	r2, [pc, #356]	; (8008fc8 <HAL_DMA_IRQHandler+0x470>)
 8008e62:	6053      	str	r3, [r2, #4]
 8008e64:	e057      	b.n	8008f16 <HAL_DMA_IRQHandler+0x3be>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a4d      	ldr	r2, [pc, #308]	; (8008fa0 <HAL_DMA_IRQHandler+0x448>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d04f      	beq.n	8008f10 <HAL_DMA_IRQHandler+0x3b8>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a4b      	ldr	r2, [pc, #300]	; (8008fa4 <HAL_DMA_IRQHandler+0x44c>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d048      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x3b4>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a4a      	ldr	r2, [pc, #296]	; (8008fa8 <HAL_DMA_IRQHandler+0x450>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d040      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x3ae>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a48      	ldr	r2, [pc, #288]	; (8008fac <HAL_DMA_IRQHandler+0x454>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d038      	beq.n	8008f00 <HAL_DMA_IRQHandler+0x3a8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a47      	ldr	r2, [pc, #284]	; (8008fb0 <HAL_DMA_IRQHandler+0x458>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d030      	beq.n	8008efa <HAL_DMA_IRQHandler+0x3a2>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a45      	ldr	r2, [pc, #276]	; (8008fb4 <HAL_DMA_IRQHandler+0x45c>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d028      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x39c>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a3d      	ldr	r2, [pc, #244]	; (8008f9c <HAL_DMA_IRQHandler+0x444>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d020      	beq.n	8008eee <HAL_DMA_IRQHandler+0x396>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a41      	ldr	r2, [pc, #260]	; (8008fb8 <HAL_DMA_IRQHandler+0x460>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d019      	beq.n	8008eea <HAL_DMA_IRQHandler+0x392>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a40      	ldr	r2, [pc, #256]	; (8008fbc <HAL_DMA_IRQHandler+0x464>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d012      	beq.n	8008ee6 <HAL_DMA_IRQHandler+0x38e>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a3e      	ldr	r2, [pc, #248]	; (8008fc0 <HAL_DMA_IRQHandler+0x468>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d00a      	beq.n	8008ee0 <HAL_DMA_IRQHandler+0x388>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a3d      	ldr	r2, [pc, #244]	; (8008fc4 <HAL_DMA_IRQHandler+0x46c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d102      	bne.n	8008eda <HAL_DMA_IRQHandler+0x382>
 8008ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ed8:	e01b      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ede:	e018      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ee4:	e015      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008ee6:	2320      	movs	r3, #32
 8008ee8:	e013      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008eea:	2302      	movs	r3, #2
 8008eec:	e011      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ef2:	e00e      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008ef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ef8:	e00b      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008efe:	e008      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f04:	e005      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0a:	e002      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008f0c:	2320      	movs	r3, #32
 8008f0e:	e000      	b.n	8008f12 <HAL_DMA_IRQHandler+0x3ba>
 8008f10:	2302      	movs	r3, #2
 8008f12:	4a2e      	ldr	r2, [pc, #184]	; (8008fcc <HAL_DMA_IRQHandler+0x474>)
 8008f14:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d034      	beq.n	8008f90 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008f2e:	e02f      	b.n	8008f90 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f34:	2208      	movs	r2, #8
 8008f36:	409a      	lsls	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d028      	beq.n	8008f92 <HAL_DMA_IRQHandler+0x43a>
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d023      	beq.n	8008f92 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 020e 	bic.w	r2, r2, #14
 8008f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f62:	2101      	movs	r1, #1
 8008f64:	fa01 f202 	lsl.w	r2, r1, r2
 8008f68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	4798      	blx	r3
    }
  }
  return;
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
}
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	40020080 	.word	0x40020080
 8008fa0:	40020008 	.word	0x40020008
 8008fa4:	4002001c 	.word	0x4002001c
 8008fa8:	40020030 	.word	0x40020030
 8008fac:	40020044 	.word	0x40020044
 8008fb0:	40020058 	.word	0x40020058
 8008fb4:	4002006c 	.word	0x4002006c
 8008fb8:	40020408 	.word	0x40020408
 8008fbc:	4002041c 	.word	0x4002041c
 8008fc0:	40020430 	.word	0x40020430
 8008fc4:	40020444 	.word	0x40020444
 8008fc8:	40020400 	.word	0x40020400
 8008fcc:	40020000 	.word	0x40020000

08008fd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8008fec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	2b10      	cmp	r3, #16
 8008ffc:	d108      	bne.n	8009010 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800900e:	e007      	b.n	8009020 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	60da      	str	r2, [r3, #12]
}
 8009020:	bf00      	nop
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	bc80      	pop	{r7}
 8009028:	4770      	bx	lr
	...

0800902c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800902c:	b480      	push	{r7}
 800902e:	b08b      	sub	sp, #44	; 0x2c
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009036:	2300      	movs	r3, #0
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800903a:	2300      	movs	r3, #0
 800903c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800903e:	e179      	b.n	8009334 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009040:	2201      	movs	r2, #1
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	fa02 f303 	lsl.w	r3, r2, r3
 8009048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	4013      	ands	r3, r2
 8009052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	429a      	cmp	r2, r3
 800905a:	f040 8168 	bne.w	800932e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	4a96      	ldr	r2, [pc, #600]	; (80092bc <HAL_GPIO_Init+0x290>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d05e      	beq.n	8009126 <HAL_GPIO_Init+0xfa>
 8009068:	4a94      	ldr	r2, [pc, #592]	; (80092bc <HAL_GPIO_Init+0x290>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d875      	bhi.n	800915a <HAL_GPIO_Init+0x12e>
 800906e:	4a94      	ldr	r2, [pc, #592]	; (80092c0 <HAL_GPIO_Init+0x294>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d058      	beq.n	8009126 <HAL_GPIO_Init+0xfa>
 8009074:	4a92      	ldr	r2, [pc, #584]	; (80092c0 <HAL_GPIO_Init+0x294>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d86f      	bhi.n	800915a <HAL_GPIO_Init+0x12e>
 800907a:	4a92      	ldr	r2, [pc, #584]	; (80092c4 <HAL_GPIO_Init+0x298>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d052      	beq.n	8009126 <HAL_GPIO_Init+0xfa>
 8009080:	4a90      	ldr	r2, [pc, #576]	; (80092c4 <HAL_GPIO_Init+0x298>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d869      	bhi.n	800915a <HAL_GPIO_Init+0x12e>
 8009086:	4a90      	ldr	r2, [pc, #576]	; (80092c8 <HAL_GPIO_Init+0x29c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d04c      	beq.n	8009126 <HAL_GPIO_Init+0xfa>
 800908c:	4a8e      	ldr	r2, [pc, #568]	; (80092c8 <HAL_GPIO_Init+0x29c>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d863      	bhi.n	800915a <HAL_GPIO_Init+0x12e>
 8009092:	4a8e      	ldr	r2, [pc, #568]	; (80092cc <HAL_GPIO_Init+0x2a0>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d046      	beq.n	8009126 <HAL_GPIO_Init+0xfa>
 8009098:	4a8c      	ldr	r2, [pc, #560]	; (80092cc <HAL_GPIO_Init+0x2a0>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d85d      	bhi.n	800915a <HAL_GPIO_Init+0x12e>
 800909e:	2b12      	cmp	r3, #18
 80090a0:	d82a      	bhi.n	80090f8 <HAL_GPIO_Init+0xcc>
 80090a2:	2b12      	cmp	r3, #18
 80090a4:	d859      	bhi.n	800915a <HAL_GPIO_Init+0x12e>
 80090a6:	a201      	add	r2, pc, #4	; (adr r2, 80090ac <HAL_GPIO_Init+0x80>)
 80090a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ac:	08009127 	.word	0x08009127
 80090b0:	08009101 	.word	0x08009101
 80090b4:	08009113 	.word	0x08009113
 80090b8:	08009155 	.word	0x08009155
 80090bc:	0800915b 	.word	0x0800915b
 80090c0:	0800915b 	.word	0x0800915b
 80090c4:	0800915b 	.word	0x0800915b
 80090c8:	0800915b 	.word	0x0800915b
 80090cc:	0800915b 	.word	0x0800915b
 80090d0:	0800915b 	.word	0x0800915b
 80090d4:	0800915b 	.word	0x0800915b
 80090d8:	0800915b 	.word	0x0800915b
 80090dc:	0800915b 	.word	0x0800915b
 80090e0:	0800915b 	.word	0x0800915b
 80090e4:	0800915b 	.word	0x0800915b
 80090e8:	0800915b 	.word	0x0800915b
 80090ec:	0800915b 	.word	0x0800915b
 80090f0:	08009109 	.word	0x08009109
 80090f4:	0800911d 	.word	0x0800911d
 80090f8:	4a75      	ldr	r2, [pc, #468]	; (80092d0 <HAL_GPIO_Init+0x2a4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d013      	beq.n	8009126 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80090fe:	e02c      	b.n	800915a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	623b      	str	r3, [r7, #32]
          break;
 8009106:	e029      	b.n	800915c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	3304      	adds	r3, #4
 800910e:	623b      	str	r3, [r7, #32]
          break;
 8009110:	e024      	b.n	800915c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	3308      	adds	r3, #8
 8009118:	623b      	str	r3, [r7, #32]
          break;
 800911a:	e01f      	b.n	800915c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	330c      	adds	r3, #12
 8009122:	623b      	str	r3, [r7, #32]
          break;
 8009124:	e01a      	b.n	800915c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800912e:	2304      	movs	r3, #4
 8009130:	623b      	str	r3, [r7, #32]
          break;
 8009132:	e013      	b.n	800915c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d105      	bne.n	8009148 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800913c:	2308      	movs	r3, #8
 800913e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	611a      	str	r2, [r3, #16]
          break;
 8009146:	e009      	b.n	800915c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009148:	2308      	movs	r3, #8
 800914a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	69fa      	ldr	r2, [r7, #28]
 8009150:	615a      	str	r2, [r3, #20]
          break;
 8009152:	e003      	b.n	800915c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009154:	2300      	movs	r3, #0
 8009156:	623b      	str	r3, [r7, #32]
          break;
 8009158:	e000      	b.n	800915c <HAL_GPIO_Init+0x130>
          break;
 800915a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2bff      	cmp	r3, #255	; 0xff
 8009160:	d801      	bhi.n	8009166 <HAL_GPIO_Init+0x13a>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	e001      	b.n	800916a <HAL_GPIO_Init+0x13e>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3304      	adds	r3, #4
 800916a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2bff      	cmp	r3, #255	; 0xff
 8009170:	d802      	bhi.n	8009178 <HAL_GPIO_Init+0x14c>
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	e002      	b.n	800917e <HAL_GPIO_Init+0x152>
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	3b08      	subs	r3, #8
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	210f      	movs	r1, #15
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	fa01 f303 	lsl.w	r3, r1, r3
 800918c:	43db      	mvns	r3, r3
 800918e:	401a      	ands	r2, r3
 8009190:	6a39      	ldr	r1, [r7, #32]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	fa01 f303 	lsl.w	r3, r1, r3
 8009198:	431a      	orrs	r2, r3
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 80c1 	beq.w	800932e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80091ac:	4b49      	ldr	r3, [pc, #292]	; (80092d4 <HAL_GPIO_Init+0x2a8>)
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	4a48      	ldr	r2, [pc, #288]	; (80092d4 <HAL_GPIO_Init+0x2a8>)
 80091b2:	f043 0301 	orr.w	r3, r3, #1
 80091b6:	6193      	str	r3, [r2, #24]
 80091b8:	4b46      	ldr	r3, [pc, #280]	; (80092d4 <HAL_GPIO_Init+0x2a8>)
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	60bb      	str	r3, [r7, #8]
 80091c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80091c4:	4a44      	ldr	r2, [pc, #272]	; (80092d8 <HAL_GPIO_Init+0x2ac>)
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	089b      	lsrs	r3, r3, #2
 80091ca:	3302      	adds	r3, #2
 80091cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	220f      	movs	r2, #15
 80091dc:	fa02 f303 	lsl.w	r3, r2, r3
 80091e0:	43db      	mvns	r3, r3
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4013      	ands	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a3c      	ldr	r2, [pc, #240]	; (80092dc <HAL_GPIO_Init+0x2b0>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d01f      	beq.n	8009230 <HAL_GPIO_Init+0x204>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a3b      	ldr	r2, [pc, #236]	; (80092e0 <HAL_GPIO_Init+0x2b4>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d019      	beq.n	800922c <HAL_GPIO_Init+0x200>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a3a      	ldr	r2, [pc, #232]	; (80092e4 <HAL_GPIO_Init+0x2b8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d013      	beq.n	8009228 <HAL_GPIO_Init+0x1fc>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a39      	ldr	r2, [pc, #228]	; (80092e8 <HAL_GPIO_Init+0x2bc>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00d      	beq.n	8009224 <HAL_GPIO_Init+0x1f8>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a38      	ldr	r2, [pc, #224]	; (80092ec <HAL_GPIO_Init+0x2c0>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d007      	beq.n	8009220 <HAL_GPIO_Init+0x1f4>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a37      	ldr	r2, [pc, #220]	; (80092f0 <HAL_GPIO_Init+0x2c4>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d101      	bne.n	800921c <HAL_GPIO_Init+0x1f0>
 8009218:	2305      	movs	r3, #5
 800921a:	e00a      	b.n	8009232 <HAL_GPIO_Init+0x206>
 800921c:	2306      	movs	r3, #6
 800921e:	e008      	b.n	8009232 <HAL_GPIO_Init+0x206>
 8009220:	2304      	movs	r3, #4
 8009222:	e006      	b.n	8009232 <HAL_GPIO_Init+0x206>
 8009224:	2303      	movs	r3, #3
 8009226:	e004      	b.n	8009232 <HAL_GPIO_Init+0x206>
 8009228:	2302      	movs	r3, #2
 800922a:	e002      	b.n	8009232 <HAL_GPIO_Init+0x206>
 800922c:	2301      	movs	r3, #1
 800922e:	e000      	b.n	8009232 <HAL_GPIO_Init+0x206>
 8009230:	2300      	movs	r3, #0
 8009232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009234:	f002 0203 	and.w	r2, r2, #3
 8009238:	0092      	lsls	r2, r2, #2
 800923a:	4093      	lsls	r3, r2
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009242:	4925      	ldr	r1, [pc, #148]	; (80092d8 <HAL_GPIO_Init+0x2ac>)
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	3302      	adds	r3, #2
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d006      	beq.n	800926a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800925c:	4b25      	ldr	r3, [pc, #148]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	4924      	ldr	r1, [pc, #144]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	4313      	orrs	r3, r2
 8009266:	600b      	str	r3, [r1, #0]
 8009268:	e006      	b.n	8009278 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800926a:	4b22      	ldr	r3, [pc, #136]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	43db      	mvns	r3, r3
 8009272:	4920      	ldr	r1, [pc, #128]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 8009274:	4013      	ands	r3, r2
 8009276:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d006      	beq.n	8009292 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009284:	4b1b      	ldr	r3, [pc, #108]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	491a      	ldr	r1, [pc, #104]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	4313      	orrs	r3, r2
 800928e:	604b      	str	r3, [r1, #4]
 8009290:	e006      	b.n	80092a0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009292:	4b18      	ldr	r3, [pc, #96]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	43db      	mvns	r3, r3
 800929a:	4916      	ldr	r1, [pc, #88]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 800929c:	4013      	ands	r3, r2
 800929e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d025      	beq.n	80092f8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80092ac:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	4910      	ldr	r1, [pc, #64]	; (80092f4 <HAL_GPIO_Init+0x2c8>)
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	608b      	str	r3, [r1, #8]
 80092b8:	e025      	b.n	8009306 <HAL_GPIO_Init+0x2da>
 80092ba:	bf00      	nop
 80092bc:	10320000 	.word	0x10320000
 80092c0:	10310000 	.word	0x10310000
 80092c4:	10220000 	.word	0x10220000
 80092c8:	10210000 	.word	0x10210000
 80092cc:	10120000 	.word	0x10120000
 80092d0:	10110000 	.word	0x10110000
 80092d4:	40021000 	.word	0x40021000
 80092d8:	40010000 	.word	0x40010000
 80092dc:	40010800 	.word	0x40010800
 80092e0:	40010c00 	.word	0x40010c00
 80092e4:	40011000 	.word	0x40011000
 80092e8:	40011400 	.word	0x40011400
 80092ec:	40011800 	.word	0x40011800
 80092f0:	40011c00 	.word	0x40011c00
 80092f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80092f8:	4b15      	ldr	r3, [pc, #84]	; (8009350 <HAL_GPIO_Init+0x324>)
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	43db      	mvns	r3, r3
 8009300:	4913      	ldr	r1, [pc, #76]	; (8009350 <HAL_GPIO_Init+0x324>)
 8009302:	4013      	ands	r3, r2
 8009304:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d006      	beq.n	8009320 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009312:	4b0f      	ldr	r3, [pc, #60]	; (8009350 <HAL_GPIO_Init+0x324>)
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	490e      	ldr	r1, [pc, #56]	; (8009350 <HAL_GPIO_Init+0x324>)
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	4313      	orrs	r3, r2
 800931c:	60cb      	str	r3, [r1, #12]
 800931e:	e006      	b.n	800932e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <HAL_GPIO_Init+0x324>)
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	43db      	mvns	r3, r3
 8009328:	4909      	ldr	r1, [pc, #36]	; (8009350 <HAL_GPIO_Init+0x324>)
 800932a:	4013      	ands	r3, r2
 800932c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	3301      	adds	r3, #1
 8009332:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	fa22 f303 	lsr.w	r3, r2, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	f47f ae7e 	bne.w	8009040 <HAL_GPIO_Init+0x14>
  }
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop
 8009348:	372c      	adds	r7, #44	; 0x2c
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr
 8009350:	40010400 	.word	0x40010400

08009354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	887b      	ldrh	r3, [r7, #2]
 8009366:	4013      	ands	r3, r2
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800936c:	2301      	movs	r3, #1
 800936e:	73fb      	strb	r3, [r7, #15]
 8009370:	e001      	b.n	8009376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr

08009382 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	807b      	strh	r3, [r7, #2]
 800938e:	4613      	mov	r3, r2
 8009390:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009392:	787b      	ldrb	r3, [r7, #1]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d003      	beq.n	80093a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009398:	887a      	ldrh	r2, [r7, #2]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800939e:	e003      	b.n	80093a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093a0:	887b      	ldrh	r3, [r7, #2]
 80093a2:	041a      	lsls	r2, r3, #16
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	611a      	str	r2, [r3, #16]
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bc80      	pop	{r7}
 80093b0:	4770      	bx	lr
	...

080093b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80093be:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80093c0:	695a      	ldr	r2, [r3, #20]
 80093c2:	88fb      	ldrh	r3, [r7, #6]
 80093c4:	4013      	ands	r3, r2
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d006      	beq.n	80093d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80093ca:	4a05      	ldr	r2, [pc, #20]	; (80093e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80093d0:	88fb      	ldrh	r3, [r7, #6]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f806 	bl	80093e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80093d8:	bf00      	nop
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40010400 	.word	0x40010400

080093e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bc80      	pop	{r7}
 80093f6:	4770      	bx	lr

080093f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e12b      	b.n	8009662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d106      	bne.n	8009424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7fc fe4e 	bl	80060c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2224      	movs	r2, #36	; 0x24
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 0201 	bic.w	r2, r2, #1
 800943a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800944a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800945a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800945c:	f001 fe82 	bl	800b164 <HAL_RCC_GetPCLK1Freq>
 8009460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	4a81      	ldr	r2, [pc, #516]	; (800966c <HAL_I2C_Init+0x274>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d807      	bhi.n	800947c <HAL_I2C_Init+0x84>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4a80      	ldr	r2, [pc, #512]	; (8009670 <HAL_I2C_Init+0x278>)
 8009470:	4293      	cmp	r3, r2
 8009472:	bf94      	ite	ls
 8009474:	2301      	movls	r3, #1
 8009476:	2300      	movhi	r3, #0
 8009478:	b2db      	uxtb	r3, r3
 800947a:	e006      	b.n	800948a <HAL_I2C_Init+0x92>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4a7d      	ldr	r2, [pc, #500]	; (8009674 <HAL_I2C_Init+0x27c>)
 8009480:	4293      	cmp	r3, r2
 8009482:	bf94      	ite	ls
 8009484:	2301      	movls	r3, #1
 8009486:	2300      	movhi	r3, #0
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e0e7      	b.n	8009662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4a78      	ldr	r2, [pc, #480]	; (8009678 <HAL_I2C_Init+0x280>)
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
 800949a:	0c9b      	lsrs	r3, r3, #18
 800949c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	4a6a      	ldr	r2, [pc, #424]	; (800966c <HAL_I2C_Init+0x274>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d802      	bhi.n	80094cc <HAL_I2C_Init+0xd4>
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	3301      	adds	r3, #1
 80094ca:	e009      	b.n	80094e0 <HAL_I2C_Init+0xe8>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80094d2:	fb02 f303 	mul.w	r3, r2, r3
 80094d6:	4a69      	ldr	r2, [pc, #420]	; (800967c <HAL_I2C_Init+0x284>)
 80094d8:	fba2 2303 	umull	r2, r3, r2, r3
 80094dc:	099b      	lsrs	r3, r3, #6
 80094de:	3301      	adds	r3, #1
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	430b      	orrs	r3, r1
 80094e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80094f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	495c      	ldr	r1, [pc, #368]	; (800966c <HAL_I2C_Init+0x274>)
 80094fc:	428b      	cmp	r3, r1
 80094fe:	d819      	bhi.n	8009534 <HAL_I2C_Init+0x13c>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1e59      	subs	r1, r3, #1
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	fbb1 f3f3 	udiv	r3, r1, r3
 800950e:	1c59      	adds	r1, r3, #1
 8009510:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009514:	400b      	ands	r3, r1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <HAL_I2C_Init+0x138>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1e59      	subs	r1, r3, #1
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	fbb1 f3f3 	udiv	r3, r1, r3
 8009528:	3301      	adds	r3, #1
 800952a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800952e:	e051      	b.n	80095d4 <HAL_I2C_Init+0x1dc>
 8009530:	2304      	movs	r3, #4
 8009532:	e04f      	b.n	80095d4 <HAL_I2C_Init+0x1dc>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d111      	bne.n	8009560 <HAL_I2C_Init+0x168>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	1e58      	subs	r0, r3, #1
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6859      	ldr	r1, [r3, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	440b      	add	r3, r1
 800954a:	fbb0 f3f3 	udiv	r3, r0, r3
 800954e:	3301      	adds	r3, #1
 8009550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009554:	2b00      	cmp	r3, #0
 8009556:	bf0c      	ite	eq
 8009558:	2301      	moveq	r3, #1
 800955a:	2300      	movne	r3, #0
 800955c:	b2db      	uxtb	r3, r3
 800955e:	e012      	b.n	8009586 <HAL_I2C_Init+0x18e>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	1e58      	subs	r0, r3, #1
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6859      	ldr	r1, [r3, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	0099      	lsls	r1, r3, #2
 8009570:	440b      	add	r3, r1
 8009572:	fbb0 f3f3 	udiv	r3, r0, r3
 8009576:	3301      	adds	r3, #1
 8009578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800957c:	2b00      	cmp	r3, #0
 800957e:	bf0c      	ite	eq
 8009580:	2301      	moveq	r3, #1
 8009582:	2300      	movne	r3, #0
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <HAL_I2C_Init+0x196>
 800958a:	2301      	movs	r3, #1
 800958c:	e022      	b.n	80095d4 <HAL_I2C_Init+0x1dc>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10e      	bne.n	80095b4 <HAL_I2C_Init+0x1bc>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	1e58      	subs	r0, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6859      	ldr	r1, [r3, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	440b      	add	r3, r1
 80095a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80095a8:	3301      	adds	r3, #1
 80095aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b2:	e00f      	b.n	80095d4 <HAL_I2C_Init+0x1dc>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	1e58      	subs	r0, r3, #1
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6859      	ldr	r1, [r3, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	440b      	add	r3, r1
 80095c2:	0099      	lsls	r1, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80095ca:	3301      	adds	r3, #1
 80095cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	6809      	ldr	r1, [r1, #0]
 80095d8:	4313      	orrs	r3, r2
 80095da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	69da      	ldr	r2, [r3, #28]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	431a      	orrs	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009602:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	6911      	ldr	r1, [r2, #16]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	68d2      	ldr	r2, [r2, #12]
 800960e:	4311      	orrs	r1, r2
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	430b      	orrs	r3, r1
 8009616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	695a      	ldr	r2, [r3, #20]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0201 	orr.w	r2, r2, #1
 8009642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	000186a0 	.word	0x000186a0
 8009670:	001e847f 	.word	0x001e847f
 8009674:	003d08ff 	.word	0x003d08ff
 8009678:	431bde83 	.word	0x431bde83
 800967c:	10624dd3 	.word	0x10624dd3

08009680 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af02      	add	r7, sp, #8
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	4608      	mov	r0, r1
 800968a:	4611      	mov	r1, r2
 800968c:	461a      	mov	r2, r3
 800968e:	4603      	mov	r3, r0
 8009690:	817b      	strh	r3, [r7, #10]
 8009692:	460b      	mov	r3, r1
 8009694:	813b      	strh	r3, [r7, #8]
 8009696:	4613      	mov	r3, r2
 8009698:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800969a:	f7fe f9c7 	bl	8007a2c <HAL_GetTick>
 800969e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b20      	cmp	r3, #32
 80096aa:	f040 80d9 	bne.w	8009860 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	2319      	movs	r3, #25
 80096b4:	2201      	movs	r2, #1
 80096b6:	496d      	ldr	r1, [pc, #436]	; (800986c <HAL_I2C_Mem_Write+0x1ec>)
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fcc1 	bl	800a040 <I2C_WaitOnFlagUntilTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80096c4:	2302      	movs	r3, #2
 80096c6:	e0cc      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <HAL_I2C_Mem_Write+0x56>
 80096d2:	2302      	movs	r3, #2
 80096d4:	e0c5      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d007      	beq.n	80096fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0201 	orr.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800970a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2221      	movs	r2, #33	; 0x21
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2240      	movs	r2, #64	; 0x40
 8009718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a3a      	ldr	r2, [r7, #32]
 8009726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800972c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009732:	b29a      	uxth	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4a4d      	ldr	r2, [pc, #308]	; (8009870 <HAL_I2C_Mem_Write+0x1f0>)
 800973c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800973e:	88f8      	ldrh	r0, [r7, #6]
 8009740:	893a      	ldrh	r2, [r7, #8]
 8009742:	8979      	ldrh	r1, [r7, #10]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	4603      	mov	r3, r0
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 faf8 	bl	8009d44 <I2C_RequestMemoryWrite>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d052      	beq.n	8009800 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e081      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 fd42 	bl	800a1ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00d      	beq.n	800978a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	2b04      	cmp	r3, #4
 8009774:	d107      	bne.n	8009786 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009784:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e06b      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	781a      	ldrb	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	1c5a      	adds	r2, r3, #1
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a4:	3b01      	subs	r3, #1
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b04      	cmp	r3, #4
 80097c6:	d11b      	bne.n	8009800 <HAL_I2C_Mem_Write+0x180>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d017      	beq.n	8009800 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1aa      	bne.n	800975e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 fd2e 	bl	800a26e <I2C_WaitOnBTFFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00d      	beq.n	8009834 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981c:	2b04      	cmp	r3, #4
 800981e:	d107      	bne.n	8009830 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800982e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e016      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2220      	movs	r2, #32
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	e000      	b.n	8009862 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009860:	2302      	movs	r3, #2
  }
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	00100002 	.word	0x00100002
 8009870:	ffff0000 	.word	0xffff0000

08009874 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08c      	sub	sp, #48	; 0x30
 8009878:	af02      	add	r7, sp, #8
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	4608      	mov	r0, r1
 800987e:	4611      	mov	r1, r2
 8009880:	461a      	mov	r2, r3
 8009882:	4603      	mov	r3, r0
 8009884:	817b      	strh	r3, [r7, #10]
 8009886:	460b      	mov	r3, r1
 8009888:	813b      	strh	r3, [r7, #8]
 800988a:	4613      	mov	r3, r2
 800988c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009892:	f7fe f8cb 	bl	8007a2c <HAL_GetTick>
 8009896:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b20      	cmp	r3, #32
 80098a2:	f040 8244 	bne.w	8009d2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	2319      	movs	r3, #25
 80098ac:	2201      	movs	r2, #1
 80098ae:	4982      	ldr	r1, [pc, #520]	; (8009ab8 <HAL_I2C_Mem_Read+0x244>)
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 fbc5 	bl	800a040 <I2C_WaitOnFlagUntilTimeout>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80098bc:	2302      	movs	r3, #2
 80098be:	e237      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d101      	bne.n	80098ce <HAL_I2C_Mem_Read+0x5a>
 80098ca:	2302      	movs	r3, #2
 80098cc:	e230      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d007      	beq.n	80098f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2222      	movs	r2, #34	; 0x22
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2240      	movs	r2, #64	; 0x40
 8009910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800992a:	b29a      	uxth	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4a62      	ldr	r2, [pc, #392]	; (8009abc <HAL_I2C_Mem_Read+0x248>)
 8009934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009936:	88f8      	ldrh	r0, [r7, #6]
 8009938:	893a      	ldrh	r2, [r7, #8]
 800993a:	8979      	ldrh	r1, [r7, #10]
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	4603      	mov	r3, r0
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 fa92 	bl	8009e70 <I2C_RequestMemoryRead>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e1ec      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800995a:	2b00      	cmp	r3, #0
 800995c:	d113      	bne.n	8009986 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800995e:	2300      	movs	r3, #0
 8009960:	61fb      	str	r3, [r7, #28]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	695b      	ldr	r3, [r3, #20]
 8009968:	61fb      	str	r3, [r7, #28]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	61fb      	str	r3, [r7, #28]
 8009972:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	e1c0      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998a:	2b01      	cmp	r3, #1
 800998c:	d11e      	bne.n	80099cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800999c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800999e:	b672      	cpsid	i
}
 80099a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099a2:	2300      	movs	r3, #0
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	61bb      	str	r3, [r7, #24]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	61bb      	str	r3, [r7, #24]
 80099b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80099c8:	b662      	cpsie	i
}
 80099ca:	e035      	b.n	8009a38 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d11e      	bne.n	8009a12 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80099e4:	b672      	cpsid	i
}
 80099e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099e8:	2300      	movs	r3, #0
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009a0e:	b662      	cpsie	i
}
 8009a10:	e012      	b.n	8009a38 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a22:	2300      	movs	r3, #0
 8009a24:	613b      	str	r3, [r7, #16]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	613b      	str	r3, [r7, #16]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009a38:	e166      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	f200 811f 	bhi.w	8009c82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d123      	bne.n	8009a94 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 fc4d 	bl	800a2f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e167      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	691a      	ldr	r2, [r3, #16]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6a:	b2d2      	uxtb	r2, r2
 8009a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a92:	e139      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d152      	bne.n	8009b42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	4906      	ldr	r1, [pc, #24]	; (8009ac0 <HAL_I2C_Mem_Read+0x24c>)
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 faca 	bl	800a040 <I2C_WaitOnFlagUntilTimeout>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d008      	beq.n	8009ac4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e13c      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
 8009ab6:	bf00      	nop
 8009ab8:	00100002 	.word	0x00100002
 8009abc:	ffff0000 	.word	0xffff0000
 8009ac0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009ac4:	b672      	cpsid	i
}
 8009ac6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	691a      	ldr	r2, [r3, #16]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	b2d2      	uxtb	r2, r2
 8009ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b0a:	b662      	cpsie	i
}
 8009b0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	b2d2      	uxtb	r2, r2
 8009b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b40:	e0e2      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	2200      	movs	r2, #0
 8009b4a:	497b      	ldr	r1, [pc, #492]	; (8009d38 <HAL_I2C_Mem_Read+0x4c4>)
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 fa77 	bl	800a040 <I2C_WaitOnFlagUntilTimeout>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e0e9      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b6c:	b672      	cpsid	i
}
 8009b6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	691a      	ldr	r2, [r3, #16]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009ba2:	4b66      	ldr	r3, [pc, #408]	; (8009d3c <HAL_I2C_Mem_Read+0x4c8>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	08db      	lsrs	r3, r3, #3
 8009ba8:	4a65      	ldr	r2, [pc, #404]	; (8009d40 <HAL_I2C_Mem_Read+0x4cc>)
 8009baa:	fba2 2303 	umull	r2, r3, r2, r3
 8009bae:	0a1a      	lsrs	r2, r3, #8
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	00da      	lsls	r2, r3, #3
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d118      	bne.n	8009bfa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2220      	movs	r2, #32
 8009bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	f043 0220 	orr.w	r2, r3, #32
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009bea:	b662      	cpsie	i
}
 8009bec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e09a      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d1d9      	bne.n	8009bbc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691a      	ldr	r2, [r3, #16]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	b2d2      	uxtb	r2, r2
 8009c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	3b01      	subs	r3, #1
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c4a:	b662      	cpsie	i
}
 8009c4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	691a      	ldr	r2, [r3, #16]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	b2d2      	uxtb	r2, r2
 8009c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c80:	e042      	b.n	8009d08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 fb32 	bl	800a2f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e04c      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	691a      	ldr	r2, [r3, #16]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	b2d2      	uxtb	r2, r2
 8009ca2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	f003 0304 	and.w	r3, r3, #4
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	d118      	bne.n	8009d08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	b2d2      	uxtb	r2, r2
 8009ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	3b01      	subs	r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f47f ae94 	bne.w	8009a3a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2220      	movs	r2, #32
 8009d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	e000      	b.n	8009d30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009d2e:	2302      	movs	r3, #2
  }
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3728      	adds	r7, #40	; 0x28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	00010004 	.word	0x00010004
 8009d3c:	20000040 	.word	0x20000040
 8009d40:	14f8b589 	.word	0x14f8b589

08009d44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	4608      	mov	r0, r1
 8009d4e:	4611      	mov	r1, r2
 8009d50:	461a      	mov	r2, r3
 8009d52:	4603      	mov	r3, r0
 8009d54:	817b      	strh	r3, [r7, #10]
 8009d56:	460b      	mov	r3, r1
 8009d58:	813b      	strh	r3, [r7, #8]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 f960 	bl	800a040 <I2C_WaitOnFlagUntilTimeout>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00d      	beq.n	8009da2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d94:	d103      	bne.n	8009d9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e05f      	b.n	8009e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009da2:	897b      	ldrh	r3, [r7, #10]
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	461a      	mov	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009db0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	6a3a      	ldr	r2, [r7, #32]
 8009db6:	492d      	ldr	r1, [pc, #180]	; (8009e6c <I2C_RequestMemoryWrite+0x128>)
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 f998 	bl	800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e04c      	b.n	8009e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dc8:	2300      	movs	r3, #0
 8009dca:	617b      	str	r3, [r7, #20]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	617b      	str	r3, [r7, #20]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	617b      	str	r3, [r7, #20]
 8009ddc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de0:	6a39      	ldr	r1, [r7, #32]
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 fa02 	bl	800a1ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00d      	beq.n	8009e0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d107      	bne.n	8009e06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e02b      	b.n	8009e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e0a:	88fb      	ldrh	r3, [r7, #6]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d105      	bne.n	8009e1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e10:	893b      	ldrh	r3, [r7, #8]
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	611a      	str	r2, [r3, #16]
 8009e1a:	e021      	b.n	8009e60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e1c:	893b      	ldrh	r3, [r7, #8]
 8009e1e:	0a1b      	lsrs	r3, r3, #8
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2c:	6a39      	ldr	r1, [r7, #32]
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f000 f9dc 	bl	800a1ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00d      	beq.n	8009e56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	d107      	bne.n	8009e52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e005      	b.n	8009e62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e56:	893b      	ldrh	r3, [r7, #8]
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	00010002 	.word	0x00010002

08009e70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b088      	sub	sp, #32
 8009e74:	af02      	add	r7, sp, #8
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	4608      	mov	r0, r1
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	817b      	strh	r3, [r7, #10]
 8009e82:	460b      	mov	r3, r1
 8009e84:	813b      	strh	r3, [r7, #8]
 8009e86:	4613      	mov	r3, r2
 8009e88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ea8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 f8c2 	bl	800a040 <I2C_WaitOnFlagUntilTimeout>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00d      	beq.n	8009ede <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ed0:	d103      	bne.n	8009eda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e0aa      	b.n	800a034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ede:	897b      	ldrh	r3, [r7, #10]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009eec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	6a3a      	ldr	r2, [r7, #32]
 8009ef2:	4952      	ldr	r1, [pc, #328]	; (800a03c <I2C_RequestMemoryRead+0x1cc>)
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 f8fa 	bl	800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e097      	b.n	800a034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f04:	2300      	movs	r3, #0
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	617b      	str	r3, [r7, #20]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1c:	6a39      	ldr	r1, [r7, #32]
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 f964 	bl	800a1ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00d      	beq.n	8009f46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	d107      	bne.n	8009f42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e076      	b.n	800a034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d105      	bne.n	8009f58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f4c:	893b      	ldrh	r3, [r7, #8]
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	611a      	str	r2, [r3, #16]
 8009f56:	e021      	b.n	8009f9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f58:	893b      	ldrh	r3, [r7, #8]
 8009f5a:	0a1b      	lsrs	r3, r3, #8
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f68:	6a39      	ldr	r1, [r7, #32]
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 f93e 	bl	800a1ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00d      	beq.n	8009f92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d107      	bne.n	8009f8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e050      	b.n	800a034 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f92:	893b      	ldrh	r3, [r7, #8]
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9e:	6a39      	ldr	r1, [r7, #32]
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 f923 	bl	800a1ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00d      	beq.n	8009fc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb0:	2b04      	cmp	r3, #4
 8009fb2:	d107      	bne.n	8009fc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e035      	b.n	800a034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f000 f82b 	bl	800a040 <I2C_WaitOnFlagUntilTimeout>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00d      	beq.n	800a00c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ffe:	d103      	bne.n	800a008 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a006:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e013      	b.n	800a034 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a00c:	897b      	ldrh	r3, [r7, #10]
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	f043 0301 	orr.w	r3, r3, #1
 800a014:	b2da      	uxtb	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	6a3a      	ldr	r2, [r7, #32]
 800a020:	4906      	ldr	r1, [pc, #24]	; (800a03c <I2C_RequestMemoryRead+0x1cc>)
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f863 	bl	800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e000      	b.n	800a034 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	00010002 	.word	0x00010002

0800a040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	4613      	mov	r3, r2
 800a04e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a050:	e025      	b.n	800a09e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a058:	d021      	beq.n	800a09e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a05a:	f7fd fce7 	bl	8007a2c <HAL_GetTick>
 800a05e:	4602      	mov	r2, r0
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d302      	bcc.n	800a070 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d116      	bne.n	800a09e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2220      	movs	r2, #32
 800a07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	f043 0220 	orr.w	r2, r3, #32
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e023      	b.n	800a0e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d10d      	bne.n	800a0c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	43da      	mvns	r2, r3
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	bf0c      	ite	eq
 800a0ba:	2301      	moveq	r3, #1
 800a0bc:	2300      	movne	r3, #0
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	e00c      	b.n	800a0de <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	43da      	mvns	r2, r3
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bf0c      	ite	eq
 800a0d6:	2301      	moveq	r3, #1
 800a0d8:	2300      	movne	r3, #0
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	461a      	mov	r2, r3
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d0b6      	beq.n	800a052 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b084      	sub	sp, #16
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a0fc:	e051      	b.n	800a1a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a10c:	d123      	bne.n	800a156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a11c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a126:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2220      	movs	r2, #32
 800a132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	f043 0204 	orr.w	r2, r3, #4
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e046      	b.n	800a1e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a15c:	d021      	beq.n	800a1a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a15e:	f7fd fc65 	bl	8007a2c <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d302      	bcc.n	800a174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d116      	bne.n	800a1a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	f043 0220 	orr.w	r2, r3, #32
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e020      	b.n	800a1e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	0c1b      	lsrs	r3, r3, #16
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d10c      	bne.n	800a1c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	43da      	mvns	r2, r3
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bf14      	ite	ne
 800a1be:	2301      	movne	r3, #1
 800a1c0:	2300      	moveq	r3, #0
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	e00b      	b.n	800a1de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	43da      	mvns	r2, r3
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bf14      	ite	ne
 800a1d8:	2301      	movne	r3, #1
 800a1da:	2300      	moveq	r3, #0
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d18d      	bne.n	800a0fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1f8:	e02d      	b.n	800a256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f000 f8ce 	bl	800a39c <I2C_IsAcknowledgeFailed>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e02d      	b.n	800a266 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a210:	d021      	beq.n	800a256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a212:	f7fd fc0b 	bl	8007a2c <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d302      	bcc.n	800a228 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d116      	bne.n	800a256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2220      	movs	r2, #32
 800a232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	f043 0220 	orr.w	r2, r3, #32
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e007      	b.n	800a266 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	695b      	ldr	r3, [r3, #20]
 800a25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a260:	2b80      	cmp	r3, #128	; 0x80
 800a262:	d1ca      	bne.n	800a1fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a27a:	e02d      	b.n	800a2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f88d 	bl	800a39c <I2C_IsAcknowledgeFailed>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e02d      	b.n	800a2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a292:	d021      	beq.n	800a2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a294:	f7fd fbca 	bl	8007a2c <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d302      	bcc.n	800a2aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d116      	bne.n	800a2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c4:	f043 0220 	orr.w	r2, r3, #32
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e007      	b.n	800a2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	f003 0304 	and.w	r3, r3, #4
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d1ca      	bne.n	800a27c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2fc:	e042      	b.n	800a384 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	f003 0310 	and.w	r3, r3, #16
 800a308:	2b10      	cmp	r3, #16
 800a30a:	d119      	bne.n	800a340 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f06f 0210 	mvn.w	r2, #16
 800a314:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2220      	movs	r2, #32
 800a320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e029      	b.n	800a394 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a340:	f7fd fb74 	bl	8007a2c <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d302      	bcc.n	800a356 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d116      	bne.n	800a384 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2220      	movs	r2, #32
 800a360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a370:	f043 0220 	orr.w	r2, r3, #32
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e007      	b.n	800a394 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38e:	2b40      	cmp	r3, #64	; 0x40
 800a390:	d1b5      	bne.n	800a2fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3b2:	d11b      	bne.n	800a3ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a3bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	f043 0204 	orr.w	r2, r3, #4
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e000      	b.n	800a3ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bc80      	pop	{r7}
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b088      	sub	sp, #32
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e0d2      	b.n	800a5b0 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7fb fe8e 	bl	8006140 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6812      	ldr	r2, [r2, #0]
 800a436:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a43a:	f023 030f 	bic.w	r3, r3, #15
 800a43e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2202      	movs	r2, #2
 800a446:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	695b      	ldr	r3, [r3, #20]
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d073      	beq.n	800a538 <HAL_I2S_Init+0x140>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800a458:	2310      	movs	r3, #16
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	e001      	b.n	800a462 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800a45e:	2320      	movs	r3, #32
 800a460:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	2b20      	cmp	r3, #32
 800a468:	d802      	bhi.n	800a470 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
    if (hi2s->Instance == SPI2)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a50      	ldr	r2, [pc, #320]	; (800a5b8 <HAL_I2S_Init+0x1c0>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d104      	bne.n	800a484 <HAL_I2S_Init+0x8c>
    {
      /* Get the source clock value: based on SPI2 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 800a47a:	2004      	movs	r0, #4
 800a47c:	f000 ff6e 	bl	800b35c <HAL_RCCEx_GetPeriphCLKFreq>
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	e00c      	b.n	800a49e <HAL_I2S_Init+0xa6>
    }
    else if (hi2s->Instance == SPI3)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a4c      	ldr	r2, [pc, #304]	; (800a5bc <HAL_I2S_Init+0x1c4>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d104      	bne.n	800a498 <HAL_I2S_Init+0xa0>
    {
      /* Get the source clock value: based on SPI3 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S3);
 800a48e:	2008      	movs	r0, #8
 800a490:	f000 ff64 	bl	800b35c <HAL_RCCEx_GetPeriphCLKFreq>
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	e002      	b.n	800a49e <HAL_I2S_Init+0xa6>
    }
    else
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 800a498:	f000 fdfc 	bl	800b094 <HAL_RCC_GetSysClockFreq>
 800a49c:	60f8      	str	r0, [r7, #12]
    }
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4a6:	d125      	bne.n	800a4f4 <HAL_I2S_Init+0xfc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d010      	beq.n	800a4d2 <HAL_I2S_Init+0xda>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4cc:	3305      	adds	r3, #5
 800a4ce:	613b      	str	r3, [r7, #16]
 800a4d0:	e01f      	b.n	800a512 <HAL_I2S_Init+0x11a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4dc:	4613      	mov	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ee:	3305      	adds	r3, #5
 800a4f0:	613b      	str	r3, [r7, #16]
 800a4f2:	e00e      	b.n	800a512 <HAL_I2S_Init+0x11a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	461a      	mov	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50e:	3305      	adds	r3, #5
 800a510:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	4a2a      	ldr	r2, [pc, #168]	; (800a5c0 <HAL_I2S_Init+0x1c8>)
 800a516:	fba2 2303 	umull	r2, r3, r2, r3
 800a51a:	08db      	lsrs	r3, r3, #3
 800a51c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	085b      	lsrs	r3, r3, #1
 800a52e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	021b      	lsls	r3, r3, #8
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	e003      	b.n	800a540 <HAL_I2S_Init+0x148>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800a538:	2302      	movs	r3, #2
 800a53a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800a53c:	2300      	movs	r3, #0
 800a53e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d902      	bls.n	800a54c <HAL_I2S_Init+0x154>
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	2bff      	cmp	r3, #255	; 0xff
 800a54a:	d907      	bls.n	800a55c <HAL_I2S_Init+0x164>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a550:	f043 0210 	orr.w	r2, r3, #16
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e029      	b.n	800a5b0 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	691a      	ldr	r2, [r3, #16]
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	ea42 0103 	orr.w	r1, r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69fa      	ldr	r2, [r7, #28]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a57a:	f023 030f 	bic.w	r3, r3, #15
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	6851      	ldr	r1, [r2, #4]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	6892      	ldr	r2, [r2, #8]
 800a586:	4311      	orrs	r1, r2
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	68d2      	ldr	r2, [r2, #12]
 800a58c:	4311      	orrs	r1, r2
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	6992      	ldr	r2, [r2, #24]
 800a592:	430a      	orrs	r2, r1
 800a594:	431a      	orrs	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a59e:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3720      	adds	r7, #32
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	40003800 	.word	0x40003800
 800a5bc:	40003c00 	.word	0x40003c00
 800a5c0:	cccccccd 	.word	0xcccccccd

0800a5c4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <HAL_I2S_Transmit_DMA+0x1a>
 800a5d8:	88fb      	ldrh	r3, [r7, #6]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e08e      	b.n	800a700 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d101      	bne.n	800a5f2 <HAL_I2S_Transmit_DMA+0x2e>
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	e086      	b.n	800a700 <HAL_I2S_Transmit_DMA+0x13c>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a600:	b2db      	uxtb	r3, r3
 800a602:	2b01      	cmp	r3, #1
 800a604:	d005      	beq.n	800a612 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 800a60e:	2302      	movs	r3, #2
 800a610:	e076      	b.n	800a700 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2203      	movs	r2, #3
 800a616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	f003 0307 	and.w	r3, r3, #7
 800a630:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b03      	cmp	r3, #3
 800a636:	d002      	beq.n	800a63e <HAL_I2S_Transmit_DMA+0x7a>
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2b05      	cmp	r3, #5
 800a63c:	d10a      	bne.n	800a654 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800a63e:	88fb      	ldrh	r3, [r7, #6]
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	b29a      	uxth	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 800a648:	88fb      	ldrh	r3, [r7, #6]
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	845a      	strh	r2, [r3, #34]	; 0x22
 800a652:	e005      	b.n	800a660 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	88fa      	ldrh	r2, [r7, #6]
 800a658:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	88fa      	ldrh	r2, [r7, #6]
 800a65e:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	4a28      	ldr	r2, [pc, #160]	; (800a708 <HAL_I2S_Transmit_DMA+0x144>)
 800a666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66c:	4a27      	ldr	r2, [pc, #156]	; (800a70c <HAL_I2S_Transmit_DMA+0x148>)
 800a66e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	4a26      	ldr	r2, [pc, #152]	; (800a710 <HAL_I2S_Transmit_DMA+0x14c>)
 800a676:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800a680:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800a688:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	8c1b      	ldrh	r3, [r3, #32]
 800a68e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800a690:	f7fe f9c8 	bl	8008a24 <HAL_DMA_Start_IT>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00f      	beq.n	800a6ba <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69e:	f043 0208 	orr.w	r2, r3, #8
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    __HAL_UNLOCK(hi2s);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e022      	b.n	800a700 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d107      	bne.n	800a6d8 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	69da      	ldr	r2, [r3, #28]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a6d6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f003 0302 	and.w	r3, r3, #2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d107      	bne.n	800a6f6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f042 0202 	orr.w	r2, r2, #2
 800a6f4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	0800a8e1 	.word	0x0800a8e1
 800a70c:	0800a89f 	.word	0x0800a89f
 800a710:	0800a8fd 	.word	0x0800a8fd

0800a714 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a728:	d003      	beq.n	800a732 <HAL_I2S_DMAStop+0x1e>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d155      	bne.n	800a7de <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00f      	beq.n	800a75a <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fe f9cf 	bl	8008ae2 <HAL_DMA_Abort>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d007      	beq.n	800a75a <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74e:	f043 0208 	orr.w	r2, r3, #8
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	639a      	str	r2, [r3, #56]	; 0x38
        errorcode = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800a75a:	2364      	movs	r3, #100	; 0x64
 800a75c:	2201      	movs	r2, #1
 800a75e:	2102      	movs	r1, #2
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f8f1 	bl	800a948 <I2S_WaitFlagStateUntilTimeout>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00b      	beq.n	800a784 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a770:	f043 0201 	orr.w	r2, r3, #1
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      errorcode   = HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800a784:	2364      	movs	r3, #100	; 0x64
 800a786:	2200      	movs	r2, #0
 800a788:	2180      	movs	r1, #128	; 0x80
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f8dc 	bl	800a948 <I2S_WaitFlagStateUntilTimeout>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00b      	beq.n	800a7ae <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79a:	f043 0201 	orr.w	r2, r3, #1
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      errorcode   = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69da      	ldr	r2, [r3, #28]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7bc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a7be:	2300      	movs	r3, #0
 800a7c0:	613b      	str	r3, [r7, #16]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	613b      	str	r3, [r7, #16]
 800a7ca:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	685a      	ldr	r2, [r3, #4]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f022 0202 	bic.w	r2, r2, #2
 800a7da:	605a      	str	r2, [r3, #4]
 800a7dc:	e04d      	b.n	800a87a <HAL_I2S_DMAStop+0x166>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7e6:	d004      	beq.n	800a7f2 <HAL_I2S_DMAStop+0xde>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f0:	d143      	bne.n	800a87a <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00f      	beq.n	800a81a <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe f96f 	bl	8008ae2 <HAL_DMA_Abort>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d007      	beq.n	800a81a <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80e:	f043 0208 	orr.w	r2, r3, #8
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	639a      	str	r2, [r3, #56]	; 0x38
        errorcode = HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	69da      	ldr	r2, [r3, #28]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a828:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	60fb      	str	r3, [r7, #12]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f022 0201 	bic.w	r2, r2, #1
 800a84e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a858:	d10c      	bne.n	800a874 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	639a      	str	r2, [r3, #56]	; 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      errorcode = HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	75fb      	strb	r3, [r7, #23]
 800a872:	e002      	b.n	800a87a <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return errorcode;
 800a882:	7dfb      	ldrb	r3, [r7, #23]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	bc80      	pop	{r7}
 800a89c:	4770      	bx	lr

0800a89e <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10e      	bne.n	800a8d2 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f022 0202 	bic.w	r2, r2, #2
 800a8c2:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7fc f964 	bl	8006ba0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a8d8:	bf00      	nop
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f7fc f948 	bl	8006b84 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a8f4:	bf00      	nop
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0203 	bic.w	r2, r2, #3
 800a918:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a932:	f043 0208 	orr.w	r2, r3, #8
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f7ff ffa6 	bl	800a88c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a940:	bf00      	nop
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	603b      	str	r3, [r7, #0]
 800a954:	4613      	mov	r3, r2
 800a956:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800a958:	f7fd f868 	bl	8007a2c <HAL_GetTick>
 800a95c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800a95e:	e018      	b.n	800a992 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a966:	d014      	beq.n	800a992 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800a968:	f7fd f860 	bl	8007a2c <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	429a      	cmp	r2, r3
 800a976:	d902      	bls.n	800a97e <I2S_WaitFlagStateUntilTimeout+0x36>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d109      	bne.n	800a992 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e00f      	b.n	800a9b2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	4013      	ands	r3, r2
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	bf0c      	ite	eq
 800a9a2:	2301      	moveq	r3, #1
 800a9a4:	2300      	movne	r3, #0
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	79fb      	ldrb	r3, [r7, #7]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d1d7      	bne.n	800a960 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e272      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 8087 	beq.w	800aaea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a9dc:	4b92      	ldr	r3, [pc, #584]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f003 030c 	and.w	r3, r3, #12
 800a9e4:	2b04      	cmp	r3, #4
 800a9e6:	d00c      	beq.n	800aa02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a9e8:	4b8f      	ldr	r3, [pc, #572]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	f003 030c 	and.w	r3, r3, #12
 800a9f0:	2b08      	cmp	r3, #8
 800a9f2:	d112      	bne.n	800aa1a <HAL_RCC_OscConfig+0x5e>
 800a9f4:	4b8c      	ldr	r3, [pc, #560]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa00:	d10b      	bne.n	800aa1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa02:	4b89      	ldr	r3, [pc, #548]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d06c      	beq.n	800aae8 <HAL_RCC_OscConfig+0x12c>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d168      	bne.n	800aae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e24c      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa22:	d106      	bne.n	800aa32 <HAL_RCC_OscConfig+0x76>
 800aa24:	4b80      	ldr	r3, [pc, #512]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a7f      	ldr	r2, [pc, #508]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	e02e      	b.n	800aa90 <HAL_RCC_OscConfig+0xd4>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10c      	bne.n	800aa54 <HAL_RCC_OscConfig+0x98>
 800aa3a:	4b7b      	ldr	r3, [pc, #492]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a7a      	ldr	r2, [pc, #488]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	4b78      	ldr	r3, [pc, #480]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a77      	ldr	r2, [pc, #476]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	e01d      	b.n	800aa90 <HAL_RCC_OscConfig+0xd4>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa5c:	d10c      	bne.n	800aa78 <HAL_RCC_OscConfig+0xbc>
 800aa5e:	4b72      	ldr	r3, [pc, #456]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a71      	ldr	r2, [pc, #452]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	4b6f      	ldr	r3, [pc, #444]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a6e      	ldr	r2, [pc, #440]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	e00b      	b.n	800aa90 <HAL_RCC_OscConfig+0xd4>
 800aa78:	4b6b      	ldr	r3, [pc, #428]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a6a      	ldr	r2, [pc, #424]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	4b68      	ldr	r3, [pc, #416]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a67      	ldr	r2, [pc, #412]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aa8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d013      	beq.n	800aac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa98:	f7fc ffc8 	bl	8007a2c <HAL_GetTick>
 800aa9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa9e:	e008      	b.n	800aab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aaa0:	f7fc ffc4 	bl	8007a2c <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b64      	cmp	r3, #100	; 0x64
 800aaac:	d901      	bls.n	800aab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e200      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aab2:	4b5d      	ldr	r3, [pc, #372]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0f0      	beq.n	800aaa0 <HAL_RCC_OscConfig+0xe4>
 800aabe:	e014      	b.n	800aaea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aac0:	f7fc ffb4 	bl	8007a2c <HAL_GetTick>
 800aac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aac6:	e008      	b.n	800aada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aac8:	f7fc ffb0 	bl	8007a2c <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	2b64      	cmp	r3, #100	; 0x64
 800aad4:	d901      	bls.n	800aada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e1ec      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aada:	4b53      	ldr	r3, [pc, #332]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1f0      	bne.n	800aac8 <HAL_RCC_OscConfig+0x10c>
 800aae6:	e000      	b.n	800aaea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d063      	beq.n	800abbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aaf6:	4b4c      	ldr	r3, [pc, #304]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	f003 030c 	and.w	r3, r3, #12
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00b      	beq.n	800ab1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ab02:	4b49      	ldr	r3, [pc, #292]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f003 030c 	and.w	r3, r3, #12
 800ab0a:	2b08      	cmp	r3, #8
 800ab0c:	d11c      	bne.n	800ab48 <HAL_RCC_OscConfig+0x18c>
 800ab0e:	4b46      	ldr	r3, [pc, #280]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d116      	bne.n	800ab48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab1a:	4b43      	ldr	r3, [pc, #268]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0302 	and.w	r3, r3, #2
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d005      	beq.n	800ab32 <HAL_RCC_OscConfig+0x176>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d001      	beq.n	800ab32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e1c0      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab32:	4b3d      	ldr	r3, [pc, #244]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	4939      	ldr	r1, [pc, #228]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab46:	e03a      	b.n	800abbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d020      	beq.n	800ab92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab50:	4b36      	ldr	r3, [pc, #216]	; (800ac2c <HAL_RCC_OscConfig+0x270>)
 800ab52:	2201      	movs	r2, #1
 800ab54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab56:	f7fc ff69 	bl	8007a2c <HAL_GetTick>
 800ab5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab5e:	f7fc ff65 	bl	8007a2c <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e1a1      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab70:	4b2d      	ldr	r3, [pc, #180]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0302 	and.w	r3, r3, #2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0f0      	beq.n	800ab5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab7c:	4b2a      	ldr	r3, [pc, #168]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	00db      	lsls	r3, r3, #3
 800ab8a:	4927      	ldr	r1, [pc, #156]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	600b      	str	r3, [r1, #0]
 800ab90:	e015      	b.n	800abbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab92:	4b26      	ldr	r3, [pc, #152]	; (800ac2c <HAL_RCC_OscConfig+0x270>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab98:	f7fc ff48 	bl	8007a2c <HAL_GetTick>
 800ab9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab9e:	e008      	b.n	800abb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aba0:	f7fc ff44 	bl	8007a2c <HAL_GetTick>
 800aba4:	4602      	mov	r2, r0
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d901      	bls.n	800abb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800abae:	2303      	movs	r3, #3
 800abb0:	e180      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abb2:	4b1d      	ldr	r3, [pc, #116]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 0302 	and.w	r3, r3, #2
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1f0      	bne.n	800aba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0308 	and.w	r3, r3, #8
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d03a      	beq.n	800ac40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d019      	beq.n	800ac06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abd2:	4b17      	ldr	r3, [pc, #92]	; (800ac30 <HAL_RCC_OscConfig+0x274>)
 800abd4:	2201      	movs	r2, #1
 800abd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abd8:	f7fc ff28 	bl	8007a2c <HAL_GetTick>
 800abdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abde:	e008      	b.n	800abf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abe0:	f7fc ff24 	bl	8007a2c <HAL_GetTick>
 800abe4:	4602      	mov	r2, r0
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	2b02      	cmp	r3, #2
 800abec:	d901      	bls.n	800abf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e160      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abf2:	4b0d      	ldr	r3, [pc, #52]	; (800ac28 <HAL_RCC_OscConfig+0x26c>)
 800abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf6:	f003 0302 	and.w	r3, r3, #2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0f0      	beq.n	800abe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800abfe:	2001      	movs	r0, #1
 800ac00:	f000 fad8 	bl	800b1b4 <RCC_Delay>
 800ac04:	e01c      	b.n	800ac40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac06:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <HAL_RCC_OscConfig+0x274>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac0c:	f7fc ff0e 	bl	8007a2c <HAL_GetTick>
 800ac10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac12:	e00f      	b.n	800ac34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac14:	f7fc ff0a 	bl	8007a2c <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d908      	bls.n	800ac34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e146      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
 800ac26:	bf00      	nop
 800ac28:	40021000 	.word	0x40021000
 800ac2c:	42420000 	.word	0x42420000
 800ac30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac34:	4b92      	ldr	r3, [pc, #584]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e9      	bne.n	800ac14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 80a6 	beq.w	800ad9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac52:	4b8b      	ldr	r3, [pc, #556]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10d      	bne.n	800ac7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac5e:	4b88      	ldr	r3, [pc, #544]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	4a87      	ldr	r2, [pc, #540]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ac64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac68:	61d3      	str	r3, [r2, #28]
 800ac6a:	4b85      	ldr	r3, [pc, #532]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ac6c:	69db      	ldr	r3, [r3, #28]
 800ac6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac72:	60bb      	str	r3, [r7, #8]
 800ac74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac76:	2301      	movs	r3, #1
 800ac78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac7a:	4b82      	ldr	r3, [pc, #520]	; (800ae84 <HAL_RCC_OscConfig+0x4c8>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d118      	bne.n	800acb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ac86:	4b7f      	ldr	r3, [pc, #508]	; (800ae84 <HAL_RCC_OscConfig+0x4c8>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a7e      	ldr	r2, [pc, #504]	; (800ae84 <HAL_RCC_OscConfig+0x4c8>)
 800ac8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac92:	f7fc fecb 	bl	8007a2c <HAL_GetTick>
 800ac96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac98:	e008      	b.n	800acac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac9a:	f7fc fec7 	bl	8007a2c <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	2b64      	cmp	r3, #100	; 0x64
 800aca6:	d901      	bls.n	800acac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e103      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acac:	4b75      	ldr	r3, [pc, #468]	; (800ae84 <HAL_RCC_OscConfig+0x4c8>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d0f0      	beq.n	800ac9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d106      	bne.n	800acce <HAL_RCC_OscConfig+0x312>
 800acc0:	4b6f      	ldr	r3, [pc, #444]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	4a6e      	ldr	r2, [pc, #440]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800acc6:	f043 0301 	orr.w	r3, r3, #1
 800acca:	6213      	str	r3, [r2, #32]
 800accc:	e02d      	b.n	800ad2a <HAL_RCC_OscConfig+0x36e>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10c      	bne.n	800acf0 <HAL_RCC_OscConfig+0x334>
 800acd6:	4b6a      	ldr	r3, [pc, #424]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	4a69      	ldr	r2, [pc, #420]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800acdc:	f023 0301 	bic.w	r3, r3, #1
 800ace0:	6213      	str	r3, [r2, #32]
 800ace2:	4b67      	ldr	r3, [pc, #412]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	4a66      	ldr	r2, [pc, #408]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ace8:	f023 0304 	bic.w	r3, r3, #4
 800acec:	6213      	str	r3, [r2, #32]
 800acee:	e01c      	b.n	800ad2a <HAL_RCC_OscConfig+0x36e>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	2b05      	cmp	r3, #5
 800acf6:	d10c      	bne.n	800ad12 <HAL_RCC_OscConfig+0x356>
 800acf8:	4b61      	ldr	r3, [pc, #388]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800acfa:	6a1b      	ldr	r3, [r3, #32]
 800acfc:	4a60      	ldr	r2, [pc, #384]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800acfe:	f043 0304 	orr.w	r3, r3, #4
 800ad02:	6213      	str	r3, [r2, #32]
 800ad04:	4b5e      	ldr	r3, [pc, #376]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	4a5d      	ldr	r2, [pc, #372]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad0a:	f043 0301 	orr.w	r3, r3, #1
 800ad0e:	6213      	str	r3, [r2, #32]
 800ad10:	e00b      	b.n	800ad2a <HAL_RCC_OscConfig+0x36e>
 800ad12:	4b5b      	ldr	r3, [pc, #364]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	4a5a      	ldr	r2, [pc, #360]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad18:	f023 0301 	bic.w	r3, r3, #1
 800ad1c:	6213      	str	r3, [r2, #32]
 800ad1e:	4b58      	ldr	r3, [pc, #352]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	4a57      	ldr	r2, [pc, #348]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad24:	f023 0304 	bic.w	r3, r3, #4
 800ad28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d015      	beq.n	800ad5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad32:	f7fc fe7b 	bl	8007a2c <HAL_GetTick>
 800ad36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad38:	e00a      	b.n	800ad50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad3a:	f7fc fe77 	bl	8007a2c <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d901      	bls.n	800ad50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e0b1      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad50:	4b4b      	ldr	r3, [pc, #300]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d0ee      	beq.n	800ad3a <HAL_RCC_OscConfig+0x37e>
 800ad5c:	e014      	b.n	800ad88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad5e:	f7fc fe65 	bl	8007a2c <HAL_GetTick>
 800ad62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad64:	e00a      	b.n	800ad7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad66:	f7fc fe61 	bl	8007a2c <HAL_GetTick>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d901      	bls.n	800ad7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ad78:	2303      	movs	r3, #3
 800ad7a:	e09b      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad7c:	4b40      	ldr	r3, [pc, #256]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1ee      	bne.n	800ad66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d105      	bne.n	800ad9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad8e:	4b3c      	ldr	r3, [pc, #240]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	4a3b      	ldr	r2, [pc, #236]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ad94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 8087 	beq.w	800aeb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ada4:	4b36      	ldr	r3, [pc, #216]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f003 030c 	and.w	r3, r3, #12
 800adac:	2b08      	cmp	r3, #8
 800adae:	d061      	beq.n	800ae74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	69db      	ldr	r3, [r3, #28]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d146      	bne.n	800ae46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adb8:	4b33      	ldr	r3, [pc, #204]	; (800ae88 <HAL_RCC_OscConfig+0x4cc>)
 800adba:	2200      	movs	r2, #0
 800adbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adbe:	f7fc fe35 	bl	8007a2c <HAL_GetTick>
 800adc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800adc4:	e008      	b.n	800add8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adc6:	f7fc fe31 	bl	8007a2c <HAL_GetTick>
 800adca:	4602      	mov	r2, r0
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	2b02      	cmp	r3, #2
 800add2:	d901      	bls.n	800add8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800add4:	2303      	movs	r3, #3
 800add6:	e06d      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800add8:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1f0      	bne.n	800adc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adec:	d108      	bne.n	800ae00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800adee:	4b24      	ldr	r3, [pc, #144]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	4921      	ldr	r1, [pc, #132]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800adfc:	4313      	orrs	r3, r2
 800adfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae00:	4b1f      	ldr	r3, [pc, #124]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a19      	ldr	r1, [r3, #32]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae10:	430b      	orrs	r3, r1
 800ae12:	491b      	ldr	r1, [pc, #108]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ae14:	4313      	orrs	r3, r2
 800ae16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae18:	4b1b      	ldr	r3, [pc, #108]	; (800ae88 <HAL_RCC_OscConfig+0x4cc>)
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae1e:	f7fc fe05 	bl	8007a2c <HAL_GetTick>
 800ae22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ae24:	e008      	b.n	800ae38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae26:	f7fc fe01 	bl	8007a2c <HAL_GetTick>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d901      	bls.n	800ae38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e03d      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ae38:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d0f0      	beq.n	800ae26 <HAL_RCC_OscConfig+0x46a>
 800ae44:	e035      	b.n	800aeb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae46:	4b10      	ldr	r3, [pc, #64]	; (800ae88 <HAL_RCC_OscConfig+0x4cc>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae4c:	f7fc fdee 	bl	8007a2c <HAL_GetTick>
 800ae50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae52:	e008      	b.n	800ae66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae54:	f7fc fdea 	bl	8007a2c <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d901      	bls.n	800ae66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e026      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae66:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <HAL_RCC_OscConfig+0x4c4>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1f0      	bne.n	800ae54 <HAL_RCC_OscConfig+0x498>
 800ae72:	e01e      	b.n	800aeb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d107      	bne.n	800ae8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e019      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
 800ae80:	40021000 	.word	0x40021000
 800ae84:	40007000 	.word	0x40007000
 800ae88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ae8c:	4b0b      	ldr	r3, [pc, #44]	; (800aebc <HAL_RCC_OscConfig+0x500>)
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d106      	bne.n	800aeae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d001      	beq.n	800aeb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e000      	b.n	800aeb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	40021000 	.word	0x40021000

0800aec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e0d0      	b.n	800b076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aed4:	4b6a      	ldr	r3, [pc, #424]	; (800b080 <HAL_RCC_ClockConfig+0x1c0>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0307 	and.w	r3, r3, #7
 800aedc:	683a      	ldr	r2, [r7, #0]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d910      	bls.n	800af04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aee2:	4b67      	ldr	r3, [pc, #412]	; (800b080 <HAL_RCC_ClockConfig+0x1c0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f023 0207 	bic.w	r2, r3, #7
 800aeea:	4965      	ldr	r1, [pc, #404]	; (800b080 <HAL_RCC_ClockConfig+0x1c0>)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aef2:	4b63      	ldr	r3, [pc, #396]	; (800b080 <HAL_RCC_ClockConfig+0x1c0>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d001      	beq.n	800af04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	e0b8      	b.n	800b076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 0302 	and.w	r3, r3, #2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d020      	beq.n	800af52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0304 	and.w	r3, r3, #4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d005      	beq.n	800af28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af1c:	4b59      	ldr	r3, [pc, #356]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	4a58      	ldr	r2, [pc, #352]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800af22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800af26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0308 	and.w	r3, r3, #8
 800af30:	2b00      	cmp	r3, #0
 800af32:	d005      	beq.n	800af40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af34:	4b53      	ldr	r3, [pc, #332]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	4a52      	ldr	r2, [pc, #328]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800af3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800af3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af40:	4b50      	ldr	r3, [pc, #320]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	494d      	ldr	r1, [pc, #308]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800af4e:	4313      	orrs	r3, r2
 800af50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d040      	beq.n	800afe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d107      	bne.n	800af76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af66:	4b47      	ldr	r3, [pc, #284]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d115      	bne.n	800af9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e07f      	b.n	800b076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d107      	bne.n	800af8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af7e:	4b41      	ldr	r3, [pc, #260]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d109      	bne.n	800af9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e073      	b.n	800b076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af8e:	4b3d      	ldr	r3, [pc, #244]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 0302 	and.w	r3, r3, #2
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e06b      	b.n	800b076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af9e:	4b39      	ldr	r3, [pc, #228]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f023 0203 	bic.w	r2, r3, #3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	4936      	ldr	r1, [pc, #216]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800afac:	4313      	orrs	r3, r2
 800afae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800afb0:	f7fc fd3c 	bl	8007a2c <HAL_GetTick>
 800afb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afb6:	e00a      	b.n	800afce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afb8:	f7fc fd38 	bl	8007a2c <HAL_GetTick>
 800afbc:	4602      	mov	r2, r0
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d901      	bls.n	800afce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800afca:	2303      	movs	r3, #3
 800afcc:	e053      	b.n	800b076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afce:	4b2d      	ldr	r3, [pc, #180]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	f003 020c 	and.w	r2, r3, #12
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	429a      	cmp	r2, r3
 800afde:	d1eb      	bne.n	800afb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800afe0:	4b27      	ldr	r3, [pc, #156]	; (800b080 <HAL_RCC_ClockConfig+0x1c0>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0307 	and.w	r3, r3, #7
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	429a      	cmp	r2, r3
 800afec:	d210      	bcs.n	800b010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afee:	4b24      	ldr	r3, [pc, #144]	; (800b080 <HAL_RCC_ClockConfig+0x1c0>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f023 0207 	bic.w	r2, r3, #7
 800aff6:	4922      	ldr	r1, [pc, #136]	; (800b080 <HAL_RCC_ClockConfig+0x1c0>)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	4313      	orrs	r3, r2
 800affc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800affe:	4b20      	ldr	r3, [pc, #128]	; (800b080 <HAL_RCC_ClockConfig+0x1c0>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 0307 	and.w	r3, r3, #7
 800b006:	683a      	ldr	r2, [r7, #0]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d001      	beq.n	800b010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e032      	b.n	800b076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0304 	and.w	r3, r3, #4
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d008      	beq.n	800b02e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b01c:	4b19      	ldr	r3, [pc, #100]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	4916      	ldr	r1, [pc, #88]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 0308 	and.w	r3, r3, #8
 800b036:	2b00      	cmp	r3, #0
 800b038:	d009      	beq.n	800b04e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b03a:	4b12      	ldr	r3, [pc, #72]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	00db      	lsls	r3, r3, #3
 800b048:	490e      	ldr	r1, [pc, #56]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b04e:	f000 f821 	bl	800b094 <HAL_RCC_GetSysClockFreq>
 800b052:	4602      	mov	r2, r0
 800b054:	4b0b      	ldr	r3, [pc, #44]	; (800b084 <HAL_RCC_ClockConfig+0x1c4>)
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	091b      	lsrs	r3, r3, #4
 800b05a:	f003 030f 	and.w	r3, r3, #15
 800b05e:	490a      	ldr	r1, [pc, #40]	; (800b088 <HAL_RCC_ClockConfig+0x1c8>)
 800b060:	5ccb      	ldrb	r3, [r1, r3]
 800b062:	fa22 f303 	lsr.w	r3, r2, r3
 800b066:	4a09      	ldr	r2, [pc, #36]	; (800b08c <HAL_RCC_ClockConfig+0x1cc>)
 800b068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b06a:	4b09      	ldr	r3, [pc, #36]	; (800b090 <HAL_RCC_ClockConfig+0x1d0>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fc fc9a 	bl	80079a8 <HAL_InitTick>

  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	40022000 	.word	0x40022000
 800b084:	40021000 	.word	0x40021000
 800b088:	08016154 	.word	0x08016154
 800b08c:	20000040 	.word	0x20000040
 800b090:	20000078 	.word	0x20000078

0800b094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b094:	b490      	push	{r4, r7}
 800b096:	b08a      	sub	sp, #40	; 0x28
 800b098:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b09a:	4b29      	ldr	r3, [pc, #164]	; (800b140 <HAL_RCC_GetSysClockFreq+0xac>)
 800b09c:	1d3c      	adds	r4, r7, #4
 800b09e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b0a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b0a4:	f240 2301 	movw	r3, #513	; 0x201
 800b0a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	61fb      	str	r3, [r7, #28]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	61bb      	str	r3, [r7, #24]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b0be:	4b21      	ldr	r3, [pc, #132]	; (800b144 <HAL_RCC_GetSysClockFreq+0xb0>)
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	f003 030c 	and.w	r3, r3, #12
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	d002      	beq.n	800b0d4 <HAL_RCC_GetSysClockFreq+0x40>
 800b0ce:	2b08      	cmp	r3, #8
 800b0d0:	d003      	beq.n	800b0da <HAL_RCC_GetSysClockFreq+0x46>
 800b0d2:	e02b      	b.n	800b12c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b0d4:	4b1c      	ldr	r3, [pc, #112]	; (800b148 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b0d6:	623b      	str	r3, [r7, #32]
      break;
 800b0d8:	e02b      	b.n	800b132 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	0c9b      	lsrs	r3, r3, #18
 800b0de:	f003 030f 	and.w	r3, r3, #15
 800b0e2:	3328      	adds	r3, #40	; 0x28
 800b0e4:	443b      	add	r3, r7
 800b0e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800b0ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d012      	beq.n	800b11c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b0f6:	4b13      	ldr	r3, [pc, #76]	; (800b144 <HAL_RCC_GetSysClockFreq+0xb0>)
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	0c5b      	lsrs	r3, r3, #17
 800b0fc:	f003 0301 	and.w	r3, r3, #1
 800b100:	3328      	adds	r3, #40	; 0x28
 800b102:	443b      	add	r3, r7
 800b104:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b108:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	4a0e      	ldr	r2, [pc, #56]	; (800b148 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b10e:	fb03 f202 	mul.w	r2, r3, r2
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	fbb2 f3f3 	udiv	r3, r2, r3
 800b118:	627b      	str	r3, [r7, #36]	; 0x24
 800b11a:	e004      	b.n	800b126 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	4a0b      	ldr	r2, [pc, #44]	; (800b14c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b120:	fb02 f303 	mul.w	r3, r2, r3
 800b124:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	623b      	str	r3, [r7, #32]
      break;
 800b12a:	e002      	b.n	800b132 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b12c:	4b06      	ldr	r3, [pc, #24]	; (800b148 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b12e:	623b      	str	r3, [r7, #32]
      break;
 800b130:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b132:	6a3b      	ldr	r3, [r7, #32]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3728      	adds	r7, #40	; 0x28
 800b138:	46bd      	mov	sp, r7
 800b13a:	bc90      	pop	{r4, r7}
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	0801593c 	.word	0x0801593c
 800b144:	40021000 	.word	0x40021000
 800b148:	007a1200 	.word	0x007a1200
 800b14c:	003d0900 	.word	0x003d0900

0800b150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b150:	b480      	push	{r7}
 800b152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b154:	4b02      	ldr	r3, [pc, #8]	; (800b160 <HAL_RCC_GetHCLKFreq+0x10>)
 800b156:	681b      	ldr	r3, [r3, #0]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bc80      	pop	{r7}
 800b15e:	4770      	bx	lr
 800b160:	20000040 	.word	0x20000040

0800b164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b168:	f7ff fff2 	bl	800b150 <HAL_RCC_GetHCLKFreq>
 800b16c:	4602      	mov	r2, r0
 800b16e:	4b05      	ldr	r3, [pc, #20]	; (800b184 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	0a1b      	lsrs	r3, r3, #8
 800b174:	f003 0307 	and.w	r3, r3, #7
 800b178:	4903      	ldr	r1, [pc, #12]	; (800b188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b17a:	5ccb      	ldrb	r3, [r1, r3]
 800b17c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b180:	4618      	mov	r0, r3
 800b182:	bd80      	pop	{r7, pc}
 800b184:	40021000 	.word	0x40021000
 800b188:	08016164 	.word	0x08016164

0800b18c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b190:	f7ff ffde 	bl	800b150 <HAL_RCC_GetHCLKFreq>
 800b194:	4602      	mov	r2, r0
 800b196:	4b05      	ldr	r3, [pc, #20]	; (800b1ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	0adb      	lsrs	r3, r3, #11
 800b19c:	f003 0307 	and.w	r3, r3, #7
 800b1a0:	4903      	ldr	r1, [pc, #12]	; (800b1b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b1a2:	5ccb      	ldrb	r3, [r1, r3]
 800b1a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	40021000 	.word	0x40021000
 800b1b0:	08016164 	.word	0x08016164

0800b1b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <RCC_Delay+0x34>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a0a      	ldr	r2, [pc, #40]	; (800b1ec <RCC_Delay+0x38>)
 800b1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c6:	0a5b      	lsrs	r3, r3, #9
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	fb02 f303 	mul.w	r3, r2, r3
 800b1ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b1d0:	bf00      	nop
  }
  while (Delay --);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	1e5a      	subs	r2, r3, #1
 800b1d6:	60fa      	str	r2, [r7, #12]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f9      	bne.n	800b1d0 <RCC_Delay+0x1c>
}
 800b1dc:	bf00      	nop
 800b1de:	bf00      	nop
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bc80      	pop	{r7}
 800b1e6:	4770      	bx	lr
 800b1e8:	20000040 	.word	0x20000040
 800b1ec:	10624dd3 	.word	0x10624dd3

0800b1f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0301 	and.w	r3, r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d07d      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800b20c:	2300      	movs	r3, #0
 800b20e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b210:	4b4f      	ldr	r3, [pc, #316]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b212:	69db      	ldr	r3, [r3, #28]
 800b214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10d      	bne.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b21c:	4b4c      	ldr	r3, [pc, #304]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b21e:	69db      	ldr	r3, [r3, #28]
 800b220:	4a4b      	ldr	r2, [pc, #300]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b226:	61d3      	str	r3, [r2, #28]
 800b228:	4b49      	ldr	r3, [pc, #292]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b230:	60bb      	str	r3, [r7, #8]
 800b232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b234:	2301      	movs	r3, #1
 800b236:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b238:	4b46      	ldr	r3, [pc, #280]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b240:	2b00      	cmp	r3, #0
 800b242:	d118      	bne.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b244:	4b43      	ldr	r3, [pc, #268]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a42      	ldr	r2, [pc, #264]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b24a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b24e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b250:	f7fc fbec 	bl	8007a2c <HAL_GetTick>
 800b254:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b256:	e008      	b.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b258:	f7fc fbe8 	bl	8007a2c <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	2b64      	cmp	r3, #100	; 0x64
 800b264:	d901      	bls.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e06d      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b26a:	4b3a      	ldr	r3, [pc, #232]	; (800b354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0f0      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b276:	4b36      	ldr	r3, [pc, #216]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b27e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d02e      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	429a      	cmp	r2, r3
 800b292:	d027      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b294:	4b2e      	ldr	r3, [pc, #184]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b29c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b29e:	4b2e      	ldr	r3, [pc, #184]	; (800b358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b2a4:	4b2c      	ldr	r3, [pc, #176]	; (800b358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b2aa:	4a29      	ldr	r2, [pc, #164]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d014      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2ba:	f7fc fbb7 	bl	8007a2c <HAL_GetTick>
 800b2be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2c0:	e00a      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2c2:	f7fc fbb3 	bl	8007a2c <HAL_GetTick>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d901      	bls.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e036      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2d8:	4b1d      	ldr	r3, [pc, #116]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d0ee      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2e4:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	4917      	ldr	r1, [pc, #92]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d105      	bne.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2fc:	4b14      	ldr	r3, [pc, #80]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	4a13      	ldr	r2, [pc, #76]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b306:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0302 	and.w	r3, r3, #2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d008      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b314:	4b0e      	ldr	r3, [pc, #56]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	490b      	ldr	r1, [pc, #44]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b322:	4313      	orrs	r3, r2
 800b324:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0310 	and.w	r3, r3, #16
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d008      	beq.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b332:	4b07      	ldr	r3, [pc, #28]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	4904      	ldr	r1, [pc, #16]	; (800b350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b340:	4313      	orrs	r3, r2
 800b342:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3718      	adds	r7, #24
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	40021000 	.word	0x40021000
 800b354:	40007000 	.word	0x40007000
 800b358:	42420440 	.word	0x42420440

0800b35c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b35c:	b590      	push	{r4, r7, lr}
 800b35e:	b08d      	sub	sp, #52	; 0x34
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b364:	4b6a      	ldr	r3, [pc, #424]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800b366:	f107 040c 	add.w	r4, r7, #12
 800b36a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b36c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b370:	f240 2301 	movw	r3, #513	; 0x201
 800b374:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
 800b37a:	2300      	movs	r3, #0
 800b37c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b37e:	2300      	movs	r3, #0
 800b380:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800b382:	2300      	movs	r3, #0
 800b384:	61fb      	str	r3, [r7, #28]
 800b386:	2300      	movs	r3, #0
 800b388:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	2b0f      	cmp	r3, #15
 800b390:	f200 80b4 	bhi.w	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800b394:	a201      	add	r2, pc, #4	; (adr r2, 800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39a:	bf00      	nop
 800b39c:	0800b47b 	.word	0x0800b47b
 800b3a0:	0800b4e1 	.word	0x0800b4e1
 800b3a4:	0800b4fd 	.word	0x0800b4fd
 800b3a8:	0800b46b 	.word	0x0800b46b
 800b3ac:	0800b4fd 	.word	0x0800b4fd
 800b3b0:	0800b4fd 	.word	0x0800b4fd
 800b3b4:	0800b4fd 	.word	0x0800b4fd
 800b3b8:	0800b473 	.word	0x0800b473
 800b3bc:	0800b4fd 	.word	0x0800b4fd
 800b3c0:	0800b4fd 	.word	0x0800b4fd
 800b3c4:	0800b4fd 	.word	0x0800b4fd
 800b3c8:	0800b4fd 	.word	0x0800b4fd
 800b3cc:	0800b4fd 	.word	0x0800b4fd
 800b3d0:	0800b4fd 	.word	0x0800b4fd
 800b3d4:	0800b4fd 	.word	0x0800b4fd
 800b3d8:	0800b3dd 	.word	0x0800b3dd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800b3dc:	4b4d      	ldr	r3, [pc, #308]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800b3e2:	4b4c      	ldr	r3, [pc, #304]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 8088 	beq.w	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	0c9b      	lsrs	r3, r3, #18
 800b3f4:	f003 030f 	and.w	r3, r3, #15
 800b3f8:	3330      	adds	r3, #48	; 0x30
 800b3fa:	443b      	add	r3, r7
 800b3fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800b400:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d017      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b40c:	4b41      	ldr	r3, [pc, #260]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	0c5b      	lsrs	r3, r3, #17
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	3330      	adds	r3, #48	; 0x30
 800b418:	443b      	add	r3, r7
 800b41a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b41e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00d      	beq.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800b42a:	4a3b      	ldr	r2, [pc, #236]	; (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	fb02 f303 	mul.w	r3, r2, r3
 800b438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b43a:	e004      	b.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	4a37      	ldr	r2, [pc, #220]	; (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800b440:	fb02 f303 	mul.w	r3, r2, r3
 800b444:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800b446:	4b33      	ldr	r3, [pc, #204]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b44e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b452:	d102      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800b454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b456:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800b458:	e052      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 800b45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	4a30      	ldr	r2, [pc, #192]	; (800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800b460:	fba2 2303 	umull	r2, r3, r2, r3
 800b464:	085b      	lsrs	r3, r3, #1
 800b466:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800b468:	e04a      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800b46a:	f7ff fe13 	bl	800b094 <HAL_RCC_GetSysClockFreq>
 800b46e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800b470:	e049      	b.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800b472:	f7ff fe0f 	bl	800b094 <HAL_RCC_GetSysClockFreq>
 800b476:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800b478:	e045      	b.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800b47a:	4b26      	ldr	r3, [pc, #152]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b48a:	d108      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 800b496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b49a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b49c:	e01f      	b.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4a8:	d109      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800b4aa:	4b1a      	ldr	r3, [pc, #104]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	f003 0302 	and.w	r3, r3, #2
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 800b4b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 800b4ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4bc:	e00f      	b.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4c8:	d11c      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b4ca:	4b12      	ldr	r3, [pc, #72]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d016      	beq.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 800b4d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b4da:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800b4dc:	e012      	b.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b4de:	e011      	b.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800b4e0:	f7ff fe54 	bl	800b18c <HAL_RCC_GetPCLK2Freq>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	0b9b      	lsrs	r3, r3, #14
 800b4ec:	f003 0303 	and.w	r3, r3, #3
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800b4fa:	e004      	b.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 800b4fc:	bf00      	nop
 800b4fe:	e002      	b.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 800b500:	bf00      	nop
 800b502:	e000      	b.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 800b504:	bf00      	nop
    }
  }
  return (frequency);
 800b506:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3734      	adds	r7, #52	; 0x34
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd90      	pop	{r4, r7, pc}
 800b510:	0801594c 	.word	0x0801594c
 800b514:	40021000 	.word	0x40021000
 800b518:	007a1200 	.word	0x007a1200
 800b51c:	003d0900 	.word	0x003d0900
 800b520:	aaaaaaab 	.word	0xaaaaaaab

0800b524 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e022      	b.n	800b57c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d105      	bne.n	800b54e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7fa fe65 	bl	8006218 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2203      	movs	r2, #3
 800b552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f814 	bl	800b584 <HAL_SD_InitCard>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e00a      	b.n	800b57c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b584:	b5b0      	push	{r4, r5, r7, lr}
 800b586:	b08e      	sub	sp, #56	; 0x38
 800b588:	af04      	add	r7, sp, #16
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b58c:	2300      	movs	r3, #0
 800b58e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b594:	2300      	movs	r3, #0
 800b596:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b598:	2300      	movs	r3, #0
 800b59a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b59c:	2300      	movs	r3, #0
 800b59e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b5a0:	2376      	movs	r3, #118	; 0x76
 800b5a2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681d      	ldr	r5, [r3, #0]
 800b5a8:	466c      	mov	r4, sp
 800b5aa:	f107 0314 	add.w	r3, r7, #20
 800b5ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b5b6:	f107 0308 	add.w	r3, r7, #8
 800b5ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b5bc:	4628      	mov	r0, r5
 800b5be:	f002 fb27 	bl	800dc10 <SDIO_Init>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e04c      	b.n	800b66e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b5d4:	4b28      	ldr	r3, [pc, #160]	; (800b678 <HAL_SD_InitCard+0xf4>)
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f002 fb5c 	bl	800dc9c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b5e4:	4b24      	ldr	r3, [pc, #144]	; (800b678 <HAL_SD_InitCard+0xf4>)
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 ff04 	bl	800c3f8 <SD_PowerON>
 800b5f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00b      	beq.n	800b610 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b604:	6a3b      	ldr	r3, [r7, #32]
 800b606:	431a      	orrs	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e02e      	b.n	800b66e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fe23 	bl	800c25c <SD_InitCard>
 800b616:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b618:	6a3b      	ldr	r3, [r7, #32]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00b      	beq.n	800b636 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	431a      	orrs	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e01b      	b.n	800b66e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b63e:	4618      	mov	r0, r3
 800b640:	f002 fbba 	bl	800ddb8 <SDMMC_CmdBlockLength>
 800b644:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00f      	beq.n	800b66c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a0a      	ldr	r2, [pc, #40]	; (800b67c <HAL_SD_InitCard+0xf8>)
 800b652:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	431a      	orrs	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	e000      	b.n	800b66e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3728      	adds	r7, #40	; 0x28
 800b672:	46bd      	mov	sp, r7
 800b674:	bdb0      	pop	{r4, r5, r7, pc}
 800b676:	bf00      	nop
 800b678:	423000a0 	.word	0x423000a0
 800b67c:	004005ff 	.word	0x004005ff

0800b680 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b092      	sub	sp, #72	; 0x48
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
 800b68c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b68e:	f7fc f9cd 	bl	8007a2c <HAL_GetTick>
 800b692:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d107      	bne.n	800b6b2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e1bd      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	f040 81b0 	bne.w	800ba20 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	441a      	add	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d907      	bls.n	800b6e4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e1a4      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2203      	movs	r2, #3
 800b6e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d002      	beq.n	800b702 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fe:	025b      	lsls	r3, r3, #9
 800b700:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b706:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	025b      	lsls	r3, r3, #9
 800b70c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b70e:	2390      	movs	r3, #144	; 0x90
 800b710:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b712:	2302      	movs	r3, #2
 800b714:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b716:	2300      	movs	r3, #0
 800b718:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b71a:	2301      	movs	r3, #1
 800b71c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f107 0214 	add.w	r2, r7, #20
 800b726:	4611      	mov	r1, r2
 800b728:	4618      	mov	r0, r3
 800b72a:	f002 fb1a 	bl	800dd62 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d90a      	bls.n	800b74a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2202      	movs	r2, #2
 800b738:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b740:	4618      	mov	r0, r3
 800b742:	f002 fb7d 	bl	800de40 <SDMMC_CmdReadMultiBlock>
 800b746:	6478      	str	r0, [r7, #68]	; 0x44
 800b748:	e009      	b.n	800b75e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2201      	movs	r2, #1
 800b74e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b756:	4618      	mov	r0, r3
 800b758:	f002 fb50 	bl	800ddfc <SDMMC_CmdReadSingleBlock>
 800b75c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b760:	2b00      	cmp	r3, #0
 800b762:	d012      	beq.n	800b78a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a7a      	ldr	r2, [pc, #488]	; (800b954 <HAL_SD_ReadBlocks+0x2d4>)
 800b76a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b772:	431a      	orrs	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e151      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b78e:	e061      	b.n	800b854 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d03c      	beq.n	800b818 <HAL_SD_ReadBlocks+0x198>
 800b79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d039      	beq.n	800b818 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	643b      	str	r3, [r7, #64]	; 0x40
 800b7a8:	e033      	b.n	800b812 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f002 fa58 	bl	800dc64 <SDIO_ReadFIFO>
 800b7b4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	0a1b      	lsrs	r3, r3, #8
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	0c1b      	lsrs	r3, r3, #16
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f8:	0e1b      	lsrs	r3, r3, #24
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b802:	3301      	adds	r3, #1
 800b804:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b808:	3b01      	subs	r3, #1
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800b80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b80e:	3301      	adds	r3, #1
 800b810:	643b      	str	r3, [r7, #64]	; 0x40
 800b812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b814:	2b07      	cmp	r3, #7
 800b816:	d9c8      	bls.n	800b7aa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b818:	f7fc f908 	bl	8007a2c <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b824:	429a      	cmp	r2, r3
 800b826:	d902      	bls.n	800b82e <HAL_SD_ReadBlocks+0x1ae>
 800b828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d112      	bne.n	800b854 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a48      	ldr	r2, [pc, #288]	; (800b954 <HAL_SD_ReadBlocks+0x2d4>)
 800b834:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b850:	2303      	movs	r3, #3
 800b852:	e0ec      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b85a:	f240 332a 	movw	r3, #810	; 0x32a
 800b85e:	4013      	ands	r3, r2
 800b860:	2b00      	cmp	r3, #0
 800b862:	d095      	beq.n	800b790 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d022      	beq.n	800b8b8 <HAL_SD_ReadBlocks+0x238>
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d91f      	bls.n	800b8b8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d01b      	beq.n	800b8b8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4618      	mov	r0, r3
 800b886:	f002 fb41 	bl	800df0c <SDMMC_CmdStopTransfer>
 800b88a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b88c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d012      	beq.n	800b8b8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a2f      	ldr	r2, [pc, #188]	; (800b954 <HAL_SD_ReadBlocks+0x2d4>)
 800b898:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e0ba      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8be:	f003 0308 	and.w	r3, r3, #8
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d012      	beq.n	800b8ec <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a22      	ldr	r2, [pc, #136]	; (800b954 <HAL_SD_ReadBlocks+0x2d4>)
 800b8cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d2:	f043 0208 	orr.w	r2, r3, #8
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e0a0      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d012      	beq.n	800b920 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a15      	ldr	r2, [pc, #84]	; (800b954 <HAL_SD_ReadBlocks+0x2d4>)
 800b900:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b906:	f043 0202 	orr.w	r2, r3, #2
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e086      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b926:	f003 0320 	and.w	r3, r3, #32
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d063      	beq.n	800b9f6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a08      	ldr	r2, [pc, #32]	; (800b954 <HAL_SD_ReadBlocks+0x2d4>)
 800b934:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93a:	f043 0220 	orr.w	r2, r3, #32
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	e06c      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
 800b954:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f002 f981 	bl	800dc64 <SDIO_ReadFIFO>
 800b962:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	b2da      	uxtb	r2, r3
 800b968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96e:	3301      	adds	r3, #1
 800b970:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b974:	3b01      	subs	r3, #1
 800b976:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97a:	0a1b      	lsrs	r3, r3, #8
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b980:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b984:	3301      	adds	r3, #1
 800b986:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b98a:	3b01      	subs	r3, #1
 800b98c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	0c1b      	lsrs	r3, r3, #16
 800b992:	b2da      	uxtb	r2, r3
 800b994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b996:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99a:	3301      	adds	r3, #1
 800b99c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a6:	0e1b      	lsrs	r3, r3, #24
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b9ba:	f7fc f837 	bl	8007a2c <HAL_GetTick>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d902      	bls.n	800b9d0 <HAL_SD_ReadBlocks+0x350>
 800b9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d112      	bne.n	800b9f6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a18      	ldr	r2, [pc, #96]	; (800ba38 <HAL_SD_ReadBlocks+0x3b8>)
 800b9d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e01b      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <HAL_SD_ReadBlocks+0x38a>
 800ba04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1a6      	bne.n	800b958 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e006      	b.n	800ba2e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
  }
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3748      	adds	r7, #72	; 0x48
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	004005ff 	.word	0x004005ff

0800ba3c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b092      	sub	sp, #72	; 0x48
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
 800ba48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba4a:	f7fb ffef 	bl	8007a2c <HAL_GetTick>
 800ba4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d107      	bne.n	800ba6e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e166      	b.n	800bd3c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	f040 8159 	bne.w	800bd2e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ba82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	441a      	add	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d907      	bls.n	800baa0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba94:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e14d      	b.n	800bd3c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2203      	movs	r2, #3
 800baa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2200      	movs	r2, #0
 800baae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d002      	beq.n	800babe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800bab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baba:	025b      	lsls	r3, r3, #9
 800babc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800babe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bac2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	025b      	lsls	r3, r3, #9
 800bac8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800baca:	2390      	movs	r3, #144	; 0x90
 800bacc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800bace:	2300      	movs	r3, #0
 800bad0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bad2:	2300      	movs	r3, #0
 800bad4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800bad6:	2301      	movs	r3, #1
 800bad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f107 0218 	add.w	r2, r7, #24
 800bae2:	4611      	mov	r1, r2
 800bae4:	4618      	mov	r0, r3
 800bae6:	f002 f93c 	bl	800dd62 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d90a      	bls.n	800bb06 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2220      	movs	r2, #32
 800baf4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bafc:	4618      	mov	r0, r3
 800bafe:	f002 f9e3 	bl	800dec8 <SDMMC_CmdWriteMultiBlock>
 800bb02:	6478      	str	r0, [r7, #68]	; 0x44
 800bb04:	e009      	b.n	800bb1a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2210      	movs	r2, #16
 800bb0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb12:	4618      	mov	r0, r3
 800bb14:	f002 f9b6 	bl	800de84 <SDMMC_CmdWriteSingleBlock>
 800bb18:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d012      	beq.n	800bb46 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a87      	ldr	r2, [pc, #540]	; (800bd44 <HAL_SD_WriteBlocks+0x308>)
 800bb26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e0fa      	b.n	800bd3c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800bb4a:	e065      	b.n	800bc18 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d040      	beq.n	800bbdc <HAL_SD_WriteBlocks+0x1a0>
 800bb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d03d      	beq.n	800bbdc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800bb60:	2300      	movs	r3, #0
 800bb62:	643b      	str	r3, [r7, #64]	; 0x40
 800bb64:	e037      	b.n	800bbd6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6e:	3301      	adds	r3, #1
 800bb70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb74:	3b01      	subs	r3, #1
 800bb76:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	021a      	lsls	r2, r3, #8
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bb84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb86:	3301      	adds	r3, #1
 800bb88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	041a      	lsls	r2, r3, #16
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9e:	3301      	adds	r3, #1
 800bba0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba4:	3b01      	subs	r3, #1
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	061a      	lsls	r2, r3, #24
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bbba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f107 0214 	add.w	r2, r7, #20
 800bbc8:	4611      	mov	r1, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f002 f856 	bl	800dc7c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800bbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	643b      	str	r3, [r7, #64]	; 0x40
 800bbd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbd8:	2b07      	cmp	r3, #7
 800bbda:	d9c4      	bls.n	800bb66 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bbdc:	f7fb ff26 	bl	8007a2c <HAL_GetTick>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d902      	bls.n	800bbf2 <HAL_SD_WriteBlocks+0x1b6>
 800bbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d112      	bne.n	800bc18 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a53      	ldr	r2, [pc, #332]	; (800bd44 <HAL_SD_WriteBlocks+0x308>)
 800bbf8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc00:	431a      	orrs	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e091      	b.n	800bd3c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc1e:	f240 331a 	movw	r3, #794	; 0x31a
 800bc22:	4013      	ands	r3, r2
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d091      	beq.n	800bb4c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d022      	beq.n	800bc7c <HAL_SD_WriteBlocks+0x240>
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d91f      	bls.n	800bc7c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d01b      	beq.n	800bc7c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f002 f95f 	bl	800df0c <SDMMC_CmdStopTransfer>
 800bc4e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bc50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d012      	beq.n	800bc7c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a3a      	ldr	r2, [pc, #232]	; (800bd44 <HAL_SD_WriteBlocks+0x308>)
 800bc5c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc64:	431a      	orrs	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e05f      	b.n	800bd3c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc82:	f003 0308 	and.w	r3, r3, #8
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d012      	beq.n	800bcb0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a2d      	ldr	r2, [pc, #180]	; (800bd44 <HAL_SD_WriteBlocks+0x308>)
 800bc90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc96:	f043 0208 	orr.w	r2, r3, #8
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2201      	movs	r2, #1
 800bca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e045      	b.n	800bd3c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb6:	f003 0302 	and.w	r3, r3, #2
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d012      	beq.n	800bce4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a20      	ldr	r2, [pc, #128]	; (800bd44 <HAL_SD_WriteBlocks+0x308>)
 800bcc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcca:	f043 0202 	orr.w	r2, r3, #2
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e02b      	b.n	800bd3c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcea:	f003 0310 	and.w	r3, r3, #16
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d012      	beq.n	800bd18 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a13      	ldr	r2, [pc, #76]	; (800bd44 <HAL_SD_WriteBlocks+0x308>)
 800bcf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfe:	f043 0210 	orr.w	r2, r3, #16
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	e011      	b.n	800bd3c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f240 523a 	movw	r2, #1338	; 0x53a
 800bd20:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e006      	b.n	800bd3c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
  }
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3748      	adds	r7, #72	; 0x48
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	004005ff 	.word	0x004005ff

0800bd48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd56:	0f9b      	lsrs	r3, r3, #30
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd62:	0e9b      	lsrs	r3, r3, #26
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	f003 030f 	and.w	r3, r3, #15
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd74:	0e1b      	lsrs	r3, r3, #24
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	f003 0303 	and.w	r3, r3, #3
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd86:	0c1b      	lsrs	r3, r3, #16
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd92:	0a1b      	lsrs	r3, r3, #8
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bda8:	0d1b      	lsrs	r3, r3, #20
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdb4:	0c1b      	lsrs	r3, r3, #16
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdc6:	0bdb      	lsrs	r3, r3, #15
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdd8:	0b9b      	lsrs	r3, r3, #14
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdea:	0b5b      	lsrs	r3, r3, #13
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdfc:	0b1b      	lsrs	r3, r3, #12
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	b2da      	uxtb	r2, r3
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2200      	movs	r2, #0
 800be0e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be14:	2b00      	cmp	r3, #0
 800be16:	d163      	bne.n	800bee0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be1c:	009a      	lsls	r2, r3, #2
 800be1e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800be22:	4013      	ands	r3, r2
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800be28:	0f92      	lsrs	r2, r2, #30
 800be2a:	431a      	orrs	r2, r3
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be34:	0edb      	lsrs	r3, r3, #27
 800be36:	b2db      	uxtb	r3, r3
 800be38:	f003 0307 	and.w	r3, r3, #7
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be46:	0e1b      	lsrs	r3, r3, #24
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	f003 0307 	and.w	r3, r3, #7
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be58:	0d5b      	lsrs	r3, r3, #21
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	f003 0307 	and.w	r3, r3, #7
 800be60:	b2da      	uxtb	r2, r3
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be6a:	0c9b      	lsrs	r3, r3, #18
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	f003 0307 	and.w	r3, r3, #7
 800be72:	b2da      	uxtb	r2, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be7c:	0bdb      	lsrs	r3, r3, #15
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	f003 0307 	and.w	r3, r3, #7
 800be84:	b2da      	uxtb	r2, r3
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	1c5a      	adds	r2, r3, #1
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	7e1b      	ldrb	r3, [r3, #24]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	f003 0307 	and.w	r3, r3, #7
 800be9e:	3302      	adds	r3, #2
 800bea0:	2201      	movs	r2, #1
 800bea2:	fa02 f303 	lsl.w	r3, r2, r3
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800beaa:	fb03 f202 	mul.w	r2, r3, r2
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	7a1b      	ldrb	r3, [r3, #8]
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	f003 030f 	and.w	r3, r3, #15
 800bebc:	2201      	movs	r2, #1
 800bebe:	409a      	lsls	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800becc:	0a52      	lsrs	r2, r2, #9
 800bece:	fb03 f202 	mul.w	r2, r3, r2
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bedc:	661a      	str	r2, [r3, #96]	; 0x60
 800bede:	e031      	b.n	800bf44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d11d      	bne.n	800bf24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800beec:	041b      	lsls	r3, r3, #16
 800beee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bef6:	0c1b      	lsrs	r3, r3, #16
 800bef8:	431a      	orrs	r2, r3
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	3301      	adds	r3, #1
 800bf04:	029a      	lsls	r2, r3, #10
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf18:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	661a      	str	r2, [r3, #96]	; 0x60
 800bf22:	e00f      	b.n	800bf44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a58      	ldr	r2, [pc, #352]	; (800c08c <HAL_SD_GetCardCSD+0x344>)
 800bf2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e09d      	b.n	800c080 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf48:	0b9b      	lsrs	r3, r3, #14
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf5a:	09db      	lsrs	r3, r3, #7
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf7c:	0fdb      	lsrs	r3, r3, #31
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf88:	0f5b      	lsrs	r3, r3, #29
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f003 0303 	and.w	r3, r3, #3
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf9a:	0e9b      	lsrs	r3, r3, #26
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	f003 0307 	and.w	r3, r3, #7
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfac:	0d9b      	lsrs	r3, r3, #22
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	f003 030f 	and.w	r3, r3, #15
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfbe:	0d5b      	lsrs	r3, r3, #21
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfda:	0c1b      	lsrs	r3, r3, #16
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfee:	0bdb      	lsrs	r3, r3, #15
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c002:	0b9b      	lsrs	r3, r3, #14
 800c004:	b2db      	uxtb	r3, r3
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c016:	0b5b      	lsrs	r3, r3, #13
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	b2da      	uxtb	r2, r3
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c02a:	0b1b      	lsrs	r3, r3, #12
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	b2da      	uxtb	r2, r3
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c03e:	0a9b      	lsrs	r3, r3, #10
 800c040:	b2db      	uxtb	r3, r3
 800c042:	f003 0303 	and.w	r3, r3, #3
 800c046:	b2da      	uxtb	r2, r3
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c052:	0a1b      	lsrs	r3, r3, #8
 800c054:	b2db      	uxtb	r3, r3
 800c056:	f003 0303 	and.w	r3, r3, #3
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c066:	085b      	lsrs	r3, r3, #1
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2201      	movs	r2, #1
 800c07a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	bc80      	pop	{r7}
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	004005ff 	.word	0x004005ff

0800c090 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bc80      	pop	{r7}
 800c0e4:	4770      	bx	lr
	...

0800c0e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c0e8:	b5b0      	push	{r4, r5, r7, lr}
 800c0ea:	b08e      	sub	sp, #56	; 0x38
 800c0ec:	af04      	add	r7, sp, #16
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2203      	movs	r2, #3
 800c0fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c104:	2b03      	cmp	r3, #3
 800c106:	d02e      	beq.n	800c166 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c10e:	d106      	bne.n	800c11e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c114:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	639a      	str	r2, [r3, #56]	; 0x38
 800c11c:	e029      	b.n	800c172 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c124:	d10a      	bne.n	800c13c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fa1c 	bl	800c564 <SD_WideBus_Enable>
 800c12c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	431a      	orrs	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	639a      	str	r2, [r3, #56]	; 0x38
 800c13a:	e01a      	b.n	800c172 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10a      	bne.n	800c158 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fa59 	bl	800c5fa <SD_WideBus_Disable>
 800c148:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	431a      	orrs	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	639a      	str	r2, [r3, #56]	; 0x38
 800c156:	e00c      	b.n	800c172 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c15c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	639a      	str	r2, [r3, #56]	; 0x38
 800c164:	e005      	b.n	800c172 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00b      	beq.n	800c192 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a26      	ldr	r2, [pc, #152]	; (800c218 <HAL_SD_ConfigWideBusOperation+0x130>)
 800c180:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c190:	e01f      	b.n	800c1d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	695b      	ldr	r3, [r3, #20]
 800c1ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681d      	ldr	r5, [r3, #0]
 800c1b8:	466c      	mov	r4, sp
 800c1ba:	f107 0314 	add.w	r3, r7, #20
 800c1be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c1c6:	f107 0308 	add.w	r3, r7, #8
 800c1ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	f001 fd1f 	bl	800dc10 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f001 fdec 	bl	800ddb8 <SDMMC_CmdBlockLength>
 800c1e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1e2:	6a3b      	ldr	r3, [r7, #32]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00c      	beq.n	800c202 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a0a      	ldr	r2, [pc, #40]	; (800c218 <HAL_SD_ConfigWideBusOperation+0x130>)
 800c1ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1f4:	6a3b      	ldr	r3, [r7, #32]
 800c1f6:	431a      	orrs	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c20a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3728      	adds	r7, #40	; 0x28
 800c212:	46bd      	mov	sp, r7
 800c214:	bdb0      	pop	{r4, r5, r7, pc}
 800c216:	bf00      	nop
 800c218:	004005ff 	.word	0x004005ff

0800c21c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b086      	sub	sp, #24
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c228:	f107 030c 	add.w	r3, r7, #12
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f970 	bl	800c514 <SD_SendStatus>
 800c234:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d005      	beq.n	800c248 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	431a      	orrs	r2, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	0a5b      	lsrs	r3, r3, #9
 800c24c:	f003 030f 	and.w	r3, r3, #15
 800c250:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c252:	693b      	ldr	r3, [r7, #16]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c25c:	b5b0      	push	{r4, r5, r7, lr}
 800c25e:	b094      	sub	sp, #80	; 0x50
 800c260:	af04      	add	r7, sp, #16
 800c262:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c264:	2301      	movs	r3, #1
 800c266:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f001 fd24 	bl	800dcba <SDIO_GetPowerState>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d102      	bne.n	800c27e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c278:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c27c:	e0b8      	b.n	800c3f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c282:	2b03      	cmp	r3, #3
 800c284:	d02f      	beq.n	800c2e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f001 ff48 	bl	800e120 <SDMMC_CmdSendCID>
 800c290:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d001      	beq.n	800c29c <SD_InitCard+0x40>
    {
      return errorstate;
 800c298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29a:	e0a9      	b.n	800c3f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f001 fd4b 	bl	800dd3e <SDIO_GetResponse>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2104      	movs	r1, #4
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f001 fd42 	bl	800dd3e <SDIO_GetResponse>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2108      	movs	r1, #8
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f001 fd39 	bl	800dd3e <SDIO_GetResponse>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	210c      	movs	r1, #12
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f001 fd30 	bl	800dd3e <SDIO_GetResponse>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d00d      	beq.n	800c30a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f107 020e 	add.w	r2, r7, #14
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f001 ff4e 	bl	800e19a <SDMMC_CmdSetRelAdd>
 800c2fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c302:	2b00      	cmp	r3, #0
 800c304:	d001      	beq.n	800c30a <SD_InitCard+0xae>
    {
      return errorstate;
 800c306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c308:	e072      	b.n	800c3f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d036      	beq.n	800c380 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c312:	89fb      	ldrh	r3, [r7, #14]
 800c314:	461a      	mov	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c322:	041b      	lsls	r3, r3, #16
 800c324:	4619      	mov	r1, r3
 800c326:	4610      	mov	r0, r2
 800c328:	f001 ff18 	bl	800e15c <SDMMC_CmdSendCSD>
 800c32c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c330:	2b00      	cmp	r3, #0
 800c332:	d001      	beq.n	800c338 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c336:	e05b      	b.n	800c3f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2100      	movs	r1, #0
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 fcfd 	bl	800dd3e <SDIO_GetResponse>
 800c344:	4602      	mov	r2, r0
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2104      	movs	r1, #4
 800c350:	4618      	mov	r0, r3
 800c352:	f001 fcf4 	bl	800dd3e <SDIO_GetResponse>
 800c356:	4602      	mov	r2, r0
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2108      	movs	r1, #8
 800c362:	4618      	mov	r0, r3
 800c364:	f001 fceb 	bl	800dd3e <SDIO_GetResponse>
 800c368:	4602      	mov	r2, r0
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	210c      	movs	r1, #12
 800c374:	4618      	mov	r0, r3
 800c376:	f001 fce2 	bl	800dd3e <SDIO_GetResponse>
 800c37a:	4602      	mov	r2, r0
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2104      	movs	r1, #4
 800c386:	4618      	mov	r0, r3
 800c388:	f001 fcd9 	bl	800dd3e <SDIO_GetResponse>
 800c38c:	4603      	mov	r3, r0
 800c38e:	0d1a      	lsrs	r2, r3, #20
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c394:	f107 0310 	add.w	r3, r7, #16
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fcd4 	bl	800bd48 <HAL_SD_GetCardCSD>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d002      	beq.n	800c3ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c3aa:	e021      	b.n	800c3f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6819      	ldr	r1, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b4:	041b      	lsls	r3, r3, #16
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	461c      	mov	r4, r3
 800c3ba:	4615      	mov	r5, r2
 800c3bc:	4622      	mov	r2, r4
 800c3be:	462b      	mov	r3, r5
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	f001 fdc5 	bl	800df50 <SDMMC_CmdSelDesel>
 800c3c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <SD_InitCard+0x176>
  {
    return errorstate;
 800c3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d0:	e00e      	b.n	800c3f0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681d      	ldr	r5, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	466c      	mov	r4, sp
 800c3da:	f103 0210 	add.w	r2, r3, #16
 800c3de:	ca07      	ldmia	r2, {r0, r1, r2}
 800c3e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	f001 fc11 	bl	800dc10 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3740      	adds	r7, #64	; 0x40
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bdb0      	pop	{r4, r5, r7, pc}

0800c3f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c404:	2300      	movs	r3, #0
 800c406:	617b      	str	r3, [r7, #20]
 800c408:	2300      	movs	r3, #0
 800c40a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4618      	mov	r0, r3
 800c412:	f001 fdc0 	bl	800df96 <SDMMC_CmdGoIdleState>
 800c416:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d001      	beq.n	800c422 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	e072      	b.n	800c508 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4618      	mov	r0, r3
 800c428:	f001 fdd3 	bl	800dfd2 <SDMMC_CmdOperCond>
 800c42c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00d      	beq.n	800c450 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 fda9 	bl	800df96 <SDMMC_CmdGoIdleState>
 800c444:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d004      	beq.n	800c456 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	e05b      	b.n	800c508 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d137      	bne.n	800c4ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2100      	movs	r1, #0
 800c464:	4618      	mov	r0, r3
 800c466:	f001 fdd3 	bl	800e010 <SDMMC_CmdAppCommand>
 800c46a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d02d      	beq.n	800c4ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c472:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c476:	e047      	b.n	800c508 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2100      	movs	r1, #0
 800c47e:	4618      	mov	r0, r3
 800c480:	f001 fdc6 	bl	800e010 <SDMMC_CmdAppCommand>
 800c484:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d001      	beq.n	800c490 <SD_PowerON+0x98>
    {
      return errorstate;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	e03b      	b.n	800c508 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	491e      	ldr	r1, [pc, #120]	; (800c510 <SD_PowerON+0x118>)
 800c496:	4618      	mov	r0, r3
 800c498:	f001 fddc 	bl	800e054 <SDMMC_CmdAppOperCommand>
 800c49c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c4a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c4a8:	e02e      	b.n	800c508 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f001 fc44 	bl	800dd3e <SDIO_GetResponse>
 800c4b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	0fdb      	lsrs	r3, r3, #31
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d101      	bne.n	800c4c4 <SD_PowerON+0xcc>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e000      	b.n	800c4c6 <SD_PowerON+0xce>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	613b      	str	r3, [r7, #16]

    count++;
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d802      	bhi.n	800c4de <SD_PowerON+0xe6>
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0cc      	beq.n	800c478 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d902      	bls.n	800c4ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c4e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c4ec:	e00c      	b.n	800c508 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d003      	beq.n	800c500 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	645a      	str	r2, [r3, #68]	; 0x44
 800c4fe:	e002      	b.n	800c506 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3718      	adds	r7, #24
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	c1100000 	.word	0xc1100000

0800c514 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c524:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c528:	e018      	b.n	800c55c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c532:	041b      	lsls	r3, r3, #16
 800c534:	4619      	mov	r1, r3
 800c536:	4610      	mov	r0, r2
 800c538:	f001 fe50 	bl	800e1dc <SDMMC_CmdSendStatus>
 800c53c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	e009      	b.n	800c55c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2100      	movs	r1, #0
 800c54e:	4618      	mov	r0, r3
 800c550:	f001 fbf5 	bl	800dd3e <SDIO_GetResponse>
 800c554:	4602      	mov	r2, r0
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	2300      	movs	r3, #0
 800c572:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2100      	movs	r1, #0
 800c57a:	4618      	mov	r0, r3
 800c57c:	f001 fbdf 	bl	800dd3e <SDIO_GetResponse>
 800c580:	4603      	mov	r3, r0
 800c582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c58a:	d102      	bne.n	800c592 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c58c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c590:	e02f      	b.n	800c5f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c592:	f107 030c 	add.w	r3, r7, #12
 800c596:	4619      	mov	r1, r3
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f879 	bl	800c690 <SD_FindSCR>
 800c59e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	e023      	b.n	800c5f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d01c      	beq.n	800c5ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5bc:	041b      	lsls	r3, r3, #16
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f001 fd25 	bl	800e010 <SDMMC_CmdAppCommand>
 800c5c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	e00f      	b.n	800c5f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2102      	movs	r1, #2
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f001 fd5e 	bl	800e09a <SDMMC_CmdBusWidth>
 800c5de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d001      	beq.n	800c5ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	e003      	b.n	800c5f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e001      	b.n	800c5f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c5ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3718      	adds	r7, #24
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b086      	sub	sp, #24
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c602:	2300      	movs	r3, #0
 800c604:	60fb      	str	r3, [r7, #12]
 800c606:	2300      	movs	r3, #0
 800c608:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2100      	movs	r1, #0
 800c610:	4618      	mov	r0, r3
 800c612:	f001 fb94 	bl	800dd3e <SDIO_GetResponse>
 800c616:	4603      	mov	r3, r0
 800c618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c61c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c620:	d102      	bne.n	800c628 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c622:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c626:	e02f      	b.n	800c688 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c628:	f107 030c 	add.w	r3, r7, #12
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f82e 	bl	800c690 <SD_FindSCR>
 800c634:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	e023      	b.n	800c688 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c646:	2b00      	cmp	r3, #0
 800c648:	d01c      	beq.n	800c684 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c652:	041b      	lsls	r3, r3, #16
 800c654:	4619      	mov	r1, r3
 800c656:	4610      	mov	r0, r2
 800c658:	f001 fcda 	bl	800e010 <SDMMC_CmdAppCommand>
 800c65c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	e00f      	b.n	800c688 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2100      	movs	r1, #0
 800c66e:	4618      	mov	r0, r3
 800c670:	f001 fd13 	bl	800e09a <SDMMC_CmdBusWidth>
 800c674:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	e003      	b.n	800c688 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c680:	2300      	movs	r3, #0
 800c682:	e001      	b.n	800c688 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c684:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3718      	adds	r7, #24
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c690:	b590      	push	{r4, r7, lr}
 800c692:	b08f      	sub	sp, #60	; 0x3c
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c69a:	f7fb f9c7 	bl	8007a2c <HAL_GetTick>
 800c69e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	60bb      	str	r3, [r7, #8]
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2108      	movs	r1, #8
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f001 fb7e 	bl	800ddb8 <SDMMC_CmdBlockLength>
 800c6bc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	e0b2      	b.n	800c82e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6d0:	041b      	lsls	r3, r3, #16
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	f001 fc9b 	bl	800e010 <SDMMC_CmdAppCommand>
 800c6da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d001      	beq.n	800c6e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	e0a3      	b.n	800c82e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c6e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c6ec:	2308      	movs	r3, #8
 800c6ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800c6f0:	2330      	movs	r3, #48	; 0x30
 800c6f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f107 0210 	add.w	r2, r7, #16
 800c708:	4611      	mov	r1, r2
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 fb29 	bl	800dd62 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4618      	mov	r0, r3
 800c716:	f001 fce2 	bl	800e0de <SDMMC_CmdSendSCR>
 800c71a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d02a      	beq.n	800c778 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800c722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c724:	e083      	b.n	800c82e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c72c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00f      	beq.n	800c754 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6819      	ldr	r1, [r3, #0]
 800c738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	f107 0208 	add.w	r2, r7, #8
 800c740:	18d4      	adds	r4, r2, r3
 800c742:	4608      	mov	r0, r1
 800c744:	f001 fa8e 	bl	800dc64 <SDIO_ReadFIFO>
 800c748:	4603      	mov	r3, r0
 800c74a:	6023      	str	r3, [r4, #0]
      index++;
 800c74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74e:	3301      	adds	r3, #1
 800c750:	637b      	str	r3, [r7, #52]	; 0x34
 800c752:	e006      	b.n	800c762 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c75a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d012      	beq.n	800c788 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c762:	f7fb f963 	bl	8007a2c <HAL_GetTick>
 800c766:	4602      	mov	r2, r0
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c770:	d102      	bne.n	800c778 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c772:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c776:	e05a      	b.n	800c82e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c77e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c782:	2b00      	cmp	r3, #0
 800c784:	d0cf      	beq.n	800c726 <SD_FindSCR+0x96>
 800c786:	e000      	b.n	800c78a <SD_FindSCR+0xfa>
      break;
 800c788:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c790:	f003 0308 	and.w	r3, r3, #8
 800c794:	2b00      	cmp	r3, #0
 800c796:	d005      	beq.n	800c7a4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2208      	movs	r2, #8
 800c79e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c7a0:	2308      	movs	r3, #8
 800c7a2:	e044      	b.n	800c82e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7aa:	f003 0302 	and.w	r3, r3, #2
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d005      	beq.n	800c7be <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	e037      	b.n	800c82e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c4:	f003 0320 	and.w	r3, r3, #32
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d005      	beq.n	800c7d8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c7d4:	2320      	movs	r3, #32
 800c7d6:	e02a      	b.n	800c82e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f240 523a 	movw	r2, #1338	; 0x53a
 800c7e0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	061a      	lsls	r2, r3, #24
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	021b      	lsls	r3, r3, #8
 800c7ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c7ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	0a1b      	lsrs	r3, r3, #8
 800c7f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c7f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	0e1b      	lsrs	r3, r3, #24
 800c7fe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	601a      	str	r2, [r3, #0]
    scr++;
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	3304      	adds	r3, #4
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	061a      	lsls	r2, r3, #24
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	021b      	lsls	r3, r3, #8
 800c812:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c816:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	0a1b      	lsrs	r3, r3, #8
 800c81c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c820:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	0e1b      	lsrs	r3, r3, #24
 800c826:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	373c      	adds	r7, #60	; 0x3c
 800c832:	46bd      	mov	sp, r7
 800c834:	bd90      	pop	{r4, r7, pc}

0800c836 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b082      	sub	sp, #8
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d101      	bne.n	800c848 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	e076      	b.n	800c936 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d108      	bne.n	800c862 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c858:	d009      	beq.n	800c86e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	61da      	str	r2, [r3, #28]
 800c860:	e005      	b.n	800c86e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d106      	bne.n	800c88e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f7f9 fd1f 	bl	80062cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2202      	movs	r2, #2
 800c892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8c0:	431a      	orrs	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	f003 0302 	and.w	r3, r3, #2
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	695b      	ldr	r3, [r3, #20]
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	431a      	orrs	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8de:	431a      	orrs	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	69db      	ldr	r3, [r3, #28]
 800c8e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8e8:	431a      	orrs	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a1b      	ldr	r3, [r3, #32]
 800c8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8f2:	ea42 0103 	orr.w	r1, r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	430a      	orrs	r2, r1
 800c904:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	0c1a      	lsrs	r2, r3, #16
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f002 0204 	and.w	r2, r2, #4
 800c914:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	69da      	ldr	r2, [r3, #28]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c924:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
	...

0800c940 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	4613      	mov	r3, r2
 800c94c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d101      	bne.n	800c960 <HAL_SPI_Transmit_DMA+0x20>
 800c95c:	2302      	movs	r3, #2
 800c95e:	e09b      	b.n	800ca98 <HAL_SPI_Transmit_DMA+0x158>
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	2b01      	cmp	r3, #1
 800c972:	d002      	beq.n	800c97a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c974:	2302      	movs	r3, #2
 800c976:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c978:	e089      	b.n	800ca8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <HAL_SPI_Transmit_DMA+0x46>
 800c980:	88fb      	ldrh	r3, [r7, #6]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d102      	bne.n	800c98c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c98a:	e080      	b.n	800ca8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2203      	movs	r2, #3
 800c990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2200      	movs	r2, #0
 800c998:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	88fa      	ldrh	r2, [r7, #6]
 800c9a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	88fa      	ldrh	r2, [r7, #6]
 800c9aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9d2:	d10f      	bne.n	800c9f4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c9f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9f8:	4a29      	ldr	r2, [pc, #164]	; (800caa0 <HAL_SPI_Transmit_DMA+0x160>)
 800c9fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca00:	4a28      	ldr	r2, [pc, #160]	; (800caa4 <HAL_SPI_Transmit_DMA+0x164>)
 800ca02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca08:	4a27      	ldr	r2, [pc, #156]	; (800caa8 <HAL_SPI_Transmit_DMA+0x168>)
 800ca0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca10:	2200      	movs	r2, #0
 800ca12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	330c      	adds	r3, #12
 800ca24:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ca2c:	f7fb fffa 	bl	8008a24 <HAL_DMA_Start_IT>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00c      	beq.n	800ca50 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca3a:	f043 0210 	orr.w	r2, r3, #16
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ca4e:	e01e      	b.n	800ca8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca5a:	2b40      	cmp	r3, #64	; 0x40
 800ca5c:	d007      	beq.n	800ca6e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca6c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f042 0220 	orr.w	r2, r2, #32
 800ca7c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685a      	ldr	r2, [r3, #4]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f042 0202 	orr.w	r2, r2, #2
 800ca8c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	0800cb89 	.word	0x0800cb89
 800caa4:	0800cae3 	.word	0x0800cae3
 800caa8:	0800cba5 	.word	0x0800cba5

0800caac <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	bc80      	pop	{r7}
 800cabc:	4770      	bx	lr

0800cabe <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cabe:	b480      	push	{r7}
 800cac0:	b083      	sub	sp, #12
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cac6:	bf00      	nop
 800cac8:	370c      	adds	r7, #12
 800caca:	46bd      	mov	sp, r7
 800cacc:	bc80      	pop	{r7}
 800cace:	4770      	bx	lr

0800cad0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cad8:	bf00      	nop
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	bc80      	pop	{r7}
 800cae0:	4770      	bx	lr

0800cae2 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b086      	sub	sp, #24
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800caf0:	f7fa ff9c 	bl	8007a2c <HAL_GetTick>
 800caf4:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0320 	and.w	r3, r3, #32
 800cb00:	2b20      	cmp	r3, #32
 800cb02:	d03b      	beq.n	800cb7c <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	685a      	ldr	r2, [r3, #4]
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f022 0220 	bic.w	r2, r2, #32
 800cb12:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f022 0202 	bic.w	r2, r2, #2
 800cb22:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	2164      	movs	r1, #100	; 0x64
 800cb28:	6978      	ldr	r0, [r7, #20]
 800cb2a:	f000 f8e3 	bl	800ccf4 <SPI_EndRxTxTransaction>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d005      	beq.n	800cb40 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb38:	f043 0220 	orr.w	r2, r3, #32
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10a      	bne.n	800cb5e <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb48:	2300      	movs	r3, #0
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2200      	movs	r2, #0
 800cb62:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d003      	beq.n	800cb7c <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cb74:	6978      	ldr	r0, [r7, #20]
 800cb76:	f7ff ffab 	bl	800cad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cb7a:	e002      	b.n	800cb82 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cb7c:	6978      	ldr	r0, [r7, #20]
 800cb7e:	f7ff ff95 	bl	800caac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb82:	3718      	adds	r7, #24
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb94:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7ff ff91 	bl	800cabe <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb9c:	bf00      	nop
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	685a      	ldr	r2, [r3, #4]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 0203 	bic.w	r2, r2, #3
 800cbc0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc6:	f043 0210 	orr.w	r2, r3, #16
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff ff7a 	bl	800cad0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cbdc:	bf00      	nop
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b088      	sub	sp, #32
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	603b      	str	r3, [r7, #0]
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cbf4:	f7fa ff1a 	bl	8007a2c <HAL_GetTick>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfc:	1a9b      	subs	r3, r3, r2
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	4413      	add	r3, r2
 800cc02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cc04:	f7fa ff12 	bl	8007a2c <HAL_GetTick>
 800cc08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cc0a:	4b39      	ldr	r3, [pc, #228]	; (800ccf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	015b      	lsls	r3, r3, #5
 800cc10:	0d1b      	lsrs	r3, r3, #20
 800cc12:	69fa      	ldr	r2, [r7, #28]
 800cc14:	fb02 f303 	mul.w	r3, r2, r3
 800cc18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc1a:	e054      	b.n	800ccc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc22:	d050      	beq.n	800ccc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cc24:	f7fa ff02 	bl	8007a2c <HAL_GetTick>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	69fa      	ldr	r2, [r7, #28]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d902      	bls.n	800cc3a <SPI_WaitFlagStateUntilTimeout+0x56>
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d13d      	bne.n	800ccb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	685a      	ldr	r2, [r3, #4]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cc48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc52:	d111      	bne.n	800cc78 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc5c:	d004      	beq.n	800cc68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc66:	d107      	bne.n	800cc78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc80:	d10f      	bne.n	800cca2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cca0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ccb2:	2303      	movs	r3, #3
 800ccb4:	e017      	b.n	800cce6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d101      	bne.n	800ccc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	689a      	ldr	r2, [r3, #8]
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	4013      	ands	r3, r2
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	bf0c      	ite	eq
 800ccd6:	2301      	moveq	r3, #1
 800ccd8:	2300      	movne	r3, #0
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	461a      	mov	r2, r3
 800ccde:	79fb      	ldrb	r3, [r7, #7]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d19b      	bne.n	800cc1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3720      	adds	r7, #32
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20000040 	.word	0x20000040

0800ccf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af02      	add	r7, sp, #8
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2200      	movs	r2, #0
 800cd08:	2180      	movs	r1, #128	; 0x80
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f7ff ff6a 	bl	800cbe4 <SPI_WaitFlagStateUntilTimeout>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d007      	beq.n	800cd26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd1a:	f043 0220 	orr.w	r2, r3, #32
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800cd22:	2303      	movs	r3, #3
 800cd24:	e000      	b.n	800cd28 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d004      	beq.n	800cd4c <HAL_SRAM_Init+0x1c>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	699b      	ldr	r3, [r3, #24]
 800cd46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd4a:	d101      	bne.n	800cd50 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e038      	b.n	800cdc2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d106      	bne.n	800cd6a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f7f9 fbf5 	bl	8006554 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	3308      	adds	r3, #8
 800cd72:	4619      	mov	r1, r3
 800cd74:	4610      	mov	r0, r2
 800cd76:	f000 fe75 	bl	800da64 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	6818      	ldr	r0, [r3, #0]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	461a      	mov	r2, r3
 800cd84:	68b9      	ldr	r1, [r7, #8]
 800cd86:	f000 fed7 	bl	800db38 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6858      	ldr	r0, [r3, #4]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	689a      	ldr	r2, [r3, #8]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	f000 ff02 	bl	800dba0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	6892      	ldr	r2, [r2, #8]
 800cda4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	6892      	ldr	r2, [r2, #8]
 800cdb0:	f041 0101 	orr.w	r1, r1, #1
 800cdb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b082      	sub	sp, #8
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d101      	bne.n	800cddc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e041      	b.n	800ce60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d106      	bne.n	800cdf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7f9 fad3 	bl	800639c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3304      	adds	r3, #4
 800ce06:	4619      	mov	r1, r3
 800ce08:	4610      	mov	r0, r2
 800ce0a:	f000 fad5 	bl	800d3b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d001      	beq.n	800ce80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e03c      	b.n	800cefa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2202      	movs	r2, #2
 800ce84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a1d      	ldr	r2, [pc, #116]	; (800cf04 <HAL_TIM_Base_Start+0x9c>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d018      	beq.n	800cec4 <HAL_TIM_Base_Start+0x5c>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a1c      	ldr	r2, [pc, #112]	; (800cf08 <HAL_TIM_Base_Start+0xa0>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d013      	beq.n	800cec4 <HAL_TIM_Base_Start+0x5c>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cea4:	d00e      	beq.n	800cec4 <HAL_TIM_Base_Start+0x5c>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a18      	ldr	r2, [pc, #96]	; (800cf0c <HAL_TIM_Base_Start+0xa4>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d009      	beq.n	800cec4 <HAL_TIM_Base_Start+0x5c>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a16      	ldr	r2, [pc, #88]	; (800cf10 <HAL_TIM_Base_Start+0xa8>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d004      	beq.n	800cec4 <HAL_TIM_Base_Start+0x5c>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a15      	ldr	r2, [pc, #84]	; (800cf14 <HAL_TIM_Base_Start+0xac>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d111      	bne.n	800cee8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f003 0307 	and.w	r3, r3, #7
 800cece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2b06      	cmp	r3, #6
 800ced4:	d010      	beq.n	800cef8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f042 0201 	orr.w	r2, r2, #1
 800cee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cee6:	e007      	b.n	800cef8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f042 0201 	orr.w	r2, r2, #1
 800cef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bc80      	pop	{r7}
 800cf02:	4770      	bx	lr
 800cf04:	40012c00 	.word	0x40012c00
 800cf08:	40013400 	.word	0x40013400
 800cf0c:	40000400 	.word	0x40000400
 800cf10:	40000800 	.word	0x40000800
 800cf14:	40000c00 	.word	0x40000c00

0800cf18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d001      	beq.n	800cf30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e044      	b.n	800cfba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2202      	movs	r2, #2
 800cf34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68da      	ldr	r2, [r3, #12]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f042 0201 	orr.w	r2, r2, #1
 800cf46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a1d      	ldr	r2, [pc, #116]	; (800cfc4 <HAL_TIM_Base_Start_IT+0xac>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d018      	beq.n	800cf84 <HAL_TIM_Base_Start_IT+0x6c>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a1c      	ldr	r2, [pc, #112]	; (800cfc8 <HAL_TIM_Base_Start_IT+0xb0>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d013      	beq.n	800cf84 <HAL_TIM_Base_Start_IT+0x6c>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf64:	d00e      	beq.n	800cf84 <HAL_TIM_Base_Start_IT+0x6c>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a18      	ldr	r2, [pc, #96]	; (800cfcc <HAL_TIM_Base_Start_IT+0xb4>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d009      	beq.n	800cf84 <HAL_TIM_Base_Start_IT+0x6c>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a16      	ldr	r2, [pc, #88]	; (800cfd0 <HAL_TIM_Base_Start_IT+0xb8>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d004      	beq.n	800cf84 <HAL_TIM_Base_Start_IT+0x6c>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a15      	ldr	r2, [pc, #84]	; (800cfd4 <HAL_TIM_Base_Start_IT+0xbc>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d111      	bne.n	800cfa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	f003 0307 	and.w	r3, r3, #7
 800cf8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b06      	cmp	r3, #6
 800cf94:	d010      	beq.n	800cfb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f042 0201 	orr.w	r2, r2, #1
 800cfa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfa6:	e007      	b.n	800cfb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f042 0201 	orr.w	r2, r2, #1
 800cfb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3714      	adds	r7, #20
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bc80      	pop	{r7}
 800cfc2:	4770      	bx	lr
 800cfc4:	40012c00 	.word	0x40012c00
 800cfc8:	40013400 	.word	0x40013400
 800cfcc:	40000400 	.word	0x40000400
 800cfd0:	40000800 	.word	0x40000800
 800cfd4:	40000c00 	.word	0x40000c00

0800cfd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	f003 0302 	and.w	r3, r3, #2
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d122      	bne.n	800d034 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	f003 0302 	and.w	r3, r3, #2
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d11b      	bne.n	800d034 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f06f 0202 	mvn.w	r2, #2
 800d004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2201      	movs	r2, #1
 800d00a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	f003 0303 	and.w	r3, r3, #3
 800d016:	2b00      	cmp	r3, #0
 800d018:	d003      	beq.n	800d022 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 f9b1 	bl	800d382 <HAL_TIM_IC_CaptureCallback>
 800d020:	e005      	b.n	800d02e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f9a4 	bl	800d370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f9b3 	bl	800d394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	f003 0304 	and.w	r3, r3, #4
 800d03e:	2b04      	cmp	r3, #4
 800d040:	d122      	bne.n	800d088 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	f003 0304 	and.w	r3, r3, #4
 800d04c:	2b04      	cmp	r3, #4
 800d04e:	d11b      	bne.n	800d088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f06f 0204 	mvn.w	r2, #4
 800d058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2202      	movs	r2, #2
 800d05e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d003      	beq.n	800d076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f987 	bl	800d382 <HAL_TIM_IC_CaptureCallback>
 800d074:	e005      	b.n	800d082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f97a 	bl	800d370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 f989 	bl	800d394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	f003 0308 	and.w	r3, r3, #8
 800d092:	2b08      	cmp	r3, #8
 800d094:	d122      	bne.n	800d0dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	f003 0308 	and.w	r3, r3, #8
 800d0a0:	2b08      	cmp	r3, #8
 800d0a2:	d11b      	bne.n	800d0dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f06f 0208 	mvn.w	r2, #8
 800d0ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2204      	movs	r2, #4
 800d0b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	69db      	ldr	r3, [r3, #28]
 800d0ba:	f003 0303 	and.w	r3, r3, #3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d003      	beq.n	800d0ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f95d 	bl	800d382 <HAL_TIM_IC_CaptureCallback>
 800d0c8:	e005      	b.n	800d0d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 f950 	bl	800d370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f95f 	bl	800d394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	f003 0310 	and.w	r3, r3, #16
 800d0e6:	2b10      	cmp	r3, #16
 800d0e8:	d122      	bne.n	800d130 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	f003 0310 	and.w	r3, r3, #16
 800d0f4:	2b10      	cmp	r3, #16
 800d0f6:	d11b      	bne.n	800d130 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f06f 0210 	mvn.w	r2, #16
 800d100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2208      	movs	r2, #8
 800d106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	69db      	ldr	r3, [r3, #28]
 800d10e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 f933 	bl	800d382 <HAL_TIM_IC_CaptureCallback>
 800d11c:	e005      	b.n	800d12a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f926 	bl	800d370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 f935 	bl	800d394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	691b      	ldr	r3, [r3, #16]
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d10e      	bne.n	800d15c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	f003 0301 	and.w	r3, r3, #1
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d107      	bne.n	800d15c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f06f 0201 	mvn.w	r2, #1
 800d154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7f7 fc16 	bl	8004988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	691b      	ldr	r3, [r3, #16]
 800d162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d166:	2b80      	cmp	r3, #128	; 0x80
 800d168:	d10e      	bne.n	800d188 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d174:	2b80      	cmp	r3, #128	; 0x80
 800d176:	d107      	bne.n	800d188 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fa9d 	bl	800d6c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d192:	2b40      	cmp	r3, #64	; 0x40
 800d194:	d10e      	bne.n	800d1b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1a0:	2b40      	cmp	r3, #64	; 0x40
 800d1a2:	d107      	bne.n	800d1b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d1ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f8f9 	bl	800d3a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	691b      	ldr	r3, [r3, #16]
 800d1ba:	f003 0320 	and.w	r3, r3, #32
 800d1be:	2b20      	cmp	r3, #32
 800d1c0:	d10e      	bne.n	800d1e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	f003 0320 	and.w	r3, r3, #32
 800d1cc:	2b20      	cmp	r3, #32
 800d1ce:	d107      	bne.n	800d1e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f06f 0220 	mvn.w	r2, #32
 800d1d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fa68 	bl	800d6b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d1e0:	bf00      	nop
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d101      	bne.n	800d200 <HAL_TIM_ConfigClockSource+0x18>
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	e0b3      	b.n	800d368 <HAL_TIM_ConfigClockSource+0x180>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2202      	movs	r2, #2
 800d20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d21e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d226:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d238:	d03e      	beq.n	800d2b8 <HAL_TIM_ConfigClockSource+0xd0>
 800d23a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d23e:	f200 8087 	bhi.w	800d350 <HAL_TIM_ConfigClockSource+0x168>
 800d242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d246:	f000 8085 	beq.w	800d354 <HAL_TIM_ConfigClockSource+0x16c>
 800d24a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d24e:	d87f      	bhi.n	800d350 <HAL_TIM_ConfigClockSource+0x168>
 800d250:	2b70      	cmp	r3, #112	; 0x70
 800d252:	d01a      	beq.n	800d28a <HAL_TIM_ConfigClockSource+0xa2>
 800d254:	2b70      	cmp	r3, #112	; 0x70
 800d256:	d87b      	bhi.n	800d350 <HAL_TIM_ConfigClockSource+0x168>
 800d258:	2b60      	cmp	r3, #96	; 0x60
 800d25a:	d050      	beq.n	800d2fe <HAL_TIM_ConfigClockSource+0x116>
 800d25c:	2b60      	cmp	r3, #96	; 0x60
 800d25e:	d877      	bhi.n	800d350 <HAL_TIM_ConfigClockSource+0x168>
 800d260:	2b50      	cmp	r3, #80	; 0x50
 800d262:	d03c      	beq.n	800d2de <HAL_TIM_ConfigClockSource+0xf6>
 800d264:	2b50      	cmp	r3, #80	; 0x50
 800d266:	d873      	bhi.n	800d350 <HAL_TIM_ConfigClockSource+0x168>
 800d268:	2b40      	cmp	r3, #64	; 0x40
 800d26a:	d058      	beq.n	800d31e <HAL_TIM_ConfigClockSource+0x136>
 800d26c:	2b40      	cmp	r3, #64	; 0x40
 800d26e:	d86f      	bhi.n	800d350 <HAL_TIM_ConfigClockSource+0x168>
 800d270:	2b30      	cmp	r3, #48	; 0x30
 800d272:	d064      	beq.n	800d33e <HAL_TIM_ConfigClockSource+0x156>
 800d274:	2b30      	cmp	r3, #48	; 0x30
 800d276:	d86b      	bhi.n	800d350 <HAL_TIM_ConfigClockSource+0x168>
 800d278:	2b20      	cmp	r3, #32
 800d27a:	d060      	beq.n	800d33e <HAL_TIM_ConfigClockSource+0x156>
 800d27c:	2b20      	cmp	r3, #32
 800d27e:	d867      	bhi.n	800d350 <HAL_TIM_ConfigClockSource+0x168>
 800d280:	2b00      	cmp	r3, #0
 800d282:	d05c      	beq.n	800d33e <HAL_TIM_ConfigClockSource+0x156>
 800d284:	2b10      	cmp	r3, #16
 800d286:	d05a      	beq.n	800d33e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800d288:	e062      	b.n	800d350 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6818      	ldr	r0, [r3, #0]
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	6899      	ldr	r1, [r3, #8]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	685a      	ldr	r2, [r3, #4]
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	f000 f97e 	bl	800d59a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d2ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	609a      	str	r2, [r3, #8]
      break;
 800d2b6:	e04e      	b.n	800d356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6818      	ldr	r0, [r3, #0]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	6899      	ldr	r1, [r3, #8]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	f000 f967 	bl	800d59a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	689a      	ldr	r2, [r3, #8]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2da:	609a      	str	r2, [r3, #8]
      break;
 800d2dc:	e03b      	b.n	800d356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6818      	ldr	r0, [r3, #0]
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	6859      	ldr	r1, [r3, #4]
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	f000 f8de 	bl	800d4ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2150      	movs	r1, #80	; 0x50
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 f935 	bl	800d566 <TIM_ITRx_SetConfig>
      break;
 800d2fc:	e02b      	b.n	800d356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6818      	ldr	r0, [r3, #0]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	6859      	ldr	r1, [r3, #4]
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	461a      	mov	r2, r3
 800d30c:	f000 f8fc 	bl	800d508 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2160      	movs	r1, #96	; 0x60
 800d316:	4618      	mov	r0, r3
 800d318:	f000 f925 	bl	800d566 <TIM_ITRx_SetConfig>
      break;
 800d31c:	e01b      	b.n	800d356 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	6859      	ldr	r1, [r3, #4]
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	461a      	mov	r2, r3
 800d32c:	f000 f8be 	bl	800d4ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2140      	movs	r1, #64	; 0x40
 800d336:	4618      	mov	r0, r3
 800d338:	f000 f915 	bl	800d566 <TIM_ITRx_SetConfig>
      break;
 800d33c:	e00b      	b.n	800d356 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4619      	mov	r1, r3
 800d348:	4610      	mov	r0, r2
 800d34a:	f000 f90c 	bl	800d566 <TIM_ITRx_SetConfig>
        break;
 800d34e:	e002      	b.n	800d356 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d350:	bf00      	nop
 800d352:	e000      	b.n	800d356 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d354:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bc80      	pop	{r7}
 800d380:	4770      	bx	lr

0800d382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d38a:	bf00      	nop
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	bc80      	pop	{r7}
 800d392:	4770      	bx	lr

0800d394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bc80      	pop	{r7}
 800d3a4:	4770      	bx	lr

0800d3a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3a6:	b480      	push	{r7}
 800d3a8:	b083      	sub	sp, #12
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3ae:	bf00      	nop
 800d3b0:	370c      	adds	r7, #12
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bc80      	pop	{r7}
 800d3b6:	4770      	bx	lr

0800d3b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a33      	ldr	r2, [pc, #204]	; (800d498 <TIM_Base_SetConfig+0xe0>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d013      	beq.n	800d3f8 <TIM_Base_SetConfig+0x40>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4a32      	ldr	r2, [pc, #200]	; (800d49c <TIM_Base_SetConfig+0xe4>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d00f      	beq.n	800d3f8 <TIM_Base_SetConfig+0x40>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3de:	d00b      	beq.n	800d3f8 <TIM_Base_SetConfig+0x40>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4a2f      	ldr	r2, [pc, #188]	; (800d4a0 <TIM_Base_SetConfig+0xe8>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d007      	beq.n	800d3f8 <TIM_Base_SetConfig+0x40>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4a2e      	ldr	r2, [pc, #184]	; (800d4a4 <TIM_Base_SetConfig+0xec>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d003      	beq.n	800d3f8 <TIM_Base_SetConfig+0x40>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4a2d      	ldr	r2, [pc, #180]	; (800d4a8 <TIM_Base_SetConfig+0xf0>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d108      	bne.n	800d40a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	4313      	orrs	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4a22      	ldr	r2, [pc, #136]	; (800d498 <TIM_Base_SetConfig+0xe0>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d013      	beq.n	800d43a <TIM_Base_SetConfig+0x82>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a21      	ldr	r2, [pc, #132]	; (800d49c <TIM_Base_SetConfig+0xe4>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d00f      	beq.n	800d43a <TIM_Base_SetConfig+0x82>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d420:	d00b      	beq.n	800d43a <TIM_Base_SetConfig+0x82>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4a1e      	ldr	r2, [pc, #120]	; (800d4a0 <TIM_Base_SetConfig+0xe8>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d007      	beq.n	800d43a <TIM_Base_SetConfig+0x82>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4a1d      	ldr	r2, [pc, #116]	; (800d4a4 <TIM_Base_SetConfig+0xec>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d003      	beq.n	800d43a <TIM_Base_SetConfig+0x82>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a1c      	ldr	r2, [pc, #112]	; (800d4a8 <TIM_Base_SetConfig+0xf0>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d108      	bne.n	800d44c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	4313      	orrs	r3, r2
 800d44a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	695b      	ldr	r3, [r3, #20]
 800d456:	4313      	orrs	r3, r2
 800d458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	689a      	ldr	r2, [r3, #8]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a09      	ldr	r2, [pc, #36]	; (800d498 <TIM_Base_SetConfig+0xe0>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d003      	beq.n	800d480 <TIM_Base_SetConfig+0xc8>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a08      	ldr	r2, [pc, #32]	; (800d49c <TIM_Base_SetConfig+0xe4>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d103      	bne.n	800d488 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	691a      	ldr	r2, [r3, #16]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	615a      	str	r2, [r3, #20]
}
 800d48e:	bf00      	nop
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	bc80      	pop	{r7}
 800d496:	4770      	bx	lr
 800d498:	40012c00 	.word	0x40012c00
 800d49c:	40013400 	.word	0x40013400
 800d4a0:	40000400 	.word	0x40000400
 800d4a4:	40000800 	.word	0x40000800
 800d4a8:	40000c00 	.word	0x40000c00

0800d4ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b087      	sub	sp, #28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6a1b      	ldr	r3, [r3, #32]
 800d4bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6a1b      	ldr	r3, [r3, #32]
 800d4c2:	f023 0201 	bic.w	r2, r3, #1
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	699b      	ldr	r3, [r3, #24]
 800d4ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	011b      	lsls	r3, r3, #4
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	f023 030a 	bic.w	r3, r3, #10
 800d4e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d4ea:	697a      	ldr	r2, [r7, #20]
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	693a      	ldr	r2, [r7, #16]
 800d4f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	621a      	str	r2, [r3, #32]
}
 800d4fe:	bf00      	nop
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	bc80      	pop	{r7}
 800d506:	4770      	bx	lr

0800d508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6a1b      	ldr	r3, [r3, #32]
 800d518:	f023 0210 	bic.w	r2, r3, #16
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	699b      	ldr	r3, [r3, #24]
 800d524:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6a1b      	ldr	r3, [r3, #32]
 800d52a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d532:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	031b      	lsls	r3, r3, #12
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d544:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	011b      	lsls	r3, r3, #4
 800d54a:	693a      	ldr	r2, [r7, #16]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	693a      	ldr	r2, [r7, #16]
 800d55a:	621a      	str	r2, [r3, #32]
}
 800d55c:	bf00      	nop
 800d55e:	371c      	adds	r7, #28
 800d560:	46bd      	mov	sp, r7
 800d562:	bc80      	pop	{r7}
 800d564:	4770      	bx	lr

0800d566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d566:	b480      	push	{r7}
 800d568:	b085      	sub	sp, #20
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
 800d56e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d57c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	4313      	orrs	r3, r2
 800d584:	f043 0307 	orr.w	r3, r3, #7
 800d588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	609a      	str	r2, [r3, #8]
}
 800d590:	bf00      	nop
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	bc80      	pop	{r7}
 800d598:	4770      	bx	lr

0800d59a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d59a:	b480      	push	{r7}
 800d59c:	b087      	sub	sp, #28
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	60b9      	str	r1, [r7, #8]
 800d5a4:	607a      	str	r2, [r7, #4]
 800d5a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	021a      	lsls	r2, r3, #8
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	431a      	orrs	r2, r3
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	697a      	ldr	r2, [r7, #20]
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	697a      	ldr	r2, [r7, #20]
 800d5cc:	609a      	str	r2, [r3, #8]
}
 800d5ce:	bf00      	nop
 800d5d0:	371c      	adds	r7, #28
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bc80      	pop	{r7}
 800d5d6:	4770      	bx	lr

0800d5d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d101      	bne.n	800d5f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5ec:	2302      	movs	r3, #2
 800d5ee:	e050      	b.n	800d692 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68fa      	ldr	r2, [r7, #12]
 800d61e:	4313      	orrs	r3, r2
 800d620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4a1b      	ldr	r2, [pc, #108]	; (800d69c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d018      	beq.n	800d666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4a19      	ldr	r2, [pc, #100]	; (800d6a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d013      	beq.n	800d666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d646:	d00e      	beq.n	800d666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a15      	ldr	r2, [pc, #84]	; (800d6a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d009      	beq.n	800d666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a14      	ldr	r2, [pc, #80]	; (800d6a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d004      	beq.n	800d666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a12      	ldr	r2, [pc, #72]	; (800d6ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d10c      	bne.n	800d680 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d66c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	4313      	orrs	r3, r2
 800d676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3714      	adds	r7, #20
 800d696:	46bd      	mov	sp, r7
 800d698:	bc80      	pop	{r7}
 800d69a:	4770      	bx	lr
 800d69c:	40012c00 	.word	0x40012c00
 800d6a0:	40013400 	.word	0x40013400
 800d6a4:	40000400 	.word	0x40000400
 800d6a8:	40000800 	.word	0x40000800
 800d6ac:	40000c00 	.word	0x40000c00

0800d6b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6b8:	bf00      	nop
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bc80      	pop	{r7}
 800d6c0:	4770      	bx	lr

0800d6c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6c2:	b480      	push	{r7}
 800d6c4:	b083      	sub	sp, #12
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6ca:	bf00      	nop
 800d6cc:	370c      	adds	r7, #12
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bc80      	pop	{r7}
 800d6d2:	4770      	bx	lr

0800d6d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d101      	bne.n	800d6e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e03f      	b.n	800d766 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d106      	bne.n	800d700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7f8 fe9a 	bl	8006434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2224      	movs	r2, #36	; 0x24
 800d704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68da      	ldr	r2, [r3, #12]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 f915 	bl	800d948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	691a      	ldr	r2, [r3, #16]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d72c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	695a      	ldr	r2, [r3, #20]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d73c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68da      	ldr	r2, [r3, #12]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d74c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2220      	movs	r2, #32
 800d758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2220      	movs	r2, #32
 800d760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b08a      	sub	sp, #40	; 0x28
 800d772:	af02      	add	r7, sp, #8
 800d774:	60f8      	str	r0, [r7, #12]
 800d776:	60b9      	str	r1, [r7, #8]
 800d778:	603b      	str	r3, [r7, #0]
 800d77a:	4613      	mov	r3, r2
 800d77c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	2b20      	cmp	r3, #32
 800d78c:	f040 808c 	bne.w	800d8a8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d002      	beq.n	800d79c <HAL_UART_Receive+0x2e>
 800d796:	88fb      	ldrh	r3, [r7, #6]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d101      	bne.n	800d7a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e084      	b.n	800d8aa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d101      	bne.n	800d7ae <HAL_UART_Receive+0x40>
 800d7aa:	2302      	movs	r3, #2
 800d7ac:	e07d      	b.n	800d8aa <HAL_UART_Receive+0x13c>
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2222      	movs	r2, #34	; 0x22
 800d7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d7ca:	f7fa f92f 	bl	8007a2c <HAL_GetTick>
 800d7ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	88fa      	ldrh	r2, [r7, #6]
 800d7d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	88fa      	ldrh	r2, [r7, #6]
 800d7da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7e4:	d108      	bne.n	800d7f8 <HAL_UART_Receive+0x8a>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d104      	bne.n	800d7f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	61bb      	str	r3, [r7, #24]
 800d7f6:	e003      	b.n	800d800 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2200      	movs	r2, #0
 800d804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d808:	e043      	b.n	800d892 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	2200      	movs	r2, #0
 800d812:	2120      	movs	r1, #32
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 f84c 	bl	800d8b2 <UART_WaitOnFlagUntilTimeout>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d001      	beq.n	800d824 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800d820:	2303      	movs	r3, #3
 800d822:	e042      	b.n	800d8aa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d10c      	bne.n	800d844 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	b29b      	uxth	r3, r3
 800d832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d836:	b29a      	uxth	r2, r3
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	3302      	adds	r3, #2
 800d840:	61bb      	str	r3, [r7, #24]
 800d842:	e01f      	b.n	800d884 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d84c:	d007      	beq.n	800d85e <HAL_UART_Receive+0xf0>
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d10a      	bne.n	800d86c <HAL_UART_Receive+0xfe>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d106      	bne.n	800d86c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	b2da      	uxtb	r2, r3
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	701a      	strb	r2, [r3, #0]
 800d86a:	e008      	b.n	800d87e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	3301      	adds	r3, #1
 800d882:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d888:	b29b      	uxth	r3, r3
 800d88a:	3b01      	subs	r3, #1
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d896:	b29b      	uxth	r3, r3
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d1b6      	bne.n	800d80a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2220      	movs	r2, #32
 800d8a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	e000      	b.n	800d8aa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800d8a8:	2302      	movs	r3, #2
  }
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3720      	adds	r7, #32
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b084      	sub	sp, #16
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	60f8      	str	r0, [r7, #12]
 800d8ba:	60b9      	str	r1, [r7, #8]
 800d8bc:	603b      	str	r3, [r7, #0]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8c2:	e02c      	b.n	800d91e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8ca:	d028      	beq.n	800d91e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d007      	beq.n	800d8e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800d8d2:	f7fa f8ab 	bl	8007a2c <HAL_GetTick>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	69ba      	ldr	r2, [r7, #24]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d21d      	bcs.n	800d91e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68da      	ldr	r2, [r3, #12]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d8f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	695a      	ldr	r2, [r3, #20]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f022 0201 	bic.w	r2, r2, #1
 800d900:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2220      	movs	r2, #32
 800d906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2220      	movs	r2, #32
 800d90e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2200      	movs	r2, #0
 800d916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d91a:	2303      	movs	r3, #3
 800d91c:	e00f      	b.n	800d93e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	4013      	ands	r3, r2
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	bf0c      	ite	eq
 800d92e:	2301      	moveq	r3, #1
 800d930:	2300      	movne	r3, #0
 800d932:	b2db      	uxtb	r3, r3
 800d934:	461a      	mov	r2, r3
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d0c3      	beq.n	800d8c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d93c:	2300      	movs	r3, #0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	68da      	ldr	r2, [r3, #12]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	430a      	orrs	r2, r1
 800d964:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	689a      	ldr	r2, [r3, #8]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	431a      	orrs	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	695b      	ldr	r3, [r3, #20]
 800d974:	4313      	orrs	r3, r2
 800d976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d982:	f023 030c 	bic.w	r3, r3, #12
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	6812      	ldr	r2, [r2, #0]
 800d98a:	68b9      	ldr	r1, [r7, #8]
 800d98c:	430b      	orrs	r3, r1
 800d98e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	695b      	ldr	r3, [r3, #20]
 800d996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	699a      	ldr	r2, [r3, #24]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a2c      	ldr	r2, [pc, #176]	; (800da5c <UART_SetConfig+0x114>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d103      	bne.n	800d9b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d9b0:	f7fd fbec 	bl	800b18c <HAL_RCC_GetPCLK2Freq>
 800d9b4:	60f8      	str	r0, [r7, #12]
 800d9b6:	e002      	b.n	800d9be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d9b8:	f7fd fbd4 	bl	800b164 <HAL_RCC_GetPCLK1Freq>
 800d9bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	4413      	add	r3, r2
 800d9c6:	009a      	lsls	r2, r3, #2
 800d9c8:	441a      	add	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d4:	4a22      	ldr	r2, [pc, #136]	; (800da60 <UART_SetConfig+0x118>)
 800d9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9da:	095b      	lsrs	r3, r3, #5
 800d9dc:	0119      	lsls	r1, r3, #4
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	4413      	add	r3, r2
 800d9e6:	009a      	lsls	r2, r3, #2
 800d9e8:	441a      	add	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9f4:	4b1a      	ldr	r3, [pc, #104]	; (800da60 <UART_SetConfig+0x118>)
 800d9f6:	fba3 0302 	umull	r0, r3, r3, r2
 800d9fa:	095b      	lsrs	r3, r3, #5
 800d9fc:	2064      	movs	r0, #100	; 0x64
 800d9fe:	fb00 f303 	mul.w	r3, r0, r3
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	011b      	lsls	r3, r3, #4
 800da06:	3332      	adds	r3, #50	; 0x32
 800da08:	4a15      	ldr	r2, [pc, #84]	; (800da60 <UART_SetConfig+0x118>)
 800da0a:	fba2 2303 	umull	r2, r3, r2, r3
 800da0e:	095b      	lsrs	r3, r3, #5
 800da10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da14:	4419      	add	r1, r3
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	4613      	mov	r3, r2
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	4413      	add	r3, r2
 800da1e:	009a      	lsls	r2, r3, #2
 800da20:	441a      	add	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	fbb2 f2f3 	udiv	r2, r2, r3
 800da2c:	4b0c      	ldr	r3, [pc, #48]	; (800da60 <UART_SetConfig+0x118>)
 800da2e:	fba3 0302 	umull	r0, r3, r3, r2
 800da32:	095b      	lsrs	r3, r3, #5
 800da34:	2064      	movs	r0, #100	; 0x64
 800da36:	fb00 f303 	mul.w	r3, r0, r3
 800da3a:	1ad3      	subs	r3, r2, r3
 800da3c:	011b      	lsls	r3, r3, #4
 800da3e:	3332      	adds	r3, #50	; 0x32
 800da40:	4a07      	ldr	r2, [pc, #28]	; (800da60 <UART_SetConfig+0x118>)
 800da42:	fba2 2303 	umull	r2, r3, r2, r3
 800da46:	095b      	lsrs	r3, r3, #5
 800da48:	f003 020f 	and.w	r2, r3, #15
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	440a      	add	r2, r1
 800da52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800da54:	bf00      	nop
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	40013800 	.word	0x40013800
 800da60:	51eb851f 	.word	0x51eb851f

0800da64 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800da64:	b480      	push	{r7}
 800da66:	b087      	sub	sp, #28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	6812      	ldr	r2, [r2, #0]
 800da7c:	f023 0101 	bic.w	r1, r3, #1
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	2b08      	cmp	r3, #8
 800da8c:	d102      	bne.n	800da94 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800da8e:	2340      	movs	r3, #64	; 0x40
 800da90:	617b      	str	r3, [r7, #20]
 800da92:	e001      	b.n	800da98 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800da94:	2300      	movs	r3, #0
 800da96:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800daa4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800daaa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800dab0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800dab6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800dabc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800dac2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800dac8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800dace:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800dad4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800dada:	4313      	orrs	r3, r2
 800dadc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	699b      	ldr	r3, [r3, #24]
 800dae2:	693a      	ldr	r2, [r7, #16]
 800dae4:	4313      	orrs	r3, r2
 800dae6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daec:	693a      	ldr	r2, [r7, #16]
 800daee:	4313      	orrs	r3, r2
 800daf0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800daf2:	4b10      	ldr	r3, [pc, #64]	; (800db34 <FSMC_NORSRAM_Init+0xd0>)
 800daf4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dafc:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800db04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	43db      	mvns	r3, r3
 800db14:	ea02 0103 	and.w	r1, r2, r3
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	4319      	orrs	r1, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	371c      	adds	r7, #28
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bc80      	pop	{r7}
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	0008fb7f 	.word	0x0008fb7f

0800db38 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	1c5a      	adds	r2, r3, #1
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db4e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	011b      	lsls	r3, r3, #4
 800db5c:	431a      	orrs	r2, r3
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	021b      	lsls	r3, r3, #8
 800db64:	431a      	orrs	r2, r3
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	041b      	lsls	r3, r3, #16
 800db6c:	431a      	orrs	r2, r3
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	3b01      	subs	r3, #1
 800db74:	051b      	lsls	r3, r3, #20
 800db76:	431a      	orrs	r2, r3
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	695b      	ldr	r3, [r3, #20]
 800db7c:	3b02      	subs	r3, #2
 800db7e:	061b      	lsls	r3, r3, #24
 800db80:	431a      	orrs	r2, r3
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	699b      	ldr	r3, [r3, #24]
 800db86:	4313      	orrs	r3, r2
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	3201      	adds	r2, #1
 800db8c:	4319      	orrs	r1, r3
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3714      	adds	r7, #20
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bc80      	pop	{r7}
 800db9e:	4770      	bx	lr

0800dba0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	60b9      	str	r1, [r7, #8]
 800dbaa:	607a      	str	r2, [r7, #4]
 800dbac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbb4:	d11d      	bne.n	800dbf2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dbbe:	4b13      	ldr	r3, [pc, #76]	; (800dc0c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	6811      	ldr	r1, [r2, #0]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	6852      	ldr	r2, [r2, #4]
 800dbca:	0112      	lsls	r2, r2, #4
 800dbcc:	4311      	orrs	r1, r2
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	6892      	ldr	r2, [r2, #8]
 800dbd2:	0212      	lsls	r2, r2, #8
 800dbd4:	4311      	orrs	r1, r2
 800dbd6:	68ba      	ldr	r2, [r7, #8]
 800dbd8:	6992      	ldr	r2, [r2, #24]
 800dbda:	4311      	orrs	r1, r2
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	68d2      	ldr	r2, [r2, #12]
 800dbe0:	0412      	lsls	r2, r2, #16
 800dbe2:	430a      	orrs	r2, r1
 800dbe4:	ea43 0102 	orr.w	r1, r3, r2
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800dbf0:	e005      	b.n	800dbfe <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800dbfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3714      	adds	r7, #20
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bc80      	pop	{r7}
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	cff00000 	.word	0xcff00000

0800dc10 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800dc10:	b084      	sub	sp, #16
 800dc12:	b480      	push	{r7}
 800dc14:	b085      	sub	sp, #20
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	f107 001c 	add.w	r0, r7, #28
 800dc1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800dc26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800dc28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dc2a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800dc2e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800dc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800dc32:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800dc36:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dc3a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dc3c:	68fa      	ldr	r2, [r7, #12]
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800dc4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	431a      	orrs	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bc80      	pop	{r7}
 800dc60:	b004      	add	sp, #16
 800dc62:	4770      	bx	lr

0800dc64 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	370c      	adds	r7, #12
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bc80      	pop	{r7}
 800dc7a:	4770      	bx	lr

0800dc7c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	370c      	adds	r7, #12
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bc80      	pop	{r7}
 800dc9a:	4770      	bx	lr

0800dc9c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2203      	movs	r2, #3
 800dca8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800dcaa:	2002      	movs	r0, #2
 800dcac:	f7f9 fec8 	bl	8007a40 <HAL_Delay>
  
  return HAL_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b083      	sub	sp, #12
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f003 0303 	and.w	r3, r3, #3
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bc80      	pop	{r7}
 800dcd2:	4770      	bx	lr

0800dcd4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dcf2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800dcf8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800dcfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dd0e:	f023 030f 	bic.w	r3, r3, #15
 800dd12:	68fa      	ldr	r2, [r7, #12]
 800dd14:	431a      	orrs	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3714      	adds	r7, #20
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bc80      	pop	{r7}
 800dd24:	4770      	bx	lr

0800dd26 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b083      	sub	sp, #12
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	691b      	ldr	r3, [r3, #16]
 800dd32:	b2db      	uxtb	r3, r3
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bc80      	pop	{r7}
 800dd3c:	4770      	bx	lr

0800dd3e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800dd3e:	b480      	push	{r7}
 800dd40:	b085      	sub	sp, #20
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3314      	adds	r3, #20
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	4413      	add	r3, r2
 800dd52:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
}  
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bc80      	pop	{r7}
 800dd60:	4770      	bx	lr

0800dd62 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b085      	sub	sp, #20
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dd88:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800dd8e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800dd94:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	431a      	orrs	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ddac:	2300      	movs	r3, #0

}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3714      	adds	r7, #20
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bc80      	pop	{r7}
 800ddb6:	4770      	bx	lr

0800ddb8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b088      	sub	sp, #32
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ddc6:	2310      	movs	r3, #16
 800ddc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ddca:	2340      	movs	r3, #64	; 0x40
 800ddcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddd8:	f107 0308 	add.w	r3, r7, #8
 800dddc:	4619      	mov	r1, r3
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f7ff ff78 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800dde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dde8:	2110      	movs	r1, #16
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fa42 	bl	800e274 <SDMMC_GetCmdResp1>
 800ddf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddf2:	69fb      	ldr	r3, [r7, #28]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3720      	adds	r7, #32
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b088      	sub	sp, #32
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800de0a:	2311      	movs	r3, #17
 800de0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de0e:	2340      	movs	r3, #64	; 0x40
 800de10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de12:	2300      	movs	r3, #0
 800de14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de1c:	f107 0308 	add.w	r3, r7, #8
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f7ff ff56 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800de28:	f241 3288 	movw	r2, #5000	; 0x1388
 800de2c:	2111      	movs	r1, #17
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fa20 	bl	800e274 <SDMMC_GetCmdResp1>
 800de34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de36:	69fb      	ldr	r3, [r7, #28]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3720      	adds	r7, #32
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b088      	sub	sp, #32
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800de4e:	2312      	movs	r3, #18
 800de50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de52:	2340      	movs	r3, #64	; 0x40
 800de54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de56:	2300      	movs	r3, #0
 800de58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de60:	f107 0308 	add.w	r3, r7, #8
 800de64:	4619      	mov	r1, r3
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7ff ff34 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800de6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800de70:	2112      	movs	r1, #18
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 f9fe 	bl	800e274 <SDMMC_GetCmdResp1>
 800de78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de7a:	69fb      	ldr	r3, [r7, #28]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3720      	adds	r7, #32
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b088      	sub	sp, #32
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800de92:	2318      	movs	r3, #24
 800de94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de96:	2340      	movs	r3, #64	; 0x40
 800de98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de9a:	2300      	movs	r3, #0
 800de9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dea2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dea4:	f107 0308 	add.w	r3, r7, #8
 800dea8:	4619      	mov	r1, r3
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f7ff ff12 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800deb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800deb4:	2118      	movs	r1, #24
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f9dc 	bl	800e274 <SDMMC_GetCmdResp1>
 800debc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800debe:	69fb      	ldr	r3, [r7, #28]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3720      	adds	r7, #32
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b088      	sub	sp, #32
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ded6:	2319      	movs	r3, #25
 800ded8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800deda:	2340      	movs	r3, #64	; 0x40
 800dedc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dede:	2300      	movs	r3, #0
 800dee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dee6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dee8:	f107 0308 	add.w	r3, r7, #8
 800deec:	4619      	mov	r1, r3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff fef0 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800def4:	f241 3288 	movw	r2, #5000	; 0x1388
 800def8:	2119      	movs	r1, #25
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 f9ba 	bl	800e274 <SDMMC_GetCmdResp1>
 800df00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df02:	69fb      	ldr	r3, [r7, #28]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3720      	adds	r7, #32
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b088      	sub	sp, #32
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800df14:	2300      	movs	r3, #0
 800df16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800df18:	230c      	movs	r3, #12
 800df1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df1c:	2340      	movs	r3, #64	; 0x40
 800df1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df20:	2300      	movs	r3, #0
 800df22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df2a:	f107 0308 	add.w	r3, r7, #8
 800df2e:	4619      	mov	r1, r3
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff fecf 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800df36:	4a05      	ldr	r2, [pc, #20]	; (800df4c <SDMMC_CmdStopTransfer+0x40>)
 800df38:	210c      	movs	r1, #12
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 f99a 	bl	800e274 <SDMMC_GetCmdResp1>
 800df40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df42:	69fb      	ldr	r3, [r7, #28]
}
 800df44:	4618      	mov	r0, r3
 800df46:	3720      	adds	r7, #32
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	05f5e100 	.word	0x05f5e100

0800df50 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08a      	sub	sp, #40	; 0x28
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800df60:	2307      	movs	r3, #7
 800df62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df64:	2340      	movs	r3, #64	; 0x40
 800df66:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df68:	2300      	movs	r3, #0
 800df6a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df70:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df72:	f107 0310 	add.w	r3, r7, #16
 800df76:	4619      	mov	r1, r3
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f7ff feab 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800df7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800df82:	2107      	movs	r1, #7
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 f975 	bl	800e274 <SDMMC_GetCmdResp1>
 800df8a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3728      	adds	r7, #40	; 0x28
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800df96:	b580      	push	{r7, lr}
 800df98:	b088      	sub	sp, #32
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfb4:	f107 0308 	add.w	r3, r7, #8
 800dfb8:	4619      	mov	r1, r3
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7ff fe8a 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 f92d 	bl	800e220 <SDMMC_GetCmdError>
 800dfc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfc8:	69fb      	ldr	r3, [r7, #28]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3720      	adds	r7, #32
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b088      	sub	sp, #32
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dfda:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dfde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dfe0:	2308      	movs	r3, #8
 800dfe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfe4:	2340      	movs	r3, #64	; 0x40
 800dfe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dff2:	f107 0308 	add.w	r3, r7, #8
 800dff6:	4619      	mov	r1, r3
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff fe6b 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fb20 	bl	800e644 <SDMMC_GetCmdResp7>
 800e004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e006:	69fb      	ldr	r3, [r7, #28]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3720      	adds	r7, #32
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b088      	sub	sp, #32
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e01e:	2337      	movs	r3, #55	; 0x37
 800e020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e022:	2340      	movs	r3, #64	; 0x40
 800e024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e026:	2300      	movs	r3, #0
 800e028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e02a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e02e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e030:	f107 0308 	add.w	r3, r7, #8
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff fe4c 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e040:	2137      	movs	r1, #55	; 0x37
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f916 	bl	800e274 <SDMMC_GetCmdResp1>
 800e048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e04a:	69fb      	ldr	r3, [r7, #28]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3720      	adds	r7, #32
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b088      	sub	sp, #32
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e06a:	2329      	movs	r3, #41	; 0x29
 800e06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e06e:	2340      	movs	r3, #64	; 0x40
 800e070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e072:	2300      	movs	r3, #0
 800e074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e07a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e07c:	f107 0308 	add.w	r3, r7, #8
 800e080:	4619      	mov	r1, r3
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7ff fe26 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 fa29 	bl	800e4e0 <SDMMC_GetCmdResp3>
 800e08e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e090:	69fb      	ldr	r3, [r7, #28]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3720      	adds	r7, #32
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b088      	sub	sp, #32
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e0a8:	2306      	movs	r3, #6
 800e0aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0ac:	2340      	movs	r3, #64	; 0x40
 800e0ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0ba:	f107 0308 	add.w	r3, r7, #8
 800e0be:	4619      	mov	r1, r3
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7ff fe07 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e0c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0ca:	2106      	movs	r1, #6
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 f8d1 	bl	800e274 <SDMMC_GetCmdResp1>
 800e0d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0d4:	69fb      	ldr	r3, [r7, #28]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3720      	adds	r7, #32
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b088      	sub	sp, #32
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e0ea:	2333      	movs	r3, #51	; 0x33
 800e0ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0ee:	2340      	movs	r3, #64	; 0x40
 800e0f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0fc:	f107 0308 	add.w	r3, r7, #8
 800e100:	4619      	mov	r1, r3
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f7ff fde6 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e108:	f241 3288 	movw	r2, #5000	; 0x1388
 800e10c:	2133      	movs	r1, #51	; 0x33
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 f8b0 	bl	800e274 <SDMMC_GetCmdResp1>
 800e114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e116:	69fb      	ldr	r3, [r7, #28]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b088      	sub	sp, #32
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e128:	2300      	movs	r3, #0
 800e12a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e12c:	2302      	movs	r3, #2
 800e12e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e130:	23c0      	movs	r3, #192	; 0xc0
 800e132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e134:	2300      	movs	r3, #0
 800e136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e13c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e13e:	f107 0308 	add.w	r3, r7, #8
 800e142:	4619      	mov	r1, r3
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7ff fdc5 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 f980 	bl	800e450 <SDMMC_GetCmdResp2>
 800e150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e152:	69fb      	ldr	r3, [r7, #28]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3720      	adds	r7, #32
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b088      	sub	sp, #32
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e16a:	2309      	movs	r3, #9
 800e16c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e16e:	23c0      	movs	r3, #192	; 0xc0
 800e170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e172:	2300      	movs	r3, #0
 800e174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e17a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e17c:	f107 0308 	add.w	r3, r7, #8
 800e180:	4619      	mov	r1, r3
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff fda6 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f961 	bl	800e450 <SDMMC_GetCmdResp2>
 800e18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e190:	69fb      	ldr	r3, [r7, #28]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3720      	adds	r7, #32
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b088      	sub	sp, #32
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1ac:	2340      	movs	r3, #64	; 0x40
 800e1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1ba:	f107 0308 	add.w	r3, r7, #8
 800e1be:	4619      	mov	r1, r3
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff fd87 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	2103      	movs	r1, #3
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 f9c4 	bl	800e558 <SDMMC_GetCmdResp6>
 800e1d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1d2:	69fb      	ldr	r3, [r7, #28]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3720      	adds	r7, #32
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b088      	sub	sp, #32
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e1ea:	230d      	movs	r3, #13
 800e1ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1ee:	2340      	movs	r3, #64	; 0x40
 800e1f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1fc:	f107 0308 	add.w	r3, r7, #8
 800e200:	4619      	mov	r1, r3
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7ff fd66 	bl	800dcd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e208:	f241 3288 	movw	r2, #5000	; 0x1388
 800e20c:	210d      	movs	r1, #13
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 f830 	bl	800e274 <SDMMC_GetCmdResp1>
 800e214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e216:	69fb      	ldr	r3, [r7, #28]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3720      	adds	r7, #32
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e220:	b480      	push	{r7}
 800e222:	b085      	sub	sp, #20
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e228:	4b10      	ldr	r3, [pc, #64]	; (800e26c <SDMMC_GetCmdError+0x4c>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a10      	ldr	r2, [pc, #64]	; (800e270 <SDMMC_GetCmdError+0x50>)
 800e22e:	fba2 2303 	umull	r2, r3, r2, r3
 800e232:	0a5b      	lsrs	r3, r3, #9
 800e234:	f241 3288 	movw	r2, #5000	; 0x1388
 800e238:	fb02 f303 	mul.w	r3, r2, r3
 800e23c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	1e5a      	subs	r2, r3, #1
 800e242:	60fa      	str	r2, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d102      	bne.n	800e24e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e24c:	e009      	b.n	800e262 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e256:	2b00      	cmp	r3, #0
 800e258:	d0f1      	beq.n	800e23e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	22c5      	movs	r2, #197	; 0xc5
 800e25e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	bc80      	pop	{r7}
 800e26a:	4770      	bx	lr
 800e26c:	20000040 	.word	0x20000040
 800e270:	10624dd3 	.word	0x10624dd3

0800e274 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b088      	sub	sp, #32
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	460b      	mov	r3, r1
 800e27e:	607a      	str	r2, [r7, #4]
 800e280:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e282:	4b70      	ldr	r3, [pc, #448]	; (800e444 <SDMMC_GetCmdResp1+0x1d0>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a70      	ldr	r2, [pc, #448]	; (800e448 <SDMMC_GetCmdResp1+0x1d4>)
 800e288:	fba2 2303 	umull	r2, r3, r2, r3
 800e28c:	0a5a      	lsrs	r2, r3, #9
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	fb02 f303 	mul.w	r3, r2, r3
 800e294:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	1e5a      	subs	r2, r3, #1
 800e29a:	61fa      	str	r2, [r7, #28]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d102      	bne.n	800e2a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2a4:	e0c9      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2aa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d0ef      	beq.n	800e296 <SDMMC_GetCmdResp1+0x22>
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1ea      	bne.n	800e296 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c4:	f003 0304 	and.w	r3, r3, #4
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d004      	beq.n	800e2d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2204      	movs	r2, #4
 800e2d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2d2:	2304      	movs	r3, #4
 800e2d4:	e0b1      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2da:	f003 0301 	and.w	r3, r3, #1
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d004      	beq.n	800e2ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e0a6      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	22c5      	movs	r2, #197	; 0xc5
 800e2f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f7ff fd17 	bl	800dd26 <SDIO_GetCommandResponse>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	7afb      	ldrb	r3, [r7, #11]
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d001      	beq.n	800e306 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e302:	2301      	movs	r3, #1
 800e304:	e099      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e306:	2100      	movs	r1, #0
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f7ff fd18 	bl	800dd3e <SDIO_GetResponse>
 800e30e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e310:	697a      	ldr	r2, [r7, #20]
 800e312:	4b4e      	ldr	r3, [pc, #312]	; (800e44c <SDMMC_GetCmdResp1+0x1d8>)
 800e314:	4013      	ands	r3, r2
 800e316:	2b00      	cmp	r3, #0
 800e318:	d101      	bne.n	800e31e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e31a:	2300      	movs	r3, #0
 800e31c:	e08d      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	2b00      	cmp	r3, #0
 800e322:	da02      	bge.n	800e32a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e328:	e087      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e334:	2340      	movs	r3, #64	; 0x40
 800e336:	e080      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e342:	2380      	movs	r3, #128	; 0x80
 800e344:	e079      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e350:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e354:	e071      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d002      	beq.n	800e366 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e360:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e364:	e069      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d002      	beq.n	800e376 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e374:	e061      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d002      	beq.n	800e386 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e384:	e059      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d002      	beq.n	800e396 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e394:	e051      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d002      	beq.n	800e3a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e3a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3a4:	e049      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d002      	beq.n	800e3b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e3b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e3b4:	e041      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d002      	beq.n	800e3c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e3c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3c4:	e039      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d002      	beq.n	800e3d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e3d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e3d4:	e031      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d002      	beq.n	800e3e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e3e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e3e4:	e029      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d002      	beq.n	800e3f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e3f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e3f4:	e021      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d002      	beq.n	800e406 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e404:	e019      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d002      	beq.n	800e416 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e410:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e414:	e011      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d002      	beq.n	800e426 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e420:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e424:	e009      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	f003 0308 	and.w	r3, r3, #8
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e430:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e434:	e001      	b.n	800e43a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3720      	adds	r7, #32
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	20000040 	.word	0x20000040
 800e448:	10624dd3 	.word	0x10624dd3
 800e44c:	fdffe008 	.word	0xfdffe008

0800e450 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e458:	4b1f      	ldr	r3, [pc, #124]	; (800e4d8 <SDMMC_GetCmdResp2+0x88>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4a1f      	ldr	r2, [pc, #124]	; (800e4dc <SDMMC_GetCmdResp2+0x8c>)
 800e45e:	fba2 2303 	umull	r2, r3, r2, r3
 800e462:	0a5b      	lsrs	r3, r3, #9
 800e464:	f241 3288 	movw	r2, #5000	; 0x1388
 800e468:	fb02 f303 	mul.w	r3, r2, r3
 800e46c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	1e5a      	subs	r2, r3, #1
 800e472:	60fa      	str	r2, [r7, #12]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d102      	bne.n	800e47e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e47c:	e026      	b.n	800e4cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e482:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d0ef      	beq.n	800e46e <SDMMC_GetCmdResp2+0x1e>
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e494:	2b00      	cmp	r3, #0
 800e496:	d1ea      	bne.n	800e46e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49c:	f003 0304 	and.w	r3, r3, #4
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d004      	beq.n	800e4ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2204      	movs	r2, #4
 800e4a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4aa:	2304      	movs	r3, #4
 800e4ac:	e00e      	b.n	800e4cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b2:	f003 0301 	and.w	r3, r3, #1
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d004      	beq.n	800e4c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e003      	b.n	800e4cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	22c5      	movs	r2, #197	; 0xc5
 800e4c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3714      	adds	r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bc80      	pop	{r7}
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	20000040 	.word	0x20000040
 800e4dc:	10624dd3 	.word	0x10624dd3

0800e4e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b085      	sub	sp, #20
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4e8:	4b19      	ldr	r3, [pc, #100]	; (800e550 <SDMMC_GetCmdResp3+0x70>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a19      	ldr	r2, [pc, #100]	; (800e554 <SDMMC_GetCmdResp3+0x74>)
 800e4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e4f2:	0a5b      	lsrs	r3, r3, #9
 800e4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4f8:	fb02 f303 	mul.w	r3, r2, r3
 800e4fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	1e5a      	subs	r2, r3, #1
 800e502:	60fa      	str	r2, [r7, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d102      	bne.n	800e50e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e50c:	e01b      	b.n	800e546 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e512:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0ef      	beq.n	800e4fe <SDMMC_GetCmdResp3+0x1e>
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e524:	2b00      	cmp	r3, #0
 800e526:	d1ea      	bne.n	800e4fe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e52c:	f003 0304 	and.w	r3, r3, #4
 800e530:	2b00      	cmp	r3, #0
 800e532:	d004      	beq.n	800e53e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2204      	movs	r2, #4
 800e538:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e53a:	2304      	movs	r3, #4
 800e53c:	e003      	b.n	800e546 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	22c5      	movs	r2, #197	; 0xc5
 800e542:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e544:	2300      	movs	r3, #0
}
 800e546:	4618      	mov	r0, r3
 800e548:	3714      	adds	r7, #20
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bc80      	pop	{r7}
 800e54e:	4770      	bx	lr
 800e550:	20000040 	.word	0x20000040
 800e554:	10624dd3 	.word	0x10624dd3

0800e558 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	460b      	mov	r3, r1
 800e562:	607a      	str	r2, [r7, #4]
 800e564:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e566:	4b35      	ldr	r3, [pc, #212]	; (800e63c <SDMMC_GetCmdResp6+0xe4>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a35      	ldr	r2, [pc, #212]	; (800e640 <SDMMC_GetCmdResp6+0xe8>)
 800e56c:	fba2 2303 	umull	r2, r3, r2, r3
 800e570:	0a5b      	lsrs	r3, r3, #9
 800e572:	f241 3288 	movw	r2, #5000	; 0x1388
 800e576:	fb02 f303 	mul.w	r3, r2, r3
 800e57a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	1e5a      	subs	r2, r3, #1
 800e580:	61fa      	str	r2, [r7, #28]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d102      	bne.n	800e58c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e586:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e58a:	e052      	b.n	800e632 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e590:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e592:	69bb      	ldr	r3, [r7, #24]
 800e594:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d0ef      	beq.n	800e57c <SDMMC_GetCmdResp6+0x24>
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1ea      	bne.n	800e57c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5aa:	f003 0304 	and.w	r3, r3, #4
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d004      	beq.n	800e5bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2204      	movs	r2, #4
 800e5b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5b8:	2304      	movs	r3, #4
 800e5ba:	e03a      	b.n	800e632 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c0:	f003 0301 	and.w	r3, r3, #1
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d004      	beq.n	800e5d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e02f      	b.n	800e632 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f7ff fba7 	bl	800dd26 <SDIO_GetCommandResponse>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	461a      	mov	r2, r3
 800e5dc:	7afb      	ldrb	r3, [r7, #11]
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d001      	beq.n	800e5e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e025      	b.n	800e632 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	22c5      	movs	r2, #197	; 0xc5
 800e5ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f7ff fba5 	bl	800dd3e <SDIO_GetResponse>
 800e5f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d106      	bne.n	800e60e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	0c1b      	lsrs	r3, r3, #16
 800e604:	b29a      	uxth	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e60a:	2300      	movs	r3, #0
 800e60c:	e011      	b.n	800e632 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e614:	2b00      	cmp	r3, #0
 800e616:	d002      	beq.n	800e61e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e61c:	e009      	b.n	800e632 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e624:	2b00      	cmp	r3, #0
 800e626:	d002      	beq.n	800e62e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e62c:	e001      	b.n	800e632 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e62e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e632:	4618      	mov	r0, r3
 800e634:	3720      	adds	r7, #32
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20000040 	.word	0x20000040
 800e640:	10624dd3 	.word	0x10624dd3

0800e644 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e64c:	4b22      	ldr	r3, [pc, #136]	; (800e6d8 <SDMMC_GetCmdResp7+0x94>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a22      	ldr	r2, [pc, #136]	; (800e6dc <SDMMC_GetCmdResp7+0x98>)
 800e652:	fba2 2303 	umull	r2, r3, r2, r3
 800e656:	0a5b      	lsrs	r3, r3, #9
 800e658:	f241 3288 	movw	r2, #5000	; 0x1388
 800e65c:	fb02 f303 	mul.w	r3, r2, r3
 800e660:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	1e5a      	subs	r2, r3, #1
 800e666:	60fa      	str	r2, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d102      	bne.n	800e672 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e66c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e670:	e02c      	b.n	800e6cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e676:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d0ef      	beq.n	800e662 <SDMMC_GetCmdResp7+0x1e>
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1ea      	bne.n	800e662 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e690:	f003 0304 	and.w	r3, r3, #4
 800e694:	2b00      	cmp	r3, #0
 800e696:	d004      	beq.n	800e6a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2204      	movs	r2, #4
 800e69c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e69e:	2304      	movs	r3, #4
 800e6a0:	e014      	b.n	800e6cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6a6:	f003 0301 	and.w	r3, r3, #1
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d004      	beq.n	800e6b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	e009      	b.n	800e6cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d002      	beq.n	800e6ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2240      	movs	r2, #64	; 0x40
 800e6c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e6ca:	2300      	movs	r3, #0
  
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3714      	adds	r7, #20
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bc80      	pop	{r7}
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	20000040 	.word	0x20000040
 800e6dc:	10624dd3 	.word	0x10624dd3

0800e6e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e6e4:	4904      	ldr	r1, [pc, #16]	; (800e6f8 <MX_FATFS_Init+0x18>)
 800e6e6:	4805      	ldr	r0, [pc, #20]	; (800e6fc <MX_FATFS_Init+0x1c>)
 800e6e8:	f003 fd62 	bl	80121b0 <FATFS_LinkDriver>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	4b03      	ldr	r3, [pc, #12]	; (800e700 <MX_FATFS_Init+0x20>)
 800e6f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e6f4:	bf00      	nop
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	20006240 	.word	0x20006240
 800e6fc:	080161ec 	.word	0x080161ec
 800e700:	2000623c 	.word	0x2000623c

0800e704 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e704:	b480      	push	{r7}
 800e706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e708:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bc80      	pop	{r7}
 800e710:	4770      	bx	lr
	...

0800e714 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e71e:	f000 f86b 	bl	800e7f8 <BSP_SD_IsDetected>
 800e722:	4603      	mov	r3, r0
 800e724:	2b01      	cmp	r3, #1
 800e726:	d001      	beq.n	800e72c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e728:	2301      	movs	r3, #1
 800e72a:	e005      	b.n	800e738 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e72c:	4804      	ldr	r0, [pc, #16]	; (800e740 <BSP_SD_Init+0x2c>)
 800e72e:	f7fc fef9 	bl	800b524 <HAL_SD_Init>
 800e732:	4603      	mov	r3, r0
 800e734:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e736:	79fb      	ldrb	r3, [r7, #7]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	200025ec 	.word	0x200025ec

0800e744 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b088      	sub	sp, #32
 800e748:	af02      	add	r7, sp, #8
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
 800e750:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e752:	2300      	movs	r3, #0
 800e754:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	9300      	str	r3, [sp, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	68f9      	ldr	r1, [r7, #12]
 800e760:	4806      	ldr	r0, [pc, #24]	; (800e77c <BSP_SD_ReadBlocks+0x38>)
 800e762:	f7fc ff8d 	bl	800b680 <HAL_SD_ReadBlocks>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d001      	beq.n	800e770 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e770:	7dfb      	ldrb	r3, [r7, #23]
}
 800e772:	4618      	mov	r0, r3
 800e774:	3718      	adds	r7, #24
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	200025ec 	.word	0x200025ec

0800e780 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b088      	sub	sp, #32
 800e784:	af02      	add	r7, sp, #8
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	60b9      	str	r1, [r7, #8]
 800e78a:	607a      	str	r2, [r7, #4]
 800e78c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e78e:	2300      	movs	r3, #0
 800e790:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	68f9      	ldr	r1, [r7, #12]
 800e79c:	4806      	ldr	r0, [pc, #24]	; (800e7b8 <BSP_SD_WriteBlocks+0x38>)
 800e79e:	f7fd f94d 	bl	800ba3c <HAL_SD_WriteBlocks>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3718      	adds	r7, #24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	200025ec 	.word	0x200025ec

0800e7bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e7c0:	4805      	ldr	r0, [pc, #20]	; (800e7d8 <BSP_SD_GetCardState+0x1c>)
 800e7c2:	f7fd fd2b 	bl	800c21c <HAL_SD_GetCardState>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b04      	cmp	r3, #4
 800e7ca:	bf14      	ite	ne
 800e7cc:	2301      	movne	r3, #1
 800e7ce:	2300      	moveq	r3, #0
 800e7d0:	b2db      	uxtb	r3, r3
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	200025ec 	.word	0x200025ec

0800e7dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e7e4:	6879      	ldr	r1, [r7, #4]
 800e7e6:	4803      	ldr	r0, [pc, #12]	; (800e7f4 <BSP_SD_GetCardInfo+0x18>)
 800e7e8:	f7fd fc52 	bl	800c090 <HAL_SD_GetCardInfo>
}
 800e7ec:	bf00      	nop
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	200025ec 	.word	0x200025ec

0800e7f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e7fe:	2301      	movs	r3, #1
 800e800:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e802:	79fb      	ldrb	r3, [r7, #7]
 800e804:	b2db      	uxtb	r3, r3
}
 800e806:	4618      	mov	r0, r3
 800e808:	370c      	adds	r7, #12
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bc80      	pop	{r7}
 800e80e:	4770      	bx	lr

0800e810 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	4603      	mov	r3, r0
 800e818:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e81a:	79fb      	ldrb	r3, [r7, #7]
 800e81c:	4a08      	ldr	r2, [pc, #32]	; (800e840 <disk_status+0x30>)
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	4413      	add	r3, r2
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	79fa      	ldrb	r2, [r7, #7]
 800e828:	4905      	ldr	r1, [pc, #20]	; (800e840 <disk_status+0x30>)
 800e82a:	440a      	add	r2, r1
 800e82c:	7a12      	ldrb	r2, [r2, #8]
 800e82e:	4610      	mov	r0, r2
 800e830:	4798      	blx	r3
 800e832:	4603      	mov	r3, r0
 800e834:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e836:	7bfb      	ldrb	r3, [r7, #15]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	20006264 	.word	0x20006264

0800e844 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	4603      	mov	r3, r0
 800e84c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e84e:	2300      	movs	r3, #0
 800e850:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800e852:	79fb      	ldrb	r3, [r7, #7]
 800e854:	4a0d      	ldr	r2, [pc, #52]	; (800e88c <disk_initialize+0x48>)
 800e856:	5cd3      	ldrb	r3, [r2, r3]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d111      	bne.n	800e880 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800e85c:	79fb      	ldrb	r3, [r7, #7]
 800e85e:	4a0b      	ldr	r2, [pc, #44]	; (800e88c <disk_initialize+0x48>)
 800e860:	2101      	movs	r1, #1
 800e862:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e864:	79fb      	ldrb	r3, [r7, #7]
 800e866:	4a09      	ldr	r2, [pc, #36]	; (800e88c <disk_initialize+0x48>)
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	4413      	add	r3, r2
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	79fa      	ldrb	r2, [r7, #7]
 800e872:	4906      	ldr	r1, [pc, #24]	; (800e88c <disk_initialize+0x48>)
 800e874:	440a      	add	r2, r1
 800e876:	7a12      	ldrb	r2, [r2, #8]
 800e878:	4610      	mov	r0, r2
 800e87a:	4798      	blx	r3
 800e87c:	4603      	mov	r3, r0
 800e87e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e880:	7bfb      	ldrb	r3, [r7, #15]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	20006264 	.word	0x20006264

0800e890 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e890:	b590      	push	{r4, r7, lr}
 800e892:	b087      	sub	sp, #28
 800e894:	af00      	add	r7, sp, #0
 800e896:	60b9      	str	r1, [r7, #8]
 800e898:	607a      	str	r2, [r7, #4]
 800e89a:	603b      	str	r3, [r7, #0]
 800e89c:	4603      	mov	r3, r0
 800e89e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e8a0:	7bfb      	ldrb	r3, [r7, #15]
 800e8a2:	4a0a      	ldr	r2, [pc, #40]	; (800e8cc <disk_read+0x3c>)
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	4413      	add	r3, r2
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	689c      	ldr	r4, [r3, #8]
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	4a07      	ldr	r2, [pc, #28]	; (800e8cc <disk_read+0x3c>)
 800e8b0:	4413      	add	r3, r2
 800e8b2:	7a18      	ldrb	r0, [r3, #8]
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	68b9      	ldr	r1, [r7, #8]
 800e8ba:	47a0      	blx	r4
 800e8bc:	4603      	mov	r3, r0
 800e8be:	75fb      	strb	r3, [r7, #23]
  return res;
 800e8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	371c      	adds	r7, #28
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd90      	pop	{r4, r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20006264 	.word	0x20006264

0800e8d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e8d0:	b590      	push	{r4, r7, lr}
 800e8d2:	b087      	sub	sp, #28
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60b9      	str	r1, [r7, #8]
 800e8d8:	607a      	str	r2, [r7, #4]
 800e8da:	603b      	str	r3, [r7, #0]
 800e8dc:	4603      	mov	r3, r0
 800e8de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e8e0:	7bfb      	ldrb	r3, [r7, #15]
 800e8e2:	4a0a      	ldr	r2, [pc, #40]	; (800e90c <disk_write+0x3c>)
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	4413      	add	r3, r2
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	68dc      	ldr	r4, [r3, #12]
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	4a07      	ldr	r2, [pc, #28]	; (800e90c <disk_write+0x3c>)
 800e8f0:	4413      	add	r3, r2
 800e8f2:	7a18      	ldrb	r0, [r3, #8]
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	68b9      	ldr	r1, [r7, #8]
 800e8fa:	47a0      	blx	r4
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800e900:	7dfb      	ldrb	r3, [r7, #23]
}
 800e902:	4618      	mov	r0, r3
 800e904:	371c      	adds	r7, #28
 800e906:	46bd      	mov	sp, r7
 800e908:	bd90      	pop	{r4, r7, pc}
 800e90a:	bf00      	nop
 800e90c:	20006264 	.word	0x20006264

0800e910 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	4603      	mov	r3, r0
 800e918:	603a      	str	r2, [r7, #0]
 800e91a:	71fb      	strb	r3, [r7, #7]
 800e91c:	460b      	mov	r3, r1
 800e91e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e920:	79fb      	ldrb	r3, [r7, #7]
 800e922:	4a09      	ldr	r2, [pc, #36]	; (800e948 <disk_ioctl+0x38>)
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4413      	add	r3, r2
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	691b      	ldr	r3, [r3, #16]
 800e92c:	79fa      	ldrb	r2, [r7, #7]
 800e92e:	4906      	ldr	r1, [pc, #24]	; (800e948 <disk_ioctl+0x38>)
 800e930:	440a      	add	r2, r1
 800e932:	7a10      	ldrb	r0, [r2, #8]
 800e934:	79b9      	ldrb	r1, [r7, #6]
 800e936:	683a      	ldr	r2, [r7, #0]
 800e938:	4798      	blx	r3
 800e93a:	4603      	mov	r3, r0
 800e93c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e940:	4618      	mov	r0, r3
 800e942:	3710      	adds	r7, #16
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	20006264 	.word	0x20006264

0800e94c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e94c:	b480      	push	{r7}
 800e94e:	b087      	sub	sp, #28
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800e960:	e007      	b.n	800e972 <mem_cpy+0x26>
		*d++ = *s++;
 800e962:	693a      	ldr	r2, [r7, #16]
 800e964:	1c53      	adds	r3, r2, #1
 800e966:	613b      	str	r3, [r7, #16]
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	1c59      	adds	r1, r3, #1
 800e96c:	6179      	str	r1, [r7, #20]
 800e96e:	7812      	ldrb	r2, [r2, #0]
 800e970:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	1e5a      	subs	r2, r3, #1
 800e976:	607a      	str	r2, [r7, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1f2      	bne.n	800e962 <mem_cpy+0x16>
}
 800e97c:	bf00      	nop
 800e97e:	bf00      	nop
 800e980:	371c      	adds	r7, #28
 800e982:	46bd      	mov	sp, r7
 800e984:	bc80      	pop	{r7}
 800e986:	4770      	bx	lr

0800e988 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e988:	b480      	push	{r7}
 800e98a:	b087      	sub	sp, #28
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800e998:	e005      	b.n	800e9a6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	1c5a      	adds	r2, r3, #1
 800e99e:	617a      	str	r2, [r7, #20]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	b2d2      	uxtb	r2, r2
 800e9a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	1e5a      	subs	r2, r3, #1
 800e9aa:	607a      	str	r2, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1f4      	bne.n	800e99a <mem_set+0x12>
}
 800e9b0:	bf00      	nop
 800e9b2:	bf00      	nop
 800e9b4:	371c      	adds	r7, #28
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bc80      	pop	{r7}
 800e9ba:	4770      	bx	lr

0800e9bc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800e9bc:	b480      	push	{r7}
 800e9be:	b089      	sub	sp, #36	; 0x24
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	61fb      	str	r3, [r7, #28]
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800e9d4:	bf00      	nop
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	1e5a      	subs	r2, r3, #1
 800e9da:	607a      	str	r2, [r7, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00d      	beq.n	800e9fc <mem_cmp+0x40>
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	1c5a      	adds	r2, r3, #1
 800e9e4:	61fa      	str	r2, [r7, #28]
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	1c5a      	adds	r2, r3, #1
 800e9ee:	61ba      	str	r2, [r7, #24]
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	1acb      	subs	r3, r1, r3
 800e9f4:	617b      	str	r3, [r7, #20]
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d0ec      	beq.n	800e9d6 <mem_cmp+0x1a>
	return r;
 800e9fc:	697b      	ldr	r3, [r7, #20]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3724      	adds	r7, #36	; 0x24
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bc80      	pop	{r7}
 800ea06:	4770      	bx	lr

0800ea08 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ea12:	e002      	b.n	800ea1a <chk_chr+0x12>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3301      	adds	r3, #1
 800ea18:	607b      	str	r3, [r7, #4]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d005      	beq.n	800ea2e <chk_chr+0x26>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	461a      	mov	r2, r3
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d1f2      	bne.n	800ea14 <chk_chr+0xc>
	return *str;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	781b      	ldrb	r3, [r3, #0]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	370c      	adds	r7, #12
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bc80      	pop	{r7}
 800ea3a:	4770      	bx	lr

0800ea3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea46:	2300      	movs	r3, #0
 800ea48:	60bb      	str	r3, [r7, #8]
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	60fb      	str	r3, [r7, #12]
 800ea4e:	e03b      	b.n	800eac8 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800ea50:	4931      	ldr	r1, [pc, #196]	; (800eb18 <chk_lock+0xdc>)
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	4613      	mov	r3, r2
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	4413      	add	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	440b      	add	r3, r1
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d02c      	beq.n	800eabe <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ea64:	492c      	ldr	r1, [pc, #176]	; (800eb18 <chk_lock+0xdc>)
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	005b      	lsls	r3, r3, #1
 800ea6c:	4413      	add	r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	440b      	add	r3, r1
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d120      	bne.n	800eac2 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800ea80:	4925      	ldr	r1, [pc, #148]	; (800eb18 <chk_lock+0xdc>)
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	4613      	mov	r3, r2
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	4413      	add	r3, r2
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	440b      	add	r3, r1
 800ea8e:	3304      	adds	r3, #4
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea98:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d111      	bne.n	800eac2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800ea9e:	491e      	ldr	r1, [pc, #120]	; (800eb18 <chk_lock+0xdc>)
 800eaa0:	68fa      	ldr	r2, [r7, #12]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	4413      	add	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	440b      	add	r3, r1
 800eaac:	3308      	adds	r3, #8
 800eaae:	881a      	ldrh	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eab6:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d102      	bne.n	800eac2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800eabc:	e007      	b.n	800eace <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800eabe:	2301      	movs	r3, #1
 800eac0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	3301      	adds	r3, #1
 800eac6:	60fb      	str	r3, [r7, #12]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d9c0      	bls.n	800ea50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2b02      	cmp	r3, #2
 800ead2:	d109      	bne.n	800eae8 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d102      	bne.n	800eae0 <chk_lock+0xa4>
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	2b02      	cmp	r3, #2
 800eade:	d101      	bne.n	800eae4 <chk_lock+0xa8>
 800eae0:	2300      	movs	r3, #0
 800eae2:	e013      	b.n	800eb0c <chk_lock+0xd0>
 800eae4:	2312      	movs	r3, #18
 800eae6:	e011      	b.n	800eb0c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10b      	bne.n	800eb06 <chk_lock+0xca>
 800eaee:	490a      	ldr	r1, [pc, #40]	; (800eb18 <chk_lock+0xdc>)
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	4413      	add	r3, r2
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	440b      	add	r3, r1
 800eafc:	330a      	adds	r3, #10
 800eafe:	881b      	ldrh	r3, [r3, #0]
 800eb00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb04:	d101      	bne.n	800eb0a <chk_lock+0xce>
 800eb06:	2310      	movs	r3, #16
 800eb08:	e000      	b.n	800eb0c <chk_lock+0xd0>
 800eb0a:	2300      	movs	r3, #0
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3714      	adds	r7, #20
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bc80      	pop	{r7}
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	2000624c 	.word	0x2000624c

0800eb1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb22:	2300      	movs	r3, #0
 800eb24:	607b      	str	r3, [r7, #4]
 800eb26:	e002      	b.n	800eb2e <enq_lock+0x12>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	607b      	str	r3, [r7, #4]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d809      	bhi.n	800eb48 <enq_lock+0x2c>
 800eb34:	490a      	ldr	r1, [pc, #40]	; (800eb60 <enq_lock+0x44>)
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	4413      	add	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	440b      	add	r3, r1
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1ef      	bne.n	800eb28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b02      	cmp	r3, #2
 800eb4c:	bf14      	ite	ne
 800eb4e:	2301      	movne	r3, #1
 800eb50:	2300      	moveq	r3, #0
 800eb52:	b2db      	uxtb	r3, r3
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bc80      	pop	{r7}
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	2000624c 	.word	0x2000624c

0800eb64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eb6e:	2300      	movs	r3, #0
 800eb70:	60fb      	str	r3, [r7, #12]
 800eb72:	e02e      	b.n	800ebd2 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800eb74:	4958      	ldr	r1, [pc, #352]	; (800ecd8 <inc_lock+0x174>)
 800eb76:	68fa      	ldr	r2, [r7, #12]
 800eb78:	4613      	mov	r3, r2
 800eb7a:	005b      	lsls	r3, r3, #1
 800eb7c:	4413      	add	r3, r2
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	440b      	add	r3, r1
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d11d      	bne.n	800ebcc <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800eb90:	4951      	ldr	r1, [pc, #324]	; (800ecd8 <inc_lock+0x174>)
 800eb92:	68fa      	ldr	r2, [r7, #12]
 800eb94:	4613      	mov	r3, r2
 800eb96:	005b      	lsls	r3, r3, #1
 800eb98:	4413      	add	r3, r2
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	440b      	add	r3, r1
 800eb9e:	3304      	adds	r3, #4
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eba8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d10e      	bne.n	800ebcc <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800ebae:	494a      	ldr	r1, [pc, #296]	; (800ecd8 <inc_lock+0x174>)
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	4413      	add	r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	440b      	add	r3, r1
 800ebbc:	3308      	adds	r3, #8
 800ebbe:	881a      	ldrh	r2, [r3, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebc6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d006      	beq.n	800ebda <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	60fb      	str	r3, [r7, #12]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d9cd      	bls.n	800eb74 <inc_lock+0x10>
 800ebd8:	e000      	b.n	800ebdc <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800ebda:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	d148      	bne.n	800ec74 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	60fb      	str	r3, [r7, #12]
 800ebe6:	e002      	b.n	800ebee <inc_lock+0x8a>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	3301      	adds	r3, #1
 800ebec:	60fb      	str	r3, [r7, #12]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d809      	bhi.n	800ec08 <inc_lock+0xa4>
 800ebf4:	4938      	ldr	r1, [pc, #224]	; (800ecd8 <inc_lock+0x174>)
 800ebf6:	68fa      	ldr	r2, [r7, #12]
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	005b      	lsls	r3, r3, #1
 800ebfc:	4413      	add	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	440b      	add	r3, r1
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d1ef      	bne.n	800ebe8 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	d101      	bne.n	800ec12 <inc_lock+0xae>
 800ec0e:	2300      	movs	r3, #0
 800ec10:	e05d      	b.n	800ecce <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec18:	6819      	ldr	r1, [r3, #0]
 800ec1a:	482f      	ldr	r0, [pc, #188]	; (800ecd8 <inc_lock+0x174>)
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	4613      	mov	r3, r2
 800ec20:	005b      	lsls	r3, r3, #1
 800ec22:	4413      	add	r3, r2
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	4403      	add	r3, r0
 800ec28:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec30:	6899      	ldr	r1, [r3, #8]
 800ec32:	4829      	ldr	r0, [pc, #164]	; (800ecd8 <inc_lock+0x174>)
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	4613      	mov	r3, r2
 800ec38:	005b      	lsls	r3, r3, #1
 800ec3a:	4413      	add	r3, r2
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	4403      	add	r3, r0
 800ec40:	3304      	adds	r3, #4
 800ec42:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec4a:	88d8      	ldrh	r0, [r3, #6]
 800ec4c:	4922      	ldr	r1, [pc, #136]	; (800ecd8 <inc_lock+0x174>)
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	4613      	mov	r3, r2
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	4413      	add	r3, r2
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	440b      	add	r3, r1
 800ec5a:	3308      	adds	r3, #8
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800ec60:	491d      	ldr	r1, [pc, #116]	; (800ecd8 <inc_lock+0x174>)
 800ec62:	68fa      	ldr	r2, [r7, #12]
 800ec64:	4613      	mov	r3, r2
 800ec66:	005b      	lsls	r3, r3, #1
 800ec68:	4413      	add	r3, r2
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	440b      	add	r3, r1
 800ec6e:	330a      	adds	r3, #10
 800ec70:	2200      	movs	r2, #0
 800ec72:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00c      	beq.n	800ec94 <inc_lock+0x130>
 800ec7a:	4917      	ldr	r1, [pc, #92]	; (800ecd8 <inc_lock+0x174>)
 800ec7c:	68fa      	ldr	r2, [r7, #12]
 800ec7e:	4613      	mov	r3, r2
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	4413      	add	r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	440b      	add	r3, r1
 800ec88:	330a      	adds	r3, #10
 800ec8a:	881b      	ldrh	r3, [r3, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <inc_lock+0x130>
 800ec90:	2300      	movs	r3, #0
 800ec92:	e01c      	b.n	800ecce <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d10b      	bne.n	800ecb2 <inc_lock+0x14e>
 800ec9a:	490f      	ldr	r1, [pc, #60]	; (800ecd8 <inc_lock+0x174>)
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	4613      	mov	r3, r2
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	4413      	add	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	440b      	add	r3, r1
 800eca8:	330a      	adds	r3, #10
 800ecaa:	881b      	ldrh	r3, [r3, #0]
 800ecac:	3301      	adds	r3, #1
 800ecae:	b299      	uxth	r1, r3
 800ecb0:	e001      	b.n	800ecb6 <inc_lock+0x152>
 800ecb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ecb6:	4808      	ldr	r0, [pc, #32]	; (800ecd8 <inc_lock+0x174>)
 800ecb8:	68fa      	ldr	r2, [r7, #12]
 800ecba:	4613      	mov	r3, r2
 800ecbc:	005b      	lsls	r3, r3, #1
 800ecbe:	4413      	add	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4403      	add	r3, r0
 800ecc4:	330a      	adds	r3, #10
 800ecc6:	460a      	mov	r2, r1
 800ecc8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	3301      	adds	r3, #1
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3714      	adds	r7, #20
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bc80      	pop	{r7}
 800ecd6:	4770      	bx	lr
 800ecd8:	2000624c 	.word	0x2000624c

0800ecdc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	3b01      	subs	r3, #1
 800ece8:	607b      	str	r3, [r7, #4]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d82e      	bhi.n	800ed4e <dec_lock+0x72>
		n = Files[i].ctr;
 800ecf0:	491b      	ldr	r1, [pc, #108]	; (800ed60 <dec_lock+0x84>)
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	4413      	add	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	440b      	add	r3, r1
 800ecfe:	330a      	adds	r3, #10
 800ed00:	881b      	ldrh	r3, [r3, #0]
 800ed02:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ed04:	89fb      	ldrh	r3, [r7, #14]
 800ed06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed0a:	d101      	bne.n	800ed10 <dec_lock+0x34>
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800ed10:	89fb      	ldrh	r3, [r7, #14]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d002      	beq.n	800ed1c <dec_lock+0x40>
 800ed16:	89fb      	ldrh	r3, [r7, #14]
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ed1c:	4910      	ldr	r1, [pc, #64]	; (800ed60 <dec_lock+0x84>)
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	4613      	mov	r3, r2
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	4413      	add	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	440b      	add	r3, r1
 800ed2a:	330a      	adds	r3, #10
 800ed2c:	89fa      	ldrh	r2, [r7, #14]
 800ed2e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ed30:	89fb      	ldrh	r3, [r7, #14]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d108      	bne.n	800ed48 <dec_lock+0x6c>
 800ed36:	490a      	ldr	r1, [pc, #40]	; (800ed60 <dec_lock+0x84>)
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	005b      	lsls	r3, r3, #1
 800ed3e:	4413      	add	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	440b      	add	r3, r1
 800ed44:	2200      	movs	r2, #0
 800ed46:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	737b      	strb	r3, [r7, #13]
 800ed4c:	e001      	b.n	800ed52 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ed4e:	2302      	movs	r3, #2
 800ed50:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ed52:	7b7b      	ldrb	r3, [r7, #13]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3714      	adds	r7, #20
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bc80      	pop	{r7}
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	2000624c 	.word	0x2000624c

0800ed64 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60fb      	str	r3, [r7, #12]
 800ed70:	e016      	b.n	800eda0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ed72:	4910      	ldr	r1, [pc, #64]	; (800edb4 <clear_lock+0x50>)
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	4613      	mov	r3, r2
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	009b      	lsls	r3, r3, #2
 800ed7e:	440b      	add	r3, r1
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d108      	bne.n	800ed9a <clear_lock+0x36>
 800ed88:	490a      	ldr	r1, [pc, #40]	; (800edb4 <clear_lock+0x50>)
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	005b      	lsls	r3, r3, #1
 800ed90:	4413      	add	r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	440b      	add	r3, r1
 800ed96:	2200      	movs	r2, #0
 800ed98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	60fb      	str	r3, [r7, #12]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d9e5      	bls.n	800ed72 <clear_lock+0xe>
	}
}
 800eda6:	bf00      	nop
 800eda8:	bf00      	nop
 800edaa:	3714      	adds	r7, #20
 800edac:	46bd      	mov	sp, r7
 800edae:	bc80      	pop	{r7}
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	2000624c 	.word	0x2000624c

0800edb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b086      	sub	sp, #24
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800edc0:	2300      	movs	r3, #0
 800edc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edca:	791b      	ldrb	r3, [r3, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d040      	beq.n	800ee52 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ede0:	7858      	ldrb	r0, [r3, #1]
 800ede2:	6879      	ldr	r1, [r7, #4]
 800ede4:	2301      	movs	r3, #1
 800ede6:	697a      	ldr	r2, [r7, #20]
 800ede8:	f7ff fd72 	bl	800e8d0 <disk_write>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d002      	beq.n	800edf8 <sync_window+0x40>
			res = FR_DISK_ERR;
 800edf2:	2301      	movs	r3, #1
 800edf4:	73fb      	strb	r3, [r7, #15]
 800edf6:	e02c      	b.n	800ee52 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edfe:	2200      	movs	r2, #0
 800ee00:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee08:	6a1b      	ldr	r3, [r3, #32]
 800ee0a:	697a      	ldr	r2, [r7, #20]
 800ee0c:	1ad2      	subs	r2, r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d21b      	bcs.n	800ee52 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee20:	78db      	ldrb	r3, [r3, #3]
 800ee22:	613b      	str	r3, [r7, #16]
 800ee24:	e012      	b.n	800ee4c <sync_window+0x94>
					wsect += fs->fsize;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	4413      	add	r3, r2
 800ee32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee3a:	7858      	ldrb	r0, [r3, #1]
 800ee3c:	6879      	ldr	r1, [r7, #4]
 800ee3e:	2301      	movs	r3, #1
 800ee40:	697a      	ldr	r2, [r7, #20]
 800ee42:	f7ff fd45 	bl	800e8d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	613b      	str	r3, [r7, #16]
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d8e9      	bhi.n	800ee26 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee72:	683a      	ldr	r2, [r7, #0]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d01e      	beq.n	800eeb6 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7ff ff9d 	bl	800edb8 <sync_window>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ee82:	7bfb      	ldrb	r3, [r7, #15]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d116      	bne.n	800eeb6 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee8e:	7858      	ldrb	r0, [r3, #1]
 800ee90:	6879      	ldr	r1, [r7, #4]
 800ee92:	2301      	movs	r3, #1
 800ee94:	683a      	ldr	r2, [r7, #0]
 800ee96:	f7ff fcfb 	bl	800e890 <disk_read>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d004      	beq.n	800eeaa <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eea4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b084      	sub	sp, #16
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7ff ff75 	bl	800edb8 <sync_window>
 800eece:	4603      	mov	r3, r0
 800eed0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eed2:	7bfb      	ldrb	r3, [r7, #15]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	f040 80ad 	bne.w	800f034 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	f040 8098 	bne.w	800f018 <sync_fs+0x158>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eeee:	795b      	ldrb	r3, [r3, #5]
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	f040 8091 	bne.w	800f018 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eefe:	895b      	ldrh	r3, [r3, #10]
 800ef00:	461a      	mov	r2, r3
 800ef02:	2100      	movs	r1, #0
 800ef04:	f7ff fd40 	bl	800e988 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2255      	movs	r2, #85	; 0x55
 800ef0c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	22aa      	movs	r2, #170	; 0xaa
 800ef14:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2252      	movs	r2, #82	; 0x52
 800ef1c:	701a      	strb	r2, [r3, #0]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2252      	movs	r2, #82	; 0x52
 800ef22:	705a      	strb	r2, [r3, #1]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2261      	movs	r2, #97	; 0x61
 800ef28:	709a      	strb	r2, [r3, #2]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2241      	movs	r2, #65	; 0x41
 800ef2e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2272      	movs	r2, #114	; 0x72
 800ef34:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2272      	movs	r2, #114	; 0x72
 800ef3c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2241      	movs	r2, #65	; 0x41
 800ef44:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2261      	movs	r2, #97	; 0x61
 800ef4c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	b2da      	uxtb	r2, r3
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef66:	691b      	ldr	r3, [r3, #16]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	0a1b      	lsrs	r3, r3, #8
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	0c1b      	lsrs	r3, r3, #16
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef8e:	691b      	ldr	r3, [r3, #16]
 800ef90:	0e1b      	lsrs	r3, r3, #24
 800ef92:	b2da      	uxtb	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	0a1b      	lsrs	r3, r3, #8
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	b2da      	uxtb	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	0c1b      	lsrs	r3, r3, #16
 800efca:	b2da      	uxtb	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	0e1b      	lsrs	r3, r3, #24
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efea:	69db      	ldr	r3, [r3, #28]
 800efec:	3301      	adds	r3, #1
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eff4:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800effc:	7858      	ldrb	r0, [r3, #1]
 800effe:	6879      	ldr	r1, [r7, #4]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f008:	2301      	movs	r3, #1
 800f00a:	f7ff fc61 	bl	800e8d0 <disk_write>
			fs->fsi_flag = 0;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f014:	2200      	movs	r2, #0
 800f016:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f01e:	785b      	ldrb	r3, [r3, #1]
 800f020:	2200      	movs	r2, #0
 800f022:	2100      	movs	r1, #0
 800f024:	4618      	mov	r0, r3
 800f026:	f7ff fc73 	bl	800e910 <disk_ioctl>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d001      	beq.n	800f034 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800f030:	2301      	movs	r3, #1
 800f032:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f034:	7bfb      	ldrb	r3, [r7, #15]
}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f03e:	b480      	push	{r7}
 800f040:	b083      	sub	sp, #12
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
 800f046:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	3b02      	subs	r3, #2
 800f04c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f054:	695b      	ldr	r3, [r3, #20]
 800f056:	3b02      	subs	r3, #2
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d301      	bcc.n	800f062 <clust2sect+0x24>
 800f05e:	2300      	movs	r3, #0
 800f060:	e00c      	b.n	800f07c <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f068:	789b      	ldrb	r3, [r3, #2]
 800f06a:	461a      	mov	r2, r3
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	fb03 f202 	mul.w	r2, r3, r2
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f07a:	4413      	add	r3, r2
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	370c      	adds	r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	bc80      	pop	{r7}
 800f084:	4770      	bx	lr

0800f086 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b086      	sub	sp, #24
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2b01      	cmp	r3, #1
 800f094:	d906      	bls.n	800f0a4 <get_fat+0x1e>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f09c:	695b      	ldr	r3, [r3, #20]
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d302      	bcc.n	800f0aa <get_fat+0x24>
		val = 1;	/* Internal error */
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	617b      	str	r3, [r7, #20]
 800f0a8:	e0e4      	b.n	800f274 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f0aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0ae:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	2b03      	cmp	r3, #3
 800f0ba:	f000 8098 	beq.w	800f1ee <get_fat+0x168>
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	f300 80ce 	bgt.w	800f260 <get_fat+0x1da>
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d002      	beq.n	800f0ce <get_fat+0x48>
 800f0c8:	2b02      	cmp	r3, #2
 800f0ca:	d05f      	beq.n	800f18c <get_fat+0x106>
 800f0cc:	e0c8      	b.n	800f260 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	60fb      	str	r3, [r7, #12]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	085b      	lsrs	r3, r3, #1
 800f0d6:	68fa      	ldr	r2, [r7, #12]
 800f0d8:	4413      	add	r3, r2
 800f0da:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0e2:	6a1a      	ldr	r2, [r3, #32]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0ea:	895b      	ldrh	r3, [r3, #10]
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0f4:	4413      	add	r3, r2
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f7ff feaf 	bl	800ee5c <move_window>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	f040 80b0 	bne.w	800f266 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	1c5a      	adds	r2, r3, #1
 800f10a:	60fa      	str	r2, [r7, #12]
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f112:	8952      	ldrh	r2, [r2, #10]
 800f114:	fbb3 f1f2 	udiv	r1, r3, r2
 800f118:	fb01 f202 	mul.w	r2, r1, r2
 800f11c:	1a9b      	subs	r3, r3, r2
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	5cd3      	ldrb	r3, [r2, r3]
 800f122:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f12a:	6a1a      	ldr	r2, [r3, #32]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f132:	895b      	ldrh	r3, [r3, #10]
 800f134:	4619      	mov	r1, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	fbb3 f3f1 	udiv	r3, r3, r1
 800f13c:	4413      	add	r3, r2
 800f13e:	4619      	mov	r1, r3
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f7ff fe8b 	bl	800ee5c <move_window>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f040 808e 	bne.w	800f26a <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f154:	895b      	ldrh	r3, [r3, #10]
 800f156:	461a      	mov	r2, r3
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f15e:	fb01 f202 	mul.w	r2, r1, r2
 800f162:	1a9b      	subs	r3, r3, r2
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	5cd3      	ldrb	r3, [r2, r3]
 800f168:	021b      	lsls	r3, r3, #8
 800f16a:	461a      	mov	r2, r3
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	4313      	orrs	r3, r2
 800f170:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d002      	beq.n	800f182 <get_fat+0xfc>
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	091b      	lsrs	r3, r3, #4
 800f180:	e002      	b.n	800f188 <get_fat+0x102>
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f188:	617b      	str	r3, [r7, #20]
			break;
 800f18a:	e073      	b.n	800f274 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f192:	6a1a      	ldr	r2, [r3, #32]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f19a:	895b      	ldrh	r3, [r3, #10]
 800f19c:	085b      	lsrs	r3, r3, #1
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1a8:	4413      	add	r3, r2
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f7ff fe55 	bl	800ee5c <move_window>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d15a      	bne.n	800f26e <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	687a      	ldr	r2, [r7, #4]
 800f1be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f1c2:	8952      	ldrh	r2, [r2, #10]
 800f1c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1c8:	fb01 f202 	mul.w	r2, r1, r2
 800f1cc:	1a9b      	subs	r3, r3, r2
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	021b      	lsls	r3, r3, #8
 800f1dc:	b21a      	sxth	r2, r3
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	b21b      	sxth	r3, r3
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	b21b      	sxth	r3, r3
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	617b      	str	r3, [r7, #20]
			break;
 800f1ec:	e042      	b.n	800f274 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1f4:	6a1a      	ldr	r2, [r3, #32]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1fc:	895b      	ldrh	r3, [r3, #10]
 800f1fe:	089b      	lsrs	r3, r3, #2
 800f200:	b29b      	uxth	r3, r3
 800f202:	4619      	mov	r1, r3
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	fbb3 f3f1 	udiv	r3, r3, r1
 800f20a:	4413      	add	r3, r2
 800f20c:	4619      	mov	r1, r3
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7ff fe24 	bl	800ee5c <move_window>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d12b      	bne.n	800f272 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f224:	8952      	ldrh	r2, [r2, #10]
 800f226:	fbb3 f1f2 	udiv	r1, r3, r2
 800f22a:	fb01 f202 	mul.w	r2, r1, r2
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	4413      	add	r3, r2
 800f234:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	3303      	adds	r3, #3
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	061a      	lsls	r2, r3, #24
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	3302      	adds	r3, #2
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	041b      	lsls	r3, r3, #16
 800f246:	4313      	orrs	r3, r2
 800f248:	693a      	ldr	r2, [r7, #16]
 800f24a:	3201      	adds	r2, #1
 800f24c:	7812      	ldrb	r2, [r2, #0]
 800f24e:	0212      	lsls	r2, r2, #8
 800f250:	4313      	orrs	r3, r2
 800f252:	693a      	ldr	r2, [r7, #16]
 800f254:	7812      	ldrb	r2, [r2, #0]
 800f256:	4313      	orrs	r3, r2
 800f258:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f25c:	617b      	str	r3, [r7, #20]
			break;
 800f25e:	e009      	b.n	800f274 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800f260:	2301      	movs	r3, #1
 800f262:	617b      	str	r3, [r7, #20]
 800f264:	e006      	b.n	800f274 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f266:	bf00      	nop
 800f268:	e004      	b.n	800f274 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f26a:	bf00      	nop
 800f26c:	e002      	b.n	800f274 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f26e:	bf00      	nop
 800f270:	e000      	b.n	800f274 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f272:	bf00      	nop
		}
	}

	return val;
 800f274:	697b      	ldr	r3, [r7, #20]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3718      	adds	r7, #24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b088      	sub	sp, #32
 800f282:	af00      	add	r7, sp, #0
 800f284:	60f8      	str	r0, [r7, #12]
 800f286:	60b9      	str	r1, [r7, #8]
 800f288:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d906      	bls.n	800f29e <put_fat+0x20>
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f296:	695b      	ldr	r3, [r3, #20]
 800f298:	68ba      	ldr	r2, [r7, #8]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d302      	bcc.n	800f2a4 <put_fat+0x26>
		res = FR_INT_ERR;
 800f29e:	2302      	movs	r3, #2
 800f2a0:	77fb      	strb	r3, [r7, #31]
 800f2a2:	e13a      	b.n	800f51a <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	2b03      	cmp	r3, #3
 800f2ae:	f000 80d0 	beq.w	800f452 <put_fat+0x1d4>
 800f2b2:	2b03      	cmp	r3, #3
 800f2b4:	f300 8127 	bgt.w	800f506 <put_fat+0x288>
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d003      	beq.n	800f2c4 <put_fat+0x46>
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	f000 808f 	beq.w	800f3e0 <put_fat+0x162>
 800f2c2:	e120      	b.n	800f506 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	617b      	str	r3, [r7, #20]
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	085b      	lsrs	r3, r3, #1
 800f2cc:	697a      	ldr	r2, [r7, #20]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2d8:	6a1a      	ldr	r2, [r3, #32]
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2e0:	895b      	ldrh	r3, [r3, #10]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2ea:	4413      	add	r3, r2
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f7ff fdb4 	bl	800ee5c <move_window>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2f8:	7ffb      	ldrb	r3, [r7, #31]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	f040 8106 	bne.w	800f50c <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	617a      	str	r2, [r7, #20]
 800f306:	68fa      	ldr	r2, [r7, #12]
 800f308:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f30c:	8952      	ldrh	r2, [r2, #10]
 800f30e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f312:	fb01 f202 	mul.w	r2, r1, r2
 800f316:	1a9b      	subs	r3, r3, r2
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	4413      	add	r3, r2
 800f31c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00d      	beq.n	800f344 <put_fat+0xc6>
 800f328:	69bb      	ldr	r3, [r7, #24]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	b25b      	sxtb	r3, r3
 800f32e:	f003 030f 	and.w	r3, r3, #15
 800f332:	b25a      	sxtb	r2, r3
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	b2db      	uxtb	r3, r3
 800f338:	011b      	lsls	r3, r3, #4
 800f33a:	b25b      	sxtb	r3, r3
 800f33c:	4313      	orrs	r3, r2
 800f33e:	b25b      	sxtb	r3, r3
 800f340:	b2db      	uxtb	r3, r3
 800f342:	e001      	b.n	800f348 <put_fat+0xca>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	b2db      	uxtb	r3, r3
 800f348:	69ba      	ldr	r2, [r7, #24]
 800f34a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f352:	2201      	movs	r2, #1
 800f354:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f35c:	6a1a      	ldr	r2, [r3, #32]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f364:	895b      	ldrh	r3, [r3, #10]
 800f366:	4619      	mov	r1, r3
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f36e:	4413      	add	r3, r2
 800f370:	4619      	mov	r1, r3
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	f7ff fd72 	bl	800ee5c <move_window>
 800f378:	4603      	mov	r3, r0
 800f37a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f37c:	7ffb      	ldrb	r3, [r7, #31]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	f040 80c6 	bne.w	800f510 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f38a:	895b      	ldrh	r3, [r3, #10]
 800f38c:	461a      	mov	r2, r3
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	fbb3 f1f2 	udiv	r1, r3, r2
 800f394:	fb01 f202 	mul.w	r2, r1, r2
 800f398:	1a9b      	subs	r3, r3, r2
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	4413      	add	r3, r2
 800f39e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	f003 0301 	and.w	r3, r3, #1
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d003      	beq.n	800f3b2 <put_fat+0x134>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	091b      	lsrs	r3, r3, #4
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	e00e      	b.n	800f3d0 <put_fat+0x152>
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	b25b      	sxtb	r3, r3
 800f3b8:	f023 030f 	bic.w	r3, r3, #15
 800f3bc:	b25a      	sxtb	r2, r3
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	0a1b      	lsrs	r3, r3, #8
 800f3c2:	b25b      	sxtb	r3, r3
 800f3c4:	f003 030f 	and.w	r3, r3, #15
 800f3c8:	b25b      	sxtb	r3, r3
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	b25b      	sxtb	r3, r3
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	69ba      	ldr	r2, [r7, #24]
 800f3d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3da:	2201      	movs	r2, #1
 800f3dc:	711a      	strb	r2, [r3, #4]
			break;
 800f3de:	e09c      	b.n	800f51a <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3e6:	6a1a      	ldr	r2, [r3, #32]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3ee:	895b      	ldrh	r3, [r3, #10]
 800f3f0:	085b      	lsrs	r3, r3, #1
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800f3fc:	4413      	add	r3, r2
 800f3fe:	4619      	mov	r1, r3
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	f7ff fd2b 	bl	800ee5c <move_window>
 800f406:	4603      	mov	r3, r0
 800f408:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f40a:	7ffb      	ldrb	r3, [r7, #31]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f040 8081 	bne.w	800f514 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	005b      	lsls	r3, r3, #1
 800f416:	68fa      	ldr	r2, [r7, #12]
 800f418:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f41c:	8952      	ldrh	r2, [r2, #10]
 800f41e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f422:	fb01 f202 	mul.w	r2, r1, r2
 800f426:	1a9b      	subs	r3, r3, r2
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	4413      	add	r3, r2
 800f42c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	b2da      	uxtb	r2, r3
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	701a      	strb	r2, [r3, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	b29b      	uxth	r3, r3
 800f43a:	0a1b      	lsrs	r3, r3, #8
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	3301      	adds	r3, #1
 800f442:	b2d2      	uxtb	r2, r2
 800f444:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f44c:	2201      	movs	r2, #1
 800f44e:	711a      	strb	r2, [r3, #4]
			break;
 800f450:	e063      	b.n	800f51a <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f458:	6a1a      	ldr	r2, [r3, #32]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f460:	895b      	ldrh	r3, [r3, #10]
 800f462:	089b      	lsrs	r3, r3, #2
 800f464:	b29b      	uxth	r3, r3
 800f466:	4619      	mov	r1, r3
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f46e:	4413      	add	r3, r2
 800f470:	4619      	mov	r1, r3
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f7ff fcf2 	bl	800ee5c <move_window>
 800f478:	4603      	mov	r3, r0
 800f47a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f47c:	7ffb      	ldrb	r3, [r7, #31]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d14a      	bne.n	800f518 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f48c:	8952      	ldrh	r2, [r2, #10]
 800f48e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f492:	fb01 f202 	mul.w	r2, r1, r2
 800f496:	1a9b      	subs	r3, r3, r2
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	4413      	add	r3, r2
 800f49c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	3303      	adds	r3, #3
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	061a      	lsls	r2, r3, #24
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	3302      	adds	r3, #2
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	041b      	lsls	r3, r3, #16
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	69ba      	ldr	r2, [r7, #24]
 800f4b2:	3201      	adds	r2, #1
 800f4b4:	7812      	ldrb	r2, [r2, #0]
 800f4b6:	0212      	lsls	r2, r2, #8
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	69ba      	ldr	r2, [r7, #24]
 800f4bc:	7812      	ldrb	r2, [r2, #0]
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	b2da      	uxtb	r2, r3
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	701a      	strb	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	0a1b      	lsrs	r3, r3, #8
 800f4d8:	b29a      	uxth	r2, r3
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	b2d2      	uxtb	r2, r2
 800f4e0:	701a      	strb	r2, [r3, #0]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	0c1a      	lsrs	r2, r3, #16
 800f4e6:	69bb      	ldr	r3, [r7, #24]
 800f4e8:	3302      	adds	r3, #2
 800f4ea:	b2d2      	uxtb	r2, r2
 800f4ec:	701a      	strb	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	0e1a      	lsrs	r2, r3, #24
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	3303      	adds	r3, #3
 800f4f6:	b2d2      	uxtb	r2, r2
 800f4f8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f500:	2201      	movs	r2, #1
 800f502:	711a      	strb	r2, [r3, #4]
			break;
 800f504:	e009      	b.n	800f51a <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800f506:	2302      	movs	r3, #2
 800f508:	77fb      	strb	r3, [r7, #31]
 800f50a:	e006      	b.n	800f51a <put_fat+0x29c>
			if (res != FR_OK) break;
 800f50c:	bf00      	nop
 800f50e:	e004      	b.n	800f51a <put_fat+0x29c>
			if (res != FR_OK) break;
 800f510:	bf00      	nop
 800f512:	e002      	b.n	800f51a <put_fat+0x29c>
			if (res != FR_OK) break;
 800f514:	bf00      	nop
 800f516:	e000      	b.n	800f51a <put_fat+0x29c>
			if (res != FR_OK) break;
 800f518:	bf00      	nop
		}
	}

	return res;
 800f51a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3720      	adds	r7, #32
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d906      	bls.n	800f542 <remove_chain+0x1e>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f53a:	695b      	ldr	r3, [r3, #20]
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d302      	bcc.n	800f548 <remove_chain+0x24>
		res = FR_INT_ERR;
 800f542:	2302      	movs	r3, #2
 800f544:	73fb      	strb	r3, [r7, #15]
 800f546:	e049      	b.n	800f5dc <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800f548:	2300      	movs	r3, #0
 800f54a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f54c:	e03b      	b.n	800f5c6 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800f54e:	6839      	ldr	r1, [r7, #0]
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff fd98 	bl	800f086 <get_fat>
 800f556:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d03b      	beq.n	800f5d6 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d102      	bne.n	800f56a <remove_chain+0x46>
 800f564:	2302      	movs	r3, #2
 800f566:	73fb      	strb	r3, [r7, #15]
 800f568:	e038      	b.n	800f5dc <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f570:	d102      	bne.n	800f578 <remove_chain+0x54>
 800f572:	2301      	movs	r3, #1
 800f574:	73fb      	strb	r3, [r7, #15]
 800f576:	e031      	b.n	800f5dc <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800f578:	2200      	movs	r2, #0
 800f57a:	6839      	ldr	r1, [r7, #0]
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7ff fe7e 	bl	800f27e <put_fat>
 800f582:	4603      	mov	r3, r0
 800f584:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f586:	7bfb      	ldrb	r3, [r7, #15]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d126      	bne.n	800f5da <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f592:	691b      	ldr	r3, [r3, #16]
 800f594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f598:	d013      	beq.n	800f5c2 <remove_chain+0x9e>
				fs->free_clust++;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5a0:	691b      	ldr	r3, [r3, #16]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f5aa:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5b2:	795b      	ldrb	r3, [r3, #5]
 800f5b4:	f043 0301 	orr.w	r3, r3, #1
 800f5b8:	b2da      	uxtb	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5c0:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5cc:	695b      	ldr	r3, [r3, #20]
 800f5ce:	683a      	ldr	r2, [r7, #0]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d3bc      	bcc.n	800f54e <remove_chain+0x2a>
 800f5d4:	e002      	b.n	800f5dc <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800f5d6:	bf00      	nop
 800f5d8:	e000      	b.n	800f5dc <remove_chain+0xb8>
			if (res != FR_OK) break;
 800f5da:	bf00      	nop
		}
	}

	return res;
 800f5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b086      	sub	sp, #24
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
 800f5ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d111      	bne.n	800f61a <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d006      	beq.n	800f614 <create_chain+0x2e>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f60c:	695b      	ldr	r3, [r3, #20]
 800f60e:	693a      	ldr	r2, [r7, #16]
 800f610:	429a      	cmp	r2, r3
 800f612:	d31d      	bcc.n	800f650 <create_chain+0x6a>
 800f614:	2301      	movs	r3, #1
 800f616:	613b      	str	r3, [r7, #16]
 800f618:	e01a      	b.n	800f650 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800f61a:	6839      	ldr	r1, [r7, #0]
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7ff fd32 	bl	800f086 <get_fat>
 800f622:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	2b01      	cmp	r3, #1
 800f628:	d801      	bhi.n	800f62e <create_chain+0x48>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e07f      	b.n	800f72e <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f634:	d101      	bne.n	800f63a <create_chain+0x54>
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	e079      	b.n	800f72e <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f640:	695b      	ldr	r3, [r3, #20]
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	429a      	cmp	r2, r3
 800f646:	d201      	bcs.n	800f64c <create_chain+0x66>
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	e070      	b.n	800f72e <create_chain+0x148>
		scl = clst;
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	3301      	adds	r3, #1
 800f658:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f660:	695b      	ldr	r3, [r3, #20]
 800f662:	697a      	ldr	r2, [r7, #20]
 800f664:	429a      	cmp	r2, r3
 800f666:	d307      	bcc.n	800f678 <create_chain+0x92>
			ncl = 2;
 800f668:	2302      	movs	r3, #2
 800f66a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	429a      	cmp	r2, r3
 800f672:	d901      	bls.n	800f678 <create_chain+0x92>
 800f674:	2300      	movs	r3, #0
 800f676:	e05a      	b.n	800f72e <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800f678:	6979      	ldr	r1, [r7, #20]
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7ff fd03 	bl	800f086 <get_fat>
 800f680:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d00e      	beq.n	800f6a6 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f68e:	d002      	beq.n	800f696 <create_chain+0xb0>
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	2b01      	cmp	r3, #1
 800f694:	d101      	bne.n	800f69a <create_chain+0xb4>
			return cs;
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	e049      	b.n	800f72e <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d1d8      	bne.n	800f654 <create_chain+0x6e>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	e043      	b.n	800f72e <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800f6a6:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800f6a8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800f6ac:	6979      	ldr	r1, [r7, #20]
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f7ff fde5 	bl	800f27e <put_fat>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800f6b8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d109      	bne.n	800f6d2 <create_chain+0xec>
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d006      	beq.n	800f6d2 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800f6c4:	697a      	ldr	r2, [r7, #20]
 800f6c6:	6839      	ldr	r1, [r7, #0]
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f7ff fdd8 	bl	800f27e <put_fat>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800f6d2:	7bfb      	ldrb	r3, [r7, #15]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d121      	bne.n	800f71c <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6de:	461a      	mov	r2, r3
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6f0:	d01c      	beq.n	800f72c <create_chain+0x146>
			fs->free_clust--;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6f8:	691b      	ldr	r3, [r3, #16]
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f702:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f70a:	795b      	ldrb	r3, [r3, #5]
 800f70c:	f043 0301 	orr.w	r3, r3, #1
 800f710:	b2da      	uxtb	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f718:	715a      	strb	r2, [r3, #5]
 800f71a:	e007      	b.n	800f72c <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800f71c:	7bfb      	ldrb	r3, [r7, #15]
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d102      	bne.n	800f728 <create_chain+0x142>
 800f722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f726:	e000      	b.n	800f72a <create_chain+0x144>
 800f728:	2301      	movs	r3, #1
 800f72a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800f72c:	697b      	ldr	r3, [r7, #20]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800f736:	b480      	push	{r7}
 800f738:	b087      	sub	sp, #28
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
 800f73e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f748:	3304      	adds	r3, #4
 800f74a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f758:	895b      	ldrh	r3, [r3, #10]
 800f75a:	461a      	mov	r2, r3
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f768:	6812      	ldr	r2, [r2, #0]
 800f76a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f76e:	7892      	ldrb	r2, [r2, #2]
 800f770:	fbb3 f3f2 	udiv	r3, r3, r2
 800f774:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	1d1a      	adds	r2, r3, #4
 800f77a:	613a      	str	r2, [r7, #16]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <clmt_clust+0x54>
 800f786:	2300      	movs	r3, #0
 800f788:	e010      	b.n	800f7ac <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800f78a:	697a      	ldr	r2, [r7, #20]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d307      	bcc.n	800f7a2 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800f792:	697a      	ldr	r2, [r7, #20]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	1ad3      	subs	r3, r2, r3
 800f798:	617b      	str	r3, [r7, #20]
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	3304      	adds	r3, #4
 800f79e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f7a0:	e7e9      	b.n	800f776 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800f7a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	4413      	add	r3, r2
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	371c      	adds	r7, #28
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bc80      	pop	{r7}
 800f7b4:	4770      	bx	lr

0800f7b6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b086      	sub	sp, #24
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
 800f7be:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7ca:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7d2:	689b      	ldr	r3, [r3, #8]
 800f7d4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d009      	beq.n	800f7f0 <dir_sdi+0x3a>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7e8:	695b      	ldr	r3, [r3, #20]
 800f7ea:	697a      	ldr	r2, [r7, #20]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d301      	bcc.n	800f7f4 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	e0aa      	b.n	800f94a <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d110      	bne.n	800f81c <dir_sdi+0x66>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	2b03      	cmp	r3, #3
 800f80a:	d107      	bne.n	800f81c <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d115      	bne.n	800f84e <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f82e:	891b      	ldrh	r3, [r3, #8]
 800f830:	461a      	mov	r2, r3
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	4293      	cmp	r3, r2
 800f836:	d301      	bcc.n	800f83c <dir_sdi+0x86>
			return FR_INT_ERR;
 800f838:	2302      	movs	r3, #2
 800f83a:	e086      	b.n	800f94a <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84a:	613b      	str	r3, [r7, #16]
 800f84c:	e043      	b.n	800f8d6 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f85a:	895b      	ldrh	r3, [r3, #10]
 800f85c:	095b      	lsrs	r3, r3, #5
 800f85e:	b29b      	uxth	r3, r3
 800f860:	461a      	mov	r2, r3
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f86e:	789b      	ldrb	r3, [r3, #2]
 800f870:	fb02 f303 	mul.w	r3, r2, r3
 800f874:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800f876:	e021      	b.n	800f8bc <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	6979      	ldr	r1, [r7, #20]
 800f882:	4618      	mov	r0, r3
 800f884:	f7ff fbff 	bl	800f086 <get_fat>
 800f888:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f890:	d101      	bne.n	800f896 <dir_sdi+0xe0>
 800f892:	2301      	movs	r3, #1
 800f894:	e059      	b.n	800f94a <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d909      	bls.n	800f8b0 <dir_sdi+0xfa>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8a8:	695b      	ldr	r3, [r3, #20]
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d301      	bcc.n	800f8b4 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800f8b0:	2302      	movs	r3, #2
 800f8b2:	e04a      	b.n	800f94a <dir_sdi+0x194>
			idx -= ic;
 800f8b4:	683a      	ldr	r2, [r7, #0]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	1ad3      	subs	r3, r2, r3
 800f8ba:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800f8bc:	683a      	ldr	r2, [r7, #0]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d2d9      	bcs.n	800f878 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	6979      	ldr	r1, [r7, #20]
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7ff fbb5 	bl	800f03e <clust2sect>
 800f8d4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8dc:	461a      	mov	r2, r3
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d101      	bne.n	800f8ec <dir_sdi+0x136>
 800f8e8:	2302      	movs	r3, #2
 800f8ea:	e02e      	b.n	800f94a <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8f8:	895b      	ldrh	r3, [r3, #10]
 800f8fa:	095b      	lsrs	r3, r3, #5
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	461a      	mov	r2, r3
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	fbb3 f2f2 	udiv	r2, r3, r2
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	4413      	add	r3, r2
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f910:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4618      	mov	r0, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f928:	895b      	ldrh	r3, [r3, #10]
 800f92a:	095b      	lsrs	r3, r3, #5
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	461a      	mov	r2, r3
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	fbb3 f1f2 	udiv	r1, r3, r2
 800f936:	fb01 f202 	mul.w	r2, r1, r2
 800f93a:	1a9b      	subs	r3, r3, r2
 800f93c:	015b      	lsls	r3, r3, #5
 800f93e:	4403      	add	r3, r0
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f946:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800f948:	2300      	movs	r3, #0
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3718      	adds	r7, #24
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}

0800f952 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f952:	b590      	push	{r4, r7, lr}
 800f954:	b087      	sub	sp, #28
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
 800f95a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f962:	88db      	ldrh	r3, [r3, #6]
 800f964:	3301      	adds	r3, #1
 800f966:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d005      	beq.n	800f97c <dir_next+0x2a>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f976:	691b      	ldr	r3, [r3, #16]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d101      	bne.n	800f980 <dir_next+0x2e>
		return FR_NO_FILE;
 800f97c:	2304      	movs	r3, #4
 800f97e:	e12e      	b.n	800fbde <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f98c:	895b      	ldrh	r3, [r3, #10]
 800f98e:	095b      	lsrs	r3, r3, #5
 800f990:	b29b      	uxth	r3, r3
 800f992:	461a      	mov	r2, r3
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	fbb3 f1f2 	udiv	r1, r3, r2
 800f99a:	fb01 f202 	mul.w	r2, r1, r2
 800f99e:	1a9b      	subs	r3, r3, r2
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f040 80fa 	bne.w	800fb9a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9ac:	691b      	ldr	r3, [r3, #16]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f9b6:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d10d      	bne.n	800f9e0 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9d0:	891b      	ldrh	r3, [r3, #8]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	f0c0 80df 	bcc.w	800fb9a <dir_next+0x248>
				return FR_NO_FILE;
 800f9dc:	2304      	movs	r3, #4
 800f9de:	e0fe      	b.n	800fbde <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9ec:	895b      	ldrh	r3, [r3, #10]
 800f9ee:	095b      	lsrs	r3, r3, #5
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa00:	6812      	ldr	r2, [r2, #0]
 800fa02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa06:	7892      	ldrb	r2, [r2, #2]
 800fa08:	3a01      	subs	r2, #1
 800fa0a:	4013      	ands	r3, r2
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f040 80c4 	bne.w	800fb9a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	4619      	mov	r1, r3
 800fa24:	4610      	mov	r0, r2
 800fa26:	f7ff fb2e 	bl	800f086 <get_fat>
 800fa2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	2b01      	cmp	r3, #1
 800fa30:	d801      	bhi.n	800fa36 <dir_next+0xe4>
 800fa32:	2302      	movs	r3, #2
 800fa34:	e0d3      	b.n	800fbde <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa3c:	d101      	bne.n	800fa42 <dir_next+0xf0>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e0cd      	b.n	800fbde <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa4e:	695b      	ldr	r3, [r3, #20]
 800fa50:	697a      	ldr	r2, [r7, #20]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	f0c0 808e 	bcc.w	800fb74 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d101      	bne.n	800fa62 <dir_next+0x110>
 800fa5e:	2304      	movs	r3, #4
 800fa60:	e0bd      	b.n	800fbde <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	4619      	mov	r1, r3
 800fa74:	4610      	mov	r0, r2
 800fa76:	f7ff fdb6 	bl	800f5e6 <create_chain>
 800fa7a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d101      	bne.n	800fa86 <dir_next+0x134>
 800fa82:	2307      	movs	r3, #7
 800fa84:	e0ab      	b.n	800fbde <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d101      	bne.n	800fa90 <dir_next+0x13e>
 800fa8c:	2302      	movs	r3, #2
 800fa8e:	e0a6      	b.n	800fbde <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa96:	d101      	bne.n	800fa9c <dir_next+0x14a>
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e0a0      	b.n	800fbde <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7ff f987 	bl	800edb8 <sync_window>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d001      	beq.n	800fab4 <dir_next+0x162>
 800fab0:	2301      	movs	r3, #1
 800fab2:	e094      	b.n	800fbde <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4618      	mov	r0, r3
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faca:	895b      	ldrh	r3, [r3, #10]
 800facc:	461a      	mov	r2, r3
 800face:	2100      	movs	r1, #0
 800fad0:	f7fe ff5a 	bl	800e988 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fae2:	681c      	ldr	r4, [r3, #0]
 800fae4:	6979      	ldr	r1, [r7, #20]
 800fae6:	4610      	mov	r0, r2
 800fae8:	f7ff faa9 	bl	800f03e <clust2sect>
 800faec:	4603      	mov	r3, r0
 800faee:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800faf2:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800faf4:	2300      	movs	r3, #0
 800faf6:	613b      	str	r3, [r7, #16]
 800faf8:	e021      	b.n	800fb3e <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb06:	2201      	movs	r2, #1
 800fb08:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7ff f950 	bl	800edb8 <sync_window>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d001      	beq.n	800fb22 <dir_next+0x1d0>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	e05d      	b.n	800fbde <dir_next+0x28c>
						dp->fs->winsect++;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800fb2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fb30:	3201      	adds	r2, #1
 800fb32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb36:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	613b      	str	r3, [r7, #16]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb4a:	789b      	ldrb	r3, [r3, #2]
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d3d2      	bcc.n	800fafa <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb68:	681a      	ldr	r2, [r3, #0]
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	1acb      	subs	r3, r1, r3
 800fb6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fb72:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	6979      	ldr	r1, [r7, #20]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7ff fa57 	bl	800f03e <clust2sect>
 800fb90:	4602      	mov	r2, r0
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb98:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	b29a      	uxth	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fba4:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbbc:	895b      	ldrh	r3, [r3, #10]
 800fbbe:	095b      	lsrs	r3, r3, #5
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbca:	fb01 f202 	mul.w	r2, r1, r2
 800fbce:	1a9b      	subs	r3, r3, r2
 800fbd0:	015b      	lsls	r3, r3, #5
 800fbd2:	4403      	add	r3, r0
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fbda:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	371c      	adds	r7, #28
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd90      	pop	{r4, r7, pc}

0800fbe6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b084      	sub	sp, #16
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
 800fbee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7ff fddf 	bl	800f7b6 <dir_sdi>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fbfc:	7bfb      	ldrb	r3, [r7, #15]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d135      	bne.n	800fc6e <dir_alloc+0x88>
		n = 0;
 800fc02:	2300      	movs	r3, #0
 800fc04:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	4619      	mov	r1, r3
 800fc18:	4610      	mov	r0, r2
 800fc1a:	f7ff f91f 	bl	800ee5c <move_window>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800fc22:	7bfb      	ldrb	r3, [r7, #15]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d121      	bne.n	800fc6c <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc2e:	695b      	ldr	r3, [r3, #20]
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	2be5      	cmp	r3, #229	; 0xe5
 800fc34:	d006      	beq.n	800fc44 <dir_alloc+0x5e>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc3c:	695b      	ldr	r3, [r3, #20]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d107      	bne.n	800fc54 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	3301      	adds	r3, #1
 800fc48:	60bb      	str	r3, [r7, #8]
 800fc4a:	68ba      	ldr	r2, [r7, #8]
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d102      	bne.n	800fc58 <dir_alloc+0x72>
 800fc52:	e00c      	b.n	800fc6e <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fc54:	2300      	movs	r3, #0
 800fc56:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800fc58:	2101      	movs	r1, #1
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f7ff fe79 	bl	800f952 <dir_next>
 800fc60:	4603      	mov	r3, r0
 800fc62:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800fc64:	7bfb      	ldrb	r3, [r7, #15]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d0cd      	beq.n	800fc06 <dir_alloc+0x20>
 800fc6a:	e000      	b.n	800fc6e <dir_alloc+0x88>
			if (res != FR_OK) break;
 800fc6c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fc6e:	7bfb      	ldrb	r3, [r7, #15]
 800fc70:	2b04      	cmp	r3, #4
 800fc72:	d101      	bne.n	800fc78 <dir_alloc+0x92>
 800fc74:	2307      	movs	r3, #7
 800fc76:	73fb      	strb	r3, [r7, #15]
	return res;
 800fc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800fc82:	b480      	push	{r7}
 800fc84:	b085      	sub	sp, #20
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	331b      	adds	r3, #27
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	021b      	lsls	r3, r3, #8
 800fc94:	b21a      	sxth	r2, r3
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	331a      	adds	r3, #26
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	b21b      	sxth	r3, r3
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	b21b      	sxth	r3, r3
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	2b03      	cmp	r3, #3
 800fcb0:	d10f      	bne.n	800fcd2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	3315      	adds	r3, #21
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	021b      	lsls	r3, r3, #8
 800fcba:	b21a      	sxth	r2, r3
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	3314      	adds	r3, #20
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	b21b      	sxth	r3, r3
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	b21b      	sxth	r3, r3
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	041b      	lsls	r3, r3, #16
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	60fb      	str	r3, [r7, #12]

	return cl;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bc80      	pop	{r7}
 800fcdc:	4770      	bx	lr

0800fcde <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800fcde:	b480      	push	{r7}
 800fce0:	b083      	sub	sp, #12
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
 800fce6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	331a      	adds	r3, #26
 800fcec:	683a      	ldr	r2, [r7, #0]
 800fcee:	b2d2      	uxtb	r2, r2
 800fcf0:	701a      	strb	r2, [r3, #0]
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	0a1b      	lsrs	r3, r3, #8
 800fcf8:	b29a      	uxth	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	331b      	adds	r3, #27
 800fcfe:	b2d2      	uxtb	r2, r2
 800fd00:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	0c1a      	lsrs	r2, r3, #16
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	3314      	adds	r3, #20
 800fd0a:	b2d2      	uxtb	r2, r2
 800fd0c:	701a      	strb	r2, [r3, #0]
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	0c1b      	lsrs	r3, r3, #16
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	0a1b      	lsrs	r3, r3, #8
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	3315      	adds	r3, #21
 800fd1c:	b2d2      	uxtb	r2, r2
 800fd1e:	701a      	strb	r2, [r3, #0]
}
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bc80      	pop	{r7}
 800fd28:	4770      	bx	lr

0800fd2a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b086      	sub	sp, #24
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fd32:	2100      	movs	r1, #0
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7ff fd3e 	bl	800f7b6 <dir_sdi>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fd3e:	7dfb      	ldrb	r3, [r7, #23]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d001      	beq.n	800fd48 <dir_find+0x1e>
 800fd44:	7dfb      	ldrb	r3, [r7, #23]
 800fd46:	e03f      	b.n	800fdc8 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd56:	691b      	ldr	r3, [r3, #16]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	4610      	mov	r0, r2
 800fd5c:	f7ff f87e 	bl	800ee5c <move_window>
 800fd60:	4603      	mov	r3, r0
 800fd62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fd64:	7dfb      	ldrb	r3, [r7, #23]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d12a      	bne.n	800fdc0 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fd7a:	7bfb      	ldrb	r3, [r7, #15]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d102      	bne.n	800fd86 <dir_find+0x5c>
 800fd80:	2304      	movs	r3, #4
 800fd82:	75fb      	strb	r3, [r7, #23]
 800fd84:	e01f      	b.n	800fdc6 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	330b      	adds	r3, #11
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	f003 0308 	and.w	r3, r3, #8
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d10b      	bne.n	800fdac <dir_find+0x82>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd9a:	699b      	ldr	r3, [r3, #24]
 800fd9c:	220b      	movs	r2, #11
 800fd9e:	4619      	mov	r1, r3
 800fda0:	6938      	ldr	r0, [r7, #16]
 800fda2:	f7fe fe0b 	bl	800e9bc <mem_cmp>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d00b      	beq.n	800fdc4 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800fdac:	2100      	movs	r1, #0
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7ff fdcf 	bl	800f952 <dir_next>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fdb8:	7dfb      	ldrb	r3, [r7, #23]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d0c4      	beq.n	800fd48 <dir_find+0x1e>
 800fdbe:	e002      	b.n	800fdc6 <dir_find+0x9c>
		if (res != FR_OK) break;
 800fdc0:	bf00      	nop
 800fdc2:	e000      	b.n	800fdc6 <dir_find+0x9c>
			break;
 800fdc4:	bf00      	nop

	return res;
 800fdc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3718      	adds	r7, #24
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fdd8:	2101      	movs	r1, #1
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7ff ff03 	bl	800fbe6 <dir_alloc>
 800fde0:	4603      	mov	r3, r0
 800fde2:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800fde4:	7bfb      	ldrb	r3, [r7, #15]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d12d      	bne.n	800fe46 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4610      	mov	r0, r2
 800fdfe:	f7ff f82d 	bl	800ee5c <move_window>
 800fe02:	4603      	mov	r3, r0
 800fe04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fe06:	7bfb      	ldrb	r3, [r7, #15]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d11c      	bne.n	800fe46 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe12:	695b      	ldr	r3, [r3, #20]
 800fe14:	2220      	movs	r2, #32
 800fe16:	2100      	movs	r1, #0
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7fe fdb5 	bl	800e988 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe24:	6958      	ldr	r0, [r3, #20]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe2c:	699b      	ldr	r3, [r3, #24]
 800fe2e:	220b      	movs	r2, #11
 800fe30:	4619      	mov	r1, r3
 800fe32:	f7fe fd8b 	bl	800e94c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe42:	2201      	movs	r2, #1
 800fe44:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800fe46:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b088      	sub	sp, #32
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	60fb      	str	r3, [r7, #12]
 800fe60:	e002      	b.n	800fe68 <create_name+0x18>
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	3301      	adds	r3, #1
 800fe66:	60fb      	str	r3, [r7, #12]
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	2b2f      	cmp	r3, #47	; 0x2f
 800fe6e:	d0f8      	beq.n	800fe62 <create_name+0x12>
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	2b5c      	cmp	r3, #92	; 0x5c
 800fe76:	d0f4      	beq.n	800fe62 <create_name+0x12>
	sfn = dp->fn;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe7e:	699b      	ldr	r3, [r3, #24]
 800fe80:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fe82:	220b      	movs	r2, #11
 800fe84:	2120      	movs	r1, #32
 800fe86:	68b8      	ldr	r0, [r7, #8]
 800fe88:	f7fe fd7e 	bl	800e988 <mem_set>
	si = i = b = 0; ni = 8;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	77fb      	strb	r3, [r7, #31]
 800fe90:	2300      	movs	r3, #0
 800fe92:	613b      	str	r3, [r7, #16]
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	617b      	str	r3, [r7, #20]
 800fe98:	2308      	movs	r3, #8
 800fe9a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	1c5a      	adds	r2, r3, #1
 800fea0:	617a      	str	r2, [r7, #20]
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	4413      	add	r3, r2
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800feaa:	7fbb      	ldrb	r3, [r7, #30]
 800feac:	2b20      	cmp	r3, #32
 800feae:	d953      	bls.n	800ff58 <create_name+0x108>
 800feb0:	7fbb      	ldrb	r3, [r7, #30]
 800feb2:	2b2f      	cmp	r3, #47	; 0x2f
 800feb4:	d050      	beq.n	800ff58 <create_name+0x108>
 800feb6:	7fbb      	ldrb	r3, [r7, #30]
 800feb8:	2b5c      	cmp	r3, #92	; 0x5c
 800feba:	d04d      	beq.n	800ff58 <create_name+0x108>
		if (c == '.' || i >= ni) {
 800febc:	7fbb      	ldrb	r3, [r7, #30]
 800febe:	2b2e      	cmp	r3, #46	; 0x2e
 800fec0:	d003      	beq.n	800feca <create_name+0x7a>
 800fec2:	693a      	ldr	r2, [r7, #16]
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d30f      	bcc.n	800feea <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800feca:	69bb      	ldr	r3, [r7, #24]
 800fecc:	2b08      	cmp	r3, #8
 800fece:	d102      	bne.n	800fed6 <create_name+0x86>
 800fed0:	7fbb      	ldrb	r3, [r7, #30]
 800fed2:	2b2e      	cmp	r3, #46	; 0x2e
 800fed4:	d001      	beq.n	800feda <create_name+0x8a>
 800fed6:	2306      	movs	r3, #6
 800fed8:	e073      	b.n	800ffc2 <create_name+0x172>
			i = 8; ni = 11;
 800feda:	2308      	movs	r3, #8
 800fedc:	613b      	str	r3, [r7, #16]
 800fede:	230b      	movs	r3, #11
 800fee0:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800fee2:	7ffb      	ldrb	r3, [r7, #31]
 800fee4:	009b      	lsls	r3, r3, #2
 800fee6:	77fb      	strb	r3, [r7, #31]
 800fee8:	e035      	b.n	800ff56 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 800feea:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	da08      	bge.n	800ff04 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 800fef2:	7ffb      	ldrb	r3, [r7, #31]
 800fef4:	f043 0303 	orr.w	r3, r3, #3
 800fef8:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fefa:	7fbb      	ldrb	r3, [r7, #30]
 800fefc:	3b80      	subs	r3, #128	; 0x80
 800fefe:	4a33      	ldr	r2, [pc, #204]	; (800ffcc <create_name+0x17c>)
 800ff00:	5cd3      	ldrb	r3, [r2, r3]
 800ff02:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800ff04:	7fbb      	ldrb	r3, [r7, #30]
 800ff06:	4619      	mov	r1, r3
 800ff08:	4831      	ldr	r0, [pc, #196]	; (800ffd0 <create_name+0x180>)
 800ff0a:	f7fe fd7d 	bl	800ea08 <chk_chr>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d001      	beq.n	800ff18 <create_name+0xc8>
				return FR_INVALID_NAME;
 800ff14:	2306      	movs	r3, #6
 800ff16:	e054      	b.n	800ffc2 <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800ff18:	7fbb      	ldrb	r3, [r7, #30]
 800ff1a:	2b40      	cmp	r3, #64	; 0x40
 800ff1c:	d907      	bls.n	800ff2e <create_name+0xde>
 800ff1e:	7fbb      	ldrb	r3, [r7, #30]
 800ff20:	2b5a      	cmp	r3, #90	; 0x5a
 800ff22:	d804      	bhi.n	800ff2e <create_name+0xde>
				b |= 2;
 800ff24:	7ffb      	ldrb	r3, [r7, #31]
 800ff26:	f043 0302 	orr.w	r3, r3, #2
 800ff2a:	77fb      	strb	r3, [r7, #31]
 800ff2c:	e00c      	b.n	800ff48 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800ff2e:	7fbb      	ldrb	r3, [r7, #30]
 800ff30:	2b60      	cmp	r3, #96	; 0x60
 800ff32:	d909      	bls.n	800ff48 <create_name+0xf8>
 800ff34:	7fbb      	ldrb	r3, [r7, #30]
 800ff36:	2b7a      	cmp	r3, #122	; 0x7a
 800ff38:	d806      	bhi.n	800ff48 <create_name+0xf8>
					b |= 1; c -= 0x20;
 800ff3a:	7ffb      	ldrb	r3, [r7, #31]
 800ff3c:	f043 0301 	orr.w	r3, r3, #1
 800ff40:	77fb      	strb	r3, [r7, #31]
 800ff42:	7fbb      	ldrb	r3, [r7, #30]
 800ff44:	3b20      	subs	r3, #32
 800ff46:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	613a      	str	r2, [r7, #16]
 800ff4e:	68ba      	ldr	r2, [r7, #8]
 800ff50:	4413      	add	r3, r2
 800ff52:	7fba      	ldrb	r2, [r7, #30]
 800ff54:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ff56:	e7a1      	b.n	800fe9c <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ff58:	68fa      	ldr	r2, [r7, #12]
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	441a      	add	r2, r3
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800ff62:	7fbb      	ldrb	r3, [r7, #30]
 800ff64:	2b20      	cmp	r3, #32
 800ff66:	d801      	bhi.n	800ff6c <create_name+0x11c>
 800ff68:	2304      	movs	r3, #4
 800ff6a:	e000      	b.n	800ff6e <create_name+0x11e>
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d101      	bne.n	800ff7a <create_name+0x12a>
 800ff76:	2306      	movs	r3, #6
 800ff78:	e023      	b.n	800ffc2 <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	2be5      	cmp	r3, #229	; 0xe5
 800ff80:	d102      	bne.n	800ff88 <create_name+0x138>
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	2205      	movs	r2, #5
 800ff86:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	2b08      	cmp	r3, #8
 800ff8c:	d102      	bne.n	800ff94 <create_name+0x144>
 800ff8e:	7ffb      	ldrb	r3, [r7, #31]
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800ff94:	7ffb      	ldrb	r3, [r7, #31]
 800ff96:	f003 0303 	and.w	r3, r3, #3
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d103      	bne.n	800ffa6 <create_name+0x156>
 800ff9e:	7fbb      	ldrb	r3, [r7, #30]
 800ffa0:	f043 0310 	orr.w	r3, r3, #16
 800ffa4:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800ffa6:	7ffb      	ldrb	r3, [r7, #31]
 800ffa8:	f003 030c 	and.w	r3, r3, #12
 800ffac:	2b04      	cmp	r3, #4
 800ffae:	d103      	bne.n	800ffb8 <create_name+0x168>
 800ffb0:	7fbb      	ldrb	r3, [r7, #30]
 800ffb2:	f043 0308 	orr.w	r3, r3, #8
 800ffb6:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	330b      	adds	r3, #11
 800ffbc:	7fba      	ldrb	r2, [r7, #30]
 800ffbe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ffc0:	2300      	movs	r3, #0
#endif
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3720      	adds	r7, #32
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	0801616c 	.word	0x0801616c
 800ffd0:	0801595c 	.word	0x0801595c

0800ffd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	2b2f      	cmp	r3, #47	; 0x2f
 800ffe4:	d003      	beq.n	800ffee <follow_path+0x1a>
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	2b5c      	cmp	r3, #92	; 0x5c
 800ffec:	d102      	bne.n	800fff4 <follow_path+0x20>
		path++;
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	3301      	adds	r3, #1
 800fff2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fffa:	461a      	mov	r2, r3
 800fffc:	2300      	movs	r3, #0
 800fffe:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	2b1f      	cmp	r3, #31
 8010006:	d80c      	bhi.n	8010022 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8010008:	2100      	movs	r1, #0
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7ff fbd3 	bl	800f7b6 <dir_sdi>
 8010010:	4603      	mov	r3, r0
 8010012:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801001a:	461a      	mov	r2, r3
 801001c:	2300      	movs	r3, #0
 801001e:	6153      	str	r3, [r2, #20]
 8010020:	e049      	b.n	80100b6 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010022:	463b      	mov	r3, r7
 8010024:	4619      	mov	r1, r3
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7ff ff12 	bl	800fe50 <create_name>
 801002c:	4603      	mov	r3, r0
 801002e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010030:	7bfb      	ldrb	r3, [r7, #15]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d13a      	bne.n	80100ac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f7ff fe77 	bl	800fd2a <dir_find>
 801003c:	4603      	mov	r3, r0
 801003e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010046:	699b      	ldr	r3, [r3, #24]
 8010048:	7adb      	ldrb	r3, [r3, #11]
 801004a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 801004c:	7bfb      	ldrb	r3, [r7, #15]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00a      	beq.n	8010068 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010052:	7bfb      	ldrb	r3, [r7, #15]
 8010054:	2b04      	cmp	r3, #4
 8010056:	d12b      	bne.n	80100b0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010058:	7bbb      	ldrb	r3, [r7, #14]
 801005a:	f003 0304 	and.w	r3, r3, #4
 801005e:	2b00      	cmp	r3, #0
 8010060:	d126      	bne.n	80100b0 <follow_path+0xdc>
 8010062:	2305      	movs	r3, #5
 8010064:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8010066:	e023      	b.n	80100b0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010068:	7bbb      	ldrb	r3, [r7, #14]
 801006a:	f003 0304 	and.w	r3, r3, #4
 801006e:	2b00      	cmp	r3, #0
 8010070:	d120      	bne.n	80100b4 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010078:	695b      	ldr	r3, [r3, #20]
 801007a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	330b      	adds	r3, #11
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	f003 0310 	and.w	r3, r3, #16
 8010086:	2b00      	cmp	r3, #0
 8010088:	d102      	bne.n	8010090 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 801008a:	2305      	movs	r3, #5
 801008c:	73fb      	strb	r3, [r7, #15]
 801008e:	e012      	b.n	80100b6 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	68b9      	ldr	r1, [r7, #8]
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff fdf1 	bl	800fc82 <ld_clust>
 80100a0:	4602      	mov	r2, r0
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80100aa:	e7ba      	b.n	8010022 <follow_path+0x4e>
			if (res != FR_OK) break;
 80100ac:	bf00      	nop
 80100ae:	e002      	b.n	80100b6 <follow_path+0xe2>
				break;
 80100b0:	bf00      	nop
 80100b2:	e000      	b.n	80100b6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80100b4:	bf00      	nop
		}
	}

	return res;
 80100b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3710      	adds	r7, #16
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b087      	sub	sp, #28
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80100c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d031      	beq.n	801013a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	617b      	str	r3, [r7, #20]
 80100dc:	e002      	b.n	80100e4 <get_ldnumber+0x24>
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	3301      	adds	r3, #1
 80100e2:	617b      	str	r3, [r7, #20]
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	2b20      	cmp	r3, #32
 80100ea:	d903      	bls.n	80100f4 <get_ldnumber+0x34>
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	2b3a      	cmp	r3, #58	; 0x3a
 80100f2:	d1f4      	bne.n	80100de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	2b3a      	cmp	r3, #58	; 0x3a
 80100fa:	d11c      	bne.n	8010136 <get_ldnumber+0x76>
			tp = *path;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	1c5a      	adds	r2, r3, #1
 8010106:	60fa      	str	r2, [r7, #12]
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	3b30      	subs	r3, #48	; 0x30
 801010c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	2b09      	cmp	r3, #9
 8010112:	d80e      	bhi.n	8010132 <get_ldnumber+0x72>
 8010114:	68fa      	ldr	r2, [r7, #12]
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	429a      	cmp	r2, r3
 801011a:	d10a      	bne.n	8010132 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d107      	bne.n	8010132 <get_ldnumber+0x72>
					vol = (int)i;
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	3301      	adds	r3, #1
 801012a:	617b      	str	r3, [r7, #20]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	697a      	ldr	r2, [r7, #20]
 8010130:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	e002      	b.n	801013c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010136:	2300      	movs	r3, #0
 8010138:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801013a:	693b      	ldr	r3, [r7, #16]
}
 801013c:	4618      	mov	r0, r3
 801013e:	371c      	adds	r7, #28
 8010140:	46bd      	mov	sp, r7
 8010142:	bc80      	pop	{r7}
 8010144:	4770      	bx	lr
	...

08010148 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010158:	2200      	movs	r2, #0
 801015a:	711a      	strb	r2, [r3, #4]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010162:	461a      	mov	r2, r3
 8010164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010168:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 801016a:	6839      	ldr	r1, [r7, #0]
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7fe fe75 	bl	800ee5c <move_window>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d001      	beq.n	801017c <check_fs+0x34>
		return 3;
 8010178:	2303      	movs	r3, #3
 801017a:	e04a      	b.n	8010212 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010182:	3301      	adds	r3, #1
 8010184:	781b      	ldrb	r3, [r3, #0]
 8010186:	021b      	lsls	r3, r3, #8
 8010188:	b21a      	sxth	r2, r3
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8010190:	b21b      	sxth	r3, r3
 8010192:	4313      	orrs	r3, r2
 8010194:	b21b      	sxth	r3, r3
 8010196:	4a21      	ldr	r2, [pc, #132]	; (801021c <check_fs+0xd4>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d001      	beq.n	80101a0 <check_fs+0x58>
		return 2;
 801019c:	2302      	movs	r3, #2
 801019e:	e038      	b.n	8010212 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	3336      	adds	r3, #54	; 0x36
 80101a4:	3303      	adds	r3, #3
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	061a      	lsls	r2, r3, #24
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	3336      	adds	r3, #54	; 0x36
 80101ae:	3302      	adds	r3, #2
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	041b      	lsls	r3, r3, #16
 80101b4:	4313      	orrs	r3, r2
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	3236      	adds	r2, #54	; 0x36
 80101ba:	3201      	adds	r2, #1
 80101bc:	7812      	ldrb	r2, [r2, #0]
 80101be:	0212      	lsls	r2, r2, #8
 80101c0:	4313      	orrs	r3, r2
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80101c8:	4313      	orrs	r3, r2
 80101ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80101ce:	4a14      	ldr	r2, [pc, #80]	; (8010220 <check_fs+0xd8>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d101      	bne.n	80101d8 <check_fs+0x90>
		return 0;
 80101d4:	2300      	movs	r3, #0
 80101d6:	e01c      	b.n	8010212 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	3352      	adds	r3, #82	; 0x52
 80101dc:	3303      	adds	r3, #3
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	061a      	lsls	r2, r3, #24
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	3352      	adds	r3, #82	; 0x52
 80101e6:	3302      	adds	r3, #2
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	041b      	lsls	r3, r3, #16
 80101ec:	4313      	orrs	r3, r2
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	3252      	adds	r2, #82	; 0x52
 80101f2:	3201      	adds	r2, #1
 80101f4:	7812      	ldrb	r2, [r2, #0]
 80101f6:	0212      	lsls	r2, r2, #8
 80101f8:	4313      	orrs	r3, r2
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8010200:	4313      	orrs	r3, r2
 8010202:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010206:	4a06      	ldr	r2, [pc, #24]	; (8010220 <check_fs+0xd8>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d101      	bne.n	8010210 <check_fs+0xc8>
		return 0;
 801020c:	2300      	movs	r3, #0
 801020e:	e000      	b.n	8010212 <check_fs+0xca>

	return 1;
 8010210:	2301      	movs	r3, #1
}
 8010212:	4618      	mov	r0, r3
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	ffffaa55 	.word	0xffffaa55
 8010220:	00544146 	.word	0x00544146

08010224 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b096      	sub	sp, #88	; 0x58
 8010228:	af00      	add	r7, sp, #0
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	4613      	mov	r3, r2
 8010230:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2200      	movs	r2, #0
 8010236:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010238:	68b8      	ldr	r0, [r7, #8]
 801023a:	f7ff ff41 	bl	80100c0 <get_ldnumber>
 801023e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010242:	2b00      	cmp	r3, #0
 8010244:	da01      	bge.n	801024a <find_volume+0x26>
 8010246:	230b      	movs	r3, #11
 8010248:	e311      	b.n	801086e <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801024a:	4a98      	ldr	r2, [pc, #608]	; (80104ac <find_volume+0x288>)
 801024c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010252:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010256:	2b00      	cmp	r3, #0
 8010258:	d101      	bne.n	801025e <find_volume+0x3a>
 801025a:	230c      	movs	r3, #12
 801025c:	e307      	b.n	801086e <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010262:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8010264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d01c      	beq.n	80102aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010276:	785b      	ldrb	r3, [r3, #1]
 8010278:	4618      	mov	r0, r3
 801027a:	f7fe fac9 	bl	800e810 <disk_status>
 801027e:	4603      	mov	r3, r0
 8010280:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010284:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010288:	f003 0301 	and.w	r3, r3, #1
 801028c:	2b00      	cmp	r3, #0
 801028e:	d10c      	bne.n	80102aa <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8010290:	79fb      	ldrb	r3, [r7, #7]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d007      	beq.n	80102a6 <find_volume+0x82>
 8010296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801029a:	f003 0304 	and.w	r3, r3, #4
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d001      	beq.n	80102a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80102a2:	230a      	movs	r3, #10
 80102a4:	e2e3      	b.n	801086e <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80102a6:	2300      	movs	r3, #0
 80102a8:	e2e1      	b.n	801086e <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80102aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102b0:	2200      	movs	r2, #0
 80102b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80102b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102b6:	b2da      	uxtb	r2, r3
 80102b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80102c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102c6:	785b      	ldrb	r3, [r3, #1]
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fe fabb 	bl	800e844 <disk_initialize>
 80102ce:	4603      	mov	r3, r0
 80102d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80102d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102d8:	f003 0301 	and.w	r3, r3, #1
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d001      	beq.n	80102e4 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80102e0:	2303      	movs	r3, #3
 80102e2:	e2c4      	b.n	801086e <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80102e4:	79fb      	ldrb	r3, [r7, #7]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d007      	beq.n	80102fa <find_volume+0xd6>
 80102ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102ee:	f003 0304 	and.w	r3, r3, #4
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d001      	beq.n	80102fa <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80102f6:	230a      	movs	r3, #10
 80102f8:	e2b9      	b.n	801086e <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80102fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010300:	7858      	ldrb	r0, [r3, #1]
 8010302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010308:	330a      	adds	r3, #10
 801030a:	461a      	mov	r2, r3
 801030c:	2102      	movs	r1, #2
 801030e:	f7fe faff 	bl	800e910 <disk_ioctl>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d10d      	bne.n	8010334 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8010318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801031e:	895b      	ldrh	r3, [r3, #10]
 8010320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010324:	d306      	bcc.n	8010334 <find_volume+0x110>
 8010326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801032c:	895b      	ldrh	r3, [r3, #10]
 801032e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010332:	d901      	bls.n	8010338 <find_volume+0x114>
 8010334:	2301      	movs	r3, #1
 8010336:	e29a      	b.n	801086e <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 801033c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801033e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010340:	f7ff ff02 	bl	8010148 <check_fs>
 8010344:	4603      	mov	r3, r0
 8010346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 801034a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801034e:	2b01      	cmp	r3, #1
 8010350:	d153      	bne.n	80103fa <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8010352:	2300      	movs	r3, #0
 8010354:	643b      	str	r3, [r7, #64]	; 0x40
 8010356:	e028      	b.n	80103aa <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8010358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801035a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801035c:	011b      	lsls	r3, r3, #4
 801035e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010362:	4413      	add	r3, r2
 8010364:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8010366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010368:	3304      	adds	r3, #4
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d012      	beq.n	8010396 <find_volume+0x172>
 8010370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010372:	330b      	adds	r3, #11
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	061a      	lsls	r2, r3, #24
 8010378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037a:	330a      	adds	r3, #10
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	041b      	lsls	r3, r3, #16
 8010380:	4313      	orrs	r3, r2
 8010382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010384:	3209      	adds	r2, #9
 8010386:	7812      	ldrb	r2, [r2, #0]
 8010388:	0212      	lsls	r2, r2, #8
 801038a:	4313      	orrs	r3, r2
 801038c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801038e:	3208      	adds	r2, #8
 8010390:	7812      	ldrb	r2, [r2, #0]
 8010392:	431a      	orrs	r2, r3
 8010394:	e000      	b.n	8010398 <find_volume+0x174>
 8010396:	2200      	movs	r2, #0
 8010398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	3358      	adds	r3, #88	; 0x58
 801039e:	443b      	add	r3, r7
 80103a0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80103a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a6:	3301      	adds	r3, #1
 80103a8:	643b      	str	r3, [r7, #64]	; 0x40
 80103aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103ac:	2b03      	cmp	r3, #3
 80103ae:	d9d3      	bls.n	8010358 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80103b0:	2300      	movs	r3, #0
 80103b2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80103b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d002      	beq.n	80103c0 <find_volume+0x19c>
 80103ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103bc:	3b01      	subs	r3, #1
 80103be:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80103c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	3358      	adds	r3, #88	; 0x58
 80103c6:	443b      	add	r3, r7
 80103c8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80103cc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80103ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d005      	beq.n	80103e0 <find_volume+0x1bc>
 80103d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80103d8:	f7ff feb6 	bl	8010148 <check_fs>
 80103dc:	4603      	mov	r3, r0
 80103de:	e000      	b.n	80103e2 <find_volume+0x1be>
 80103e0:	2302      	movs	r3, #2
 80103e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80103e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d005      	beq.n	80103fa <find_volume+0x1d6>
 80103ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103f0:	3301      	adds	r3, #1
 80103f2:	643b      	str	r3, [r7, #64]	; 0x40
 80103f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103f6:	2b03      	cmp	r3, #3
 80103f8:	d9e2      	bls.n	80103c0 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80103fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103fe:	2b03      	cmp	r3, #3
 8010400:	d101      	bne.n	8010406 <find_volume+0x1e2>
 8010402:	2301      	movs	r3, #1
 8010404:	e233      	b.n	801086e <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8010406:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <find_volume+0x1ee>
 801040e:	230d      	movs	r3, #13
 8010410:	e22d      	b.n	801086e <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010414:	7b1b      	ldrb	r3, [r3, #12]
 8010416:	021b      	lsls	r3, r3, #8
 8010418:	b21a      	sxth	r2, r3
 801041a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041c:	7adb      	ldrb	r3, [r3, #11]
 801041e:	b21b      	sxth	r3, r3
 8010420:	4313      	orrs	r3, r2
 8010422:	b21a      	sxth	r2, r3
 8010424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801042a:	895b      	ldrh	r3, [r3, #10]
 801042c:	b21b      	sxth	r3, r3
 801042e:	429a      	cmp	r2, r3
 8010430:	d001      	beq.n	8010436 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8010432:	230d      	movs	r3, #13
 8010434:	e21b      	b.n	801086e <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8010436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010438:	7ddb      	ldrb	r3, [r3, #23]
 801043a:	021b      	lsls	r3, r3, #8
 801043c:	b21a      	sxth	r2, r3
 801043e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010440:	7d9b      	ldrb	r3, [r3, #22]
 8010442:	b21b      	sxth	r3, r3
 8010444:	4313      	orrs	r3, r2
 8010446:	b21b      	sxth	r3, r3
 8010448:	b29b      	uxth	r3, r3
 801044a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 801044c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801044e:	2b00      	cmp	r3, #0
 8010450:	d112      	bne.n	8010478 <find_volume+0x254>
 8010452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010454:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010458:	061a      	lsls	r2, r3, #24
 801045a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8010460:	041b      	lsls	r3, r3, #16
 8010462:	4313      	orrs	r3, r2
 8010464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010466:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 801046a:	0212      	lsls	r2, r2, #8
 801046c:	4313      	orrs	r3, r2
 801046e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010470:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8010474:	4313      	orrs	r3, r2
 8010476:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8010478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801047e:	461a      	mov	r2, r3
 8010480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010482:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8010484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010486:	7c1a      	ldrb	r2, [r3, #16]
 8010488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801048e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8010490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010496:	78db      	ldrb	r3, [r3, #3]
 8010498:	2b01      	cmp	r3, #1
 801049a:	d009      	beq.n	80104b0 <find_volume+0x28c>
 801049c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104a2:	78db      	ldrb	r3, [r3, #3]
 80104a4:	2b02      	cmp	r3, #2
 80104a6:	d003      	beq.n	80104b0 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80104a8:	230d      	movs	r3, #13
 80104aa:	e1e0      	b.n	801086e <find_volume+0x64a>
 80104ac:	20006244 	.word	0x20006244
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80104b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104b6:	78db      	ldrb	r3, [r3, #3]
 80104b8:	461a      	mov	r2, r3
 80104ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104bc:	fb02 f303 	mul.w	r3, r2, r3
 80104c0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80104c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c4:	7b5a      	ldrb	r2, [r3, #13]
 80104c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104cc:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80104ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104d4:	789b      	ldrb	r3, [r3, #2]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d00c      	beq.n	80104f4 <find_volume+0x2d0>
 80104da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104e0:	789b      	ldrb	r3, [r3, #2]
 80104e2:	461a      	mov	r2, r3
 80104e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104ea:	789b      	ldrb	r3, [r3, #2]
 80104ec:	3b01      	subs	r3, #1
 80104ee:	4013      	ands	r3, r2
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d001      	beq.n	80104f8 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80104f4:	230d      	movs	r3, #13
 80104f6:	e1ba      	b.n	801086e <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80104f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fa:	7c9b      	ldrb	r3, [r3, #18]
 80104fc:	021b      	lsls	r3, r3, #8
 80104fe:	b21a      	sxth	r2, r3
 8010500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010502:	7c5b      	ldrb	r3, [r3, #17]
 8010504:	b21b      	sxth	r3, r3
 8010506:	4313      	orrs	r3, r2
 8010508:	b21b      	sxth	r3, r3
 801050a:	b29a      	uxth	r2, r3
 801050c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010512:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8010514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801051a:	891b      	ldrh	r3, [r3, #8]
 801051c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801051e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010522:	8952      	ldrh	r2, [r2, #10]
 8010524:	0952      	lsrs	r2, r2, #5
 8010526:	b292      	uxth	r2, r2
 8010528:	fbb3 f1f2 	udiv	r1, r3, r2
 801052c:	fb01 f202 	mul.w	r2, r1, r2
 8010530:	1a9b      	subs	r3, r3, r2
 8010532:	b29b      	uxth	r3, r3
 8010534:	2b00      	cmp	r3, #0
 8010536:	d001      	beq.n	801053c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8010538:	230d      	movs	r3, #13
 801053a:	e198      	b.n	801086e <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 801053c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053e:	7d1b      	ldrb	r3, [r3, #20]
 8010540:	021b      	lsls	r3, r3, #8
 8010542:	b21a      	sxth	r2, r3
 8010544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010546:	7cdb      	ldrb	r3, [r3, #19]
 8010548:	b21b      	sxth	r3, r3
 801054a:	4313      	orrs	r3, r2
 801054c:	b21b      	sxth	r3, r3
 801054e:	b29b      	uxth	r3, r3
 8010550:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8010552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010554:	2b00      	cmp	r3, #0
 8010556:	d112      	bne.n	801057e <find_volume+0x35a>
 8010558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801055e:	061a      	lsls	r2, r3, #24
 8010560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010562:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010566:	041b      	lsls	r3, r3, #16
 8010568:	4313      	orrs	r3, r2
 801056a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801056c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8010570:	0212      	lsls	r2, r2, #8
 8010572:	4313      	orrs	r3, r2
 8010574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010576:	f892 2020 	ldrb.w	r2, [r2, #32]
 801057a:	4313      	orrs	r3, r2
 801057c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 801057e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010580:	7bdb      	ldrb	r3, [r3, #15]
 8010582:	021b      	lsls	r3, r3, #8
 8010584:	b21a      	sxth	r2, r3
 8010586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010588:	7b9b      	ldrb	r3, [r3, #14]
 801058a:	b21b      	sxth	r3, r3
 801058c:	4313      	orrs	r3, r2
 801058e:	b21b      	sxth	r3, r3
 8010590:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8010592:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010594:	2b00      	cmp	r3, #0
 8010596:	d101      	bne.n	801059c <find_volume+0x378>
 8010598:	230d      	movs	r3, #13
 801059a:	e168      	b.n	801086e <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 801059c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801059e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105a0:	4413      	add	r3, r2
 80105a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80105a8:	8911      	ldrh	r1, [r2, #8]
 80105aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80105b0:	8952      	ldrh	r2, [r2, #10]
 80105b2:	0952      	lsrs	r2, r2, #5
 80105b4:	b292      	uxth	r2, r2
 80105b6:	fbb1 f2f2 	udiv	r2, r1, r2
 80105ba:	b292      	uxth	r2, r2
 80105bc:	4413      	add	r3, r2
 80105be:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80105c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d201      	bcs.n	80105cc <find_volume+0x3a8>
 80105c8:	230d      	movs	r3, #13
 80105ca:	e150      	b.n	801086e <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80105cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d0:	1ad3      	subs	r3, r2, r3
 80105d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80105d8:	7892      	ldrb	r2, [r2, #2]
 80105da:	fbb3 f3f2 	udiv	r3, r3, r2
 80105de:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d101      	bne.n	80105ea <find_volume+0x3c6>
 80105e6:	230d      	movs	r3, #13
 80105e8:	e141      	b.n	801086e <find_volume+0x64a>
	fmt = FS_FAT12;
 80105ea:	2301      	movs	r3, #1
 80105ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d902      	bls.n	8010600 <find_volume+0x3dc>
 80105fa:	2302      	movs	r3, #2
 80105fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8010600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010602:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010606:	4293      	cmp	r3, r2
 8010608:	d902      	bls.n	8010610 <find_volume+0x3ec>
 801060a:	2303      	movs	r3, #3
 801060c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8010610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010612:	3302      	adds	r3, #2
 8010614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801061a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 801061c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010622:	461a      	mov	r2, r3
 8010624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010626:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8010628:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801062a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801062c:	4413      	add	r3, r2
 801062e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010630:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010634:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8010636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063a:	4413      	add	r3, r2
 801063c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801063e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010642:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8010644:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010648:	2b03      	cmp	r3, #3
 801064a:	d124      	bne.n	8010696 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 801064c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010652:	891b      	ldrh	r3, [r3, #8]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d001      	beq.n	801065c <find_volume+0x438>
 8010658:	230d      	movs	r3, #13
 801065a:	e108      	b.n	801086e <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 801065c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010662:	061a      	lsls	r2, r3, #24
 8010664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010666:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801066a:	041b      	lsls	r3, r3, #16
 801066c:	4313      	orrs	r3, r2
 801066e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010670:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8010674:	0212      	lsls	r2, r2, #8
 8010676:	4313      	orrs	r3, r2
 8010678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801067a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 801067e:	4313      	orrs	r3, r2
 8010680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010686:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8010688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801068e:	695b      	ldr	r3, [r3, #20]
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	647b      	str	r3, [r7, #68]	; 0x44
 8010694:	e02b      	b.n	80106ee <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8010696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801069c:	891b      	ldrh	r3, [r3, #8]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d101      	bne.n	80106a6 <find_volume+0x482>
 80106a2:	230d      	movs	r3, #13
 80106a4:	e0e3      	b.n	801086e <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80106a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106ac:	6a1a      	ldr	r2, [r3, #32]
 80106ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b0:	4413      	add	r3, r2
 80106b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80106b8:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80106ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80106be:	2b02      	cmp	r3, #2
 80106c0:	d105      	bne.n	80106ce <find_volume+0x4aa>
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106c8:	695b      	ldr	r3, [r3, #20]
 80106ca:	005b      	lsls	r3, r3, #1
 80106cc:	e00e      	b.n	80106ec <find_volume+0x4c8>
 80106ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106d4:	695a      	ldr	r2, [r3, #20]
 80106d6:	4613      	mov	r3, r2
 80106d8:	005b      	lsls	r3, r3, #1
 80106da:	4413      	add	r3, r2
 80106dc:	085a      	lsrs	r2, r3, #1
 80106de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106e4:	695b      	ldr	r3, [r3, #20]
 80106e6:	f003 0301 	and.w	r3, r3, #1
 80106ea:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80106ec:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80106ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106f4:	699a      	ldr	r2, [r3, #24]
 80106f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106fc:	895b      	ldrh	r3, [r3, #10]
 80106fe:	4619      	mov	r1, r3
 8010700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010702:	440b      	add	r3, r1
 8010704:	3b01      	subs	r3, #1
 8010706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010708:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801070c:	8949      	ldrh	r1, [r1, #10]
 801070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010712:	429a      	cmp	r2, r3
 8010714:	d201      	bcs.n	801071a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8010716:	230d      	movs	r3, #13
 8010718:	e0a9      	b.n	801086e <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 801071a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010720:	461a      	mov	r2, r3
 8010722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010726:	6113      	str	r3, [r2, #16]
 8010728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801072e:	691b      	ldr	r3, [r3, #16]
 8010730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010732:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010736:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8010738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801073e:	2280      	movs	r2, #128	; 0x80
 8010740:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8010742:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010746:	2b03      	cmp	r3, #3
 8010748:	d17a      	bne.n	8010840 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 801074a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010750:	021b      	lsls	r3, r3, #8
 8010752:	b21a      	sxth	r2, r3
 8010754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801075a:	b21b      	sxth	r3, r3
 801075c:	4313      	orrs	r3, r2
 801075e:	b21b      	sxth	r3, r3
 8010760:	2b01      	cmp	r3, #1
 8010762:	d16d      	bne.n	8010840 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8010764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010766:	3301      	adds	r3, #1
 8010768:	4619      	mov	r1, r3
 801076a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801076c:	f7fe fb76 	bl	800ee5c <move_window>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d164      	bne.n	8010840 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8010776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801077c:	2200      	movs	r2, #0
 801077e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010782:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8010786:	021b      	lsls	r3, r3, #8
 8010788:	b21a      	sxth	r2, r3
 801078a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8010790:	b21b      	sxth	r3, r3
 8010792:	4313      	orrs	r3, r2
 8010794:	b21b      	sxth	r3, r3
 8010796:	4a38      	ldr	r2, [pc, #224]	; (8010878 <find_volume+0x654>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d151      	bne.n	8010840 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 801079c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079e:	78db      	ldrb	r3, [r3, #3]
 80107a0:	061a      	lsls	r2, r3, #24
 80107a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a4:	789b      	ldrb	r3, [r3, #2]
 80107a6:	041b      	lsls	r3, r3, #16
 80107a8:	4313      	orrs	r3, r2
 80107aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107ac:	7852      	ldrb	r2, [r2, #1]
 80107ae:	0212      	lsls	r2, r2, #8
 80107b0:	4313      	orrs	r3, r2
 80107b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107b4:	7812      	ldrb	r2, [r2, #0]
 80107b6:	4313      	orrs	r3, r2
 80107b8:	4a30      	ldr	r2, [pc, #192]	; (801087c <find_volume+0x658>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d140      	bne.n	8010840 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80107be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c0:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80107c4:	061a      	lsls	r2, r3, #24
 80107c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c8:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80107cc:	041b      	lsls	r3, r3, #16
 80107ce:	4313      	orrs	r3, r2
 80107d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107d2:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80107d6:	0212      	lsls	r2, r2, #8
 80107d8:	4313      	orrs	r3, r2
 80107da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107dc:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80107e0:	4313      	orrs	r3, r2
 80107e2:	4a27      	ldr	r2, [pc, #156]	; (8010880 <find_volume+0x65c>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d12b      	bne.n	8010840 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80107e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ea:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80107ee:	061a      	lsls	r2, r3, #24
 80107f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80107f6:	041b      	lsls	r3, r3, #16
 80107f8:	4313      	orrs	r3, r2
 80107fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107fc:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8010800:	0212      	lsls	r2, r2, #8
 8010802:	4313      	orrs	r3, r2
 8010804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010806:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 801080a:	4313      	orrs	r3, r2
 801080c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801080e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010812:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8010814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010816:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 801081a:	061a      	lsls	r2, r3, #24
 801081c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8010822:	041b      	lsls	r3, r3, #16
 8010824:	4313      	orrs	r3, r2
 8010826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010828:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 801082c:	0212      	lsls	r2, r2, #8
 801082e:	4313      	orrs	r3, r2
 8010830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010832:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8010836:	4313      	orrs	r3, r2
 8010838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801083a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801083e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8010840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010846:	461a      	mov	r2, r3
 8010848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801084c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 801084e:	4b0d      	ldr	r3, [pc, #52]	; (8010884 <find_volume+0x660>)
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	3301      	adds	r3, #1
 8010854:	b29a      	uxth	r2, r3
 8010856:	4b0b      	ldr	r3, [pc, #44]	; (8010884 <find_volume+0x660>)
 8010858:	801a      	strh	r2, [r3, #0]
 801085a:	4b0a      	ldr	r3, [pc, #40]	; (8010884 <find_volume+0x660>)
 801085c:	881a      	ldrh	r2, [r3, #0]
 801085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010864:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8010866:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010868:	f7fe fa7c 	bl	800ed64 <clear_lock>
#endif

	return FR_OK;
 801086c:	2300      	movs	r3, #0
}
 801086e:	4618      	mov	r0, r3
 8010870:	3758      	adds	r7, #88	; 0x58
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	ffffaa55 	.word	0xffffaa55
 801087c:	41615252 	.word	0x41615252
 8010880:	61417272 	.word	0x61417272
 8010884:	20006248 	.word	0x20006248

08010888 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d02a      	beq.n	80108f0 <validate+0x68>
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d024      	beq.n	80108f0 <validate+0x68>
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d01b      	beq.n	80108f0 <validate+0x68>
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108c4:	88da      	ldrh	r2, [r3, #6]
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108cc:	889b      	ldrh	r3, [r3, #4]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d10e      	bne.n	80108f0 <validate+0x68>
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108de:	785b      	ldrb	r3, [r3, #1]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fd ff95 	bl	800e810 <disk_status>
 80108e6:	4603      	mov	r3, r0
 80108e8:	f003 0301 	and.w	r3, r3, #1
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d001      	beq.n	80108f4 <validate+0x6c>
		return FR_INVALID_OBJECT;
 80108f0:	2309      	movs	r3, #9
 80108f2:	e000      	b.n	80108f6 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3710      	adds	r7, #16
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
	...

08010900 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b088      	sub	sp, #32
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	4613      	mov	r3, r2
 801090c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8010912:	f107 0310 	add.w	r3, r7, #16
 8010916:	4618      	mov	r0, r3
 8010918:	f7ff fbd2 	bl	80100c0 <get_ldnumber>
 801091c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801091e:	69fb      	ldr	r3, [r7, #28]
 8010920:	2b00      	cmp	r3, #0
 8010922:	da01      	bge.n	8010928 <f_mount+0x28>
 8010924:	230b      	movs	r3, #11
 8010926:	e02f      	b.n	8010988 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010928:	4a19      	ldr	r2, [pc, #100]	; (8010990 <f_mount+0x90>)
 801092a:	69fb      	ldr	r3, [r7, #28]
 801092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010930:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d007      	beq.n	8010948 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8010938:	69b8      	ldr	r0, [r7, #24]
 801093a:	f7fe fa13 	bl	800ed64 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010944:	2200      	movs	r2, #0
 8010946:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d004      	beq.n	8010958 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010954:	2200      	movs	r2, #0
 8010956:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	490d      	ldr	r1, [pc, #52]	; (8010990 <f_mount+0x90>)
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <f_mount+0x6e>
 8010968:	79fb      	ldrb	r3, [r7, #7]
 801096a:	2b01      	cmp	r3, #1
 801096c:	d001      	beq.n	8010972 <f_mount+0x72>
 801096e:	2300      	movs	r3, #0
 8010970:	e00a      	b.n	8010988 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8010972:	f107 0108 	add.w	r1, r7, #8
 8010976:	f107 030c 	add.w	r3, r7, #12
 801097a:	2200      	movs	r2, #0
 801097c:	4618      	mov	r0, r3
 801097e:	f7ff fc51 	bl	8010224 <find_volume>
 8010982:	4603      	mov	r3, r0
 8010984:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010986:	7dfb      	ldrb	r3, [r7, #23]
}
 8010988:	4618      	mov	r0, r3
 801098a:	3720      	adds	r7, #32
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	20006244 	.word	0x20006244

08010994 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80109a2:	f843 0c44 	str.w	r0, [r3, #-68]
 80109a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80109aa:	f843 1c48 	str.w	r1, [r3, #-72]
 80109ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80109b2:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80109b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80109ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d101      	bne.n	80109c6 <f_open+0x32>
 80109c2:	2309      	movs	r3, #9
 80109c4:	e2e6      	b.n	8010f94 <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 80109c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80109ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80109ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109d2:	461a      	mov	r2, r3
 80109d4:	2300      	movs	r3, #0
 80109d6:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80109d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80109dc:	461a      	mov	r2, r3
 80109de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80109e2:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80109e6:	f003 031f 	and.w	r3, r3, #31
 80109ea:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80109ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80109f2:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80109f6:	f023 0301 	bic.w	r3, r3, #1
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	f107 0110 	add.w	r1, r7, #16
 8010a00:	3908      	subs	r1, #8
 8010a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a06:	3b10      	subs	r3, #16
 8010a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7ff fc09 	bl	8010224 <find_volume>
 8010a12:	4603      	mov	r3, r0
 8010a14:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010a18:	f102 020f 	add.w	r2, r2, #15
 8010a1c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8010a1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010a22:	f103 030f 	add.w	r3, r3, #15
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f040 82ae 	bne.w	8010f8a <f_open+0x5f6>
		INIT_BUF(dj);
 8010a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010a32:	461a      	mov	r2, r3
 8010a34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a38:	3b1c      	subs	r3, #28
 8010a3a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8010a3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010a42:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8010a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a4a:	3b10      	subs	r3, #16
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7ff fac0 	bl	800ffd4 <follow_path>
 8010a54:	4603      	mov	r3, r0
 8010a56:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010a5a:	f102 020f 	add.w	r2, r2, #15
 8010a5e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8010a60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010a64:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8010a68:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010a6c:	f102 0208 	add.w	r2, r2, #8
 8010a70:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010a72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010a76:	f103 030f 	add.w	r3, r3, #15
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d126      	bne.n	8010ace <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 8010a80:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010a84:	f103 0308 	add.w	r3, r3, #8
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d106      	bne.n	8010a9c <f_open+0x108>
				res = FR_INVALID_NAME;
 8010a8e:	2306      	movs	r3, #6
 8010a90:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010a94:	f102 020f 	add.w	r2, r2, #15
 8010a98:	7013      	strb	r3, [r2, #0]
 8010a9a:	e018      	b.n	8010ace <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010a9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010aa0:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010aa4:	f023 0301 	bic.w	r3, r3, #1
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	bf14      	ite	ne
 8010aac:	2301      	movne	r3, #1
 8010aae:	2300      	moveq	r3, #0
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010ab8:	3b10      	subs	r3, #16
 8010aba:	4611      	mov	r1, r2
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fd ffbd 	bl	800ea3c <chk_lock>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010ac8:	f102 020f 	add.w	r2, r2, #15
 8010acc:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010ace:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ad2:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010ad6:	f003 031c 	and.w	r3, r3, #28
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f000 8134 	beq.w	8010d48 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8010ae0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010ae4:	f103 030f 	add.w	r3, r3, #15
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d02e      	beq.n	8010b4c <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8010aee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010af2:	f103 030f 	add.w	r3, r3, #15
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	2b04      	cmp	r3, #4
 8010afa:	d112      	bne.n	8010b22 <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010afc:	f7fe f80e 	bl	800eb1c <enq_lock>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d007      	beq.n	8010b16 <f_open+0x182>
 8010b06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010b0a:	3b10      	subs	r3, #16
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7ff f95f 	bl	800fdd0 <dir_register>
 8010b12:	4603      	mov	r3, r0
 8010b14:	e000      	b.n	8010b18 <f_open+0x184>
 8010b16:	2312      	movs	r3, #18
 8010b18:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010b1c:	f102 020f 	add.w	r2, r2, #15
 8010b20:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010b22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b26:	461a      	mov	r2, r3
 8010b28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b2c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010b30:	f043 0308 	orr.w	r3, r3, #8
 8010b34:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8010b38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b3c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8010b40:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010b44:	f102 0208 	add.w	r2, r2, #8
 8010b48:	6013      	str	r3, [r2, #0]
 8010b4a:	e01f      	b.n	8010b8c <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010b4c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010b50:	f103 0308 	add.w	r3, r3, #8
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	330b      	adds	r3, #11
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	f003 0311 	and.w	r3, r3, #17
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d006      	beq.n	8010b70 <f_open+0x1dc>
					res = FR_DENIED;
 8010b62:	2307      	movs	r3, #7
 8010b64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010b68:	f102 020f 	add.w	r2, r2, #15
 8010b6c:	7013      	strb	r3, [r2, #0]
 8010b6e:	e00d      	b.n	8010b8c <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8010b70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b74:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010b78:	f003 0304 	and.w	r3, r3, #4
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d005      	beq.n	8010b8c <f_open+0x1f8>
						res = FR_EXIST;
 8010b80:	2308      	movs	r3, #8
 8010b82:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010b86:	f102 020f 	add.w	r2, r2, #15
 8010b8a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010b8c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010b90:	f103 030f 	add.w	r3, r3, #15
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f040 8108 	bne.w	8010dac <f_open+0x418>
 8010b9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ba0:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010ba4:	f003 0308 	and.w	r3, r3, #8
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f000 80ff 	beq.w	8010dac <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 8010bae:	f7fd fda9 	bl	800e704 <get_fattime>
 8010bb2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010bb6:	f103 0304 	add.w	r3, r3, #4
 8010bba:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8010bbc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010bc0:	f103 0308 	add.w	r3, r3, #8
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	330e      	adds	r3, #14
 8010bc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010bcc:	f102 0204 	add.w	r2, r2, #4
 8010bd0:	6812      	ldr	r2, [r2, #0]
 8010bd2:	b2d2      	uxtb	r2, r2
 8010bd4:	701a      	strb	r2, [r3, #0]
 8010bd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010bda:	f103 0304 	add.w	r3, r3, #4
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	0a1b      	lsrs	r3, r3, #8
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010bea:	f103 0308 	add.w	r3, r3, #8
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	330f      	adds	r3, #15
 8010bf2:	b2d2      	uxtb	r2, r2
 8010bf4:	701a      	strb	r2, [r3, #0]
 8010bf6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010bfa:	f103 0304 	add.w	r3, r3, #4
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	0c1a      	lsrs	r2, r3, #16
 8010c02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010c06:	f103 0308 	add.w	r3, r3, #8
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	3310      	adds	r3, #16
 8010c0e:	b2d2      	uxtb	r2, r2
 8010c10:	701a      	strb	r2, [r3, #0]
 8010c12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010c16:	f103 0304 	add.w	r3, r3, #4
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	0e1a      	lsrs	r2, r3, #24
 8010c1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010c22:	f103 0308 	add.w	r3, r3, #8
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	3311      	adds	r3, #17
 8010c2a:	b2d2      	uxtb	r2, r2
 8010c2c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8010c2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010c32:	f103 0308 	add.w	r3, r3, #8
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	330b      	adds	r3, #11
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8010c3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010c42:	f103 0308 	add.w	r3, r3, #8
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	331c      	adds	r3, #28
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	701a      	strb	r2, [r3, #0]
 8010c4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010c52:	f103 0308 	add.w	r3, r3, #8
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	331d      	adds	r3, #29
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	701a      	strb	r2, [r3, #0]
 8010c5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010c62:	f103 0308 	add.w	r3, r3, #8
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	331e      	adds	r3, #30
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	701a      	strb	r2, [r3, #0]
 8010c6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010c72:	f103 0308 	add.w	r3, r3, #8
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	331f      	adds	r3, #31
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8010c7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010c82:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8010c86:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010c8a:	f102 0208 	add.w	r2, r2, #8
 8010c8e:	6811      	ldr	r1, [r2, #0]
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7fe fff6 	bl	800fc82 <ld_clust>
 8010c96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010c9a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010ca2:	f103 0308 	add.w	r3, r3, #8
 8010ca6:	6818      	ldr	r0, [r3, #0]
 8010ca8:	f7ff f819 	bl	800fcde <st_clust>
				dj.fs->wflag = 1;
 8010cac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010cb0:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8010cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cb8:	2201      	movs	r2, #1
 8010cba:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8010cbc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d072      	beq.n	8010dac <f_open+0x418>
					dw = dj.fs->winsect;
 8010cc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010cca:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8010cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010cd8:	f102 0204 	add.w	r2, r2, #4
 8010cdc:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8010cde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ce2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8010ce6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010cea:	6811      	ldr	r1, [r2, #0]
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7fe fc19 	bl	800f524 <remove_chain>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010cf8:	f102 020f 	add.w	r2, r2, #15
 8010cfc:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8010cfe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010d02:	f103 030f 	add.w	r3, r3, #15
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d14f      	bne.n	8010dac <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8010d0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010d10:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 8010d14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010d20:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8010d22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010d26:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8010d2a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010d2e:	f102 0204 	add.w	r2, r2, #4
 8010d32:	6811      	ldr	r1, [r2, #0]
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fe f891 	bl	800ee5c <move_window>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010d40:	f102 020f 	add.w	r2, r2, #15
 8010d44:	7013      	strb	r3, [r2, #0]
 8010d46:	e031      	b.n	8010dac <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8010d48:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010d4c:	f103 030f 	add.w	r3, r3, #15
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d12a      	bne.n	8010dac <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8010d56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010d5a:	f103 0308 	add.w	r3, r3, #8
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	330b      	adds	r3, #11
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	f003 0310 	and.w	r3, r3, #16
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d006      	beq.n	8010d7a <f_open+0x3e6>
					res = FR_NO_FILE;
 8010d6c:	2304      	movs	r3, #4
 8010d6e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010d72:	f102 020f 	add.w	r2, r2, #15
 8010d76:	7013      	strb	r3, [r2, #0]
 8010d78:	e018      	b.n	8010dac <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8010d7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010d7e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010d82:	f003 0302 	and.w	r3, r3, #2
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d010      	beq.n	8010dac <f_open+0x418>
 8010d8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010d8e:	f103 0308 	add.w	r3, r3, #8
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	330b      	adds	r3, #11
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	f003 0301 	and.w	r3, r3, #1
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d005      	beq.n	8010dac <f_open+0x418>
						res = FR_DENIED;
 8010da0:	2307      	movs	r3, #7
 8010da2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010da6:	f102 020f 	add.w	r2, r2, #15
 8010daa:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8010dac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010db0:	f103 030f 	add.w	r3, r3, #15
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d157      	bne.n	8010e6a <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010dba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010dbe:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010dc2:	f003 0308 	and.w	r3, r3, #8
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d00a      	beq.n	8010de0 <f_open+0x44c>
				mode |= FA__WRITTEN;
 8010dca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010dce:	461a      	mov	r2, r3
 8010dd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010dd4:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010dd8:	f043 0320 	orr.w	r3, r3, #32
 8010ddc:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8010de0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010de4:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8010de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010df2:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8010df6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010dfa:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8010dfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e00:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e08:	461a      	mov	r2, r3
 8010e0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010e0e:	f103 0308 	add.w	r3, r3, #8
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e1a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010e1e:	f023 0301 	bic.w	r3, r3, #1
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	bf14      	ite	ne
 8010e26:	2301      	movne	r3, #1
 8010e28:	2300      	moveq	r3, #0
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010e32:	3b10      	subs	r3, #16
 8010e34:	4611      	mov	r1, r2
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7fd fe94 	bl	800eb64 <inc_lock>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e42:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e4a:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8010e4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e50:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d105      	bne.n	8010e6a <f_open+0x4d6>
 8010e5e:	2302      	movs	r3, #2
 8010e60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010e64:	f102 020f 	add.w	r2, r2, #15
 8010e68:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8010e6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010e6e:	f103 030f 	add.w	r3, r3, #15
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	f040 8088 	bne.w	8010f8a <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 8010e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e86:	461a      	mov	r2, r3
 8010e88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e8c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8010e90:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8010e92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8010ea2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ea6:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8010eaa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010eae:	f102 0208 	add.w	r2, r2, #8
 8010eb2:	6811      	ldr	r1, [r2, #0]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fe fee4 	bl	800fc82 <ld_clust>
 8010eba:	4602      	mov	r2, r0
 8010ebc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ec0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ec8:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8010eca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010ece:	f103 0308 	add.w	r3, r3, #8
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	331f      	adds	r3, #31
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	061a      	lsls	r2, r3, #24
 8010eda:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010ede:	f103 0308 	add.w	r3, r3, #8
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	331e      	adds	r3, #30
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	041b      	lsls	r3, r3, #16
 8010eea:	4313      	orrs	r3, r2
 8010eec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010ef0:	f102 0208 	add.w	r2, r2, #8
 8010ef4:	6812      	ldr	r2, [r2, #0]
 8010ef6:	321d      	adds	r2, #29
 8010ef8:	7812      	ldrb	r2, [r2, #0]
 8010efa:	0212      	lsls	r2, r2, #8
 8010efc:	4313      	orrs	r3, r2
 8010efe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8010f02:	f102 0208 	add.w	r2, r2, #8
 8010f06:	6812      	ldr	r2, [r2, #0]
 8010f08:	321c      	adds	r2, #28
 8010f0a:	7812      	ldrb	r2, [r2, #0]
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010f12:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8010f16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010f1a:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8010f1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f20:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f28:	461a      	mov	r2, r3
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8010f2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8010f40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f44:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	2300      	movs	r3, #0
 8010f50:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8010f52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f56:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8010f5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010f5e:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8010f62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010f66:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8010f68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f6c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f7a:	88da      	ldrh	r2, [r3, #6]
 8010f7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f80:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f88:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8010f8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8010f8e:	f103 030f 	add.w	r3, r3, #15
 8010f92:	781b      	ldrb	r3, [r3, #0]
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8010f9a:	3710      	adds	r7, #16
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b08c      	sub	sp, #48	; 0x30
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	607a      	str	r2, [r7, #4]
 8010fac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f7ff fc65 	bl	8010888 <validate>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8010fc2:	7ffb      	ldrb	r3, [r7, #31]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d001      	beq.n	8010fcc <f_read+0x2c>
 8010fc8:	7ffb      	ldrb	r3, [r7, #31]
 8010fca:	e1cd      	b.n	8011368 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fd2:	79db      	ldrb	r3, [r3, #7]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d004      	beq.n	8010fe2 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fde:	79db      	ldrb	r3, [r3, #7]
 8010fe0:	e1c2      	b.n	8011368 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fe8:	799b      	ldrb	r3, [r3, #6]
 8010fea:	f003 0301 	and.w	r3, r3, #1
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d101      	bne.n	8010ff6 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8010ff2:	2307      	movs	r3, #7
 8010ff4:	e1b8      	b.n	8011368 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ffc:	68da      	ldr	r2, [r3, #12]
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011004:	689b      	ldr	r3, [r3, #8]
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	429a      	cmp	r2, r3
 8011010:	f240 81a5 	bls.w	801135e <f_read+0x3be>
 8011014:	69bb      	ldr	r3, [r7, #24]
 8011016:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011018:	e1a1      	b.n	801135e <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011020:	689b      	ldr	r3, [r3, #8]
 8011022:	68fa      	ldr	r2, [r7, #12]
 8011024:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011028:	6812      	ldr	r2, [r2, #0]
 801102a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801102e:	8952      	ldrh	r2, [r2, #10]
 8011030:	fbb3 f1f2 	udiv	r1, r3, r2
 8011034:	fb01 f202 	mul.w	r2, r1, r2
 8011038:	1a9b      	subs	r3, r3, r2
 801103a:	2b00      	cmp	r3, #0
 801103c:	f040 8140 	bne.w	80112c0 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801104e:	6812      	ldr	r2, [r2, #0]
 8011050:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011054:	8952      	ldrh	r2, [r2, #10]
 8011056:	fbb3 f3f2 	udiv	r3, r3, r2
 801105a:	b2da      	uxtb	r2, r3
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011068:	789b      	ldrb	r3, [r3, #2]
 801106a:	3b01      	subs	r3, #1
 801106c:	b2db      	uxtb	r3, r3
 801106e:	4013      	ands	r3, r2
 8011070:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8011072:	7dfb      	ldrb	r3, [r7, #23]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d143      	bne.n	8011100 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801107e:	689b      	ldr	r3, [r3, #8]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d105      	bne.n	8011090 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801108e:	e01c      	b.n	80110ca <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011098:	2b00      	cmp	r3, #0
 801109a:	d009      	beq.n	80110b0 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110a2:	689b      	ldr	r3, [r3, #8]
 80110a4:	4619      	mov	r1, r3
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f7fe fb45 	bl	800f736 <clmt_clust>
 80110ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80110ae:	e00c      	b.n	80110ca <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110be:	695b      	ldr	r3, [r3, #20]
 80110c0:	4619      	mov	r1, r3
 80110c2:	4610      	mov	r0, r2
 80110c4:	f7fd ffdf 	bl	800f086 <get_fat>
 80110c8:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80110ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d806      	bhi.n	80110de <f_read+0x13e>
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110d6:	2202      	movs	r2, #2
 80110d8:	71da      	strb	r2, [r3, #7]
 80110da:	2302      	movs	r3, #2
 80110dc:	e144      	b.n	8011368 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80110de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110e4:	d106      	bne.n	80110f4 <f_read+0x154>
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110ec:	2201      	movs	r2, #1
 80110ee:	71da      	strb	r2, [r3, #7]
 80110f0:	2301      	movs	r3, #1
 80110f2:	e139      	b.n	8011368 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110fa:	461a      	mov	r2, r3
 80110fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fe:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801110e:	695b      	ldr	r3, [r3, #20]
 8011110:	4619      	mov	r1, r3
 8011112:	4610      	mov	r0, r2
 8011114:	f7fd ff93 	bl	800f03e <clust2sect>
 8011118:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d106      	bne.n	801112e <f_read+0x18e>
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011126:	2202      	movs	r2, #2
 8011128:	71da      	strb	r2, [r3, #7]
 801112a:	2302      	movs	r3, #2
 801112c:	e11c      	b.n	8011368 <f_read+0x3c8>
			sect += csect;
 801112e:	7dfb      	ldrb	r3, [r7, #23]
 8011130:	693a      	ldr	r2, [r7, #16]
 8011132:	4413      	add	r3, r2
 8011134:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011142:	895b      	ldrh	r3, [r3, #10]
 8011144:	461a      	mov	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	fbb3 f3f2 	udiv	r3, r3, r2
 801114c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 801114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011150:	2b00      	cmp	r3, #0
 8011152:	d066      	beq.n	8011222 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8011154:	7dfa      	ldrb	r2, [r7, #23]
 8011156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011158:	4413      	add	r3, r2
 801115a:	68fa      	ldr	r2, [r7, #12]
 801115c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011160:	6812      	ldr	r2, [r2, #0]
 8011162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011166:	7892      	ldrb	r2, [r2, #2]
 8011168:	4293      	cmp	r3, r2
 801116a:	d90a      	bls.n	8011182 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011178:	789b      	ldrb	r3, [r3, #2]
 801117a:	461a      	mov	r2, r3
 801117c:	7dfb      	ldrb	r3, [r7, #23]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801118e:	7858      	ldrb	r0, [r3, #1]
 8011190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011192:	693a      	ldr	r2, [r7, #16]
 8011194:	6a39      	ldr	r1, [r7, #32]
 8011196:	f7fd fb7b 	bl	800e890 <disk_read>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d006      	beq.n	80111ae <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111a6:	2201      	movs	r2, #1
 80111a8:	71da      	strb	r2, [r3, #7]
 80111aa:	2301      	movs	r3, #1
 80111ac:	e0dc      	b.n	8011368 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111b4:	799b      	ldrb	r3, [r3, #6]
 80111b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d024      	beq.n	8011208 <f_read+0x268>
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111c4:	699a      	ldr	r2, [r3, #24]
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	1ad3      	subs	r3, r2, r3
 80111ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d91b      	bls.n	8011208 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111d6:	699a      	ldr	r2, [r3, #24]
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	1ad3      	subs	r3, r2, r3
 80111dc:	68fa      	ldr	r2, [r7, #12]
 80111de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80111e2:	6812      	ldr	r2, [r2, #0]
 80111e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80111e8:	8952      	ldrh	r2, [r2, #10]
 80111ea:	fb02 f303 	mul.w	r3, r2, r3
 80111ee:	6a3a      	ldr	r2, [r7, #32]
 80111f0:	18d0      	adds	r0, r2, r3
 80111f2:	68f9      	ldr	r1, [r7, #12]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011200:	895b      	ldrh	r3, [r3, #10]
 8011202:	461a      	mov	r2, r3
 8011204:	f7fd fba2 	bl	800e94c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011214:	895b      	ldrh	r3, [r3, #10]
 8011216:	461a      	mov	r2, r3
 8011218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121a:	fb02 f303 	mul.w	r3, r2, r3
 801121e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8011220:	e085      	b.n	801132e <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011228:	699b      	ldr	r3, [r3, #24]
 801122a:	693a      	ldr	r2, [r7, #16]
 801122c:	429a      	cmp	r2, r3
 801122e:	d041      	beq.n	80112b4 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011236:	799b      	ldrb	r3, [r3, #6]
 8011238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801123c:	2b00      	cmp	r3, #0
 801123e:	d023      	beq.n	8011288 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801124c:	7858      	ldrb	r0, [r3, #1]
 801124e:	68f9      	ldr	r1, [r7, #12]
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011256:	699a      	ldr	r2, [r3, #24]
 8011258:	2301      	movs	r3, #1
 801125a:	f7fd fb39 	bl	800e8d0 <disk_write>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d006      	beq.n	8011272 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801126a:	2201      	movs	r2, #1
 801126c:	71da      	strb	r2, [r3, #7]
 801126e:	2301      	movs	r3, #1
 8011270:	e07a      	b.n	8011368 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011278:	799b      	ldrb	r3, [r3, #6]
 801127a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801127e:	b2da      	uxtb	r2, r3
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011286:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011294:	7858      	ldrb	r0, [r3, #1]
 8011296:	68f9      	ldr	r1, [r7, #12]
 8011298:	2301      	movs	r3, #1
 801129a:	693a      	ldr	r2, [r7, #16]
 801129c:	f7fd faf8 	bl	800e890 <disk_read>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d006      	beq.n	80112b4 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112ac:	2201      	movs	r2, #1
 80112ae:	71da      	strb	r2, [r3, #7]
 80112b0:	2301      	movs	r3, #1
 80112b2:	e059      	b.n	8011368 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112ba:	461a      	mov	r2, r3
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112cc:	895b      	ldrh	r3, [r3, #10]
 80112ce:	4618      	mov	r0, r3
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112d6:	689b      	ldr	r3, [r3, #8]
 80112d8:	68fa      	ldr	r2, [r7, #12]
 80112da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80112de:	6812      	ldr	r2, [r2, #0]
 80112e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80112e4:	8952      	ldrh	r2, [r2, #10]
 80112e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80112ea:	fb01 f202 	mul.w	r2, r1, r2
 80112ee:	1a9b      	subs	r3, r3, r2
 80112f0:	1ac3      	subs	r3, r0, r3
 80112f2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80112f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d901      	bls.n	8011300 <f_read+0x360>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011306:	689b      	ldr	r3, [r3, #8]
 8011308:	68fa      	ldr	r2, [r7, #12]
 801130a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801130e:	6812      	ldr	r2, [r2, #0]
 8011310:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011314:	8952      	ldrh	r2, [r2, #10]
 8011316:	fbb3 f1f2 	udiv	r1, r3, r2
 801131a:	fb01 f202 	mul.w	r2, r1, r2
 801131e:	1a9b      	subs	r3, r3, r2
 8011320:	68fa      	ldr	r2, [r7, #12]
 8011322:	4413      	add	r3, r2
 8011324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011326:	4619      	mov	r1, r3
 8011328:	6a38      	ldr	r0, [r7, #32]
 801132a:	f7fd fb0f 	bl	800e94c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801132e:	6a3a      	ldr	r2, [r7, #32]
 8011330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011332:	4413      	add	r3, r2
 8011334:	623b      	str	r3, [r7, #32]
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801133c:	689a      	ldr	r2, [r3, #8]
 801133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011340:	4413      	add	r3, r2
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011348:	6093      	str	r3, [r2, #8]
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011350:	441a      	add	r2, r3
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	601a      	str	r2, [r3, #0]
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135a:	1ad3      	subs	r3, r2, r3
 801135c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2b00      	cmp	r3, #0
 8011362:	f47f ae5a 	bne.w	801101a <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8011366:	2300      	movs	r3, #0
}
 8011368:	4618      	mov	r0, r3
 801136a:	3730      	adds	r7, #48	; 0x30
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b08a      	sub	sp, #40	; 0x28
 8011374:	af00      	add	r7, sp, #0
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	607a      	str	r2, [r7, #4]
 801137c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	2200      	movs	r2, #0
 8011386:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f7ff fa7d 	bl	8010888 <validate>
 801138e:	4603      	mov	r3, r0
 8011390:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8011392:	7dfb      	ldrb	r3, [r7, #23]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d001      	beq.n	801139c <f_write+0x2c>
 8011398:	7dfb      	ldrb	r3, [r7, #23]
 801139a:	e21e      	b.n	80117da <f_write+0x46a>
	if (fp->err)							/* Check error */
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113a2:	79db      	ldrb	r3, [r3, #7]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d004      	beq.n	80113b2 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113ae:	79db      	ldrb	r3, [r3, #7]
 80113b0:	e213      	b.n	80117da <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113b8:	799b      	ldrb	r3, [r3, #6]
 80113ba:	f003 0302 	and.w	r3, r3, #2
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d101      	bne.n	80113c6 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80113c2:	2307      	movs	r3, #7
 80113c4:	e209      	b.n	80117da <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113cc:	689a      	ldr	r2, [r3, #8]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	441a      	add	r2, r3
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	429a      	cmp	r2, r3
 80113dc:	f080 81d9 	bcs.w	8011792 <f_write+0x422>
 80113e0:	2300      	movs	r3, #0
 80113e2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80113e4:	e1d5      	b.n	8011792 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	68fa      	ldr	r2, [r7, #12]
 80113f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80113f4:	6812      	ldr	r2, [r2, #0]
 80113f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80113fa:	8952      	ldrh	r2, [r2, #10]
 80113fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011400:	fb01 f202 	mul.w	r2, r1, r2
 8011404:	1a9b      	subs	r3, r3, r2
 8011406:	2b00      	cmp	r3, #0
 8011408:	f040 8169 	bne.w	80116de <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	68fa      	ldr	r2, [r7, #12]
 8011416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801141a:	6812      	ldr	r2, [r2, #0]
 801141c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011420:	8952      	ldrh	r2, [r2, #10]
 8011422:	fbb3 f3f2 	udiv	r3, r3, r2
 8011426:	b2da      	uxtb	r2, r3
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011434:	789b      	ldrb	r3, [r3, #2]
 8011436:	3b01      	subs	r3, #1
 8011438:	b2db      	uxtb	r3, r3
 801143a:	4013      	ands	r3, r2
 801143c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 801143e:	7dbb      	ldrb	r3, [r7, #22]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d15f      	bne.n	8011504 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801144a:	689b      	ldr	r3, [r3, #8]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d111      	bne.n	8011474 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011456:	691b      	ldr	r3, [r3, #16]
 8011458:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 801145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145c:	2b00      	cmp	r3, #0
 801145e:	d126      	bne.n	80114ae <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2100      	movs	r1, #0
 801146a:	4618      	mov	r0, r3
 801146c:	f7fe f8bb 	bl	800f5e6 <create_chain>
 8011470:	6278      	str	r0, [r7, #36]	; 0x24
 8011472:	e01c      	b.n	80114ae <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801147c:	2b00      	cmp	r3, #0
 801147e:	d009      	beq.n	8011494 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011486:	689b      	ldr	r3, [r3, #8]
 8011488:	4619      	mov	r1, r3
 801148a:	68f8      	ldr	r0, [r7, #12]
 801148c:	f7fe f953 	bl	800f736 <clmt_clust>
 8011490:	6278      	str	r0, [r7, #36]	; 0x24
 8011492:	e00c      	b.n	80114ae <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80114a2:	695b      	ldr	r3, [r3, #20]
 80114a4:	4619      	mov	r1, r3
 80114a6:	4610      	mov	r0, r2
 80114a8:	f7fe f89d 	bl	800f5e6 <create_chain>
 80114ac:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80114ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f000 8173 	beq.w	801179c <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80114b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b8:	2b01      	cmp	r3, #1
 80114ba:	d106      	bne.n	80114ca <f_write+0x15a>
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80114c2:	2202      	movs	r2, #2
 80114c4:	71da      	strb	r2, [r3, #7]
 80114c6:	2302      	movs	r3, #2
 80114c8:	e187      	b.n	80117da <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80114ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114d0:	d106      	bne.n	80114e0 <f_write+0x170>
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80114d8:	2201      	movs	r2, #1
 80114da:	71da      	strb	r2, [r3, #7]
 80114dc:	2301      	movs	r3, #1
 80114de:	e17c      	b.n	80117da <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80114e6:	461a      	mov	r2, r3
 80114e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ea:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80114f2:	691b      	ldr	r3, [r3, #16]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d105      	bne.n	8011504 <f_write+0x194>
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80114fe:	461a      	mov	r2, r3
 8011500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011502:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801150a:	799b      	ldrb	r3, [r3, #6]
 801150c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011510:	2b00      	cmp	r3, #0
 8011512:	d023      	beq.n	801155c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011520:	7858      	ldrb	r0, [r3, #1]
 8011522:	68f9      	ldr	r1, [r7, #12]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801152a:	699a      	ldr	r2, [r3, #24]
 801152c:	2301      	movs	r3, #1
 801152e:	f7fd f9cf 	bl	800e8d0 <disk_write>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d006      	beq.n	8011546 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801153e:	2201      	movs	r2, #1
 8011540:	71da      	strb	r2, [r3, #7]
 8011542:	2301      	movs	r3, #1
 8011544:	e149      	b.n	80117da <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801154c:	799b      	ldrb	r3, [r3, #6]
 801154e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011552:	b2da      	uxtb	r2, r3
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801155a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011562:	681a      	ldr	r2, [r3, #0]
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801156a:	695b      	ldr	r3, [r3, #20]
 801156c:	4619      	mov	r1, r3
 801156e:	4610      	mov	r0, r2
 8011570:	f7fd fd65 	bl	800f03e <clust2sect>
 8011574:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d106      	bne.n	801158a <f_write+0x21a>
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011582:	2202      	movs	r2, #2
 8011584:	71da      	strb	r2, [r3, #7]
 8011586:	2302      	movs	r3, #2
 8011588:	e127      	b.n	80117da <f_write+0x46a>
			sect += csect;
 801158a:	7dbb      	ldrb	r3, [r7, #22]
 801158c:	693a      	ldr	r2, [r7, #16]
 801158e:	4413      	add	r3, r2
 8011590:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801159e:	895b      	ldrh	r3, [r3, #10]
 80115a0:	461a      	mov	r2, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80115a8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d069      	beq.n	8011684 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80115b0:	7dba      	ldrb	r2, [r7, #22]
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	4413      	add	r3, r2
 80115b6:	68fa      	ldr	r2, [r7, #12]
 80115b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80115bc:	6812      	ldr	r2, [r2, #0]
 80115be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80115c2:	7892      	ldrb	r2, [r2, #2]
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d90a      	bls.n	80115de <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115d4:	789b      	ldrb	r3, [r3, #2]
 80115d6:	461a      	mov	r2, r3
 80115d8:	7dbb      	ldrb	r3, [r7, #22]
 80115da:	1ad3      	subs	r3, r2, r3
 80115dc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115ea:	7858      	ldrb	r0, [r3, #1]
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	693a      	ldr	r2, [r7, #16]
 80115f0:	69b9      	ldr	r1, [r7, #24]
 80115f2:	f7fd f96d 	bl	800e8d0 <disk_write>
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d006      	beq.n	801160a <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011602:	2201      	movs	r2, #1
 8011604:	71da      	strb	r2, [r3, #7]
 8011606:	2301      	movs	r3, #1
 8011608:	e0e7      	b.n	80117da <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011610:	699a      	ldr	r2, [r3, #24]
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	1ad3      	subs	r3, r2, r3
 8011616:	69fa      	ldr	r2, [r7, #28]
 8011618:	429a      	cmp	r2, r3
 801161a:	d926      	bls.n	801166a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011624:	699a      	ldr	r2, [r3, #24]
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011630:	6812      	ldr	r2, [r2, #0]
 8011632:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011636:	8952      	ldrh	r2, [r2, #10]
 8011638:	fb02 f303 	mul.w	r3, r2, r3
 801163c:	69ba      	ldr	r2, [r7, #24]
 801163e:	18d1      	adds	r1, r2, r3
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801164c:	895b      	ldrh	r3, [r3, #10]
 801164e:	461a      	mov	r2, r3
 8011650:	f7fd f97c 	bl	800e94c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801165a:	799b      	ldrb	r3, [r3, #6]
 801165c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011660:	b2da      	uxtb	r2, r3
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011668:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011676:	895b      	ldrh	r3, [r3, #10]
 8011678:	461a      	mov	r2, r3
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	fb02 f303 	mul.w	r3, r2, r3
 8011680:	623b      	str	r3, [r7, #32]
				continue;
 8011682:	e06e      	b.n	8011762 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801168a:	699b      	ldr	r3, [r3, #24]
 801168c:	693a      	ldr	r2, [r7, #16]
 801168e:	429a      	cmp	r2, r3
 8011690:	d01f      	beq.n	80116d2 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011698:	689a      	ldr	r2, [r3, #8]
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d215      	bcs.n	80116d2 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116b2:	7858      	ldrb	r0, [r3, #1]
 80116b4:	68f9      	ldr	r1, [r7, #12]
 80116b6:	2301      	movs	r3, #1
 80116b8:	693a      	ldr	r2, [r7, #16]
 80116ba:	f7fd f8e9 	bl	800e890 <disk_read>
 80116be:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d006      	beq.n	80116d2 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116ca:	2201      	movs	r2, #1
 80116cc:	71da      	strb	r2, [r3, #7]
 80116ce:	2301      	movs	r3, #1
 80116d0:	e083      	b.n	80117da <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116d8:	461a      	mov	r2, r3
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116ea:	895b      	ldrh	r3, [r3, #10]
 80116ec:	4618      	mov	r0, r3
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116f4:	689b      	ldr	r3, [r3, #8]
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80116fc:	6812      	ldr	r2, [r2, #0]
 80116fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011702:	8952      	ldrh	r2, [r2, #10]
 8011704:	fbb3 f1f2 	udiv	r1, r3, r2
 8011708:	fb01 f202 	mul.w	r2, r1, r2
 801170c:	1a9b      	subs	r3, r3, r2
 801170e:	1ac3      	subs	r3, r0, r3
 8011710:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8011712:	6a3a      	ldr	r2, [r7, #32]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	429a      	cmp	r2, r3
 8011718:	d901      	bls.n	801171e <f_write+0x3ae>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011724:	689b      	ldr	r3, [r3, #8]
 8011726:	68fa      	ldr	r2, [r7, #12]
 8011728:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801172c:	6812      	ldr	r2, [r2, #0]
 801172e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011732:	8952      	ldrh	r2, [r2, #10]
 8011734:	fbb3 f1f2 	udiv	r1, r3, r2
 8011738:	fb01 f202 	mul.w	r2, r1, r2
 801173c:	1a9b      	subs	r3, r3, r2
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	4413      	add	r3, r2
 8011742:	6a3a      	ldr	r2, [r7, #32]
 8011744:	69b9      	ldr	r1, [r7, #24]
 8011746:	4618      	mov	r0, r3
 8011748:	f7fd f900 	bl	800e94c <mem_cpy>
		fp->flag |= FA__DIRTY;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011752:	799b      	ldrb	r3, [r3, #6]
 8011754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011758:	b2da      	uxtb	r2, r3
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011760:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	6a3b      	ldr	r3, [r7, #32]
 8011766:	4413      	add	r3, r2
 8011768:	61bb      	str	r3, [r7, #24]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011770:	689a      	ldr	r2, [r3, #8]
 8011772:	6a3b      	ldr	r3, [r7, #32]
 8011774:	4413      	add	r3, r2
 8011776:	68fa      	ldr	r2, [r7, #12]
 8011778:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801177c:	6093      	str	r3, [r2, #8]
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	681a      	ldr	r2, [r3, #0]
 8011782:	6a3b      	ldr	r3, [r7, #32]
 8011784:	441a      	add	r2, r3
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	601a      	str	r2, [r3, #0]
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	6a3b      	ldr	r3, [r7, #32]
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2b00      	cmp	r3, #0
 8011796:	f47f ae26 	bne.w	80113e6 <f_write+0x76>
 801179a:	e000      	b.n	801179e <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801179c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117a4:	689a      	ldr	r2, [r3, #8]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d907      	bls.n	80117c2 <f_write+0x452>
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	68fa      	ldr	r2, [r7, #12]
 80117bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80117c0:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117c8:	799b      	ldrb	r3, [r3, #6]
 80117ca:	f043 0320 	orr.w	r3, r3, #32
 80117ce:	b2da      	uxtb	r2, r3
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117d6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80117d8:	2300      	movs	r3, #0
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3728      	adds	r7, #40	; 0x28
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}

080117e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80117e2:	b580      	push	{r7, lr}
 80117e4:	b086      	sub	sp, #24
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f7ff f84c 	bl	8010888 <validate>
 80117f0:	4603      	mov	r3, r0
 80117f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80117f4:	7dfb      	ldrb	r3, [r7, #23]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f040 80bc 	bne.w	8011974 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011802:	799b      	ldrb	r3, [r3, #6]
 8011804:	f003 0320 	and.w	r3, r3, #32
 8011808:	2b00      	cmp	r3, #0
 801180a:	f000 80b3 	beq.w	8011974 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011814:	799b      	ldrb	r3, [r3, #6]
 8011816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801181a:	2b00      	cmp	r3, #0
 801181c:	d01e      	beq.n	801185c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801182a:	7858      	ldrb	r0, [r3, #1]
 801182c:	6879      	ldr	r1, [r7, #4]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011834:	699a      	ldr	r2, [r3, #24]
 8011836:	2301      	movs	r3, #1
 8011838:	f7fd f84a 	bl	800e8d0 <disk_write>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d001      	beq.n	8011846 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8011842:	2301      	movs	r3, #1
 8011844:	e097      	b.n	8011976 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801184c:	799b      	ldrb	r3, [r3, #6]
 801184e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011852:	b2da      	uxtb	r2, r3
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801185a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011862:	681a      	ldr	r2, [r3, #0]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801186a:	69db      	ldr	r3, [r3, #28]
 801186c:	4619      	mov	r1, r3
 801186e:	4610      	mov	r0, r2
 8011870:	f7fd faf4 	bl	800ee5c <move_window>
 8011874:	4603      	mov	r3, r0
 8011876:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8011878:	7dfb      	ldrb	r3, [r7, #23]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d17a      	bne.n	8011974 <f_sync+0x192>
				dir = fp->dir_ptr;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011884:	6a1b      	ldr	r3, [r3, #32]
 8011886:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	330b      	adds	r3, #11
 801188c:	781a      	ldrb	r2, [r3, #0]
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	330b      	adds	r3, #11
 8011892:	f042 0220 	orr.w	r2, r2, #32
 8011896:	b2d2      	uxtb	r2, r2
 8011898:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118a0:	68da      	ldr	r2, [r3, #12]
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	331c      	adds	r3, #28
 80118a6:	b2d2      	uxtb	r2, r2
 80118a8:	701a      	strb	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	0a1b      	lsrs	r3, r3, #8
 80118b6:	b29a      	uxth	r2, r3
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	331d      	adds	r3, #29
 80118bc:	b2d2      	uxtb	r2, r2
 80118be:	701a      	strb	r2, [r3, #0]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	0c1a      	lsrs	r2, r3, #16
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	331e      	adds	r3, #30
 80118ce:	b2d2      	uxtb	r2, r2
 80118d0:	701a      	strb	r2, [r3, #0]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118d8:	68db      	ldr	r3, [r3, #12]
 80118da:	0e1a      	lsrs	r2, r3, #24
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	331f      	adds	r3, #31
 80118e0:	b2d2      	uxtb	r2, r2
 80118e2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118ea:	691b      	ldr	r3, [r3, #16]
 80118ec:	4619      	mov	r1, r3
 80118ee:	6938      	ldr	r0, [r7, #16]
 80118f0:	f7fe f9f5 	bl	800fcde <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80118f4:	f7fc ff06 	bl	800e704 <get_fattime>
 80118f8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	3316      	adds	r3, #22
 80118fe:	68fa      	ldr	r2, [r7, #12]
 8011900:	b2d2      	uxtb	r2, r2
 8011902:	701a      	strb	r2, [r3, #0]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	b29b      	uxth	r3, r3
 8011908:	0a1b      	lsrs	r3, r3, #8
 801190a:	b29a      	uxth	r2, r3
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	3317      	adds	r3, #23
 8011910:	b2d2      	uxtb	r2, r2
 8011912:	701a      	strb	r2, [r3, #0]
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	0c1a      	lsrs	r2, r3, #16
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	3318      	adds	r3, #24
 801191c:	b2d2      	uxtb	r2, r2
 801191e:	701a      	strb	r2, [r3, #0]
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	0e1a      	lsrs	r2, r3, #24
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	3319      	adds	r3, #25
 8011928:	b2d2      	uxtb	r2, r2
 801192a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	3312      	adds	r3, #18
 8011930:	2200      	movs	r2, #0
 8011932:	701a      	strb	r2, [r3, #0]
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	3313      	adds	r3, #19
 8011938:	2200      	movs	r2, #0
 801193a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011942:	799b      	ldrb	r3, [r3, #6]
 8011944:	f023 0320 	bic.w	r3, r3, #32
 8011948:	b2da      	uxtb	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011950:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801195e:	2201      	movs	r2, #1
 8011960:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4618      	mov	r0, r3
 801196c:	f7fd faa8 	bl	800eec0 <sync_fs>
 8011970:	4603      	mov	r3, r0
 8011972:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8011974:	7dfb      	ldrb	r3, [r7, #23]
}
 8011976:	4618      	mov	r0, r3
 8011978:	3718      	adds	r7, #24
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}

0801197e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801197e:	b580      	push	{r7, lr}
 8011980:	b084      	sub	sp, #16
 8011982:	af00      	add	r7, sp, #0
 8011984:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f7ff ff2b 	bl	80117e2 <f_sync>
 801198c:	4603      	mov	r3, r0
 801198e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011990:	7bfb      	ldrb	r3, [r7, #15]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d119      	bne.n	80119ca <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f7fe ff76 	bl	8010888 <validate>
 801199c:	4603      	mov	r3, r0
 801199e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80119a0:	7bfb      	ldrb	r3, [r7, #15]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d111      	bne.n	80119ca <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fd f994 	bl	800ecdc <dec_lock>
 80119b4:	4603      	mov	r3, r0
 80119b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80119b8:	7bfb      	ldrb	r3, [r7, #15]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d105      	bne.n	80119ca <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119c4:	461a      	mov	r2, r3
 80119c6:	2300      	movs	r3, #0
 80119c8:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80119ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b090      	sub	sp, #64	; 0x40
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f7fe ff52 	bl	8010888 <validate>
 80119e4:	4603      	mov	r3, r0
 80119e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80119ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d002      	beq.n	80119f8 <f_lseek+0x24>
 80119f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80119f6:	e2da      	b.n	8011fae <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119fe:	79db      	ldrb	r3, [r3, #7]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d004      	beq.n	8011a0e <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a0a:	79db      	ldrb	r3, [r3, #7]
 8011a0c:	e2cf      	b.n	8011fae <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f000 8124 	beq.w	8011c64 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a22:	d16c      	bne.n	8011afe <f_lseek+0x12a>
			tbl = fp->cltbl;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a30:	1d1a      	adds	r2, r3, #4
 8011a32:	627a      	str	r2, [r7, #36]	; 0x24
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	617b      	str	r3, [r7, #20]
 8011a38:	2302      	movs	r3, #2
 8011a3a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a42:	691b      	ldr	r3, [r3, #16]
 8011a44:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d046      	beq.n	8011ada <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a4e:	613b      	str	r3, [r7, #16]
 8011a50:	2300      	movs	r3, #0
 8011a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a56:	3302      	adds	r3, #2
 8011a58:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a5c:	60fb      	str	r3, [r7, #12]
 8011a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a60:	3301      	adds	r3, #1
 8011a62:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fd fb09 	bl	800f086 <get_fat>
 8011a74:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8011a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a78:	2b01      	cmp	r3, #1
 8011a7a:	d806      	bhi.n	8011a8a <f_lseek+0xb6>
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a82:	2202      	movs	r2, #2
 8011a84:	71da      	strb	r2, [r3, #7]
 8011a86:	2302      	movs	r3, #2
 8011a88:	e291      	b.n	8011fae <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a90:	d106      	bne.n	8011aa0 <f_lseek+0xcc>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a98:	2201      	movs	r2, #1
 8011a9a:	71da      	strb	r2, [r3, #7]
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e286      	b.n	8011fae <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d0d7      	beq.n	8011a5a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d809      	bhi.n	8011ac6 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8011ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab4:	1d1a      	adds	r2, r3, #4
 8011ab6:	627a      	str	r2, [r7, #36]	; 0x24
 8011ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011aba:	601a      	str	r2, [r3, #0]
 8011abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abe:	1d1a      	adds	r2, r3, #4
 8011ac0:	627a      	str	r2, [r7, #36]	; 0x24
 8011ac2:	693a      	ldr	r2, [r7, #16]
 8011ac4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d3b8      	bcc.n	8011a4c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ae4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8011ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d803      	bhi.n	8011af6 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8011aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af0:	2200      	movs	r2, #0
 8011af2:	601a      	str	r2, [r3, #0]
 8011af4:	e259      	b.n	8011faa <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011af6:	2311      	movs	r3, #17
 8011af8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011afc:	e255      	b.n	8011faa <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	683a      	ldr	r2, [r7, #0]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d904      	bls.n	8011b16 <f_lseek+0x142>
				ofs = fp->fsize;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f000 8240 	beq.w	8011faa <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	3b01      	subs	r3, #1
 8011b2e:	4619      	mov	r1, r3
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7fd fe00 	bl	800f736 <clmt_clust>
 8011b36:	4602      	mov	r2, r0
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b3e:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b46:	681a      	ldr	r2, [r3, #0]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b4e:	695b      	ldr	r3, [r3, #20]
 8011b50:	4619      	mov	r1, r3
 8011b52:	4610      	mov	r0, r2
 8011b54:	f7fd fa73 	bl	800f03e <clust2sect>
 8011b58:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d106      	bne.n	8011b6e <f_lseek+0x19a>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b66:	2202      	movs	r2, #2
 8011b68:	71da      	strb	r2, [r3, #7]
 8011b6a:	2302      	movs	r3, #2
 8011b6c:	e21f      	b.n	8011fae <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	3b01      	subs	r3, #1
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011b78:	6812      	ldr	r2, [r2, #0]
 8011b7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011b7e:	8952      	ldrh	r2, [r2, #10]
 8011b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011b8a:	6812      	ldr	r2, [r2, #0]
 8011b8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011b90:	7892      	ldrb	r2, [r2, #2]
 8011b92:	3a01      	subs	r2, #1
 8011b94:	4013      	ands	r3, r2
 8011b96:	69ba      	ldr	r2, [r7, #24]
 8011b98:	4413      	add	r3, r2
 8011b9a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ba2:	689b      	ldr	r3, [r3, #8]
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011baa:	6812      	ldr	r2, [r2, #0]
 8011bac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011bb0:	8952      	ldrh	r2, [r2, #10]
 8011bb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bb6:	fb01 f202 	mul.w	r2, r1, r2
 8011bba:	1a9b      	subs	r3, r3, r2
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	f000 81f4 	beq.w	8011faa <f_lseek+0x5d6>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bc8:	699b      	ldr	r3, [r3, #24]
 8011bca:	69ba      	ldr	r2, [r7, #24]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	f000 81ec 	beq.w	8011faa <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bd8:	799b      	ldrb	r3, [r3, #6]
 8011bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d023      	beq.n	8011c2a <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bee:	7858      	ldrb	r0, [r3, #1]
 8011bf0:	6879      	ldr	r1, [r7, #4]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bf8:	699a      	ldr	r2, [r3, #24]
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	f7fc fe68 	bl	800e8d0 <disk_write>
 8011c00:	4603      	mov	r3, r0
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d006      	beq.n	8011c14 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	71da      	strb	r2, [r3, #7]
 8011c10:	2301      	movs	r3, #1
 8011c12:	e1cc      	b.n	8011fae <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c1a:	799b      	ldrb	r3, [r3, #6]
 8011c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c20:	b2da      	uxtb	r2, r3
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c28:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c36:	7858      	ldrb	r0, [r3, #1]
 8011c38:	6879      	ldr	r1, [r7, #4]
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	69ba      	ldr	r2, [r7, #24]
 8011c3e:	f7fc fe27 	bl	800e890 <disk_read>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d006      	beq.n	8011c56 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c4e:	2201      	movs	r2, #1
 8011c50:	71da      	strb	r2, [r3, #7]
 8011c52:	2301      	movs	r3, #1
 8011c54:	e1ab      	b.n	8011fae <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	69bb      	ldr	r3, [r7, #24]
 8011c60:	6193      	str	r3, [r2, #24]
 8011c62:	e1a2      	b.n	8011faa <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	683a      	ldr	r2, [r7, #0]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d90c      	bls.n	8011c8c <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c78:	799b      	ldrb	r3, [r3, #6]
 8011c7a:	f003 0302 	and.w	r3, r3, #2
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d104      	bne.n	8011c8c <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c92:	689b      	ldr	r3, [r3, #8]
 8011c94:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011c96:	2300      	movs	r3, #0
 8011c98:	637b      	str	r3, [r7, #52]	; 0x34
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ca0:	461a      	mov	r2, r3
 8011ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ca4:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	f000 8100 	beq.w	8011eae <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cba:	789b      	ldrb	r3, [r3, #2]
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cca:	895b      	ldrh	r3, [r3, #10]
 8011ccc:	fb02 f303 	mul.w	r3, r2, r3
 8011cd0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011cd2:	6a3b      	ldr	r3, [r7, #32]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d021      	beq.n	8011d1c <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	1e5a      	subs	r2, r3, #1
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8011ce2:	6a3b      	ldr	r3, [r7, #32]
 8011ce4:	1e59      	subs	r1, r3, #1
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d315      	bcc.n	8011d1c <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	1e5a      	subs	r2, r3, #1
 8011cf4:	69fb      	ldr	r3, [r7, #28]
 8011cf6:	425b      	negs	r3, r3
 8011cf8:	4013      	ands	r3, r2
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011d00:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d08:	689b      	ldr	r3, [r3, #8]
 8011d0a:	683a      	ldr	r2, [r7, #0]
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d16:	695b      	ldr	r3, [r3, #20]
 8011d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d1a:	e031      	b.n	8011d80 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d22:	691b      	ldr	r3, [r3, #16]
 8011d24:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d123      	bne.n	8011d74 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2100      	movs	r1, #0
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7fd fc55 	bl	800f5e6 <create_chain>
 8011d3c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8011d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d106      	bne.n	8011d52 <f_lseek+0x37e>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d4a:	2202      	movs	r2, #2
 8011d4c:	71da      	strb	r2, [r3, #7]
 8011d4e:	2302      	movs	r3, #2
 8011d50:	e12d      	b.n	8011fae <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d58:	d106      	bne.n	8011d68 <f_lseek+0x394>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d60:	2201      	movs	r2, #1
 8011d62:	71da      	strb	r2, [r3, #7]
 8011d64:	2301      	movs	r3, #1
 8011d66:	e122      	b.n	8011fae <f_lseek+0x5da>
					fp->sclust = clst;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d6e:	461a      	mov	r2, r3
 8011d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d72:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7e:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8011d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	f000 8093 	beq.w	8011eae <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8011d88:	e052      	b.n	8011e30 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d90:	799b      	ldrb	r3, [r3, #6]
 8011d92:	f003 0302 	and.w	r3, r3, #2
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d00e      	beq.n	8011db8 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fd fc1e 	bl	800f5e6 <create_chain>
 8011daa:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8011dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d10b      	bne.n	8011dca <f_lseek+0x3f6>
							ofs = bcs; break;
 8011db2:	69fb      	ldr	r3, [r7, #28]
 8011db4:	603b      	str	r3, [r7, #0]
 8011db6:	e03f      	b.n	8011e38 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fd f95f 	bl	800f086 <get_fat>
 8011dc8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011dd0:	d106      	bne.n	8011de0 <f_lseek+0x40c>
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dd8:	2201      	movs	r2, #1
 8011dda:	71da      	strb	r2, [r3, #7]
 8011ddc:	2301      	movs	r3, #1
 8011dde:	e0e6      	b.n	8011fae <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8011de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de2:	2b01      	cmp	r3, #1
 8011de4:	d909      	bls.n	8011dfa <f_lseek+0x426>
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011df2:	695b      	ldr	r3, [r3, #20]
 8011df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d306      	bcc.n	8011e08 <f_lseek+0x434>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e00:	2202      	movs	r2, #2
 8011e02:	71da      	strb	r2, [r3, #7]
 8011e04:	2302      	movs	r3, #2
 8011e06:	e0d2      	b.n	8011fae <f_lseek+0x5da>
					fp->clust = clst;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e0e:	461a      	mov	r2, r3
 8011e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e12:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e1a:	689a      	ldr	r2, [r3, #8]
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	4413      	add	r3, r2
 8011e20:	687a      	ldr	r2, [r7, #4]
 8011e22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011e26:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8011e28:	683a      	ldr	r2, [r7, #0]
 8011e2a:	69fb      	ldr	r3, [r7, #28]
 8011e2c:	1ad3      	subs	r3, r2, r3
 8011e2e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8011e30:	683a      	ldr	r2, [r7, #0]
 8011e32:	69fb      	ldr	r3, [r7, #28]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d8a8      	bhi.n	8011d8a <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e3e:	689a      	ldr	r2, [r3, #8]
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	4413      	add	r3, r2
 8011e44:	687a      	ldr	r2, [r7, #4]
 8011e46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011e4a:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e58:	895b      	ldrh	r3, [r3, #10]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e62:	fb01 f202 	mul.w	r2, r1, r2
 8011e66:	1a9b      	subs	r3, r3, r2
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d020      	beq.n	8011eae <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fd f8e1 	bl	800f03e <clust2sect>
 8011e7c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8011e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d106      	bne.n	8011e92 <f_lseek+0x4be>
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e8a:	2202      	movs	r2, #2
 8011e8c:	71da      	strb	r2, [r3, #7]
 8011e8e:	2302      	movs	r3, #2
 8011e90:	e08d      	b.n	8011fae <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e9e:	895b      	ldrh	r3, [r3, #10]
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011eaa:	4413      	add	r3, r2
 8011eac:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011ebc:	6812      	ldr	r2, [r2, #0]
 8011ebe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011ec2:	8952      	ldrh	r2, [r2, #10]
 8011ec4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ec8:	fb01 f202 	mul.w	r2, r1, r2
 8011ecc:	1a9b      	subs	r3, r3, r2
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d04e      	beq.n	8011f70 <f_lseek+0x59c>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ed8:	699b      	ldr	r3, [r3, #24]
 8011eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d047      	beq.n	8011f70 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ee6:	799b      	ldrb	r3, [r3, #6]
 8011ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d023      	beq.n	8011f38 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011efc:	7858      	ldrb	r0, [r3, #1]
 8011efe:	6879      	ldr	r1, [r7, #4]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f06:	699a      	ldr	r2, [r3, #24]
 8011f08:	2301      	movs	r3, #1
 8011f0a:	f7fc fce1 	bl	800e8d0 <disk_write>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d006      	beq.n	8011f22 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	71da      	strb	r2, [r3, #7]
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e045      	b.n	8011fae <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f28:	799b      	ldrb	r3, [r3, #6]
 8011f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f2e:	b2da      	uxtb	r2, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f36:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f44:	7858      	ldrb	r0, [r3, #1]
 8011f46:	6879      	ldr	r1, [r7, #4]
 8011f48:	2301      	movs	r3, #1
 8011f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f4c:	f7fc fca0 	bl	800e890 <disk_read>
 8011f50:	4603      	mov	r3, r0
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d006      	beq.n	8011f64 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	71da      	strb	r2, [r3, #7]
 8011f60:	2301      	movs	r3, #1
 8011f62:	e024      	b.n	8011fae <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f6e:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f76:	689a      	ldr	r2, [r3, #8]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d912      	bls.n	8011faa <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011f92:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f9a:	799b      	ldrb	r3, [r3, #6]
 8011f9c:	f043 0320 	orr.w	r3, r3, #32
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fa8:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8011faa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3740      	adds	r7, #64	; 0x40
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}

08011fb6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011fb6:	b580      	push	{r7, lr}
 8011fb8:	b088      	sub	sp, #32
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	60f8      	str	r0, [r7, #12]
 8011fbe:	60b9      	str	r1, [r7, #8]
 8011fc0:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011fca:	e01b      	b.n	8012004 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011fcc:	f107 0310 	add.w	r3, r7, #16
 8011fd0:	f107 0114 	add.w	r1, r7, #20
 8011fd4:	2201      	movs	r2, #1
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f7fe ffe2 	bl	8010fa0 <f_read>
		if (rc != 1) break;
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	2b01      	cmp	r3, #1
 8011fe0:	d116      	bne.n	8012010 <f_gets+0x5a>
		c = s[0];
 8011fe2:	7d3b      	ldrb	r3, [r7, #20]
 8011fe4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011fe6:	7dfb      	ldrb	r3, [r7, #23]
 8011fe8:	2b0d      	cmp	r3, #13
 8011fea:	d100      	bne.n	8011fee <f_gets+0x38>
 8011fec:	e00a      	b.n	8012004 <f_gets+0x4e>
		*p++ = c;
 8011fee:	69bb      	ldr	r3, [r7, #24]
 8011ff0:	1c5a      	adds	r2, r3, #1
 8011ff2:	61ba      	str	r2, [r7, #24]
 8011ff4:	7dfa      	ldrb	r2, [r7, #23]
 8011ff6:	701a      	strb	r2, [r3, #0]
		n++;
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011ffe:	7dfb      	ldrb	r3, [r7, #23]
 8012000:	2b0a      	cmp	r3, #10
 8012002:	d007      	beq.n	8012014 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	3b01      	subs	r3, #1
 8012008:	69fa      	ldr	r2, [r7, #28]
 801200a:	429a      	cmp	r2, r3
 801200c:	dbde      	blt.n	8011fcc <f_gets+0x16>
 801200e:	e002      	b.n	8012016 <f_gets+0x60>
		if (rc != 1) break;
 8012010:	bf00      	nop
 8012012:	e000      	b.n	8012016 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8012014:	bf00      	nop
	}
	*p = 0;
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	2200      	movs	r2, #0
 801201a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801201c:	69fb      	ldr	r3, [r7, #28]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <f_gets+0x70>
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	e000      	b.n	8012028 <f_gets+0x72>
 8012026:	2300      	movs	r3, #0
}
 8012028:	4618      	mov	r0, r3
 801202a:	3720      	adds	r7, #32
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b084      	sub	sp, #16
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	460b      	mov	r3, r1
 801203a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 801203c:	78fb      	ldrb	r3, [r7, #3]
 801203e:	2b0a      	cmp	r3, #10
 8012040:	d103      	bne.n	801204a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8012042:	210d      	movs	r1, #13
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff fff3 	bl	8012030 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2b00      	cmp	r3, #0
 8012054:	db25      	blt.n	80120a2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	1c5a      	adds	r2, r3, #1
 801205a:	60fa      	str	r2, [r7, #12]
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	4413      	add	r3, r2
 8012060:	78fa      	ldrb	r2, [r7, #3]
 8012062:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2b3c      	cmp	r3, #60	; 0x3c
 8012068:	dd12      	ble.n	8012090 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6818      	ldr	r0, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f103 010c 	add.w	r1, r3, #12
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	f107 0308 	add.w	r3, r7, #8
 801207a:	f7ff f979 	bl	8011370 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801207e:	68ba      	ldr	r2, [r7, #8]
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	429a      	cmp	r2, r3
 8012084:	d101      	bne.n	801208a <putc_bfd+0x5a>
 8012086:	2300      	movs	r3, #0
 8012088:	e001      	b.n	801208e <putc_bfd+0x5e>
 801208a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801208e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	68fa      	ldr	r2, [r7, #12]
 8012094:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	1c5a      	adds	r2, r3, #1
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	609a      	str	r2, [r3, #8]
 80120a0:	e000      	b.n	80120a4 <putc_bfd+0x74>
	if (i < 0) return;
 80120a2:	bf00      	nop
}
 80120a4:	3710      	adds	r7, #16
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}

080120aa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80120aa:	b590      	push	{r4, r7, lr}
 80120ac:	b097      	sub	sp, #92	; 0x5c
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
 80120b2:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80120b8:	2300      	movs	r3, #0
 80120ba:	613b      	str	r3, [r7, #16]
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80120c0:	e009      	b.n	80120d6 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	1c5a      	adds	r2, r3, #1
 80120c6:	607a      	str	r2, [r7, #4]
 80120c8:	781a      	ldrb	r2, [r3, #0]
 80120ca:	f107 030c 	add.w	r3, r7, #12
 80120ce:	4611      	mov	r1, r2
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7ff ffad 	bl	8012030 <putc_bfd>
	while (*str)			/* Put the string */
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d1f1      	bne.n	80120c2 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	db15      	blt.n	8012110 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	461c      	mov	r4, r3
 80120ea:	f107 0208 	add.w	r2, r7, #8
 80120ee:	f107 030c 	add.w	r3, r7, #12
 80120f2:	f103 010c 	add.w	r1, r3, #12
 80120f6:	4613      	mov	r3, r2
 80120f8:	4622      	mov	r2, r4
 80120fa:	f7ff f939 	bl	8011370 <f_write>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d105      	bne.n	8012110 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	68ba      	ldr	r2, [r7, #8]
 8012108:	4293      	cmp	r3, r2
 801210a:	d101      	bne.n	8012110 <f_puts+0x66>
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	e001      	b.n	8012114 <f_puts+0x6a>
	return EOF;
 8012110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012114:	4618      	mov	r0, r3
 8012116:	375c      	adds	r7, #92	; 0x5c
 8012118:	46bd      	mov	sp, r7
 801211a:	bd90      	pop	{r4, r7, pc}

0801211c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801211c:	b480      	push	{r7}
 801211e:	b087      	sub	sp, #28
 8012120:	af00      	add	r7, sp, #0
 8012122:	60f8      	str	r0, [r7, #12]
 8012124:	60b9      	str	r1, [r7, #8]
 8012126:	4613      	mov	r3, r2
 8012128:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801212a:	2301      	movs	r3, #1
 801212c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801212e:	2300      	movs	r3, #0
 8012130:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8012132:	4b1e      	ldr	r3, [pc, #120]	; (80121ac <FATFS_LinkDriverEx+0x90>)
 8012134:	7a5b      	ldrb	r3, [r3, #9]
 8012136:	b2db      	uxtb	r3, r3
 8012138:	2b01      	cmp	r3, #1
 801213a:	d831      	bhi.n	80121a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801213c:	4b1b      	ldr	r3, [pc, #108]	; (80121ac <FATFS_LinkDriverEx+0x90>)
 801213e:	7a5b      	ldrb	r3, [r3, #9]
 8012140:	b2db      	uxtb	r3, r3
 8012142:	461a      	mov	r2, r3
 8012144:	4b19      	ldr	r3, [pc, #100]	; (80121ac <FATFS_LinkDriverEx+0x90>)
 8012146:	2100      	movs	r1, #0
 8012148:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 801214a:	4b18      	ldr	r3, [pc, #96]	; (80121ac <FATFS_LinkDriverEx+0x90>)
 801214c:	7a5b      	ldrb	r3, [r3, #9]
 801214e:	b2db      	uxtb	r3, r3
 8012150:	4a16      	ldr	r2, [pc, #88]	; (80121ac <FATFS_LinkDriverEx+0x90>)
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	4413      	add	r3, r2
 8012156:	68fa      	ldr	r2, [r7, #12]
 8012158:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 801215a:	4b14      	ldr	r3, [pc, #80]	; (80121ac <FATFS_LinkDriverEx+0x90>)
 801215c:	7a5b      	ldrb	r3, [r3, #9]
 801215e:	b2db      	uxtb	r3, r3
 8012160:	461a      	mov	r2, r3
 8012162:	4b12      	ldr	r3, [pc, #72]	; (80121ac <FATFS_LinkDriverEx+0x90>)
 8012164:	4413      	add	r3, r2
 8012166:	79fa      	ldrb	r2, [r7, #7]
 8012168:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801216a:	4b10      	ldr	r3, [pc, #64]	; (80121ac <FATFS_LinkDriverEx+0x90>)
 801216c:	7a5b      	ldrb	r3, [r3, #9]
 801216e:	b2db      	uxtb	r3, r3
 8012170:	1c5a      	adds	r2, r3, #1
 8012172:	b2d1      	uxtb	r1, r2
 8012174:	4a0d      	ldr	r2, [pc, #52]	; (80121ac <FATFS_LinkDriverEx+0x90>)
 8012176:	7251      	strb	r1, [r2, #9]
 8012178:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801217a:	7dbb      	ldrb	r3, [r7, #22]
 801217c:	3330      	adds	r3, #48	; 0x30
 801217e:	b2da      	uxtb	r2, r3
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	3301      	adds	r3, #1
 8012188:	223a      	movs	r2, #58	; 0x3a
 801218a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	3302      	adds	r3, #2
 8012190:	222f      	movs	r2, #47	; 0x2f
 8012192:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	3303      	adds	r3, #3
 8012198:	2200      	movs	r2, #0
 801219a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801219c:	2300      	movs	r3, #0
 801219e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80121a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	371c      	adds	r7, #28
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bc80      	pop	{r7}
 80121aa:	4770      	bx	lr
 80121ac:	20006264 	.word	0x20006264

080121b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80121ba:	2200      	movs	r2, #0
 80121bc:	6839      	ldr	r1, [r7, #0]
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f7ff ffac 	bl	801211c <FATFS_LinkDriverEx>
 80121c4:	4603      	mov	r3, r0
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3708      	adds	r7, #8
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
	...

080121d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	4603      	mov	r3, r0
 80121d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80121da:	4b0b      	ldr	r3, [pc, #44]	; (8012208 <SD_initialize+0x38>)
 80121dc:	2201      	movs	r2, #1
 80121de:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80121e0:	f7fc fa98 	bl	800e714 <BSP_SD_Init>
 80121e4:	4603      	mov	r3, r0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d107      	bne.n	80121fa <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80121ea:	4b07      	ldr	r3, [pc, #28]	; (8012208 <SD_initialize+0x38>)
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	f023 0301 	bic.w	r3, r3, #1
 80121f4:	b2da      	uxtb	r2, r3
 80121f6:	4b04      	ldr	r3, [pc, #16]	; (8012208 <SD_initialize+0x38>)
 80121f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80121fa:	4b03      	ldr	r3, [pc, #12]	; (8012208 <SD_initialize+0x38>)
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	b2db      	uxtb	r3, r3
}
 8012200:	4618      	mov	r0, r3
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	2000007d 	.word	0x2000007d

0801220c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	4603      	mov	r3, r0
 8012214:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012216:	4b0b      	ldr	r3, [pc, #44]	; (8012244 <SD_status+0x38>)
 8012218:	2201      	movs	r2, #1
 801221a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801221c:	f7fc face 	bl	800e7bc <BSP_SD_GetCardState>
 8012220:	4603      	mov	r3, r0
 8012222:	2b00      	cmp	r3, #0
 8012224:	d107      	bne.n	8012236 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012226:	4b07      	ldr	r3, [pc, #28]	; (8012244 <SD_status+0x38>)
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	b2db      	uxtb	r3, r3
 801222c:	f023 0301 	bic.w	r3, r3, #1
 8012230:	b2da      	uxtb	r2, r3
 8012232:	4b04      	ldr	r3, [pc, #16]	; (8012244 <SD_status+0x38>)
 8012234:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8012236:	4b03      	ldr	r3, [pc, #12]	; (8012244 <SD_status+0x38>)
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	b2db      	uxtb	r3, r3
}
 801223c:	4618      	mov	r0, r3
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	2000007d 	.word	0x2000007d

08012248 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b086      	sub	sp, #24
 801224c:	af00      	add	r7, sp, #0
 801224e:	60b9      	str	r1, [r7, #8]
 8012250:	607a      	str	r2, [r7, #4]
 8012252:	603b      	str	r3, [r7, #0]
 8012254:	4603      	mov	r3, r0
 8012256:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012258:	2301      	movs	r3, #1
 801225a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 801225c:	4b0f      	ldr	r3, [pc, #60]	; (801229c <SD_read+0x54>)
 801225e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8012260:	4b0f      	ldr	r3, [pc, #60]	; (80122a0 <SD_read+0x58>)
 8012262:	683a      	ldr	r2, [r7, #0]
 8012264:	6879      	ldr	r1, [r7, #4]
 8012266:	68b8      	ldr	r0, [r7, #8]
 8012268:	f7fc fa6c 	bl	800e744 <BSP_SD_ReadBlocks>
 801226c:	4603      	mov	r3, r0
 801226e:	2b00      	cmp	r3, #0
 8012270:	d10e      	bne.n	8012290 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012272:	e006      	b.n	8012282 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	1e5a      	subs	r2, r3, #1
 8012278:	613a      	str	r2, [r7, #16]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d101      	bne.n	8012282 <SD_read+0x3a>
      {
        return RES_ERROR;
 801227e:	2301      	movs	r3, #1
 8012280:	e007      	b.n	8012292 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012282:	f7fc fa9b 	bl	800e7bc <BSP_SD_GetCardState>
 8012286:	4603      	mov	r3, r0
 8012288:	2b00      	cmp	r3, #0
 801228a:	d1f3      	bne.n	8012274 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 801228c:	2300      	movs	r3, #0
 801228e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8012290:	7dfb      	ldrb	r3, [r7, #23]
}
 8012292:	4618      	mov	r0, r3
 8012294:	3718      	adds	r7, #24
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	000186a0 	.word	0x000186a0
 80122a0:	05f5e100 	.word	0x05f5e100

080122a4 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	60b9      	str	r1, [r7, #8]
 80122ac:	607a      	str	r2, [r7, #4]
 80122ae:	603b      	str	r3, [r7, #0]
 80122b0:	4603      	mov	r3, r0
 80122b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80122b4:	2301      	movs	r3, #1
 80122b6:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80122b8:	4b0f      	ldr	r3, [pc, #60]	; (80122f8 <SD_write+0x54>)
 80122ba:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80122bc:	4b0f      	ldr	r3, [pc, #60]	; (80122fc <SD_write+0x58>)
 80122be:	683a      	ldr	r2, [r7, #0]
 80122c0:	6879      	ldr	r1, [r7, #4]
 80122c2:	68b8      	ldr	r0, [r7, #8]
 80122c4:	f7fc fa5c 	bl	800e780 <BSP_SD_WriteBlocks>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d10e      	bne.n	80122ec <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80122ce:	e006      	b.n	80122de <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	1e5a      	subs	r2, r3, #1
 80122d4:	613a      	str	r2, [r7, #16]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d101      	bne.n	80122de <SD_write+0x3a>
      {
        return RES_ERROR;
 80122da:	2301      	movs	r3, #1
 80122dc:	e007      	b.n	80122ee <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80122de:	f7fc fa6d 	bl	800e7bc <BSP_SD_GetCardState>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d1f3      	bne.n	80122d0 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80122e8:	2300      	movs	r3, #0
 80122ea:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80122ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3718      	adds	r7, #24
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	000186a0 	.word	0x000186a0
 80122fc:	05f5e100 	.word	0x05f5e100

08012300 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b08c      	sub	sp, #48	; 0x30
 8012304:	af00      	add	r7, sp, #0
 8012306:	4603      	mov	r3, r0
 8012308:	603a      	str	r2, [r7, #0]
 801230a:	71fb      	strb	r3, [r7, #7]
 801230c:	460b      	mov	r3, r1
 801230e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012310:	2301      	movs	r3, #1
 8012312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012316:	4b24      	ldr	r3, [pc, #144]	; (80123a8 <SD_ioctl+0xa8>)
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	b2db      	uxtb	r3, r3
 801231c:	f003 0301 	and.w	r3, r3, #1
 8012320:	2b00      	cmp	r3, #0
 8012322:	d001      	beq.n	8012328 <SD_ioctl+0x28>
 8012324:	2303      	movs	r3, #3
 8012326:	e03b      	b.n	80123a0 <SD_ioctl+0xa0>
  
  switch (cmd)
 8012328:	79bb      	ldrb	r3, [r7, #6]
 801232a:	2b03      	cmp	r3, #3
 801232c:	d833      	bhi.n	8012396 <SD_ioctl+0x96>
 801232e:	a201      	add	r2, pc, #4	; (adr r2, 8012334 <SD_ioctl+0x34>)
 8012330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012334:	08012345 	.word	0x08012345
 8012338:	0801234d 	.word	0x0801234d
 801233c:	08012365 	.word	0x08012365
 8012340:	0801237f 	.word	0x0801237f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012344:	2300      	movs	r3, #0
 8012346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801234a:	e027      	b.n	801239c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801234c:	f107 030c 	add.w	r3, r7, #12
 8012350:	4618      	mov	r0, r3
 8012352:	f7fc fa43 	bl	800e7dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801235c:	2300      	movs	r3, #0
 801235e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012362:	e01b      	b.n	801239c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012364:	f107 030c 	add.w	r3, r7, #12
 8012368:	4618      	mov	r0, r3
 801236a:	f7fc fa37 	bl	800e7dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012370:	b29a      	uxth	r2, r3
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012376:	2300      	movs	r3, #0
 8012378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801237c:	e00e      	b.n	801239c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801237e:	f107 030c 	add.w	r3, r7, #12
 8012382:	4618      	mov	r0, r3
 8012384:	f7fc fa2a 	bl	800e7dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8012388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801238e:	2300      	movs	r3, #0
 8012390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012394:	e002      	b.n	801239c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8012396:	2304      	movs	r3, #4
 8012398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 801239c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3730      	adds	r7, #48	; 0x30
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	2000007d 	.word	0x2000007d

080123ac <__errno>:
 80123ac:	4b01      	ldr	r3, [pc, #4]	; (80123b4 <__errno+0x8>)
 80123ae:	6818      	ldr	r0, [r3, #0]
 80123b0:	4770      	bx	lr
 80123b2:	bf00      	nop
 80123b4:	20000080 	.word	0x20000080

080123b8 <__libc_init_array>:
 80123b8:	b570      	push	{r4, r5, r6, lr}
 80123ba:	2600      	movs	r6, #0
 80123bc:	4d0c      	ldr	r5, [pc, #48]	; (80123f0 <__libc_init_array+0x38>)
 80123be:	4c0d      	ldr	r4, [pc, #52]	; (80123f4 <__libc_init_array+0x3c>)
 80123c0:	1b64      	subs	r4, r4, r5
 80123c2:	10a4      	asrs	r4, r4, #2
 80123c4:	42a6      	cmp	r6, r4
 80123c6:	d109      	bne.n	80123dc <__libc_init_array+0x24>
 80123c8:	f002 ffaa 	bl	8015320 <_init>
 80123cc:	2600      	movs	r6, #0
 80123ce:	4d0a      	ldr	r5, [pc, #40]	; (80123f8 <__libc_init_array+0x40>)
 80123d0:	4c0a      	ldr	r4, [pc, #40]	; (80123fc <__libc_init_array+0x44>)
 80123d2:	1b64      	subs	r4, r4, r5
 80123d4:	10a4      	asrs	r4, r4, #2
 80123d6:	42a6      	cmp	r6, r4
 80123d8:	d105      	bne.n	80123e6 <__libc_init_array+0x2e>
 80123da:	bd70      	pop	{r4, r5, r6, pc}
 80123dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80123e0:	4798      	blx	r3
 80123e2:	3601      	adds	r6, #1
 80123e4:	e7ee      	b.n	80123c4 <__libc_init_array+0xc>
 80123e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80123ea:	4798      	blx	r3
 80123ec:	3601      	adds	r6, #1
 80123ee:	e7f2      	b.n	80123d6 <__libc_init_array+0x1e>
 80123f0:	0801663c 	.word	0x0801663c
 80123f4:	0801663c 	.word	0x0801663c
 80123f8:	0801663c 	.word	0x0801663c
 80123fc:	08016640 	.word	0x08016640

08012400 <malloc>:
 8012400:	4b02      	ldr	r3, [pc, #8]	; (801240c <malloc+0xc>)
 8012402:	4601      	mov	r1, r0
 8012404:	6818      	ldr	r0, [r3, #0]
 8012406:	f000 b87b 	b.w	8012500 <_malloc_r>
 801240a:	bf00      	nop
 801240c:	20000080 	.word	0x20000080

08012410 <free>:
 8012410:	4b02      	ldr	r3, [pc, #8]	; (801241c <free+0xc>)
 8012412:	4601      	mov	r1, r0
 8012414:	6818      	ldr	r0, [r3, #0]
 8012416:	f000 b80b 	b.w	8012430 <_free_r>
 801241a:	bf00      	nop
 801241c:	20000080 	.word	0x20000080

08012420 <memset>:
 8012420:	4603      	mov	r3, r0
 8012422:	4402      	add	r2, r0
 8012424:	4293      	cmp	r3, r2
 8012426:	d100      	bne.n	801242a <memset+0xa>
 8012428:	4770      	bx	lr
 801242a:	f803 1b01 	strb.w	r1, [r3], #1
 801242e:	e7f9      	b.n	8012424 <memset+0x4>

08012430 <_free_r>:
 8012430:	b538      	push	{r3, r4, r5, lr}
 8012432:	4605      	mov	r5, r0
 8012434:	2900      	cmp	r1, #0
 8012436:	d040      	beq.n	80124ba <_free_r+0x8a>
 8012438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801243c:	1f0c      	subs	r4, r1, #4
 801243e:	2b00      	cmp	r3, #0
 8012440:	bfb8      	it	lt
 8012442:	18e4      	addlt	r4, r4, r3
 8012444:	f001 fcca 	bl	8013ddc <__malloc_lock>
 8012448:	4a1c      	ldr	r2, [pc, #112]	; (80124bc <_free_r+0x8c>)
 801244a:	6813      	ldr	r3, [r2, #0]
 801244c:	b933      	cbnz	r3, 801245c <_free_r+0x2c>
 801244e:	6063      	str	r3, [r4, #4]
 8012450:	6014      	str	r4, [r2, #0]
 8012452:	4628      	mov	r0, r5
 8012454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012458:	f001 bcc6 	b.w	8013de8 <__malloc_unlock>
 801245c:	42a3      	cmp	r3, r4
 801245e:	d908      	bls.n	8012472 <_free_r+0x42>
 8012460:	6820      	ldr	r0, [r4, #0]
 8012462:	1821      	adds	r1, r4, r0
 8012464:	428b      	cmp	r3, r1
 8012466:	bf01      	itttt	eq
 8012468:	6819      	ldreq	r1, [r3, #0]
 801246a:	685b      	ldreq	r3, [r3, #4]
 801246c:	1809      	addeq	r1, r1, r0
 801246e:	6021      	streq	r1, [r4, #0]
 8012470:	e7ed      	b.n	801244e <_free_r+0x1e>
 8012472:	461a      	mov	r2, r3
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	b10b      	cbz	r3, 801247c <_free_r+0x4c>
 8012478:	42a3      	cmp	r3, r4
 801247a:	d9fa      	bls.n	8012472 <_free_r+0x42>
 801247c:	6811      	ldr	r1, [r2, #0]
 801247e:	1850      	adds	r0, r2, r1
 8012480:	42a0      	cmp	r0, r4
 8012482:	d10b      	bne.n	801249c <_free_r+0x6c>
 8012484:	6820      	ldr	r0, [r4, #0]
 8012486:	4401      	add	r1, r0
 8012488:	1850      	adds	r0, r2, r1
 801248a:	4283      	cmp	r3, r0
 801248c:	6011      	str	r1, [r2, #0]
 801248e:	d1e0      	bne.n	8012452 <_free_r+0x22>
 8012490:	6818      	ldr	r0, [r3, #0]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	4401      	add	r1, r0
 8012496:	6011      	str	r1, [r2, #0]
 8012498:	6053      	str	r3, [r2, #4]
 801249a:	e7da      	b.n	8012452 <_free_r+0x22>
 801249c:	d902      	bls.n	80124a4 <_free_r+0x74>
 801249e:	230c      	movs	r3, #12
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	e7d6      	b.n	8012452 <_free_r+0x22>
 80124a4:	6820      	ldr	r0, [r4, #0]
 80124a6:	1821      	adds	r1, r4, r0
 80124a8:	428b      	cmp	r3, r1
 80124aa:	bf01      	itttt	eq
 80124ac:	6819      	ldreq	r1, [r3, #0]
 80124ae:	685b      	ldreq	r3, [r3, #4]
 80124b0:	1809      	addeq	r1, r1, r0
 80124b2:	6021      	streq	r1, [r4, #0]
 80124b4:	6063      	str	r3, [r4, #4]
 80124b6:	6054      	str	r4, [r2, #4]
 80124b8:	e7cb      	b.n	8012452 <_free_r+0x22>
 80124ba:	bd38      	pop	{r3, r4, r5, pc}
 80124bc:	20006270 	.word	0x20006270

080124c0 <sbrk_aligned>:
 80124c0:	b570      	push	{r4, r5, r6, lr}
 80124c2:	4e0e      	ldr	r6, [pc, #56]	; (80124fc <sbrk_aligned+0x3c>)
 80124c4:	460c      	mov	r4, r1
 80124c6:	6831      	ldr	r1, [r6, #0]
 80124c8:	4605      	mov	r5, r0
 80124ca:	b911      	cbnz	r1, 80124d2 <sbrk_aligned+0x12>
 80124cc:	f000 fd58 	bl	8012f80 <_sbrk_r>
 80124d0:	6030      	str	r0, [r6, #0]
 80124d2:	4621      	mov	r1, r4
 80124d4:	4628      	mov	r0, r5
 80124d6:	f000 fd53 	bl	8012f80 <_sbrk_r>
 80124da:	1c43      	adds	r3, r0, #1
 80124dc:	d00a      	beq.n	80124f4 <sbrk_aligned+0x34>
 80124de:	1cc4      	adds	r4, r0, #3
 80124e0:	f024 0403 	bic.w	r4, r4, #3
 80124e4:	42a0      	cmp	r0, r4
 80124e6:	d007      	beq.n	80124f8 <sbrk_aligned+0x38>
 80124e8:	1a21      	subs	r1, r4, r0
 80124ea:	4628      	mov	r0, r5
 80124ec:	f000 fd48 	bl	8012f80 <_sbrk_r>
 80124f0:	3001      	adds	r0, #1
 80124f2:	d101      	bne.n	80124f8 <sbrk_aligned+0x38>
 80124f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80124f8:	4620      	mov	r0, r4
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	20006274 	.word	0x20006274

08012500 <_malloc_r>:
 8012500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012504:	1ccd      	adds	r5, r1, #3
 8012506:	f025 0503 	bic.w	r5, r5, #3
 801250a:	3508      	adds	r5, #8
 801250c:	2d0c      	cmp	r5, #12
 801250e:	bf38      	it	cc
 8012510:	250c      	movcc	r5, #12
 8012512:	2d00      	cmp	r5, #0
 8012514:	4607      	mov	r7, r0
 8012516:	db01      	blt.n	801251c <_malloc_r+0x1c>
 8012518:	42a9      	cmp	r1, r5
 801251a:	d905      	bls.n	8012528 <_malloc_r+0x28>
 801251c:	230c      	movs	r3, #12
 801251e:	2600      	movs	r6, #0
 8012520:	603b      	str	r3, [r7, #0]
 8012522:	4630      	mov	r0, r6
 8012524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012528:	4e2e      	ldr	r6, [pc, #184]	; (80125e4 <_malloc_r+0xe4>)
 801252a:	f001 fc57 	bl	8013ddc <__malloc_lock>
 801252e:	6833      	ldr	r3, [r6, #0]
 8012530:	461c      	mov	r4, r3
 8012532:	bb34      	cbnz	r4, 8012582 <_malloc_r+0x82>
 8012534:	4629      	mov	r1, r5
 8012536:	4638      	mov	r0, r7
 8012538:	f7ff ffc2 	bl	80124c0 <sbrk_aligned>
 801253c:	1c43      	adds	r3, r0, #1
 801253e:	4604      	mov	r4, r0
 8012540:	d14d      	bne.n	80125de <_malloc_r+0xde>
 8012542:	6834      	ldr	r4, [r6, #0]
 8012544:	4626      	mov	r6, r4
 8012546:	2e00      	cmp	r6, #0
 8012548:	d140      	bne.n	80125cc <_malloc_r+0xcc>
 801254a:	6823      	ldr	r3, [r4, #0]
 801254c:	4631      	mov	r1, r6
 801254e:	4638      	mov	r0, r7
 8012550:	eb04 0803 	add.w	r8, r4, r3
 8012554:	f000 fd14 	bl	8012f80 <_sbrk_r>
 8012558:	4580      	cmp	r8, r0
 801255a:	d13a      	bne.n	80125d2 <_malloc_r+0xd2>
 801255c:	6821      	ldr	r1, [r4, #0]
 801255e:	3503      	adds	r5, #3
 8012560:	1a6d      	subs	r5, r5, r1
 8012562:	f025 0503 	bic.w	r5, r5, #3
 8012566:	3508      	adds	r5, #8
 8012568:	2d0c      	cmp	r5, #12
 801256a:	bf38      	it	cc
 801256c:	250c      	movcc	r5, #12
 801256e:	4638      	mov	r0, r7
 8012570:	4629      	mov	r1, r5
 8012572:	f7ff ffa5 	bl	80124c0 <sbrk_aligned>
 8012576:	3001      	adds	r0, #1
 8012578:	d02b      	beq.n	80125d2 <_malloc_r+0xd2>
 801257a:	6823      	ldr	r3, [r4, #0]
 801257c:	442b      	add	r3, r5
 801257e:	6023      	str	r3, [r4, #0]
 8012580:	e00e      	b.n	80125a0 <_malloc_r+0xa0>
 8012582:	6822      	ldr	r2, [r4, #0]
 8012584:	1b52      	subs	r2, r2, r5
 8012586:	d41e      	bmi.n	80125c6 <_malloc_r+0xc6>
 8012588:	2a0b      	cmp	r2, #11
 801258a:	d916      	bls.n	80125ba <_malloc_r+0xba>
 801258c:	1961      	adds	r1, r4, r5
 801258e:	42a3      	cmp	r3, r4
 8012590:	6025      	str	r5, [r4, #0]
 8012592:	bf18      	it	ne
 8012594:	6059      	strne	r1, [r3, #4]
 8012596:	6863      	ldr	r3, [r4, #4]
 8012598:	bf08      	it	eq
 801259a:	6031      	streq	r1, [r6, #0]
 801259c:	5162      	str	r2, [r4, r5]
 801259e:	604b      	str	r3, [r1, #4]
 80125a0:	4638      	mov	r0, r7
 80125a2:	f104 060b 	add.w	r6, r4, #11
 80125a6:	f001 fc1f 	bl	8013de8 <__malloc_unlock>
 80125aa:	f026 0607 	bic.w	r6, r6, #7
 80125ae:	1d23      	adds	r3, r4, #4
 80125b0:	1af2      	subs	r2, r6, r3
 80125b2:	d0b6      	beq.n	8012522 <_malloc_r+0x22>
 80125b4:	1b9b      	subs	r3, r3, r6
 80125b6:	50a3      	str	r3, [r4, r2]
 80125b8:	e7b3      	b.n	8012522 <_malloc_r+0x22>
 80125ba:	6862      	ldr	r2, [r4, #4]
 80125bc:	42a3      	cmp	r3, r4
 80125be:	bf0c      	ite	eq
 80125c0:	6032      	streq	r2, [r6, #0]
 80125c2:	605a      	strne	r2, [r3, #4]
 80125c4:	e7ec      	b.n	80125a0 <_malloc_r+0xa0>
 80125c6:	4623      	mov	r3, r4
 80125c8:	6864      	ldr	r4, [r4, #4]
 80125ca:	e7b2      	b.n	8012532 <_malloc_r+0x32>
 80125cc:	4634      	mov	r4, r6
 80125ce:	6876      	ldr	r6, [r6, #4]
 80125d0:	e7b9      	b.n	8012546 <_malloc_r+0x46>
 80125d2:	230c      	movs	r3, #12
 80125d4:	4638      	mov	r0, r7
 80125d6:	603b      	str	r3, [r7, #0]
 80125d8:	f001 fc06 	bl	8013de8 <__malloc_unlock>
 80125dc:	e7a1      	b.n	8012522 <_malloc_r+0x22>
 80125de:	6025      	str	r5, [r4, #0]
 80125e0:	e7de      	b.n	80125a0 <_malloc_r+0xa0>
 80125e2:	bf00      	nop
 80125e4:	20006270 	.word	0x20006270

080125e8 <__cvt>:
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125ee:	461f      	mov	r7, r3
 80125f0:	bfbb      	ittet	lt
 80125f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80125f6:	461f      	movlt	r7, r3
 80125f8:	2300      	movge	r3, #0
 80125fa:	232d      	movlt	r3, #45	; 0x2d
 80125fc:	b088      	sub	sp, #32
 80125fe:	4614      	mov	r4, r2
 8012600:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012602:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012604:	7013      	strb	r3, [r2, #0]
 8012606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012608:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801260c:	f023 0820 	bic.w	r8, r3, #32
 8012610:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012614:	d005      	beq.n	8012622 <__cvt+0x3a>
 8012616:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801261a:	d100      	bne.n	801261e <__cvt+0x36>
 801261c:	3501      	adds	r5, #1
 801261e:	2302      	movs	r3, #2
 8012620:	e000      	b.n	8012624 <__cvt+0x3c>
 8012622:	2303      	movs	r3, #3
 8012624:	aa07      	add	r2, sp, #28
 8012626:	9204      	str	r2, [sp, #16]
 8012628:	aa06      	add	r2, sp, #24
 801262a:	e9cd a202 	strd	sl, r2, [sp, #8]
 801262e:	e9cd 3500 	strd	r3, r5, [sp]
 8012632:	4622      	mov	r2, r4
 8012634:	463b      	mov	r3, r7
 8012636:	f000 fd9f 	bl	8013178 <_dtoa_r>
 801263a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801263e:	4606      	mov	r6, r0
 8012640:	d102      	bne.n	8012648 <__cvt+0x60>
 8012642:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012644:	07db      	lsls	r3, r3, #31
 8012646:	d522      	bpl.n	801268e <__cvt+0xa6>
 8012648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801264c:	eb06 0905 	add.w	r9, r6, r5
 8012650:	d110      	bne.n	8012674 <__cvt+0x8c>
 8012652:	7833      	ldrb	r3, [r6, #0]
 8012654:	2b30      	cmp	r3, #48	; 0x30
 8012656:	d10a      	bne.n	801266e <__cvt+0x86>
 8012658:	2200      	movs	r2, #0
 801265a:	2300      	movs	r3, #0
 801265c:	4620      	mov	r0, r4
 801265e:	4639      	mov	r1, r7
 8012660:	f7ee fa0e 	bl	8000a80 <__aeabi_dcmpeq>
 8012664:	b918      	cbnz	r0, 801266e <__cvt+0x86>
 8012666:	f1c5 0501 	rsb	r5, r5, #1
 801266a:	f8ca 5000 	str.w	r5, [sl]
 801266e:	f8da 3000 	ldr.w	r3, [sl]
 8012672:	4499      	add	r9, r3
 8012674:	2200      	movs	r2, #0
 8012676:	2300      	movs	r3, #0
 8012678:	4620      	mov	r0, r4
 801267a:	4639      	mov	r1, r7
 801267c:	f7ee fa00 	bl	8000a80 <__aeabi_dcmpeq>
 8012680:	b108      	cbz	r0, 8012686 <__cvt+0x9e>
 8012682:	f8cd 901c 	str.w	r9, [sp, #28]
 8012686:	2230      	movs	r2, #48	; 0x30
 8012688:	9b07      	ldr	r3, [sp, #28]
 801268a:	454b      	cmp	r3, r9
 801268c:	d307      	bcc.n	801269e <__cvt+0xb6>
 801268e:	4630      	mov	r0, r6
 8012690:	9b07      	ldr	r3, [sp, #28]
 8012692:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012694:	1b9b      	subs	r3, r3, r6
 8012696:	6013      	str	r3, [r2, #0]
 8012698:	b008      	add	sp, #32
 801269a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801269e:	1c59      	adds	r1, r3, #1
 80126a0:	9107      	str	r1, [sp, #28]
 80126a2:	701a      	strb	r2, [r3, #0]
 80126a4:	e7f0      	b.n	8012688 <__cvt+0xa0>

080126a6 <__exponent>:
 80126a6:	4603      	mov	r3, r0
 80126a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126aa:	2900      	cmp	r1, #0
 80126ac:	f803 2b02 	strb.w	r2, [r3], #2
 80126b0:	bfb6      	itet	lt
 80126b2:	222d      	movlt	r2, #45	; 0x2d
 80126b4:	222b      	movge	r2, #43	; 0x2b
 80126b6:	4249      	neglt	r1, r1
 80126b8:	2909      	cmp	r1, #9
 80126ba:	7042      	strb	r2, [r0, #1]
 80126bc:	dd2b      	ble.n	8012716 <__exponent+0x70>
 80126be:	f10d 0407 	add.w	r4, sp, #7
 80126c2:	46a4      	mov	ip, r4
 80126c4:	270a      	movs	r7, #10
 80126c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80126ca:	460a      	mov	r2, r1
 80126cc:	46a6      	mov	lr, r4
 80126ce:	fb07 1516 	mls	r5, r7, r6, r1
 80126d2:	2a63      	cmp	r2, #99	; 0x63
 80126d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80126d8:	4631      	mov	r1, r6
 80126da:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80126de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80126e2:	dcf0      	bgt.n	80126c6 <__exponent+0x20>
 80126e4:	3130      	adds	r1, #48	; 0x30
 80126e6:	f1ae 0502 	sub.w	r5, lr, #2
 80126ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80126ee:	4629      	mov	r1, r5
 80126f0:	1c44      	adds	r4, r0, #1
 80126f2:	4561      	cmp	r1, ip
 80126f4:	d30a      	bcc.n	801270c <__exponent+0x66>
 80126f6:	f10d 0209 	add.w	r2, sp, #9
 80126fa:	eba2 020e 	sub.w	r2, r2, lr
 80126fe:	4565      	cmp	r5, ip
 8012700:	bf88      	it	hi
 8012702:	2200      	movhi	r2, #0
 8012704:	4413      	add	r3, r2
 8012706:	1a18      	subs	r0, r3, r0
 8012708:	b003      	add	sp, #12
 801270a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801270c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012710:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012714:	e7ed      	b.n	80126f2 <__exponent+0x4c>
 8012716:	2330      	movs	r3, #48	; 0x30
 8012718:	3130      	adds	r1, #48	; 0x30
 801271a:	7083      	strb	r3, [r0, #2]
 801271c:	70c1      	strb	r1, [r0, #3]
 801271e:	1d03      	adds	r3, r0, #4
 8012720:	e7f1      	b.n	8012706 <__exponent+0x60>
	...

08012724 <_printf_float>:
 8012724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012728:	b091      	sub	sp, #68	; 0x44
 801272a:	460c      	mov	r4, r1
 801272c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012730:	4616      	mov	r6, r2
 8012732:	461f      	mov	r7, r3
 8012734:	4605      	mov	r5, r0
 8012736:	f001 fb31 	bl	8013d9c <_localeconv_r>
 801273a:	6803      	ldr	r3, [r0, #0]
 801273c:	4618      	mov	r0, r3
 801273e:	9309      	str	r3, [sp, #36]	; 0x24
 8012740:	f7ed fd72 	bl	8000228 <strlen>
 8012744:	2300      	movs	r3, #0
 8012746:	930e      	str	r3, [sp, #56]	; 0x38
 8012748:	f8d8 3000 	ldr.w	r3, [r8]
 801274c:	900a      	str	r0, [sp, #40]	; 0x28
 801274e:	3307      	adds	r3, #7
 8012750:	f023 0307 	bic.w	r3, r3, #7
 8012754:	f103 0208 	add.w	r2, r3, #8
 8012758:	f894 9018 	ldrb.w	r9, [r4, #24]
 801275c:	f8d4 b000 	ldr.w	fp, [r4]
 8012760:	f8c8 2000 	str.w	r2, [r8]
 8012764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012768:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801276c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8012770:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8012774:	930b      	str	r3, [sp, #44]	; 0x2c
 8012776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801277a:	4640      	mov	r0, r8
 801277c:	4b9c      	ldr	r3, [pc, #624]	; (80129f0 <_printf_float+0x2cc>)
 801277e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012780:	f7ee f9b0 	bl	8000ae4 <__aeabi_dcmpun>
 8012784:	bb70      	cbnz	r0, 80127e4 <_printf_float+0xc0>
 8012786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801278a:	4640      	mov	r0, r8
 801278c:	4b98      	ldr	r3, [pc, #608]	; (80129f0 <_printf_float+0x2cc>)
 801278e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012790:	f7ee f98a 	bl	8000aa8 <__aeabi_dcmple>
 8012794:	bb30      	cbnz	r0, 80127e4 <_printf_float+0xc0>
 8012796:	2200      	movs	r2, #0
 8012798:	2300      	movs	r3, #0
 801279a:	4640      	mov	r0, r8
 801279c:	4651      	mov	r1, sl
 801279e:	f7ee f979 	bl	8000a94 <__aeabi_dcmplt>
 80127a2:	b110      	cbz	r0, 80127aa <_printf_float+0x86>
 80127a4:	232d      	movs	r3, #45	; 0x2d
 80127a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127aa:	4b92      	ldr	r3, [pc, #584]	; (80129f4 <_printf_float+0x2d0>)
 80127ac:	4892      	ldr	r0, [pc, #584]	; (80129f8 <_printf_float+0x2d4>)
 80127ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80127b2:	bf94      	ite	ls
 80127b4:	4698      	movls	r8, r3
 80127b6:	4680      	movhi	r8, r0
 80127b8:	2303      	movs	r3, #3
 80127ba:	f04f 0a00 	mov.w	sl, #0
 80127be:	6123      	str	r3, [r4, #16]
 80127c0:	f02b 0304 	bic.w	r3, fp, #4
 80127c4:	6023      	str	r3, [r4, #0]
 80127c6:	4633      	mov	r3, r6
 80127c8:	4621      	mov	r1, r4
 80127ca:	4628      	mov	r0, r5
 80127cc:	9700      	str	r7, [sp, #0]
 80127ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80127d0:	f000 f9d4 	bl	8012b7c <_printf_common>
 80127d4:	3001      	adds	r0, #1
 80127d6:	f040 8090 	bne.w	80128fa <_printf_float+0x1d6>
 80127da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127de:	b011      	add	sp, #68	; 0x44
 80127e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e4:	4642      	mov	r2, r8
 80127e6:	4653      	mov	r3, sl
 80127e8:	4640      	mov	r0, r8
 80127ea:	4651      	mov	r1, sl
 80127ec:	f7ee f97a 	bl	8000ae4 <__aeabi_dcmpun>
 80127f0:	b148      	cbz	r0, 8012806 <_printf_float+0xe2>
 80127f2:	f1ba 0f00 	cmp.w	sl, #0
 80127f6:	bfb8      	it	lt
 80127f8:	232d      	movlt	r3, #45	; 0x2d
 80127fa:	4880      	ldr	r0, [pc, #512]	; (80129fc <_printf_float+0x2d8>)
 80127fc:	bfb8      	it	lt
 80127fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012802:	4b7f      	ldr	r3, [pc, #508]	; (8012a00 <_printf_float+0x2dc>)
 8012804:	e7d3      	b.n	80127ae <_printf_float+0x8a>
 8012806:	6863      	ldr	r3, [r4, #4]
 8012808:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801280c:	1c5a      	adds	r2, r3, #1
 801280e:	d142      	bne.n	8012896 <_printf_float+0x172>
 8012810:	2306      	movs	r3, #6
 8012812:	6063      	str	r3, [r4, #4]
 8012814:	2200      	movs	r2, #0
 8012816:	9206      	str	r2, [sp, #24]
 8012818:	aa0e      	add	r2, sp, #56	; 0x38
 801281a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 801281e:	aa0d      	add	r2, sp, #52	; 0x34
 8012820:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8012824:	9203      	str	r2, [sp, #12]
 8012826:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801282a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801282e:	6023      	str	r3, [r4, #0]
 8012830:	6863      	ldr	r3, [r4, #4]
 8012832:	4642      	mov	r2, r8
 8012834:	9300      	str	r3, [sp, #0]
 8012836:	4628      	mov	r0, r5
 8012838:	4653      	mov	r3, sl
 801283a:	910b      	str	r1, [sp, #44]	; 0x2c
 801283c:	f7ff fed4 	bl	80125e8 <__cvt>
 8012840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012842:	4680      	mov	r8, r0
 8012844:	2947      	cmp	r1, #71	; 0x47
 8012846:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012848:	d108      	bne.n	801285c <_printf_float+0x138>
 801284a:	1cc8      	adds	r0, r1, #3
 801284c:	db02      	blt.n	8012854 <_printf_float+0x130>
 801284e:	6863      	ldr	r3, [r4, #4]
 8012850:	4299      	cmp	r1, r3
 8012852:	dd40      	ble.n	80128d6 <_printf_float+0x1b2>
 8012854:	f1a9 0902 	sub.w	r9, r9, #2
 8012858:	fa5f f989 	uxtb.w	r9, r9
 801285c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012860:	d81f      	bhi.n	80128a2 <_printf_float+0x17e>
 8012862:	464a      	mov	r2, r9
 8012864:	3901      	subs	r1, #1
 8012866:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801286a:	910d      	str	r1, [sp, #52]	; 0x34
 801286c:	f7ff ff1b 	bl	80126a6 <__exponent>
 8012870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012872:	4682      	mov	sl, r0
 8012874:	1813      	adds	r3, r2, r0
 8012876:	2a01      	cmp	r2, #1
 8012878:	6123      	str	r3, [r4, #16]
 801287a:	dc02      	bgt.n	8012882 <_printf_float+0x15e>
 801287c:	6822      	ldr	r2, [r4, #0]
 801287e:	07d2      	lsls	r2, r2, #31
 8012880:	d501      	bpl.n	8012886 <_printf_float+0x162>
 8012882:	3301      	adds	r3, #1
 8012884:	6123      	str	r3, [r4, #16]
 8012886:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801288a:	2b00      	cmp	r3, #0
 801288c:	d09b      	beq.n	80127c6 <_printf_float+0xa2>
 801288e:	232d      	movs	r3, #45	; 0x2d
 8012890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012894:	e797      	b.n	80127c6 <_printf_float+0xa2>
 8012896:	2947      	cmp	r1, #71	; 0x47
 8012898:	d1bc      	bne.n	8012814 <_printf_float+0xf0>
 801289a:	2b00      	cmp	r3, #0
 801289c:	d1ba      	bne.n	8012814 <_printf_float+0xf0>
 801289e:	2301      	movs	r3, #1
 80128a0:	e7b7      	b.n	8012812 <_printf_float+0xee>
 80128a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80128a6:	d118      	bne.n	80128da <_printf_float+0x1b6>
 80128a8:	2900      	cmp	r1, #0
 80128aa:	6863      	ldr	r3, [r4, #4]
 80128ac:	dd0b      	ble.n	80128c6 <_printf_float+0x1a2>
 80128ae:	6121      	str	r1, [r4, #16]
 80128b0:	b913      	cbnz	r3, 80128b8 <_printf_float+0x194>
 80128b2:	6822      	ldr	r2, [r4, #0]
 80128b4:	07d0      	lsls	r0, r2, #31
 80128b6:	d502      	bpl.n	80128be <_printf_float+0x19a>
 80128b8:	3301      	adds	r3, #1
 80128ba:	440b      	add	r3, r1
 80128bc:	6123      	str	r3, [r4, #16]
 80128be:	f04f 0a00 	mov.w	sl, #0
 80128c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80128c4:	e7df      	b.n	8012886 <_printf_float+0x162>
 80128c6:	b913      	cbnz	r3, 80128ce <_printf_float+0x1aa>
 80128c8:	6822      	ldr	r2, [r4, #0]
 80128ca:	07d2      	lsls	r2, r2, #31
 80128cc:	d501      	bpl.n	80128d2 <_printf_float+0x1ae>
 80128ce:	3302      	adds	r3, #2
 80128d0:	e7f4      	b.n	80128bc <_printf_float+0x198>
 80128d2:	2301      	movs	r3, #1
 80128d4:	e7f2      	b.n	80128bc <_printf_float+0x198>
 80128d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80128da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128dc:	4299      	cmp	r1, r3
 80128de:	db05      	blt.n	80128ec <_printf_float+0x1c8>
 80128e0:	6823      	ldr	r3, [r4, #0]
 80128e2:	6121      	str	r1, [r4, #16]
 80128e4:	07d8      	lsls	r0, r3, #31
 80128e6:	d5ea      	bpl.n	80128be <_printf_float+0x19a>
 80128e8:	1c4b      	adds	r3, r1, #1
 80128ea:	e7e7      	b.n	80128bc <_printf_float+0x198>
 80128ec:	2900      	cmp	r1, #0
 80128ee:	bfcc      	ite	gt
 80128f0:	2201      	movgt	r2, #1
 80128f2:	f1c1 0202 	rsble	r2, r1, #2
 80128f6:	4413      	add	r3, r2
 80128f8:	e7e0      	b.n	80128bc <_printf_float+0x198>
 80128fa:	6823      	ldr	r3, [r4, #0]
 80128fc:	055a      	lsls	r2, r3, #21
 80128fe:	d407      	bmi.n	8012910 <_printf_float+0x1ec>
 8012900:	6923      	ldr	r3, [r4, #16]
 8012902:	4642      	mov	r2, r8
 8012904:	4631      	mov	r1, r6
 8012906:	4628      	mov	r0, r5
 8012908:	47b8      	blx	r7
 801290a:	3001      	adds	r0, #1
 801290c:	d12b      	bne.n	8012966 <_printf_float+0x242>
 801290e:	e764      	b.n	80127da <_printf_float+0xb6>
 8012910:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012914:	f240 80dd 	bls.w	8012ad2 <_printf_float+0x3ae>
 8012918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801291c:	2200      	movs	r2, #0
 801291e:	2300      	movs	r3, #0
 8012920:	f7ee f8ae 	bl	8000a80 <__aeabi_dcmpeq>
 8012924:	2800      	cmp	r0, #0
 8012926:	d033      	beq.n	8012990 <_printf_float+0x26c>
 8012928:	2301      	movs	r3, #1
 801292a:	4631      	mov	r1, r6
 801292c:	4628      	mov	r0, r5
 801292e:	4a35      	ldr	r2, [pc, #212]	; (8012a04 <_printf_float+0x2e0>)
 8012930:	47b8      	blx	r7
 8012932:	3001      	adds	r0, #1
 8012934:	f43f af51 	beq.w	80127da <_printf_float+0xb6>
 8012938:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801293c:	429a      	cmp	r2, r3
 801293e:	db02      	blt.n	8012946 <_printf_float+0x222>
 8012940:	6823      	ldr	r3, [r4, #0]
 8012942:	07d8      	lsls	r0, r3, #31
 8012944:	d50f      	bpl.n	8012966 <_printf_float+0x242>
 8012946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801294a:	4631      	mov	r1, r6
 801294c:	4628      	mov	r0, r5
 801294e:	47b8      	blx	r7
 8012950:	3001      	adds	r0, #1
 8012952:	f43f af42 	beq.w	80127da <_printf_float+0xb6>
 8012956:	f04f 0800 	mov.w	r8, #0
 801295a:	f104 091a 	add.w	r9, r4, #26
 801295e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012960:	3b01      	subs	r3, #1
 8012962:	4543      	cmp	r3, r8
 8012964:	dc09      	bgt.n	801297a <_printf_float+0x256>
 8012966:	6823      	ldr	r3, [r4, #0]
 8012968:	079b      	lsls	r3, r3, #30
 801296a:	f100 8102 	bmi.w	8012b72 <_printf_float+0x44e>
 801296e:	68e0      	ldr	r0, [r4, #12]
 8012970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012972:	4298      	cmp	r0, r3
 8012974:	bfb8      	it	lt
 8012976:	4618      	movlt	r0, r3
 8012978:	e731      	b.n	80127de <_printf_float+0xba>
 801297a:	2301      	movs	r3, #1
 801297c:	464a      	mov	r2, r9
 801297e:	4631      	mov	r1, r6
 8012980:	4628      	mov	r0, r5
 8012982:	47b8      	blx	r7
 8012984:	3001      	adds	r0, #1
 8012986:	f43f af28 	beq.w	80127da <_printf_float+0xb6>
 801298a:	f108 0801 	add.w	r8, r8, #1
 801298e:	e7e6      	b.n	801295e <_printf_float+0x23a>
 8012990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012992:	2b00      	cmp	r3, #0
 8012994:	dc38      	bgt.n	8012a08 <_printf_float+0x2e4>
 8012996:	2301      	movs	r3, #1
 8012998:	4631      	mov	r1, r6
 801299a:	4628      	mov	r0, r5
 801299c:	4a19      	ldr	r2, [pc, #100]	; (8012a04 <_printf_float+0x2e0>)
 801299e:	47b8      	blx	r7
 80129a0:	3001      	adds	r0, #1
 80129a2:	f43f af1a 	beq.w	80127da <_printf_float+0xb6>
 80129a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80129aa:	4313      	orrs	r3, r2
 80129ac:	d102      	bne.n	80129b4 <_printf_float+0x290>
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	07d9      	lsls	r1, r3, #31
 80129b2:	d5d8      	bpl.n	8012966 <_printf_float+0x242>
 80129b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129b8:	4631      	mov	r1, r6
 80129ba:	4628      	mov	r0, r5
 80129bc:	47b8      	blx	r7
 80129be:	3001      	adds	r0, #1
 80129c0:	f43f af0b 	beq.w	80127da <_printf_float+0xb6>
 80129c4:	f04f 0900 	mov.w	r9, #0
 80129c8:	f104 0a1a 	add.w	sl, r4, #26
 80129cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129ce:	425b      	negs	r3, r3
 80129d0:	454b      	cmp	r3, r9
 80129d2:	dc01      	bgt.n	80129d8 <_printf_float+0x2b4>
 80129d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129d6:	e794      	b.n	8012902 <_printf_float+0x1de>
 80129d8:	2301      	movs	r3, #1
 80129da:	4652      	mov	r2, sl
 80129dc:	4631      	mov	r1, r6
 80129de:	4628      	mov	r0, r5
 80129e0:	47b8      	blx	r7
 80129e2:	3001      	adds	r0, #1
 80129e4:	f43f aef9 	beq.w	80127da <_printf_float+0xb6>
 80129e8:	f109 0901 	add.w	r9, r9, #1
 80129ec:	e7ee      	b.n	80129cc <_printf_float+0x2a8>
 80129ee:	bf00      	nop
 80129f0:	7fefffff 	.word	0x7fefffff
 80129f4:	08016204 	.word	0x08016204
 80129f8:	08016208 	.word	0x08016208
 80129fc:	08016210 	.word	0x08016210
 8012a00:	0801620c 	.word	0x0801620c
 8012a04:	08016214 	.word	0x08016214
 8012a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	bfa8      	it	ge
 8012a10:	461a      	movge	r2, r3
 8012a12:	2a00      	cmp	r2, #0
 8012a14:	4691      	mov	r9, r2
 8012a16:	dc37      	bgt.n	8012a88 <_printf_float+0x364>
 8012a18:	f04f 0b00 	mov.w	fp, #0
 8012a1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a20:	f104 021a 	add.w	r2, r4, #26
 8012a24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012a28:	ebaa 0309 	sub.w	r3, sl, r9
 8012a2c:	455b      	cmp	r3, fp
 8012a2e:	dc33      	bgt.n	8012a98 <_printf_float+0x374>
 8012a30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012a34:	429a      	cmp	r2, r3
 8012a36:	db3b      	blt.n	8012ab0 <_printf_float+0x38c>
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	07da      	lsls	r2, r3, #31
 8012a3c:	d438      	bmi.n	8012ab0 <_printf_float+0x38c>
 8012a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a42:	eba3 020a 	sub.w	r2, r3, sl
 8012a46:	eba3 0901 	sub.w	r9, r3, r1
 8012a4a:	4591      	cmp	r9, r2
 8012a4c:	bfa8      	it	ge
 8012a4e:	4691      	movge	r9, r2
 8012a50:	f1b9 0f00 	cmp.w	r9, #0
 8012a54:	dc34      	bgt.n	8012ac0 <_printf_float+0x39c>
 8012a56:	f04f 0800 	mov.w	r8, #0
 8012a5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a5e:	f104 0a1a 	add.w	sl, r4, #26
 8012a62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012a66:	1a9b      	subs	r3, r3, r2
 8012a68:	eba3 0309 	sub.w	r3, r3, r9
 8012a6c:	4543      	cmp	r3, r8
 8012a6e:	f77f af7a 	ble.w	8012966 <_printf_float+0x242>
 8012a72:	2301      	movs	r3, #1
 8012a74:	4652      	mov	r2, sl
 8012a76:	4631      	mov	r1, r6
 8012a78:	4628      	mov	r0, r5
 8012a7a:	47b8      	blx	r7
 8012a7c:	3001      	adds	r0, #1
 8012a7e:	f43f aeac 	beq.w	80127da <_printf_float+0xb6>
 8012a82:	f108 0801 	add.w	r8, r8, #1
 8012a86:	e7ec      	b.n	8012a62 <_printf_float+0x33e>
 8012a88:	4613      	mov	r3, r2
 8012a8a:	4631      	mov	r1, r6
 8012a8c:	4642      	mov	r2, r8
 8012a8e:	4628      	mov	r0, r5
 8012a90:	47b8      	blx	r7
 8012a92:	3001      	adds	r0, #1
 8012a94:	d1c0      	bne.n	8012a18 <_printf_float+0x2f4>
 8012a96:	e6a0      	b.n	80127da <_printf_float+0xb6>
 8012a98:	2301      	movs	r3, #1
 8012a9a:	4631      	mov	r1, r6
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012aa0:	47b8      	blx	r7
 8012aa2:	3001      	adds	r0, #1
 8012aa4:	f43f ae99 	beq.w	80127da <_printf_float+0xb6>
 8012aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012aaa:	f10b 0b01 	add.w	fp, fp, #1
 8012aae:	e7b9      	b.n	8012a24 <_printf_float+0x300>
 8012ab0:	4631      	mov	r1, r6
 8012ab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	47b8      	blx	r7
 8012aba:	3001      	adds	r0, #1
 8012abc:	d1bf      	bne.n	8012a3e <_printf_float+0x31a>
 8012abe:	e68c      	b.n	80127da <_printf_float+0xb6>
 8012ac0:	464b      	mov	r3, r9
 8012ac2:	4631      	mov	r1, r6
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	eb08 020a 	add.w	r2, r8, sl
 8012aca:	47b8      	blx	r7
 8012acc:	3001      	adds	r0, #1
 8012ace:	d1c2      	bne.n	8012a56 <_printf_float+0x332>
 8012ad0:	e683      	b.n	80127da <_printf_float+0xb6>
 8012ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ad4:	2a01      	cmp	r2, #1
 8012ad6:	dc01      	bgt.n	8012adc <_printf_float+0x3b8>
 8012ad8:	07db      	lsls	r3, r3, #31
 8012ada:	d537      	bpl.n	8012b4c <_printf_float+0x428>
 8012adc:	2301      	movs	r3, #1
 8012ade:	4642      	mov	r2, r8
 8012ae0:	4631      	mov	r1, r6
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	47b8      	blx	r7
 8012ae6:	3001      	adds	r0, #1
 8012ae8:	f43f ae77 	beq.w	80127da <_printf_float+0xb6>
 8012aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012af0:	4631      	mov	r1, r6
 8012af2:	4628      	mov	r0, r5
 8012af4:	47b8      	blx	r7
 8012af6:	3001      	adds	r0, #1
 8012af8:	f43f ae6f 	beq.w	80127da <_printf_float+0xb6>
 8012afc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012b00:	2200      	movs	r2, #0
 8012b02:	2300      	movs	r3, #0
 8012b04:	f7ed ffbc 	bl	8000a80 <__aeabi_dcmpeq>
 8012b08:	b9d8      	cbnz	r0, 8012b42 <_printf_float+0x41e>
 8012b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b0c:	f108 0201 	add.w	r2, r8, #1
 8012b10:	3b01      	subs	r3, #1
 8012b12:	4631      	mov	r1, r6
 8012b14:	4628      	mov	r0, r5
 8012b16:	47b8      	blx	r7
 8012b18:	3001      	adds	r0, #1
 8012b1a:	d10e      	bne.n	8012b3a <_printf_float+0x416>
 8012b1c:	e65d      	b.n	80127da <_printf_float+0xb6>
 8012b1e:	2301      	movs	r3, #1
 8012b20:	464a      	mov	r2, r9
 8012b22:	4631      	mov	r1, r6
 8012b24:	4628      	mov	r0, r5
 8012b26:	47b8      	blx	r7
 8012b28:	3001      	adds	r0, #1
 8012b2a:	f43f ae56 	beq.w	80127da <_printf_float+0xb6>
 8012b2e:	f108 0801 	add.w	r8, r8, #1
 8012b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b34:	3b01      	subs	r3, #1
 8012b36:	4543      	cmp	r3, r8
 8012b38:	dcf1      	bgt.n	8012b1e <_printf_float+0x3fa>
 8012b3a:	4653      	mov	r3, sl
 8012b3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012b40:	e6e0      	b.n	8012904 <_printf_float+0x1e0>
 8012b42:	f04f 0800 	mov.w	r8, #0
 8012b46:	f104 091a 	add.w	r9, r4, #26
 8012b4a:	e7f2      	b.n	8012b32 <_printf_float+0x40e>
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	4642      	mov	r2, r8
 8012b50:	e7df      	b.n	8012b12 <_printf_float+0x3ee>
 8012b52:	2301      	movs	r3, #1
 8012b54:	464a      	mov	r2, r9
 8012b56:	4631      	mov	r1, r6
 8012b58:	4628      	mov	r0, r5
 8012b5a:	47b8      	blx	r7
 8012b5c:	3001      	adds	r0, #1
 8012b5e:	f43f ae3c 	beq.w	80127da <_printf_float+0xb6>
 8012b62:	f108 0801 	add.w	r8, r8, #1
 8012b66:	68e3      	ldr	r3, [r4, #12]
 8012b68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012b6a:	1a5b      	subs	r3, r3, r1
 8012b6c:	4543      	cmp	r3, r8
 8012b6e:	dcf0      	bgt.n	8012b52 <_printf_float+0x42e>
 8012b70:	e6fd      	b.n	801296e <_printf_float+0x24a>
 8012b72:	f04f 0800 	mov.w	r8, #0
 8012b76:	f104 0919 	add.w	r9, r4, #25
 8012b7a:	e7f4      	b.n	8012b66 <_printf_float+0x442>

08012b7c <_printf_common>:
 8012b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b80:	4616      	mov	r6, r2
 8012b82:	4699      	mov	r9, r3
 8012b84:	688a      	ldr	r2, [r1, #8]
 8012b86:	690b      	ldr	r3, [r1, #16]
 8012b88:	4607      	mov	r7, r0
 8012b8a:	4293      	cmp	r3, r2
 8012b8c:	bfb8      	it	lt
 8012b8e:	4613      	movlt	r3, r2
 8012b90:	6033      	str	r3, [r6, #0]
 8012b92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b96:	460c      	mov	r4, r1
 8012b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b9c:	b10a      	cbz	r2, 8012ba2 <_printf_common+0x26>
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	6033      	str	r3, [r6, #0]
 8012ba2:	6823      	ldr	r3, [r4, #0]
 8012ba4:	0699      	lsls	r1, r3, #26
 8012ba6:	bf42      	ittt	mi
 8012ba8:	6833      	ldrmi	r3, [r6, #0]
 8012baa:	3302      	addmi	r3, #2
 8012bac:	6033      	strmi	r3, [r6, #0]
 8012bae:	6825      	ldr	r5, [r4, #0]
 8012bb0:	f015 0506 	ands.w	r5, r5, #6
 8012bb4:	d106      	bne.n	8012bc4 <_printf_common+0x48>
 8012bb6:	f104 0a19 	add.w	sl, r4, #25
 8012bba:	68e3      	ldr	r3, [r4, #12]
 8012bbc:	6832      	ldr	r2, [r6, #0]
 8012bbe:	1a9b      	subs	r3, r3, r2
 8012bc0:	42ab      	cmp	r3, r5
 8012bc2:	dc28      	bgt.n	8012c16 <_printf_common+0x9a>
 8012bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012bc8:	1e13      	subs	r3, r2, #0
 8012bca:	6822      	ldr	r2, [r4, #0]
 8012bcc:	bf18      	it	ne
 8012bce:	2301      	movne	r3, #1
 8012bd0:	0692      	lsls	r2, r2, #26
 8012bd2:	d42d      	bmi.n	8012c30 <_printf_common+0xb4>
 8012bd4:	4649      	mov	r1, r9
 8012bd6:	4638      	mov	r0, r7
 8012bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bdc:	47c0      	blx	r8
 8012bde:	3001      	adds	r0, #1
 8012be0:	d020      	beq.n	8012c24 <_printf_common+0xa8>
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	68e5      	ldr	r5, [r4, #12]
 8012be6:	f003 0306 	and.w	r3, r3, #6
 8012bea:	2b04      	cmp	r3, #4
 8012bec:	bf18      	it	ne
 8012bee:	2500      	movne	r5, #0
 8012bf0:	6832      	ldr	r2, [r6, #0]
 8012bf2:	f04f 0600 	mov.w	r6, #0
 8012bf6:	68a3      	ldr	r3, [r4, #8]
 8012bf8:	bf08      	it	eq
 8012bfa:	1aad      	subeq	r5, r5, r2
 8012bfc:	6922      	ldr	r2, [r4, #16]
 8012bfe:	bf08      	it	eq
 8012c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c04:	4293      	cmp	r3, r2
 8012c06:	bfc4      	itt	gt
 8012c08:	1a9b      	subgt	r3, r3, r2
 8012c0a:	18ed      	addgt	r5, r5, r3
 8012c0c:	341a      	adds	r4, #26
 8012c0e:	42b5      	cmp	r5, r6
 8012c10:	d11a      	bne.n	8012c48 <_printf_common+0xcc>
 8012c12:	2000      	movs	r0, #0
 8012c14:	e008      	b.n	8012c28 <_printf_common+0xac>
 8012c16:	2301      	movs	r3, #1
 8012c18:	4652      	mov	r2, sl
 8012c1a:	4649      	mov	r1, r9
 8012c1c:	4638      	mov	r0, r7
 8012c1e:	47c0      	blx	r8
 8012c20:	3001      	adds	r0, #1
 8012c22:	d103      	bne.n	8012c2c <_printf_common+0xb0>
 8012c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c2c:	3501      	adds	r5, #1
 8012c2e:	e7c4      	b.n	8012bba <_printf_common+0x3e>
 8012c30:	2030      	movs	r0, #48	; 0x30
 8012c32:	18e1      	adds	r1, r4, r3
 8012c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c38:	1c5a      	adds	r2, r3, #1
 8012c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c3e:	4422      	add	r2, r4
 8012c40:	3302      	adds	r3, #2
 8012c42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c46:	e7c5      	b.n	8012bd4 <_printf_common+0x58>
 8012c48:	2301      	movs	r3, #1
 8012c4a:	4622      	mov	r2, r4
 8012c4c:	4649      	mov	r1, r9
 8012c4e:	4638      	mov	r0, r7
 8012c50:	47c0      	blx	r8
 8012c52:	3001      	adds	r0, #1
 8012c54:	d0e6      	beq.n	8012c24 <_printf_common+0xa8>
 8012c56:	3601      	adds	r6, #1
 8012c58:	e7d9      	b.n	8012c0e <_printf_common+0x92>
	...

08012c5c <_printf_i>:
 8012c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c60:	7e0f      	ldrb	r7, [r1, #24]
 8012c62:	4691      	mov	r9, r2
 8012c64:	2f78      	cmp	r7, #120	; 0x78
 8012c66:	4680      	mov	r8, r0
 8012c68:	460c      	mov	r4, r1
 8012c6a:	469a      	mov	sl, r3
 8012c6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012c72:	d807      	bhi.n	8012c84 <_printf_i+0x28>
 8012c74:	2f62      	cmp	r7, #98	; 0x62
 8012c76:	d80a      	bhi.n	8012c8e <_printf_i+0x32>
 8012c78:	2f00      	cmp	r7, #0
 8012c7a:	f000 80d9 	beq.w	8012e30 <_printf_i+0x1d4>
 8012c7e:	2f58      	cmp	r7, #88	; 0x58
 8012c80:	f000 80a4 	beq.w	8012dcc <_printf_i+0x170>
 8012c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012c8c:	e03a      	b.n	8012d04 <_printf_i+0xa8>
 8012c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c92:	2b15      	cmp	r3, #21
 8012c94:	d8f6      	bhi.n	8012c84 <_printf_i+0x28>
 8012c96:	a101      	add	r1, pc, #4	; (adr r1, 8012c9c <_printf_i+0x40>)
 8012c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c9c:	08012cf5 	.word	0x08012cf5
 8012ca0:	08012d09 	.word	0x08012d09
 8012ca4:	08012c85 	.word	0x08012c85
 8012ca8:	08012c85 	.word	0x08012c85
 8012cac:	08012c85 	.word	0x08012c85
 8012cb0:	08012c85 	.word	0x08012c85
 8012cb4:	08012d09 	.word	0x08012d09
 8012cb8:	08012c85 	.word	0x08012c85
 8012cbc:	08012c85 	.word	0x08012c85
 8012cc0:	08012c85 	.word	0x08012c85
 8012cc4:	08012c85 	.word	0x08012c85
 8012cc8:	08012e17 	.word	0x08012e17
 8012ccc:	08012d39 	.word	0x08012d39
 8012cd0:	08012df9 	.word	0x08012df9
 8012cd4:	08012c85 	.word	0x08012c85
 8012cd8:	08012c85 	.word	0x08012c85
 8012cdc:	08012e39 	.word	0x08012e39
 8012ce0:	08012c85 	.word	0x08012c85
 8012ce4:	08012d39 	.word	0x08012d39
 8012ce8:	08012c85 	.word	0x08012c85
 8012cec:	08012c85 	.word	0x08012c85
 8012cf0:	08012e01 	.word	0x08012e01
 8012cf4:	682b      	ldr	r3, [r5, #0]
 8012cf6:	1d1a      	adds	r2, r3, #4
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	602a      	str	r2, [r5, #0]
 8012cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d04:	2301      	movs	r3, #1
 8012d06:	e0a4      	b.n	8012e52 <_printf_i+0x1f6>
 8012d08:	6820      	ldr	r0, [r4, #0]
 8012d0a:	6829      	ldr	r1, [r5, #0]
 8012d0c:	0606      	lsls	r6, r0, #24
 8012d0e:	f101 0304 	add.w	r3, r1, #4
 8012d12:	d50a      	bpl.n	8012d2a <_printf_i+0xce>
 8012d14:	680e      	ldr	r6, [r1, #0]
 8012d16:	602b      	str	r3, [r5, #0]
 8012d18:	2e00      	cmp	r6, #0
 8012d1a:	da03      	bge.n	8012d24 <_printf_i+0xc8>
 8012d1c:	232d      	movs	r3, #45	; 0x2d
 8012d1e:	4276      	negs	r6, r6
 8012d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d24:	230a      	movs	r3, #10
 8012d26:	485e      	ldr	r0, [pc, #376]	; (8012ea0 <_printf_i+0x244>)
 8012d28:	e019      	b.n	8012d5e <_printf_i+0x102>
 8012d2a:	680e      	ldr	r6, [r1, #0]
 8012d2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012d30:	602b      	str	r3, [r5, #0]
 8012d32:	bf18      	it	ne
 8012d34:	b236      	sxthne	r6, r6
 8012d36:	e7ef      	b.n	8012d18 <_printf_i+0xbc>
 8012d38:	682b      	ldr	r3, [r5, #0]
 8012d3a:	6820      	ldr	r0, [r4, #0]
 8012d3c:	1d19      	adds	r1, r3, #4
 8012d3e:	6029      	str	r1, [r5, #0]
 8012d40:	0601      	lsls	r1, r0, #24
 8012d42:	d501      	bpl.n	8012d48 <_printf_i+0xec>
 8012d44:	681e      	ldr	r6, [r3, #0]
 8012d46:	e002      	b.n	8012d4e <_printf_i+0xf2>
 8012d48:	0646      	lsls	r6, r0, #25
 8012d4a:	d5fb      	bpl.n	8012d44 <_printf_i+0xe8>
 8012d4c:	881e      	ldrh	r6, [r3, #0]
 8012d4e:	2f6f      	cmp	r7, #111	; 0x6f
 8012d50:	bf0c      	ite	eq
 8012d52:	2308      	moveq	r3, #8
 8012d54:	230a      	movne	r3, #10
 8012d56:	4852      	ldr	r0, [pc, #328]	; (8012ea0 <_printf_i+0x244>)
 8012d58:	2100      	movs	r1, #0
 8012d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d5e:	6865      	ldr	r5, [r4, #4]
 8012d60:	2d00      	cmp	r5, #0
 8012d62:	bfa8      	it	ge
 8012d64:	6821      	ldrge	r1, [r4, #0]
 8012d66:	60a5      	str	r5, [r4, #8]
 8012d68:	bfa4      	itt	ge
 8012d6a:	f021 0104 	bicge.w	r1, r1, #4
 8012d6e:	6021      	strge	r1, [r4, #0]
 8012d70:	b90e      	cbnz	r6, 8012d76 <_printf_i+0x11a>
 8012d72:	2d00      	cmp	r5, #0
 8012d74:	d04d      	beq.n	8012e12 <_printf_i+0x1b6>
 8012d76:	4615      	mov	r5, r2
 8012d78:	fbb6 f1f3 	udiv	r1, r6, r3
 8012d7c:	fb03 6711 	mls	r7, r3, r1, r6
 8012d80:	5dc7      	ldrb	r7, [r0, r7]
 8012d82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012d86:	4637      	mov	r7, r6
 8012d88:	42bb      	cmp	r3, r7
 8012d8a:	460e      	mov	r6, r1
 8012d8c:	d9f4      	bls.n	8012d78 <_printf_i+0x11c>
 8012d8e:	2b08      	cmp	r3, #8
 8012d90:	d10b      	bne.n	8012daa <_printf_i+0x14e>
 8012d92:	6823      	ldr	r3, [r4, #0]
 8012d94:	07de      	lsls	r6, r3, #31
 8012d96:	d508      	bpl.n	8012daa <_printf_i+0x14e>
 8012d98:	6923      	ldr	r3, [r4, #16]
 8012d9a:	6861      	ldr	r1, [r4, #4]
 8012d9c:	4299      	cmp	r1, r3
 8012d9e:	bfde      	ittt	le
 8012da0:	2330      	movle	r3, #48	; 0x30
 8012da2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012da6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012daa:	1b52      	subs	r2, r2, r5
 8012dac:	6122      	str	r2, [r4, #16]
 8012dae:	464b      	mov	r3, r9
 8012db0:	4621      	mov	r1, r4
 8012db2:	4640      	mov	r0, r8
 8012db4:	f8cd a000 	str.w	sl, [sp]
 8012db8:	aa03      	add	r2, sp, #12
 8012dba:	f7ff fedf 	bl	8012b7c <_printf_common>
 8012dbe:	3001      	adds	r0, #1
 8012dc0:	d14c      	bne.n	8012e5c <_printf_i+0x200>
 8012dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012dc6:	b004      	add	sp, #16
 8012dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dcc:	4834      	ldr	r0, [pc, #208]	; (8012ea0 <_printf_i+0x244>)
 8012dce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012dd2:	6829      	ldr	r1, [r5, #0]
 8012dd4:	6823      	ldr	r3, [r4, #0]
 8012dd6:	f851 6b04 	ldr.w	r6, [r1], #4
 8012dda:	6029      	str	r1, [r5, #0]
 8012ddc:	061d      	lsls	r5, r3, #24
 8012dde:	d514      	bpl.n	8012e0a <_printf_i+0x1ae>
 8012de0:	07df      	lsls	r7, r3, #31
 8012de2:	bf44      	itt	mi
 8012de4:	f043 0320 	orrmi.w	r3, r3, #32
 8012de8:	6023      	strmi	r3, [r4, #0]
 8012dea:	b91e      	cbnz	r6, 8012df4 <_printf_i+0x198>
 8012dec:	6823      	ldr	r3, [r4, #0]
 8012dee:	f023 0320 	bic.w	r3, r3, #32
 8012df2:	6023      	str	r3, [r4, #0]
 8012df4:	2310      	movs	r3, #16
 8012df6:	e7af      	b.n	8012d58 <_printf_i+0xfc>
 8012df8:	6823      	ldr	r3, [r4, #0]
 8012dfa:	f043 0320 	orr.w	r3, r3, #32
 8012dfe:	6023      	str	r3, [r4, #0]
 8012e00:	2378      	movs	r3, #120	; 0x78
 8012e02:	4828      	ldr	r0, [pc, #160]	; (8012ea4 <_printf_i+0x248>)
 8012e04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012e08:	e7e3      	b.n	8012dd2 <_printf_i+0x176>
 8012e0a:	0659      	lsls	r1, r3, #25
 8012e0c:	bf48      	it	mi
 8012e0e:	b2b6      	uxthmi	r6, r6
 8012e10:	e7e6      	b.n	8012de0 <_printf_i+0x184>
 8012e12:	4615      	mov	r5, r2
 8012e14:	e7bb      	b.n	8012d8e <_printf_i+0x132>
 8012e16:	682b      	ldr	r3, [r5, #0]
 8012e18:	6826      	ldr	r6, [r4, #0]
 8012e1a:	1d18      	adds	r0, r3, #4
 8012e1c:	6961      	ldr	r1, [r4, #20]
 8012e1e:	6028      	str	r0, [r5, #0]
 8012e20:	0635      	lsls	r5, r6, #24
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	d501      	bpl.n	8012e2a <_printf_i+0x1ce>
 8012e26:	6019      	str	r1, [r3, #0]
 8012e28:	e002      	b.n	8012e30 <_printf_i+0x1d4>
 8012e2a:	0670      	lsls	r0, r6, #25
 8012e2c:	d5fb      	bpl.n	8012e26 <_printf_i+0x1ca>
 8012e2e:	8019      	strh	r1, [r3, #0]
 8012e30:	2300      	movs	r3, #0
 8012e32:	4615      	mov	r5, r2
 8012e34:	6123      	str	r3, [r4, #16]
 8012e36:	e7ba      	b.n	8012dae <_printf_i+0x152>
 8012e38:	682b      	ldr	r3, [r5, #0]
 8012e3a:	2100      	movs	r1, #0
 8012e3c:	1d1a      	adds	r2, r3, #4
 8012e3e:	602a      	str	r2, [r5, #0]
 8012e40:	681d      	ldr	r5, [r3, #0]
 8012e42:	6862      	ldr	r2, [r4, #4]
 8012e44:	4628      	mov	r0, r5
 8012e46:	f000 ffad 	bl	8013da4 <memchr>
 8012e4a:	b108      	cbz	r0, 8012e50 <_printf_i+0x1f4>
 8012e4c:	1b40      	subs	r0, r0, r5
 8012e4e:	6060      	str	r0, [r4, #4]
 8012e50:	6863      	ldr	r3, [r4, #4]
 8012e52:	6123      	str	r3, [r4, #16]
 8012e54:	2300      	movs	r3, #0
 8012e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e5a:	e7a8      	b.n	8012dae <_printf_i+0x152>
 8012e5c:	462a      	mov	r2, r5
 8012e5e:	4649      	mov	r1, r9
 8012e60:	4640      	mov	r0, r8
 8012e62:	6923      	ldr	r3, [r4, #16]
 8012e64:	47d0      	blx	sl
 8012e66:	3001      	adds	r0, #1
 8012e68:	d0ab      	beq.n	8012dc2 <_printf_i+0x166>
 8012e6a:	6823      	ldr	r3, [r4, #0]
 8012e6c:	079b      	lsls	r3, r3, #30
 8012e6e:	d413      	bmi.n	8012e98 <_printf_i+0x23c>
 8012e70:	68e0      	ldr	r0, [r4, #12]
 8012e72:	9b03      	ldr	r3, [sp, #12]
 8012e74:	4298      	cmp	r0, r3
 8012e76:	bfb8      	it	lt
 8012e78:	4618      	movlt	r0, r3
 8012e7a:	e7a4      	b.n	8012dc6 <_printf_i+0x16a>
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	4632      	mov	r2, r6
 8012e80:	4649      	mov	r1, r9
 8012e82:	4640      	mov	r0, r8
 8012e84:	47d0      	blx	sl
 8012e86:	3001      	adds	r0, #1
 8012e88:	d09b      	beq.n	8012dc2 <_printf_i+0x166>
 8012e8a:	3501      	adds	r5, #1
 8012e8c:	68e3      	ldr	r3, [r4, #12]
 8012e8e:	9903      	ldr	r1, [sp, #12]
 8012e90:	1a5b      	subs	r3, r3, r1
 8012e92:	42ab      	cmp	r3, r5
 8012e94:	dcf2      	bgt.n	8012e7c <_printf_i+0x220>
 8012e96:	e7eb      	b.n	8012e70 <_printf_i+0x214>
 8012e98:	2500      	movs	r5, #0
 8012e9a:	f104 0619 	add.w	r6, r4, #25
 8012e9e:	e7f5      	b.n	8012e8c <_printf_i+0x230>
 8012ea0:	08016216 	.word	0x08016216
 8012ea4:	08016227 	.word	0x08016227

08012ea8 <srand>:
 8012ea8:	b538      	push	{r3, r4, r5, lr}
 8012eaa:	4b10      	ldr	r3, [pc, #64]	; (8012eec <srand+0x44>)
 8012eac:	4604      	mov	r4, r0
 8012eae:	681d      	ldr	r5, [r3, #0]
 8012eb0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012eb2:	b9b3      	cbnz	r3, 8012ee2 <srand+0x3a>
 8012eb4:	2018      	movs	r0, #24
 8012eb6:	f7ff faa3 	bl	8012400 <malloc>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	63a8      	str	r0, [r5, #56]	; 0x38
 8012ebe:	b920      	cbnz	r0, 8012eca <srand+0x22>
 8012ec0:	2142      	movs	r1, #66	; 0x42
 8012ec2:	4b0b      	ldr	r3, [pc, #44]	; (8012ef0 <srand+0x48>)
 8012ec4:	480b      	ldr	r0, [pc, #44]	; (8012ef4 <srand+0x4c>)
 8012ec6:	f000 f8ad 	bl	8013024 <__assert_func>
 8012eca:	490b      	ldr	r1, [pc, #44]	; (8012ef8 <srand+0x50>)
 8012ecc:	4b0b      	ldr	r3, [pc, #44]	; (8012efc <srand+0x54>)
 8012ece:	e9c0 1300 	strd	r1, r3, [r0]
 8012ed2:	4b0b      	ldr	r3, [pc, #44]	; (8012f00 <srand+0x58>)
 8012ed4:	2100      	movs	r1, #0
 8012ed6:	6083      	str	r3, [r0, #8]
 8012ed8:	230b      	movs	r3, #11
 8012eda:	8183      	strh	r3, [r0, #12]
 8012edc:	2001      	movs	r0, #1
 8012ede:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012ee6:	611c      	str	r4, [r3, #16]
 8012ee8:	615a      	str	r2, [r3, #20]
 8012eea:	bd38      	pop	{r3, r4, r5, pc}
 8012eec:	20000080 	.word	0x20000080
 8012ef0:	08016238 	.word	0x08016238
 8012ef4:	0801624f 	.word	0x0801624f
 8012ef8:	abcd330e 	.word	0xabcd330e
 8012efc:	e66d1234 	.word	0xe66d1234
 8012f00:	0005deec 	.word	0x0005deec

08012f04 <rand>:
 8012f04:	4b16      	ldr	r3, [pc, #88]	; (8012f60 <rand+0x5c>)
 8012f06:	b510      	push	{r4, lr}
 8012f08:	681c      	ldr	r4, [r3, #0]
 8012f0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012f0c:	b9b3      	cbnz	r3, 8012f3c <rand+0x38>
 8012f0e:	2018      	movs	r0, #24
 8012f10:	f7ff fa76 	bl	8012400 <malloc>
 8012f14:	4602      	mov	r2, r0
 8012f16:	63a0      	str	r0, [r4, #56]	; 0x38
 8012f18:	b920      	cbnz	r0, 8012f24 <rand+0x20>
 8012f1a:	214e      	movs	r1, #78	; 0x4e
 8012f1c:	4b11      	ldr	r3, [pc, #68]	; (8012f64 <rand+0x60>)
 8012f1e:	4812      	ldr	r0, [pc, #72]	; (8012f68 <rand+0x64>)
 8012f20:	f000 f880 	bl	8013024 <__assert_func>
 8012f24:	4911      	ldr	r1, [pc, #68]	; (8012f6c <rand+0x68>)
 8012f26:	4b12      	ldr	r3, [pc, #72]	; (8012f70 <rand+0x6c>)
 8012f28:	e9c0 1300 	strd	r1, r3, [r0]
 8012f2c:	4b11      	ldr	r3, [pc, #68]	; (8012f74 <rand+0x70>)
 8012f2e:	2100      	movs	r1, #0
 8012f30:	6083      	str	r3, [r0, #8]
 8012f32:	230b      	movs	r3, #11
 8012f34:	8183      	strh	r3, [r0, #12]
 8012f36:	2001      	movs	r0, #1
 8012f38:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012f3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012f3e:	4a0e      	ldr	r2, [pc, #56]	; (8012f78 <rand+0x74>)
 8012f40:	6920      	ldr	r0, [r4, #16]
 8012f42:	6963      	ldr	r3, [r4, #20]
 8012f44:	4342      	muls	r2, r0
 8012f46:	490d      	ldr	r1, [pc, #52]	; (8012f7c <rand+0x78>)
 8012f48:	fb01 2203 	mla	r2, r1, r3, r2
 8012f4c:	fba0 0101 	umull	r0, r1, r0, r1
 8012f50:	1c43      	adds	r3, r0, #1
 8012f52:	eb42 0001 	adc.w	r0, r2, r1
 8012f56:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012f5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012f5e:	bd10      	pop	{r4, pc}
 8012f60:	20000080 	.word	0x20000080
 8012f64:	08016238 	.word	0x08016238
 8012f68:	0801624f 	.word	0x0801624f
 8012f6c:	abcd330e 	.word	0xabcd330e
 8012f70:	e66d1234 	.word	0xe66d1234
 8012f74:	0005deec 	.word	0x0005deec
 8012f78:	5851f42d 	.word	0x5851f42d
 8012f7c:	4c957f2d 	.word	0x4c957f2d

08012f80 <_sbrk_r>:
 8012f80:	b538      	push	{r3, r4, r5, lr}
 8012f82:	2300      	movs	r3, #0
 8012f84:	4d05      	ldr	r5, [pc, #20]	; (8012f9c <_sbrk_r+0x1c>)
 8012f86:	4604      	mov	r4, r0
 8012f88:	4608      	mov	r0, r1
 8012f8a:	602b      	str	r3, [r5, #0]
 8012f8c:	f7f3 fbfa 	bl	8006784 <_sbrk>
 8012f90:	1c43      	adds	r3, r0, #1
 8012f92:	d102      	bne.n	8012f9a <_sbrk_r+0x1a>
 8012f94:	682b      	ldr	r3, [r5, #0]
 8012f96:	b103      	cbz	r3, 8012f9a <_sbrk_r+0x1a>
 8012f98:	6023      	str	r3, [r4, #0]
 8012f9a:	bd38      	pop	{r3, r4, r5, pc}
 8012f9c:	20006278 	.word	0x20006278

08012fa0 <siprintf>:
 8012fa0:	b40e      	push	{r1, r2, r3}
 8012fa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012fa6:	b500      	push	{lr}
 8012fa8:	b09c      	sub	sp, #112	; 0x70
 8012faa:	ab1d      	add	r3, sp, #116	; 0x74
 8012fac:	9002      	str	r0, [sp, #8]
 8012fae:	9006      	str	r0, [sp, #24]
 8012fb0:	9107      	str	r1, [sp, #28]
 8012fb2:	9104      	str	r1, [sp, #16]
 8012fb4:	4808      	ldr	r0, [pc, #32]	; (8012fd8 <siprintf+0x38>)
 8012fb6:	4909      	ldr	r1, [pc, #36]	; (8012fdc <siprintf+0x3c>)
 8012fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fbc:	9105      	str	r1, [sp, #20]
 8012fbe:	6800      	ldr	r0, [r0, #0]
 8012fc0:	a902      	add	r1, sp, #8
 8012fc2:	9301      	str	r3, [sp, #4]
 8012fc4:	f001 fb08 	bl	80145d8 <_svfiprintf_r>
 8012fc8:	2200      	movs	r2, #0
 8012fca:	9b02      	ldr	r3, [sp, #8]
 8012fcc:	701a      	strb	r2, [r3, #0]
 8012fce:	b01c      	add	sp, #112	; 0x70
 8012fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fd4:	b003      	add	sp, #12
 8012fd6:	4770      	bx	lr
 8012fd8:	20000080 	.word	0x20000080
 8012fdc:	ffff0208 	.word	0xffff0208

08012fe0 <strncmp>:
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	b510      	push	{r4, lr}
 8012fe4:	b172      	cbz	r2, 8013004 <strncmp+0x24>
 8012fe6:	3901      	subs	r1, #1
 8012fe8:	1884      	adds	r4, r0, r2
 8012fea:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012fee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012ff2:	4290      	cmp	r0, r2
 8012ff4:	d101      	bne.n	8012ffa <strncmp+0x1a>
 8012ff6:	42a3      	cmp	r3, r4
 8012ff8:	d101      	bne.n	8012ffe <strncmp+0x1e>
 8012ffa:	1a80      	subs	r0, r0, r2
 8012ffc:	bd10      	pop	{r4, pc}
 8012ffe:	2800      	cmp	r0, #0
 8013000:	d1f3      	bne.n	8012fea <strncmp+0xa>
 8013002:	e7fa      	b.n	8012ffa <strncmp+0x1a>
 8013004:	4610      	mov	r0, r2
 8013006:	e7f9      	b.n	8012ffc <strncmp+0x1c>

08013008 <getpid>:
 8013008:	4b01      	ldr	r3, [pc, #4]	; (8013010 <getpid+0x8>)
 801300a:	6818      	ldr	r0, [r3, #0]
 801300c:	f001 bd4e 	b.w	8014aac <_getpid_r>
 8013010:	20000080 	.word	0x20000080

08013014 <gettimeofday>:
 8013014:	4b02      	ldr	r3, [pc, #8]	; (8013020 <gettimeofday+0xc>)
 8013016:	460a      	mov	r2, r1
 8013018:	4601      	mov	r1, r0
 801301a:	6818      	ldr	r0, [r3, #0]
 801301c:	f000 beac 	b.w	8013d78 <_gettimeofday_r>
 8013020:	20000080 	.word	0x20000080

08013024 <__assert_func>:
 8013024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013026:	4614      	mov	r4, r2
 8013028:	461a      	mov	r2, r3
 801302a:	4b09      	ldr	r3, [pc, #36]	; (8013050 <__assert_func+0x2c>)
 801302c:	4605      	mov	r5, r0
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	68d8      	ldr	r0, [r3, #12]
 8013032:	b14c      	cbz	r4, 8013048 <__assert_func+0x24>
 8013034:	4b07      	ldr	r3, [pc, #28]	; (8013054 <__assert_func+0x30>)
 8013036:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801303a:	9100      	str	r1, [sp, #0]
 801303c:	462b      	mov	r3, r5
 801303e:	4906      	ldr	r1, [pc, #24]	; (8013058 <__assert_func+0x34>)
 8013040:	f000 fe88 	bl	8013d54 <fiprintf>
 8013044:	f001 fdf4 	bl	8014c30 <abort>
 8013048:	4b04      	ldr	r3, [pc, #16]	; (801305c <__assert_func+0x38>)
 801304a:	461c      	mov	r4, r3
 801304c:	e7f3      	b.n	8013036 <__assert_func+0x12>
 801304e:	bf00      	nop
 8013050:	20000080 	.word	0x20000080
 8013054:	080162aa 	.word	0x080162aa
 8013058:	080162b7 	.word	0x080162b7
 801305c:	080162e5 	.word	0x080162e5

08013060 <quorem>:
 8013060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013064:	6903      	ldr	r3, [r0, #16]
 8013066:	690c      	ldr	r4, [r1, #16]
 8013068:	4607      	mov	r7, r0
 801306a:	42a3      	cmp	r3, r4
 801306c:	f2c0 8082 	blt.w	8013174 <quorem+0x114>
 8013070:	3c01      	subs	r4, #1
 8013072:	f100 0514 	add.w	r5, r0, #20
 8013076:	f101 0814 	add.w	r8, r1, #20
 801307a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801307e:	9301      	str	r3, [sp, #4]
 8013080:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013088:	3301      	adds	r3, #1
 801308a:	429a      	cmp	r2, r3
 801308c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013090:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013094:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013098:	d331      	bcc.n	80130fe <quorem+0x9e>
 801309a:	f04f 0e00 	mov.w	lr, #0
 801309e:	4640      	mov	r0, r8
 80130a0:	46ac      	mov	ip, r5
 80130a2:	46f2      	mov	sl, lr
 80130a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80130a8:	b293      	uxth	r3, r2
 80130aa:	fb06 e303 	mla	r3, r6, r3, lr
 80130ae:	0c12      	lsrs	r2, r2, #16
 80130b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80130b4:	b29b      	uxth	r3, r3
 80130b6:	fb06 e202 	mla	r2, r6, r2, lr
 80130ba:	ebaa 0303 	sub.w	r3, sl, r3
 80130be:	f8dc a000 	ldr.w	sl, [ip]
 80130c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80130c6:	fa1f fa8a 	uxth.w	sl, sl
 80130ca:	4453      	add	r3, sl
 80130cc:	f8dc a000 	ldr.w	sl, [ip]
 80130d0:	b292      	uxth	r2, r2
 80130d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80130d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80130da:	b29b      	uxth	r3, r3
 80130dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80130e0:	4581      	cmp	r9, r0
 80130e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80130e6:	f84c 3b04 	str.w	r3, [ip], #4
 80130ea:	d2db      	bcs.n	80130a4 <quorem+0x44>
 80130ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80130f0:	b92b      	cbnz	r3, 80130fe <quorem+0x9e>
 80130f2:	9b01      	ldr	r3, [sp, #4]
 80130f4:	3b04      	subs	r3, #4
 80130f6:	429d      	cmp	r5, r3
 80130f8:	461a      	mov	r2, r3
 80130fa:	d32f      	bcc.n	801315c <quorem+0xfc>
 80130fc:	613c      	str	r4, [r7, #16]
 80130fe:	4638      	mov	r0, r7
 8013100:	f001 f8f6 	bl	80142f0 <__mcmp>
 8013104:	2800      	cmp	r0, #0
 8013106:	db25      	blt.n	8013154 <quorem+0xf4>
 8013108:	4628      	mov	r0, r5
 801310a:	f04f 0c00 	mov.w	ip, #0
 801310e:	3601      	adds	r6, #1
 8013110:	f858 1b04 	ldr.w	r1, [r8], #4
 8013114:	f8d0 e000 	ldr.w	lr, [r0]
 8013118:	b28b      	uxth	r3, r1
 801311a:	ebac 0303 	sub.w	r3, ip, r3
 801311e:	fa1f f28e 	uxth.w	r2, lr
 8013122:	4413      	add	r3, r2
 8013124:	0c0a      	lsrs	r2, r1, #16
 8013126:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801312a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801312e:	b29b      	uxth	r3, r3
 8013130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013134:	45c1      	cmp	r9, r8
 8013136:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801313a:	f840 3b04 	str.w	r3, [r0], #4
 801313e:	d2e7      	bcs.n	8013110 <quorem+0xb0>
 8013140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013144:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013148:	b922      	cbnz	r2, 8013154 <quorem+0xf4>
 801314a:	3b04      	subs	r3, #4
 801314c:	429d      	cmp	r5, r3
 801314e:	461a      	mov	r2, r3
 8013150:	d30a      	bcc.n	8013168 <quorem+0x108>
 8013152:	613c      	str	r4, [r7, #16]
 8013154:	4630      	mov	r0, r6
 8013156:	b003      	add	sp, #12
 8013158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801315c:	6812      	ldr	r2, [r2, #0]
 801315e:	3b04      	subs	r3, #4
 8013160:	2a00      	cmp	r2, #0
 8013162:	d1cb      	bne.n	80130fc <quorem+0x9c>
 8013164:	3c01      	subs	r4, #1
 8013166:	e7c6      	b.n	80130f6 <quorem+0x96>
 8013168:	6812      	ldr	r2, [r2, #0]
 801316a:	3b04      	subs	r3, #4
 801316c:	2a00      	cmp	r2, #0
 801316e:	d1f0      	bne.n	8013152 <quorem+0xf2>
 8013170:	3c01      	subs	r4, #1
 8013172:	e7eb      	b.n	801314c <quorem+0xec>
 8013174:	2000      	movs	r0, #0
 8013176:	e7ee      	b.n	8013156 <quorem+0xf6>

08013178 <_dtoa_r>:
 8013178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801317c:	4616      	mov	r6, r2
 801317e:	461f      	mov	r7, r3
 8013180:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013182:	b099      	sub	sp, #100	; 0x64
 8013184:	4605      	mov	r5, r0
 8013186:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801318a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801318e:	b974      	cbnz	r4, 80131ae <_dtoa_r+0x36>
 8013190:	2010      	movs	r0, #16
 8013192:	f7ff f935 	bl	8012400 <malloc>
 8013196:	4602      	mov	r2, r0
 8013198:	6268      	str	r0, [r5, #36]	; 0x24
 801319a:	b920      	cbnz	r0, 80131a6 <_dtoa_r+0x2e>
 801319c:	21ea      	movs	r1, #234	; 0xea
 801319e:	4ba8      	ldr	r3, [pc, #672]	; (8013440 <_dtoa_r+0x2c8>)
 80131a0:	48a8      	ldr	r0, [pc, #672]	; (8013444 <_dtoa_r+0x2cc>)
 80131a2:	f7ff ff3f 	bl	8013024 <__assert_func>
 80131a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131aa:	6004      	str	r4, [r0, #0]
 80131ac:	60c4      	str	r4, [r0, #12]
 80131ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80131b0:	6819      	ldr	r1, [r3, #0]
 80131b2:	b151      	cbz	r1, 80131ca <_dtoa_r+0x52>
 80131b4:	685a      	ldr	r2, [r3, #4]
 80131b6:	2301      	movs	r3, #1
 80131b8:	4093      	lsls	r3, r2
 80131ba:	604a      	str	r2, [r1, #4]
 80131bc:	608b      	str	r3, [r1, #8]
 80131be:	4628      	mov	r0, r5
 80131c0:	f000 fe58 	bl	8013e74 <_Bfree>
 80131c4:	2200      	movs	r2, #0
 80131c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80131c8:	601a      	str	r2, [r3, #0]
 80131ca:	1e3b      	subs	r3, r7, #0
 80131cc:	bfaf      	iteee	ge
 80131ce:	2300      	movge	r3, #0
 80131d0:	2201      	movlt	r2, #1
 80131d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80131d6:	9305      	strlt	r3, [sp, #20]
 80131d8:	bfa8      	it	ge
 80131da:	f8c8 3000 	strge.w	r3, [r8]
 80131de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80131e2:	4b99      	ldr	r3, [pc, #612]	; (8013448 <_dtoa_r+0x2d0>)
 80131e4:	bfb8      	it	lt
 80131e6:	f8c8 2000 	strlt.w	r2, [r8]
 80131ea:	ea33 0309 	bics.w	r3, r3, r9
 80131ee:	d119      	bne.n	8013224 <_dtoa_r+0xac>
 80131f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80131f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80131f6:	6013      	str	r3, [r2, #0]
 80131f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131fc:	4333      	orrs	r3, r6
 80131fe:	f000 857f 	beq.w	8013d00 <_dtoa_r+0xb88>
 8013202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013204:	b953      	cbnz	r3, 801321c <_dtoa_r+0xa4>
 8013206:	4b91      	ldr	r3, [pc, #580]	; (801344c <_dtoa_r+0x2d4>)
 8013208:	e022      	b.n	8013250 <_dtoa_r+0xd8>
 801320a:	4b91      	ldr	r3, [pc, #580]	; (8013450 <_dtoa_r+0x2d8>)
 801320c:	9303      	str	r3, [sp, #12]
 801320e:	3308      	adds	r3, #8
 8013210:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013212:	6013      	str	r3, [r2, #0]
 8013214:	9803      	ldr	r0, [sp, #12]
 8013216:	b019      	add	sp, #100	; 0x64
 8013218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801321c:	4b8b      	ldr	r3, [pc, #556]	; (801344c <_dtoa_r+0x2d4>)
 801321e:	9303      	str	r3, [sp, #12]
 8013220:	3303      	adds	r3, #3
 8013222:	e7f5      	b.n	8013210 <_dtoa_r+0x98>
 8013224:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013228:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801322c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013230:	2200      	movs	r2, #0
 8013232:	2300      	movs	r3, #0
 8013234:	f7ed fc24 	bl	8000a80 <__aeabi_dcmpeq>
 8013238:	4680      	mov	r8, r0
 801323a:	b158      	cbz	r0, 8013254 <_dtoa_r+0xdc>
 801323c:	2301      	movs	r3, #1
 801323e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013244:	2b00      	cmp	r3, #0
 8013246:	f000 8558 	beq.w	8013cfa <_dtoa_r+0xb82>
 801324a:	4882      	ldr	r0, [pc, #520]	; (8013454 <_dtoa_r+0x2dc>)
 801324c:	6018      	str	r0, [r3, #0]
 801324e:	1e43      	subs	r3, r0, #1
 8013250:	9303      	str	r3, [sp, #12]
 8013252:	e7df      	b.n	8013214 <_dtoa_r+0x9c>
 8013254:	ab16      	add	r3, sp, #88	; 0x58
 8013256:	9301      	str	r3, [sp, #4]
 8013258:	ab17      	add	r3, sp, #92	; 0x5c
 801325a:	9300      	str	r3, [sp, #0]
 801325c:	4628      	mov	r0, r5
 801325e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013262:	f001 f8ed 	bl	8014440 <__d2b>
 8013266:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801326a:	4683      	mov	fp, r0
 801326c:	2c00      	cmp	r4, #0
 801326e:	d07f      	beq.n	8013370 <_dtoa_r+0x1f8>
 8013270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013276:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801327a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801327e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8013282:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8013286:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801328a:	2200      	movs	r2, #0
 801328c:	4b72      	ldr	r3, [pc, #456]	; (8013458 <_dtoa_r+0x2e0>)
 801328e:	f7ec ffd7 	bl	8000240 <__aeabi_dsub>
 8013292:	a365      	add	r3, pc, #404	; (adr r3, 8013428 <_dtoa_r+0x2b0>)
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	f7ed f98a 	bl	80005b0 <__aeabi_dmul>
 801329c:	a364      	add	r3, pc, #400	; (adr r3, 8013430 <_dtoa_r+0x2b8>)
 801329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a2:	f7ec ffcf 	bl	8000244 <__adddf3>
 80132a6:	4606      	mov	r6, r0
 80132a8:	4620      	mov	r0, r4
 80132aa:	460f      	mov	r7, r1
 80132ac:	f7ed f916 	bl	80004dc <__aeabi_i2d>
 80132b0:	a361      	add	r3, pc, #388	; (adr r3, 8013438 <_dtoa_r+0x2c0>)
 80132b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b6:	f7ed f97b 	bl	80005b0 <__aeabi_dmul>
 80132ba:	4602      	mov	r2, r0
 80132bc:	460b      	mov	r3, r1
 80132be:	4630      	mov	r0, r6
 80132c0:	4639      	mov	r1, r7
 80132c2:	f7ec ffbf 	bl	8000244 <__adddf3>
 80132c6:	4606      	mov	r6, r0
 80132c8:	460f      	mov	r7, r1
 80132ca:	f7ed fc21 	bl	8000b10 <__aeabi_d2iz>
 80132ce:	2200      	movs	r2, #0
 80132d0:	4682      	mov	sl, r0
 80132d2:	2300      	movs	r3, #0
 80132d4:	4630      	mov	r0, r6
 80132d6:	4639      	mov	r1, r7
 80132d8:	f7ed fbdc 	bl	8000a94 <__aeabi_dcmplt>
 80132dc:	b148      	cbz	r0, 80132f2 <_dtoa_r+0x17a>
 80132de:	4650      	mov	r0, sl
 80132e0:	f7ed f8fc 	bl	80004dc <__aeabi_i2d>
 80132e4:	4632      	mov	r2, r6
 80132e6:	463b      	mov	r3, r7
 80132e8:	f7ed fbca 	bl	8000a80 <__aeabi_dcmpeq>
 80132ec:	b908      	cbnz	r0, 80132f2 <_dtoa_r+0x17a>
 80132ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80132f2:	f1ba 0f16 	cmp.w	sl, #22
 80132f6:	d858      	bhi.n	80133aa <_dtoa_r+0x232>
 80132f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80132fc:	4b57      	ldr	r3, [pc, #348]	; (801345c <_dtoa_r+0x2e4>)
 80132fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013306:	f7ed fbc5 	bl	8000a94 <__aeabi_dcmplt>
 801330a:	2800      	cmp	r0, #0
 801330c:	d04f      	beq.n	80133ae <_dtoa_r+0x236>
 801330e:	2300      	movs	r3, #0
 8013310:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013314:	930f      	str	r3, [sp, #60]	; 0x3c
 8013316:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013318:	1b1c      	subs	r4, r3, r4
 801331a:	1e63      	subs	r3, r4, #1
 801331c:	9309      	str	r3, [sp, #36]	; 0x24
 801331e:	bf49      	itett	mi
 8013320:	f1c4 0301 	rsbmi	r3, r4, #1
 8013324:	2300      	movpl	r3, #0
 8013326:	9306      	strmi	r3, [sp, #24]
 8013328:	2300      	movmi	r3, #0
 801332a:	bf54      	ite	pl
 801332c:	9306      	strpl	r3, [sp, #24]
 801332e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013330:	f1ba 0f00 	cmp.w	sl, #0
 8013334:	db3d      	blt.n	80133b2 <_dtoa_r+0x23a>
 8013336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013338:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801333c:	4453      	add	r3, sl
 801333e:	9309      	str	r3, [sp, #36]	; 0x24
 8013340:	2300      	movs	r3, #0
 8013342:	930a      	str	r3, [sp, #40]	; 0x28
 8013344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013346:	2b09      	cmp	r3, #9
 8013348:	f200 808c 	bhi.w	8013464 <_dtoa_r+0x2ec>
 801334c:	2b05      	cmp	r3, #5
 801334e:	bfc4      	itt	gt
 8013350:	3b04      	subgt	r3, #4
 8013352:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013356:	bfc8      	it	gt
 8013358:	2400      	movgt	r4, #0
 801335a:	f1a3 0302 	sub.w	r3, r3, #2
 801335e:	bfd8      	it	le
 8013360:	2401      	movle	r4, #1
 8013362:	2b03      	cmp	r3, #3
 8013364:	f200 808a 	bhi.w	801347c <_dtoa_r+0x304>
 8013368:	e8df f003 	tbb	[pc, r3]
 801336c:	5b4d4f2d 	.word	0x5b4d4f2d
 8013370:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013374:	441c      	add	r4, r3
 8013376:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801337a:	2b20      	cmp	r3, #32
 801337c:	bfc3      	ittte	gt
 801337e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013382:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8013386:	fa09 f303 	lslgt.w	r3, r9, r3
 801338a:	f1c3 0320 	rsble	r3, r3, #32
 801338e:	bfc6      	itte	gt
 8013390:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013394:	4318      	orrgt	r0, r3
 8013396:	fa06 f003 	lslle.w	r0, r6, r3
 801339a:	f7ed f88f 	bl	80004bc <__aeabi_ui2d>
 801339e:	2301      	movs	r3, #1
 80133a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80133a4:	3c01      	subs	r4, #1
 80133a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80133a8:	e76f      	b.n	801328a <_dtoa_r+0x112>
 80133aa:	2301      	movs	r3, #1
 80133ac:	e7b2      	b.n	8013314 <_dtoa_r+0x19c>
 80133ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80133b0:	e7b1      	b.n	8013316 <_dtoa_r+0x19e>
 80133b2:	9b06      	ldr	r3, [sp, #24]
 80133b4:	eba3 030a 	sub.w	r3, r3, sl
 80133b8:	9306      	str	r3, [sp, #24]
 80133ba:	f1ca 0300 	rsb	r3, sl, #0
 80133be:	930a      	str	r3, [sp, #40]	; 0x28
 80133c0:	2300      	movs	r3, #0
 80133c2:	930e      	str	r3, [sp, #56]	; 0x38
 80133c4:	e7be      	b.n	8013344 <_dtoa_r+0x1cc>
 80133c6:	2300      	movs	r3, #0
 80133c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80133ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	dc58      	bgt.n	8013482 <_dtoa_r+0x30a>
 80133d0:	f04f 0901 	mov.w	r9, #1
 80133d4:	464b      	mov	r3, r9
 80133d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80133da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80133de:	2200      	movs	r2, #0
 80133e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80133e2:	6042      	str	r2, [r0, #4]
 80133e4:	2204      	movs	r2, #4
 80133e6:	f102 0614 	add.w	r6, r2, #20
 80133ea:	429e      	cmp	r6, r3
 80133ec:	6841      	ldr	r1, [r0, #4]
 80133ee:	d94e      	bls.n	801348e <_dtoa_r+0x316>
 80133f0:	4628      	mov	r0, r5
 80133f2:	f000 fcff 	bl	8013df4 <_Balloc>
 80133f6:	9003      	str	r0, [sp, #12]
 80133f8:	2800      	cmp	r0, #0
 80133fa:	d14c      	bne.n	8013496 <_dtoa_r+0x31e>
 80133fc:	4602      	mov	r2, r0
 80133fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013402:	4b17      	ldr	r3, [pc, #92]	; (8013460 <_dtoa_r+0x2e8>)
 8013404:	e6cc      	b.n	80131a0 <_dtoa_r+0x28>
 8013406:	2301      	movs	r3, #1
 8013408:	e7de      	b.n	80133c8 <_dtoa_r+0x250>
 801340a:	2300      	movs	r3, #0
 801340c:	930b      	str	r3, [sp, #44]	; 0x2c
 801340e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013410:	eb0a 0903 	add.w	r9, sl, r3
 8013414:	f109 0301 	add.w	r3, r9, #1
 8013418:	2b01      	cmp	r3, #1
 801341a:	9308      	str	r3, [sp, #32]
 801341c:	bfb8      	it	lt
 801341e:	2301      	movlt	r3, #1
 8013420:	e7dd      	b.n	80133de <_dtoa_r+0x266>
 8013422:	2301      	movs	r3, #1
 8013424:	e7f2      	b.n	801340c <_dtoa_r+0x294>
 8013426:	bf00      	nop
 8013428:	636f4361 	.word	0x636f4361
 801342c:	3fd287a7 	.word	0x3fd287a7
 8013430:	8b60c8b3 	.word	0x8b60c8b3
 8013434:	3fc68a28 	.word	0x3fc68a28
 8013438:	509f79fb 	.word	0x509f79fb
 801343c:	3fd34413 	.word	0x3fd34413
 8013440:	08016238 	.word	0x08016238
 8013444:	080162f3 	.word	0x080162f3
 8013448:	7ff00000 	.word	0x7ff00000
 801344c:	080162ef 	.word	0x080162ef
 8013450:	080162e6 	.word	0x080162e6
 8013454:	08016215 	.word	0x08016215
 8013458:	3ff80000 	.word	0x3ff80000
 801345c:	080163e8 	.word	0x080163e8
 8013460:	0801634e 	.word	0x0801634e
 8013464:	2401      	movs	r4, #1
 8013466:	2300      	movs	r3, #0
 8013468:	940b      	str	r4, [sp, #44]	; 0x2c
 801346a:	9322      	str	r3, [sp, #136]	; 0x88
 801346c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8013470:	2200      	movs	r2, #0
 8013472:	2312      	movs	r3, #18
 8013474:	f8cd 9020 	str.w	r9, [sp, #32]
 8013478:	9223      	str	r2, [sp, #140]	; 0x8c
 801347a:	e7b0      	b.n	80133de <_dtoa_r+0x266>
 801347c:	2301      	movs	r3, #1
 801347e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013480:	e7f4      	b.n	801346c <_dtoa_r+0x2f4>
 8013482:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8013486:	464b      	mov	r3, r9
 8013488:	f8cd 9020 	str.w	r9, [sp, #32]
 801348c:	e7a7      	b.n	80133de <_dtoa_r+0x266>
 801348e:	3101      	adds	r1, #1
 8013490:	6041      	str	r1, [r0, #4]
 8013492:	0052      	lsls	r2, r2, #1
 8013494:	e7a7      	b.n	80133e6 <_dtoa_r+0x26e>
 8013496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013498:	9a03      	ldr	r2, [sp, #12]
 801349a:	601a      	str	r2, [r3, #0]
 801349c:	9b08      	ldr	r3, [sp, #32]
 801349e:	2b0e      	cmp	r3, #14
 80134a0:	f200 80a8 	bhi.w	80135f4 <_dtoa_r+0x47c>
 80134a4:	2c00      	cmp	r4, #0
 80134a6:	f000 80a5 	beq.w	80135f4 <_dtoa_r+0x47c>
 80134aa:	f1ba 0f00 	cmp.w	sl, #0
 80134ae:	dd34      	ble.n	801351a <_dtoa_r+0x3a2>
 80134b0:	4a9a      	ldr	r2, [pc, #616]	; (801371c <_dtoa_r+0x5a4>)
 80134b2:	f00a 030f 	and.w	r3, sl, #15
 80134b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80134ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80134be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80134c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80134c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80134ca:	d016      	beq.n	80134fa <_dtoa_r+0x382>
 80134cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80134d0:	4b93      	ldr	r3, [pc, #588]	; (8013720 <_dtoa_r+0x5a8>)
 80134d2:	2703      	movs	r7, #3
 80134d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80134d8:	f7ed f994 	bl	8000804 <__aeabi_ddiv>
 80134dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134e0:	f004 040f 	and.w	r4, r4, #15
 80134e4:	4e8e      	ldr	r6, [pc, #568]	; (8013720 <_dtoa_r+0x5a8>)
 80134e6:	b954      	cbnz	r4, 80134fe <_dtoa_r+0x386>
 80134e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80134ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80134f0:	f7ed f988 	bl	8000804 <__aeabi_ddiv>
 80134f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134f8:	e029      	b.n	801354e <_dtoa_r+0x3d6>
 80134fa:	2702      	movs	r7, #2
 80134fc:	e7f2      	b.n	80134e4 <_dtoa_r+0x36c>
 80134fe:	07e1      	lsls	r1, r4, #31
 8013500:	d508      	bpl.n	8013514 <_dtoa_r+0x39c>
 8013502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013506:	e9d6 2300 	ldrd	r2, r3, [r6]
 801350a:	f7ed f851 	bl	80005b0 <__aeabi_dmul>
 801350e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013512:	3701      	adds	r7, #1
 8013514:	1064      	asrs	r4, r4, #1
 8013516:	3608      	adds	r6, #8
 8013518:	e7e5      	b.n	80134e6 <_dtoa_r+0x36e>
 801351a:	f000 80a5 	beq.w	8013668 <_dtoa_r+0x4f0>
 801351e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013522:	f1ca 0400 	rsb	r4, sl, #0
 8013526:	4b7d      	ldr	r3, [pc, #500]	; (801371c <_dtoa_r+0x5a4>)
 8013528:	f004 020f 	and.w	r2, r4, #15
 801352c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013534:	f7ed f83c 	bl	80005b0 <__aeabi_dmul>
 8013538:	2702      	movs	r7, #2
 801353a:	2300      	movs	r3, #0
 801353c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013540:	4e77      	ldr	r6, [pc, #476]	; (8013720 <_dtoa_r+0x5a8>)
 8013542:	1124      	asrs	r4, r4, #4
 8013544:	2c00      	cmp	r4, #0
 8013546:	f040 8084 	bne.w	8013652 <_dtoa_r+0x4da>
 801354a:	2b00      	cmp	r3, #0
 801354c:	d1d2      	bne.n	80134f4 <_dtoa_r+0x37c>
 801354e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013550:	2b00      	cmp	r3, #0
 8013552:	f000 808b 	beq.w	801366c <_dtoa_r+0x4f4>
 8013556:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801355a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801355e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013562:	2200      	movs	r2, #0
 8013564:	4b6f      	ldr	r3, [pc, #444]	; (8013724 <_dtoa_r+0x5ac>)
 8013566:	f7ed fa95 	bl	8000a94 <__aeabi_dcmplt>
 801356a:	2800      	cmp	r0, #0
 801356c:	d07e      	beq.n	801366c <_dtoa_r+0x4f4>
 801356e:	9b08      	ldr	r3, [sp, #32]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d07b      	beq.n	801366c <_dtoa_r+0x4f4>
 8013574:	f1b9 0f00 	cmp.w	r9, #0
 8013578:	dd38      	ble.n	80135ec <_dtoa_r+0x474>
 801357a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801357e:	2200      	movs	r2, #0
 8013580:	4b69      	ldr	r3, [pc, #420]	; (8013728 <_dtoa_r+0x5b0>)
 8013582:	f7ed f815 	bl	80005b0 <__aeabi_dmul>
 8013586:	464c      	mov	r4, r9
 8013588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801358c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8013590:	3701      	adds	r7, #1
 8013592:	4638      	mov	r0, r7
 8013594:	f7ec ffa2 	bl	80004dc <__aeabi_i2d>
 8013598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801359c:	f7ed f808 	bl	80005b0 <__aeabi_dmul>
 80135a0:	2200      	movs	r2, #0
 80135a2:	4b62      	ldr	r3, [pc, #392]	; (801372c <_dtoa_r+0x5b4>)
 80135a4:	f7ec fe4e 	bl	8000244 <__adddf3>
 80135a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80135ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80135b0:	9611      	str	r6, [sp, #68]	; 0x44
 80135b2:	2c00      	cmp	r4, #0
 80135b4:	d15d      	bne.n	8013672 <_dtoa_r+0x4fa>
 80135b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80135ba:	2200      	movs	r2, #0
 80135bc:	4b5c      	ldr	r3, [pc, #368]	; (8013730 <_dtoa_r+0x5b8>)
 80135be:	f7ec fe3f 	bl	8000240 <__aeabi_dsub>
 80135c2:	4602      	mov	r2, r0
 80135c4:	460b      	mov	r3, r1
 80135c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80135ca:	4633      	mov	r3, r6
 80135cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80135ce:	f7ed fa7f 	bl	8000ad0 <__aeabi_dcmpgt>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	f040 829c 	bne.w	8013b10 <_dtoa_r+0x998>
 80135d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80135dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80135de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80135e2:	f7ed fa57 	bl	8000a94 <__aeabi_dcmplt>
 80135e6:	2800      	cmp	r0, #0
 80135e8:	f040 8290 	bne.w	8013b0c <_dtoa_r+0x994>
 80135ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80135f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80135f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	f2c0 8152 	blt.w	80138a0 <_dtoa_r+0x728>
 80135fc:	f1ba 0f0e 	cmp.w	sl, #14
 8013600:	f300 814e 	bgt.w	80138a0 <_dtoa_r+0x728>
 8013604:	4b45      	ldr	r3, [pc, #276]	; (801371c <_dtoa_r+0x5a4>)
 8013606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801360a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801360e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013614:	2b00      	cmp	r3, #0
 8013616:	f280 80db 	bge.w	80137d0 <_dtoa_r+0x658>
 801361a:	9b08      	ldr	r3, [sp, #32]
 801361c:	2b00      	cmp	r3, #0
 801361e:	f300 80d7 	bgt.w	80137d0 <_dtoa_r+0x658>
 8013622:	f040 8272 	bne.w	8013b0a <_dtoa_r+0x992>
 8013626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801362a:	2200      	movs	r2, #0
 801362c:	4b40      	ldr	r3, [pc, #256]	; (8013730 <_dtoa_r+0x5b8>)
 801362e:	f7ec ffbf 	bl	80005b0 <__aeabi_dmul>
 8013632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013636:	f7ed fa41 	bl	8000abc <__aeabi_dcmpge>
 801363a:	9c08      	ldr	r4, [sp, #32]
 801363c:	4626      	mov	r6, r4
 801363e:	2800      	cmp	r0, #0
 8013640:	f040 8248 	bne.w	8013ad4 <_dtoa_r+0x95c>
 8013644:	2331      	movs	r3, #49	; 0x31
 8013646:	9f03      	ldr	r7, [sp, #12]
 8013648:	f10a 0a01 	add.w	sl, sl, #1
 801364c:	f807 3b01 	strb.w	r3, [r7], #1
 8013650:	e244      	b.n	8013adc <_dtoa_r+0x964>
 8013652:	07e2      	lsls	r2, r4, #31
 8013654:	d505      	bpl.n	8013662 <_dtoa_r+0x4ea>
 8013656:	e9d6 2300 	ldrd	r2, r3, [r6]
 801365a:	f7ec ffa9 	bl	80005b0 <__aeabi_dmul>
 801365e:	2301      	movs	r3, #1
 8013660:	3701      	adds	r7, #1
 8013662:	1064      	asrs	r4, r4, #1
 8013664:	3608      	adds	r6, #8
 8013666:	e76d      	b.n	8013544 <_dtoa_r+0x3cc>
 8013668:	2702      	movs	r7, #2
 801366a:	e770      	b.n	801354e <_dtoa_r+0x3d6>
 801366c:	46d0      	mov	r8, sl
 801366e:	9c08      	ldr	r4, [sp, #32]
 8013670:	e78f      	b.n	8013592 <_dtoa_r+0x41a>
 8013672:	9903      	ldr	r1, [sp, #12]
 8013674:	4b29      	ldr	r3, [pc, #164]	; (801371c <_dtoa_r+0x5a4>)
 8013676:	4421      	add	r1, r4
 8013678:	9112      	str	r1, [sp, #72]	; 0x48
 801367a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801367c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013680:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013684:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013688:	2900      	cmp	r1, #0
 801368a:	d055      	beq.n	8013738 <_dtoa_r+0x5c0>
 801368c:	2000      	movs	r0, #0
 801368e:	4929      	ldr	r1, [pc, #164]	; (8013734 <_dtoa_r+0x5bc>)
 8013690:	f7ed f8b8 	bl	8000804 <__aeabi_ddiv>
 8013694:	463b      	mov	r3, r7
 8013696:	4632      	mov	r2, r6
 8013698:	f7ec fdd2 	bl	8000240 <__aeabi_dsub>
 801369c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80136a0:	9f03      	ldr	r7, [sp, #12]
 80136a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136a6:	f7ed fa33 	bl	8000b10 <__aeabi_d2iz>
 80136aa:	4604      	mov	r4, r0
 80136ac:	f7ec ff16 	bl	80004dc <__aeabi_i2d>
 80136b0:	4602      	mov	r2, r0
 80136b2:	460b      	mov	r3, r1
 80136b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136b8:	f7ec fdc2 	bl	8000240 <__aeabi_dsub>
 80136bc:	4602      	mov	r2, r0
 80136be:	460b      	mov	r3, r1
 80136c0:	3430      	adds	r4, #48	; 0x30
 80136c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80136c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80136ca:	f807 4b01 	strb.w	r4, [r7], #1
 80136ce:	f7ed f9e1 	bl	8000a94 <__aeabi_dcmplt>
 80136d2:	2800      	cmp	r0, #0
 80136d4:	d174      	bne.n	80137c0 <_dtoa_r+0x648>
 80136d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80136da:	2000      	movs	r0, #0
 80136dc:	4911      	ldr	r1, [pc, #68]	; (8013724 <_dtoa_r+0x5ac>)
 80136de:	f7ec fdaf 	bl	8000240 <__aeabi_dsub>
 80136e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80136e6:	f7ed f9d5 	bl	8000a94 <__aeabi_dcmplt>
 80136ea:	2800      	cmp	r0, #0
 80136ec:	f040 80b7 	bne.w	801385e <_dtoa_r+0x6e6>
 80136f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80136f2:	429f      	cmp	r7, r3
 80136f4:	f43f af7a 	beq.w	80135ec <_dtoa_r+0x474>
 80136f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80136fc:	2200      	movs	r2, #0
 80136fe:	4b0a      	ldr	r3, [pc, #40]	; (8013728 <_dtoa_r+0x5b0>)
 8013700:	f7ec ff56 	bl	80005b0 <__aeabi_dmul>
 8013704:	2200      	movs	r2, #0
 8013706:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801370a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801370e:	4b06      	ldr	r3, [pc, #24]	; (8013728 <_dtoa_r+0x5b0>)
 8013710:	f7ec ff4e 	bl	80005b0 <__aeabi_dmul>
 8013714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013718:	e7c3      	b.n	80136a2 <_dtoa_r+0x52a>
 801371a:	bf00      	nop
 801371c:	080163e8 	.word	0x080163e8
 8013720:	080163c0 	.word	0x080163c0
 8013724:	3ff00000 	.word	0x3ff00000
 8013728:	40240000 	.word	0x40240000
 801372c:	401c0000 	.word	0x401c0000
 8013730:	40140000 	.word	0x40140000
 8013734:	3fe00000 	.word	0x3fe00000
 8013738:	4630      	mov	r0, r6
 801373a:	4639      	mov	r1, r7
 801373c:	f7ec ff38 	bl	80005b0 <__aeabi_dmul>
 8013740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013742:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013746:	9c03      	ldr	r4, [sp, #12]
 8013748:	9314      	str	r3, [sp, #80]	; 0x50
 801374a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801374e:	f7ed f9df 	bl	8000b10 <__aeabi_d2iz>
 8013752:	9015      	str	r0, [sp, #84]	; 0x54
 8013754:	f7ec fec2 	bl	80004dc <__aeabi_i2d>
 8013758:	4602      	mov	r2, r0
 801375a:	460b      	mov	r3, r1
 801375c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013760:	f7ec fd6e 	bl	8000240 <__aeabi_dsub>
 8013764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013766:	4606      	mov	r6, r0
 8013768:	3330      	adds	r3, #48	; 0x30
 801376a:	f804 3b01 	strb.w	r3, [r4], #1
 801376e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013770:	460f      	mov	r7, r1
 8013772:	429c      	cmp	r4, r3
 8013774:	f04f 0200 	mov.w	r2, #0
 8013778:	d124      	bne.n	80137c4 <_dtoa_r+0x64c>
 801377a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801377e:	4bb0      	ldr	r3, [pc, #704]	; (8013a40 <_dtoa_r+0x8c8>)
 8013780:	f7ec fd60 	bl	8000244 <__adddf3>
 8013784:	4602      	mov	r2, r0
 8013786:	460b      	mov	r3, r1
 8013788:	4630      	mov	r0, r6
 801378a:	4639      	mov	r1, r7
 801378c:	f7ed f9a0 	bl	8000ad0 <__aeabi_dcmpgt>
 8013790:	2800      	cmp	r0, #0
 8013792:	d163      	bne.n	801385c <_dtoa_r+0x6e4>
 8013794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013798:	2000      	movs	r0, #0
 801379a:	49a9      	ldr	r1, [pc, #676]	; (8013a40 <_dtoa_r+0x8c8>)
 801379c:	f7ec fd50 	bl	8000240 <__aeabi_dsub>
 80137a0:	4602      	mov	r2, r0
 80137a2:	460b      	mov	r3, r1
 80137a4:	4630      	mov	r0, r6
 80137a6:	4639      	mov	r1, r7
 80137a8:	f7ed f974 	bl	8000a94 <__aeabi_dcmplt>
 80137ac:	2800      	cmp	r0, #0
 80137ae:	f43f af1d 	beq.w	80135ec <_dtoa_r+0x474>
 80137b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80137b4:	1e7b      	subs	r3, r7, #1
 80137b6:	9314      	str	r3, [sp, #80]	; 0x50
 80137b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80137bc:	2b30      	cmp	r3, #48	; 0x30
 80137be:	d0f8      	beq.n	80137b2 <_dtoa_r+0x63a>
 80137c0:	46c2      	mov	sl, r8
 80137c2:	e03b      	b.n	801383c <_dtoa_r+0x6c4>
 80137c4:	4b9f      	ldr	r3, [pc, #636]	; (8013a44 <_dtoa_r+0x8cc>)
 80137c6:	f7ec fef3 	bl	80005b0 <__aeabi_dmul>
 80137ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137ce:	e7bc      	b.n	801374a <_dtoa_r+0x5d2>
 80137d0:	9f03      	ldr	r7, [sp, #12]
 80137d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80137d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80137da:	4640      	mov	r0, r8
 80137dc:	4649      	mov	r1, r9
 80137de:	f7ed f811 	bl	8000804 <__aeabi_ddiv>
 80137e2:	f7ed f995 	bl	8000b10 <__aeabi_d2iz>
 80137e6:	4604      	mov	r4, r0
 80137e8:	f7ec fe78 	bl	80004dc <__aeabi_i2d>
 80137ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80137f0:	f7ec fede 	bl	80005b0 <__aeabi_dmul>
 80137f4:	4602      	mov	r2, r0
 80137f6:	460b      	mov	r3, r1
 80137f8:	4640      	mov	r0, r8
 80137fa:	4649      	mov	r1, r9
 80137fc:	f7ec fd20 	bl	8000240 <__aeabi_dsub>
 8013800:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013804:	f807 6b01 	strb.w	r6, [r7], #1
 8013808:	9e03      	ldr	r6, [sp, #12]
 801380a:	f8dd c020 	ldr.w	ip, [sp, #32]
 801380e:	1bbe      	subs	r6, r7, r6
 8013810:	45b4      	cmp	ip, r6
 8013812:	4602      	mov	r2, r0
 8013814:	460b      	mov	r3, r1
 8013816:	d136      	bne.n	8013886 <_dtoa_r+0x70e>
 8013818:	f7ec fd14 	bl	8000244 <__adddf3>
 801381c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013820:	4680      	mov	r8, r0
 8013822:	4689      	mov	r9, r1
 8013824:	f7ed f954 	bl	8000ad0 <__aeabi_dcmpgt>
 8013828:	bb58      	cbnz	r0, 8013882 <_dtoa_r+0x70a>
 801382a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801382e:	4640      	mov	r0, r8
 8013830:	4649      	mov	r1, r9
 8013832:	f7ed f925 	bl	8000a80 <__aeabi_dcmpeq>
 8013836:	b108      	cbz	r0, 801383c <_dtoa_r+0x6c4>
 8013838:	07e1      	lsls	r1, r4, #31
 801383a:	d422      	bmi.n	8013882 <_dtoa_r+0x70a>
 801383c:	4628      	mov	r0, r5
 801383e:	4659      	mov	r1, fp
 8013840:	f000 fb18 	bl	8013e74 <_Bfree>
 8013844:	2300      	movs	r3, #0
 8013846:	703b      	strb	r3, [r7, #0]
 8013848:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801384a:	f10a 0001 	add.w	r0, sl, #1
 801384e:	6018      	str	r0, [r3, #0]
 8013850:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013852:	2b00      	cmp	r3, #0
 8013854:	f43f acde 	beq.w	8013214 <_dtoa_r+0x9c>
 8013858:	601f      	str	r7, [r3, #0]
 801385a:	e4db      	b.n	8013214 <_dtoa_r+0x9c>
 801385c:	4627      	mov	r7, r4
 801385e:	463b      	mov	r3, r7
 8013860:	461f      	mov	r7, r3
 8013862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013866:	2a39      	cmp	r2, #57	; 0x39
 8013868:	d107      	bne.n	801387a <_dtoa_r+0x702>
 801386a:	9a03      	ldr	r2, [sp, #12]
 801386c:	429a      	cmp	r2, r3
 801386e:	d1f7      	bne.n	8013860 <_dtoa_r+0x6e8>
 8013870:	2230      	movs	r2, #48	; 0x30
 8013872:	9903      	ldr	r1, [sp, #12]
 8013874:	f108 0801 	add.w	r8, r8, #1
 8013878:	700a      	strb	r2, [r1, #0]
 801387a:	781a      	ldrb	r2, [r3, #0]
 801387c:	3201      	adds	r2, #1
 801387e:	701a      	strb	r2, [r3, #0]
 8013880:	e79e      	b.n	80137c0 <_dtoa_r+0x648>
 8013882:	46d0      	mov	r8, sl
 8013884:	e7eb      	b.n	801385e <_dtoa_r+0x6e6>
 8013886:	2200      	movs	r2, #0
 8013888:	4b6e      	ldr	r3, [pc, #440]	; (8013a44 <_dtoa_r+0x8cc>)
 801388a:	f7ec fe91 	bl	80005b0 <__aeabi_dmul>
 801388e:	2200      	movs	r2, #0
 8013890:	2300      	movs	r3, #0
 8013892:	4680      	mov	r8, r0
 8013894:	4689      	mov	r9, r1
 8013896:	f7ed f8f3 	bl	8000a80 <__aeabi_dcmpeq>
 801389a:	2800      	cmp	r0, #0
 801389c:	d09b      	beq.n	80137d6 <_dtoa_r+0x65e>
 801389e:	e7cd      	b.n	801383c <_dtoa_r+0x6c4>
 80138a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80138a2:	2a00      	cmp	r2, #0
 80138a4:	f000 80d0 	beq.w	8013a48 <_dtoa_r+0x8d0>
 80138a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80138aa:	2a01      	cmp	r2, #1
 80138ac:	f300 80ae 	bgt.w	8013a0c <_dtoa_r+0x894>
 80138b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80138b2:	2a00      	cmp	r2, #0
 80138b4:	f000 80a6 	beq.w	8013a04 <_dtoa_r+0x88c>
 80138b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80138bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80138be:	9f06      	ldr	r7, [sp, #24]
 80138c0:	9a06      	ldr	r2, [sp, #24]
 80138c2:	2101      	movs	r1, #1
 80138c4:	441a      	add	r2, r3
 80138c6:	9206      	str	r2, [sp, #24]
 80138c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138ca:	4628      	mov	r0, r5
 80138cc:	441a      	add	r2, r3
 80138ce:	9209      	str	r2, [sp, #36]	; 0x24
 80138d0:	f000 fb86 	bl	8013fe0 <__i2b>
 80138d4:	4606      	mov	r6, r0
 80138d6:	2f00      	cmp	r7, #0
 80138d8:	dd0c      	ble.n	80138f4 <_dtoa_r+0x77c>
 80138da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138dc:	2b00      	cmp	r3, #0
 80138de:	dd09      	ble.n	80138f4 <_dtoa_r+0x77c>
 80138e0:	42bb      	cmp	r3, r7
 80138e2:	bfa8      	it	ge
 80138e4:	463b      	movge	r3, r7
 80138e6:	9a06      	ldr	r2, [sp, #24]
 80138e8:	1aff      	subs	r7, r7, r3
 80138ea:	1ad2      	subs	r2, r2, r3
 80138ec:	9206      	str	r2, [sp, #24]
 80138ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138f0:	1ad3      	subs	r3, r2, r3
 80138f2:	9309      	str	r3, [sp, #36]	; 0x24
 80138f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138f6:	b1f3      	cbz	r3, 8013936 <_dtoa_r+0x7be>
 80138f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	f000 80a8 	beq.w	8013a50 <_dtoa_r+0x8d8>
 8013900:	2c00      	cmp	r4, #0
 8013902:	dd10      	ble.n	8013926 <_dtoa_r+0x7ae>
 8013904:	4631      	mov	r1, r6
 8013906:	4622      	mov	r2, r4
 8013908:	4628      	mov	r0, r5
 801390a:	f000 fc27 	bl	801415c <__pow5mult>
 801390e:	465a      	mov	r2, fp
 8013910:	4601      	mov	r1, r0
 8013912:	4606      	mov	r6, r0
 8013914:	4628      	mov	r0, r5
 8013916:	f000 fb79 	bl	801400c <__multiply>
 801391a:	4680      	mov	r8, r0
 801391c:	4659      	mov	r1, fp
 801391e:	4628      	mov	r0, r5
 8013920:	f000 faa8 	bl	8013e74 <_Bfree>
 8013924:	46c3      	mov	fp, r8
 8013926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013928:	1b1a      	subs	r2, r3, r4
 801392a:	d004      	beq.n	8013936 <_dtoa_r+0x7be>
 801392c:	4659      	mov	r1, fp
 801392e:	4628      	mov	r0, r5
 8013930:	f000 fc14 	bl	801415c <__pow5mult>
 8013934:	4683      	mov	fp, r0
 8013936:	2101      	movs	r1, #1
 8013938:	4628      	mov	r0, r5
 801393a:	f000 fb51 	bl	8013fe0 <__i2b>
 801393e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013940:	4604      	mov	r4, r0
 8013942:	2b00      	cmp	r3, #0
 8013944:	f340 8086 	ble.w	8013a54 <_dtoa_r+0x8dc>
 8013948:	461a      	mov	r2, r3
 801394a:	4601      	mov	r1, r0
 801394c:	4628      	mov	r0, r5
 801394e:	f000 fc05 	bl	801415c <__pow5mult>
 8013952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013954:	4604      	mov	r4, r0
 8013956:	2b01      	cmp	r3, #1
 8013958:	dd7f      	ble.n	8013a5a <_dtoa_r+0x8e2>
 801395a:	f04f 0800 	mov.w	r8, #0
 801395e:	6923      	ldr	r3, [r4, #16]
 8013960:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013964:	6918      	ldr	r0, [r3, #16]
 8013966:	f000 faed 	bl	8013f44 <__hi0bits>
 801396a:	f1c0 0020 	rsb	r0, r0, #32
 801396e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013970:	4418      	add	r0, r3
 8013972:	f010 001f 	ands.w	r0, r0, #31
 8013976:	f000 8092 	beq.w	8013a9e <_dtoa_r+0x926>
 801397a:	f1c0 0320 	rsb	r3, r0, #32
 801397e:	2b04      	cmp	r3, #4
 8013980:	f340 808a 	ble.w	8013a98 <_dtoa_r+0x920>
 8013984:	f1c0 001c 	rsb	r0, r0, #28
 8013988:	9b06      	ldr	r3, [sp, #24]
 801398a:	4407      	add	r7, r0
 801398c:	4403      	add	r3, r0
 801398e:	9306      	str	r3, [sp, #24]
 8013990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013992:	4403      	add	r3, r0
 8013994:	9309      	str	r3, [sp, #36]	; 0x24
 8013996:	9b06      	ldr	r3, [sp, #24]
 8013998:	2b00      	cmp	r3, #0
 801399a:	dd05      	ble.n	80139a8 <_dtoa_r+0x830>
 801399c:	4659      	mov	r1, fp
 801399e:	461a      	mov	r2, r3
 80139a0:	4628      	mov	r0, r5
 80139a2:	f000 fc35 	bl	8014210 <__lshift>
 80139a6:	4683      	mov	fp, r0
 80139a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	dd05      	ble.n	80139ba <_dtoa_r+0x842>
 80139ae:	4621      	mov	r1, r4
 80139b0:	461a      	mov	r2, r3
 80139b2:	4628      	mov	r0, r5
 80139b4:	f000 fc2c 	bl	8014210 <__lshift>
 80139b8:	4604      	mov	r4, r0
 80139ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d070      	beq.n	8013aa2 <_dtoa_r+0x92a>
 80139c0:	4621      	mov	r1, r4
 80139c2:	4658      	mov	r0, fp
 80139c4:	f000 fc94 	bl	80142f0 <__mcmp>
 80139c8:	2800      	cmp	r0, #0
 80139ca:	da6a      	bge.n	8013aa2 <_dtoa_r+0x92a>
 80139cc:	2300      	movs	r3, #0
 80139ce:	4659      	mov	r1, fp
 80139d0:	220a      	movs	r2, #10
 80139d2:	4628      	mov	r0, r5
 80139d4:	f000 fa70 	bl	8013eb8 <__multadd>
 80139d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139da:	4683      	mov	fp, r0
 80139dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	f000 8194 	beq.w	8013d0e <_dtoa_r+0xb96>
 80139e6:	4631      	mov	r1, r6
 80139e8:	2300      	movs	r3, #0
 80139ea:	220a      	movs	r2, #10
 80139ec:	4628      	mov	r0, r5
 80139ee:	f000 fa63 	bl	8013eb8 <__multadd>
 80139f2:	f1b9 0f00 	cmp.w	r9, #0
 80139f6:	4606      	mov	r6, r0
 80139f8:	f300 8093 	bgt.w	8013b22 <_dtoa_r+0x9aa>
 80139fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80139fe:	2b02      	cmp	r3, #2
 8013a00:	dc57      	bgt.n	8013ab2 <_dtoa_r+0x93a>
 8013a02:	e08e      	b.n	8013b22 <_dtoa_r+0x9aa>
 8013a04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013a06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013a0a:	e757      	b.n	80138bc <_dtoa_r+0x744>
 8013a0c:	9b08      	ldr	r3, [sp, #32]
 8013a0e:	1e5c      	subs	r4, r3, #1
 8013a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a12:	42a3      	cmp	r3, r4
 8013a14:	bfb7      	itett	lt
 8013a16:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013a18:	1b1c      	subge	r4, r3, r4
 8013a1a:	1ae2      	sublt	r2, r4, r3
 8013a1c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013a1e:	bfbe      	ittt	lt
 8013a20:	940a      	strlt	r4, [sp, #40]	; 0x28
 8013a22:	189b      	addlt	r3, r3, r2
 8013a24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013a26:	9b08      	ldr	r3, [sp, #32]
 8013a28:	bfb8      	it	lt
 8013a2a:	2400      	movlt	r4, #0
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	bfbb      	ittet	lt
 8013a30:	9b06      	ldrlt	r3, [sp, #24]
 8013a32:	9a08      	ldrlt	r2, [sp, #32]
 8013a34:	9f06      	ldrge	r7, [sp, #24]
 8013a36:	1a9f      	sublt	r7, r3, r2
 8013a38:	bfac      	ite	ge
 8013a3a:	9b08      	ldrge	r3, [sp, #32]
 8013a3c:	2300      	movlt	r3, #0
 8013a3e:	e73f      	b.n	80138c0 <_dtoa_r+0x748>
 8013a40:	3fe00000 	.word	0x3fe00000
 8013a44:	40240000 	.word	0x40240000
 8013a48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013a4a:	9f06      	ldr	r7, [sp, #24]
 8013a4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013a4e:	e742      	b.n	80138d6 <_dtoa_r+0x75e>
 8013a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a52:	e76b      	b.n	801392c <_dtoa_r+0x7b4>
 8013a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a56:	2b01      	cmp	r3, #1
 8013a58:	dc19      	bgt.n	8013a8e <_dtoa_r+0x916>
 8013a5a:	9b04      	ldr	r3, [sp, #16]
 8013a5c:	b9bb      	cbnz	r3, 8013a8e <_dtoa_r+0x916>
 8013a5e:	9b05      	ldr	r3, [sp, #20]
 8013a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a64:	b99b      	cbnz	r3, 8013a8e <_dtoa_r+0x916>
 8013a66:	9b05      	ldr	r3, [sp, #20]
 8013a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a6c:	0d1b      	lsrs	r3, r3, #20
 8013a6e:	051b      	lsls	r3, r3, #20
 8013a70:	b183      	cbz	r3, 8013a94 <_dtoa_r+0x91c>
 8013a72:	f04f 0801 	mov.w	r8, #1
 8013a76:	9b06      	ldr	r3, [sp, #24]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	9306      	str	r3, [sp, #24]
 8013a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a7e:	3301      	adds	r3, #1
 8013a80:	9309      	str	r3, [sp, #36]	; 0x24
 8013a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	f47f af6a 	bne.w	801395e <_dtoa_r+0x7e6>
 8013a8a:	2001      	movs	r0, #1
 8013a8c:	e76f      	b.n	801396e <_dtoa_r+0x7f6>
 8013a8e:	f04f 0800 	mov.w	r8, #0
 8013a92:	e7f6      	b.n	8013a82 <_dtoa_r+0x90a>
 8013a94:	4698      	mov	r8, r3
 8013a96:	e7f4      	b.n	8013a82 <_dtoa_r+0x90a>
 8013a98:	f43f af7d 	beq.w	8013996 <_dtoa_r+0x81e>
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	301c      	adds	r0, #28
 8013aa0:	e772      	b.n	8013988 <_dtoa_r+0x810>
 8013aa2:	9b08      	ldr	r3, [sp, #32]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	dc36      	bgt.n	8013b16 <_dtoa_r+0x99e>
 8013aa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013aaa:	2b02      	cmp	r3, #2
 8013aac:	dd33      	ble.n	8013b16 <_dtoa_r+0x99e>
 8013aae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013ab2:	f1b9 0f00 	cmp.w	r9, #0
 8013ab6:	d10d      	bne.n	8013ad4 <_dtoa_r+0x95c>
 8013ab8:	4621      	mov	r1, r4
 8013aba:	464b      	mov	r3, r9
 8013abc:	2205      	movs	r2, #5
 8013abe:	4628      	mov	r0, r5
 8013ac0:	f000 f9fa 	bl	8013eb8 <__multadd>
 8013ac4:	4601      	mov	r1, r0
 8013ac6:	4604      	mov	r4, r0
 8013ac8:	4658      	mov	r0, fp
 8013aca:	f000 fc11 	bl	80142f0 <__mcmp>
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	f73f adb8 	bgt.w	8013644 <_dtoa_r+0x4cc>
 8013ad4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013ad6:	9f03      	ldr	r7, [sp, #12]
 8013ad8:	ea6f 0a03 	mvn.w	sl, r3
 8013adc:	f04f 0800 	mov.w	r8, #0
 8013ae0:	4621      	mov	r1, r4
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	f000 f9c6 	bl	8013e74 <_Bfree>
 8013ae8:	2e00      	cmp	r6, #0
 8013aea:	f43f aea7 	beq.w	801383c <_dtoa_r+0x6c4>
 8013aee:	f1b8 0f00 	cmp.w	r8, #0
 8013af2:	d005      	beq.n	8013b00 <_dtoa_r+0x988>
 8013af4:	45b0      	cmp	r8, r6
 8013af6:	d003      	beq.n	8013b00 <_dtoa_r+0x988>
 8013af8:	4641      	mov	r1, r8
 8013afa:	4628      	mov	r0, r5
 8013afc:	f000 f9ba 	bl	8013e74 <_Bfree>
 8013b00:	4631      	mov	r1, r6
 8013b02:	4628      	mov	r0, r5
 8013b04:	f000 f9b6 	bl	8013e74 <_Bfree>
 8013b08:	e698      	b.n	801383c <_dtoa_r+0x6c4>
 8013b0a:	2400      	movs	r4, #0
 8013b0c:	4626      	mov	r6, r4
 8013b0e:	e7e1      	b.n	8013ad4 <_dtoa_r+0x95c>
 8013b10:	46c2      	mov	sl, r8
 8013b12:	4626      	mov	r6, r4
 8013b14:	e596      	b.n	8013644 <_dtoa_r+0x4cc>
 8013b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f000 80fd 	beq.w	8013d1c <_dtoa_r+0xba4>
 8013b22:	2f00      	cmp	r7, #0
 8013b24:	dd05      	ble.n	8013b32 <_dtoa_r+0x9ba>
 8013b26:	4631      	mov	r1, r6
 8013b28:	463a      	mov	r2, r7
 8013b2a:	4628      	mov	r0, r5
 8013b2c:	f000 fb70 	bl	8014210 <__lshift>
 8013b30:	4606      	mov	r6, r0
 8013b32:	f1b8 0f00 	cmp.w	r8, #0
 8013b36:	d05c      	beq.n	8013bf2 <_dtoa_r+0xa7a>
 8013b38:	4628      	mov	r0, r5
 8013b3a:	6871      	ldr	r1, [r6, #4]
 8013b3c:	f000 f95a 	bl	8013df4 <_Balloc>
 8013b40:	4607      	mov	r7, r0
 8013b42:	b928      	cbnz	r0, 8013b50 <_dtoa_r+0x9d8>
 8013b44:	4602      	mov	r2, r0
 8013b46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013b4a:	4b7f      	ldr	r3, [pc, #508]	; (8013d48 <_dtoa_r+0xbd0>)
 8013b4c:	f7ff bb28 	b.w	80131a0 <_dtoa_r+0x28>
 8013b50:	6932      	ldr	r2, [r6, #16]
 8013b52:	f106 010c 	add.w	r1, r6, #12
 8013b56:	3202      	adds	r2, #2
 8013b58:	0092      	lsls	r2, r2, #2
 8013b5a:	300c      	adds	r0, #12
 8013b5c:	f000 f930 	bl	8013dc0 <memcpy>
 8013b60:	2201      	movs	r2, #1
 8013b62:	4639      	mov	r1, r7
 8013b64:	4628      	mov	r0, r5
 8013b66:	f000 fb53 	bl	8014210 <__lshift>
 8013b6a:	46b0      	mov	r8, r6
 8013b6c:	4606      	mov	r6, r0
 8013b6e:	9b03      	ldr	r3, [sp, #12]
 8013b70:	3301      	adds	r3, #1
 8013b72:	9308      	str	r3, [sp, #32]
 8013b74:	9b03      	ldr	r3, [sp, #12]
 8013b76:	444b      	add	r3, r9
 8013b78:	930a      	str	r3, [sp, #40]	; 0x28
 8013b7a:	9b04      	ldr	r3, [sp, #16]
 8013b7c:	f003 0301 	and.w	r3, r3, #1
 8013b80:	9309      	str	r3, [sp, #36]	; 0x24
 8013b82:	9b08      	ldr	r3, [sp, #32]
 8013b84:	4621      	mov	r1, r4
 8013b86:	3b01      	subs	r3, #1
 8013b88:	4658      	mov	r0, fp
 8013b8a:	9304      	str	r3, [sp, #16]
 8013b8c:	f7ff fa68 	bl	8013060 <quorem>
 8013b90:	4603      	mov	r3, r0
 8013b92:	4641      	mov	r1, r8
 8013b94:	3330      	adds	r3, #48	; 0x30
 8013b96:	9006      	str	r0, [sp, #24]
 8013b98:	4658      	mov	r0, fp
 8013b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b9c:	f000 fba8 	bl	80142f0 <__mcmp>
 8013ba0:	4632      	mov	r2, r6
 8013ba2:	4681      	mov	r9, r0
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	4628      	mov	r0, r5
 8013ba8:	f000 fbbe 	bl	8014328 <__mdiff>
 8013bac:	68c2      	ldr	r2, [r0, #12]
 8013bae:	4607      	mov	r7, r0
 8013bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bb2:	bb02      	cbnz	r2, 8013bf6 <_dtoa_r+0xa7e>
 8013bb4:	4601      	mov	r1, r0
 8013bb6:	4658      	mov	r0, fp
 8013bb8:	f000 fb9a 	bl	80142f0 <__mcmp>
 8013bbc:	4602      	mov	r2, r0
 8013bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bc0:	4639      	mov	r1, r7
 8013bc2:	4628      	mov	r0, r5
 8013bc4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8013bc8:	f000 f954 	bl	8013e74 <_Bfree>
 8013bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bd0:	9f08      	ldr	r7, [sp, #32]
 8013bd2:	ea43 0102 	orr.w	r1, r3, r2
 8013bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bd8:	430b      	orrs	r3, r1
 8013bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bdc:	d10d      	bne.n	8013bfa <_dtoa_r+0xa82>
 8013bde:	2b39      	cmp	r3, #57	; 0x39
 8013be0:	d029      	beq.n	8013c36 <_dtoa_r+0xabe>
 8013be2:	f1b9 0f00 	cmp.w	r9, #0
 8013be6:	dd01      	ble.n	8013bec <_dtoa_r+0xa74>
 8013be8:	9b06      	ldr	r3, [sp, #24]
 8013bea:	3331      	adds	r3, #49	; 0x31
 8013bec:	9a04      	ldr	r2, [sp, #16]
 8013bee:	7013      	strb	r3, [r2, #0]
 8013bf0:	e776      	b.n	8013ae0 <_dtoa_r+0x968>
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	e7b9      	b.n	8013b6a <_dtoa_r+0x9f2>
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	e7e2      	b.n	8013bc0 <_dtoa_r+0xa48>
 8013bfa:	f1b9 0f00 	cmp.w	r9, #0
 8013bfe:	db06      	blt.n	8013c0e <_dtoa_r+0xa96>
 8013c00:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c02:	ea41 0909 	orr.w	r9, r1, r9
 8013c06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c08:	ea59 0101 	orrs.w	r1, r9, r1
 8013c0c:	d120      	bne.n	8013c50 <_dtoa_r+0xad8>
 8013c0e:	2a00      	cmp	r2, #0
 8013c10:	ddec      	ble.n	8013bec <_dtoa_r+0xa74>
 8013c12:	4659      	mov	r1, fp
 8013c14:	2201      	movs	r2, #1
 8013c16:	4628      	mov	r0, r5
 8013c18:	9308      	str	r3, [sp, #32]
 8013c1a:	f000 faf9 	bl	8014210 <__lshift>
 8013c1e:	4621      	mov	r1, r4
 8013c20:	4683      	mov	fp, r0
 8013c22:	f000 fb65 	bl	80142f0 <__mcmp>
 8013c26:	2800      	cmp	r0, #0
 8013c28:	9b08      	ldr	r3, [sp, #32]
 8013c2a:	dc02      	bgt.n	8013c32 <_dtoa_r+0xaba>
 8013c2c:	d1de      	bne.n	8013bec <_dtoa_r+0xa74>
 8013c2e:	07da      	lsls	r2, r3, #31
 8013c30:	d5dc      	bpl.n	8013bec <_dtoa_r+0xa74>
 8013c32:	2b39      	cmp	r3, #57	; 0x39
 8013c34:	d1d8      	bne.n	8013be8 <_dtoa_r+0xa70>
 8013c36:	2339      	movs	r3, #57	; 0x39
 8013c38:	9a04      	ldr	r2, [sp, #16]
 8013c3a:	7013      	strb	r3, [r2, #0]
 8013c3c:	463b      	mov	r3, r7
 8013c3e:	461f      	mov	r7, r3
 8013c40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8013c44:	3b01      	subs	r3, #1
 8013c46:	2a39      	cmp	r2, #57	; 0x39
 8013c48:	d050      	beq.n	8013cec <_dtoa_r+0xb74>
 8013c4a:	3201      	adds	r2, #1
 8013c4c:	701a      	strb	r2, [r3, #0]
 8013c4e:	e747      	b.n	8013ae0 <_dtoa_r+0x968>
 8013c50:	2a00      	cmp	r2, #0
 8013c52:	dd03      	ble.n	8013c5c <_dtoa_r+0xae4>
 8013c54:	2b39      	cmp	r3, #57	; 0x39
 8013c56:	d0ee      	beq.n	8013c36 <_dtoa_r+0xabe>
 8013c58:	3301      	adds	r3, #1
 8013c5a:	e7c7      	b.n	8013bec <_dtoa_r+0xa74>
 8013c5c:	9a08      	ldr	r2, [sp, #32]
 8013c5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013c64:	428a      	cmp	r2, r1
 8013c66:	d02a      	beq.n	8013cbe <_dtoa_r+0xb46>
 8013c68:	4659      	mov	r1, fp
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	220a      	movs	r2, #10
 8013c6e:	4628      	mov	r0, r5
 8013c70:	f000 f922 	bl	8013eb8 <__multadd>
 8013c74:	45b0      	cmp	r8, r6
 8013c76:	4683      	mov	fp, r0
 8013c78:	f04f 0300 	mov.w	r3, #0
 8013c7c:	f04f 020a 	mov.w	r2, #10
 8013c80:	4641      	mov	r1, r8
 8013c82:	4628      	mov	r0, r5
 8013c84:	d107      	bne.n	8013c96 <_dtoa_r+0xb1e>
 8013c86:	f000 f917 	bl	8013eb8 <__multadd>
 8013c8a:	4680      	mov	r8, r0
 8013c8c:	4606      	mov	r6, r0
 8013c8e:	9b08      	ldr	r3, [sp, #32]
 8013c90:	3301      	adds	r3, #1
 8013c92:	9308      	str	r3, [sp, #32]
 8013c94:	e775      	b.n	8013b82 <_dtoa_r+0xa0a>
 8013c96:	f000 f90f 	bl	8013eb8 <__multadd>
 8013c9a:	4631      	mov	r1, r6
 8013c9c:	4680      	mov	r8, r0
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	220a      	movs	r2, #10
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	f000 f908 	bl	8013eb8 <__multadd>
 8013ca8:	4606      	mov	r6, r0
 8013caa:	e7f0      	b.n	8013c8e <_dtoa_r+0xb16>
 8013cac:	f1b9 0f00 	cmp.w	r9, #0
 8013cb0:	bfcc      	ite	gt
 8013cb2:	464f      	movgt	r7, r9
 8013cb4:	2701      	movle	r7, #1
 8013cb6:	f04f 0800 	mov.w	r8, #0
 8013cba:	9a03      	ldr	r2, [sp, #12]
 8013cbc:	4417      	add	r7, r2
 8013cbe:	4659      	mov	r1, fp
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	9308      	str	r3, [sp, #32]
 8013cc6:	f000 faa3 	bl	8014210 <__lshift>
 8013cca:	4621      	mov	r1, r4
 8013ccc:	4683      	mov	fp, r0
 8013cce:	f000 fb0f 	bl	80142f0 <__mcmp>
 8013cd2:	2800      	cmp	r0, #0
 8013cd4:	dcb2      	bgt.n	8013c3c <_dtoa_r+0xac4>
 8013cd6:	d102      	bne.n	8013cde <_dtoa_r+0xb66>
 8013cd8:	9b08      	ldr	r3, [sp, #32]
 8013cda:	07db      	lsls	r3, r3, #31
 8013cdc:	d4ae      	bmi.n	8013c3c <_dtoa_r+0xac4>
 8013cde:	463b      	mov	r3, r7
 8013ce0:	461f      	mov	r7, r3
 8013ce2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ce6:	2a30      	cmp	r2, #48	; 0x30
 8013ce8:	d0fa      	beq.n	8013ce0 <_dtoa_r+0xb68>
 8013cea:	e6f9      	b.n	8013ae0 <_dtoa_r+0x968>
 8013cec:	9a03      	ldr	r2, [sp, #12]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d1a5      	bne.n	8013c3e <_dtoa_r+0xac6>
 8013cf2:	2331      	movs	r3, #49	; 0x31
 8013cf4:	f10a 0a01 	add.w	sl, sl, #1
 8013cf8:	e779      	b.n	8013bee <_dtoa_r+0xa76>
 8013cfa:	4b14      	ldr	r3, [pc, #80]	; (8013d4c <_dtoa_r+0xbd4>)
 8013cfc:	f7ff baa8 	b.w	8013250 <_dtoa_r+0xd8>
 8013d00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	f47f aa81 	bne.w	801320a <_dtoa_r+0x92>
 8013d08:	4b11      	ldr	r3, [pc, #68]	; (8013d50 <_dtoa_r+0xbd8>)
 8013d0a:	f7ff baa1 	b.w	8013250 <_dtoa_r+0xd8>
 8013d0e:	f1b9 0f00 	cmp.w	r9, #0
 8013d12:	dc03      	bgt.n	8013d1c <_dtoa_r+0xba4>
 8013d14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d16:	2b02      	cmp	r3, #2
 8013d18:	f73f aecb 	bgt.w	8013ab2 <_dtoa_r+0x93a>
 8013d1c:	9f03      	ldr	r7, [sp, #12]
 8013d1e:	4621      	mov	r1, r4
 8013d20:	4658      	mov	r0, fp
 8013d22:	f7ff f99d 	bl	8013060 <quorem>
 8013d26:	9a03      	ldr	r2, [sp, #12]
 8013d28:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013d2c:	f807 3b01 	strb.w	r3, [r7], #1
 8013d30:	1aba      	subs	r2, r7, r2
 8013d32:	4591      	cmp	r9, r2
 8013d34:	ddba      	ble.n	8013cac <_dtoa_r+0xb34>
 8013d36:	4659      	mov	r1, fp
 8013d38:	2300      	movs	r3, #0
 8013d3a:	220a      	movs	r2, #10
 8013d3c:	4628      	mov	r0, r5
 8013d3e:	f000 f8bb 	bl	8013eb8 <__multadd>
 8013d42:	4683      	mov	fp, r0
 8013d44:	e7eb      	b.n	8013d1e <_dtoa_r+0xba6>
 8013d46:	bf00      	nop
 8013d48:	0801634e 	.word	0x0801634e
 8013d4c:	08016214 	.word	0x08016214
 8013d50:	080162e6 	.word	0x080162e6

08013d54 <fiprintf>:
 8013d54:	b40e      	push	{r1, r2, r3}
 8013d56:	b503      	push	{r0, r1, lr}
 8013d58:	4601      	mov	r1, r0
 8013d5a:	ab03      	add	r3, sp, #12
 8013d5c:	4805      	ldr	r0, [pc, #20]	; (8013d74 <fiprintf+0x20>)
 8013d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d62:	6800      	ldr	r0, [r0, #0]
 8013d64:	9301      	str	r3, [sp, #4]
 8013d66:	f000 fd5f 	bl	8014828 <_vfiprintf_r>
 8013d6a:	b002      	add	sp, #8
 8013d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d70:	b003      	add	sp, #12
 8013d72:	4770      	bx	lr
 8013d74:	20000080 	.word	0x20000080

08013d78 <_gettimeofday_r>:
 8013d78:	b538      	push	{r3, r4, r5, lr}
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	4d06      	ldr	r5, [pc, #24]	; (8013d98 <_gettimeofday_r+0x20>)
 8013d7e:	4604      	mov	r4, r0
 8013d80:	4608      	mov	r0, r1
 8013d82:	4611      	mov	r1, r2
 8013d84:	602b      	str	r3, [r5, #0]
 8013d86:	f001 fac3 	bl	8015310 <_gettimeofday>
 8013d8a:	1c43      	adds	r3, r0, #1
 8013d8c:	d102      	bne.n	8013d94 <_gettimeofday_r+0x1c>
 8013d8e:	682b      	ldr	r3, [r5, #0]
 8013d90:	b103      	cbz	r3, 8013d94 <_gettimeofday_r+0x1c>
 8013d92:	6023      	str	r3, [r4, #0]
 8013d94:	bd38      	pop	{r3, r4, r5, pc}
 8013d96:	bf00      	nop
 8013d98:	20006278 	.word	0x20006278

08013d9c <_localeconv_r>:
 8013d9c:	4800      	ldr	r0, [pc, #0]	; (8013da0 <_localeconv_r+0x4>)
 8013d9e:	4770      	bx	lr
 8013da0:	200001d4 	.word	0x200001d4

08013da4 <memchr>:
 8013da4:	4603      	mov	r3, r0
 8013da6:	b510      	push	{r4, lr}
 8013da8:	b2c9      	uxtb	r1, r1
 8013daa:	4402      	add	r2, r0
 8013dac:	4293      	cmp	r3, r2
 8013dae:	4618      	mov	r0, r3
 8013db0:	d101      	bne.n	8013db6 <memchr+0x12>
 8013db2:	2000      	movs	r0, #0
 8013db4:	e003      	b.n	8013dbe <memchr+0x1a>
 8013db6:	7804      	ldrb	r4, [r0, #0]
 8013db8:	3301      	adds	r3, #1
 8013dba:	428c      	cmp	r4, r1
 8013dbc:	d1f6      	bne.n	8013dac <memchr+0x8>
 8013dbe:	bd10      	pop	{r4, pc}

08013dc0 <memcpy>:
 8013dc0:	440a      	add	r2, r1
 8013dc2:	4291      	cmp	r1, r2
 8013dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013dc8:	d100      	bne.n	8013dcc <memcpy+0xc>
 8013dca:	4770      	bx	lr
 8013dcc:	b510      	push	{r4, lr}
 8013dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013dd2:	4291      	cmp	r1, r2
 8013dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013dd8:	d1f9      	bne.n	8013dce <memcpy+0xe>
 8013dda:	bd10      	pop	{r4, pc}

08013ddc <__malloc_lock>:
 8013ddc:	4801      	ldr	r0, [pc, #4]	; (8013de4 <__malloc_lock+0x8>)
 8013dde:	f001 b8e3 	b.w	8014fa8 <__retarget_lock_acquire_recursive>
 8013de2:	bf00      	nop
 8013de4:	2000627c 	.word	0x2000627c

08013de8 <__malloc_unlock>:
 8013de8:	4801      	ldr	r0, [pc, #4]	; (8013df0 <__malloc_unlock+0x8>)
 8013dea:	f001 b8de 	b.w	8014faa <__retarget_lock_release_recursive>
 8013dee:	bf00      	nop
 8013df0:	2000627c 	.word	0x2000627c

08013df4 <_Balloc>:
 8013df4:	b570      	push	{r4, r5, r6, lr}
 8013df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013df8:	4604      	mov	r4, r0
 8013dfa:	460d      	mov	r5, r1
 8013dfc:	b976      	cbnz	r6, 8013e1c <_Balloc+0x28>
 8013dfe:	2010      	movs	r0, #16
 8013e00:	f7fe fafe 	bl	8012400 <malloc>
 8013e04:	4602      	mov	r2, r0
 8013e06:	6260      	str	r0, [r4, #36]	; 0x24
 8013e08:	b920      	cbnz	r0, 8013e14 <_Balloc+0x20>
 8013e0a:	2166      	movs	r1, #102	; 0x66
 8013e0c:	4b17      	ldr	r3, [pc, #92]	; (8013e6c <_Balloc+0x78>)
 8013e0e:	4818      	ldr	r0, [pc, #96]	; (8013e70 <_Balloc+0x7c>)
 8013e10:	f7ff f908 	bl	8013024 <__assert_func>
 8013e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e18:	6006      	str	r6, [r0, #0]
 8013e1a:	60c6      	str	r6, [r0, #12]
 8013e1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013e1e:	68f3      	ldr	r3, [r6, #12]
 8013e20:	b183      	cbz	r3, 8013e44 <_Balloc+0x50>
 8013e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e24:	68db      	ldr	r3, [r3, #12]
 8013e26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013e2a:	b9b8      	cbnz	r0, 8013e5c <_Balloc+0x68>
 8013e2c:	2101      	movs	r1, #1
 8013e2e:	fa01 f605 	lsl.w	r6, r1, r5
 8013e32:	1d72      	adds	r2, r6, #5
 8013e34:	4620      	mov	r0, r4
 8013e36:	0092      	lsls	r2, r2, #2
 8013e38:	f000 fb5e 	bl	80144f8 <_calloc_r>
 8013e3c:	b160      	cbz	r0, 8013e58 <_Balloc+0x64>
 8013e3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013e42:	e00e      	b.n	8013e62 <_Balloc+0x6e>
 8013e44:	2221      	movs	r2, #33	; 0x21
 8013e46:	2104      	movs	r1, #4
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f000 fb55 	bl	80144f8 <_calloc_r>
 8013e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e50:	60f0      	str	r0, [r6, #12]
 8013e52:	68db      	ldr	r3, [r3, #12]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d1e4      	bne.n	8013e22 <_Balloc+0x2e>
 8013e58:	2000      	movs	r0, #0
 8013e5a:	bd70      	pop	{r4, r5, r6, pc}
 8013e5c:	6802      	ldr	r2, [r0, #0]
 8013e5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e62:	2300      	movs	r3, #0
 8013e64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e68:	e7f7      	b.n	8013e5a <_Balloc+0x66>
 8013e6a:	bf00      	nop
 8013e6c:	08016238 	.word	0x08016238
 8013e70:	0801635f 	.word	0x0801635f

08013e74 <_Bfree>:
 8013e74:	b570      	push	{r4, r5, r6, lr}
 8013e76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013e78:	4605      	mov	r5, r0
 8013e7a:	460c      	mov	r4, r1
 8013e7c:	b976      	cbnz	r6, 8013e9c <_Bfree+0x28>
 8013e7e:	2010      	movs	r0, #16
 8013e80:	f7fe fabe 	bl	8012400 <malloc>
 8013e84:	4602      	mov	r2, r0
 8013e86:	6268      	str	r0, [r5, #36]	; 0x24
 8013e88:	b920      	cbnz	r0, 8013e94 <_Bfree+0x20>
 8013e8a:	218a      	movs	r1, #138	; 0x8a
 8013e8c:	4b08      	ldr	r3, [pc, #32]	; (8013eb0 <_Bfree+0x3c>)
 8013e8e:	4809      	ldr	r0, [pc, #36]	; (8013eb4 <_Bfree+0x40>)
 8013e90:	f7ff f8c8 	bl	8013024 <__assert_func>
 8013e94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e98:	6006      	str	r6, [r0, #0]
 8013e9a:	60c6      	str	r6, [r0, #12]
 8013e9c:	b13c      	cbz	r4, 8013eae <_Bfree+0x3a>
 8013e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013ea0:	6862      	ldr	r2, [r4, #4]
 8013ea2:	68db      	ldr	r3, [r3, #12]
 8013ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013ea8:	6021      	str	r1, [r4, #0]
 8013eaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013eae:	bd70      	pop	{r4, r5, r6, pc}
 8013eb0:	08016238 	.word	0x08016238
 8013eb4:	0801635f 	.word	0x0801635f

08013eb8 <__multadd>:
 8013eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ebc:	4607      	mov	r7, r0
 8013ebe:	460c      	mov	r4, r1
 8013ec0:	461e      	mov	r6, r3
 8013ec2:	2000      	movs	r0, #0
 8013ec4:	690d      	ldr	r5, [r1, #16]
 8013ec6:	f101 0c14 	add.w	ip, r1, #20
 8013eca:	f8dc 3000 	ldr.w	r3, [ip]
 8013ece:	3001      	adds	r0, #1
 8013ed0:	b299      	uxth	r1, r3
 8013ed2:	fb02 6101 	mla	r1, r2, r1, r6
 8013ed6:	0c1e      	lsrs	r6, r3, #16
 8013ed8:	0c0b      	lsrs	r3, r1, #16
 8013eda:	fb02 3306 	mla	r3, r2, r6, r3
 8013ede:	b289      	uxth	r1, r1
 8013ee0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013ee4:	4285      	cmp	r5, r0
 8013ee6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013eea:	f84c 1b04 	str.w	r1, [ip], #4
 8013eee:	dcec      	bgt.n	8013eca <__multadd+0x12>
 8013ef0:	b30e      	cbz	r6, 8013f36 <__multadd+0x7e>
 8013ef2:	68a3      	ldr	r3, [r4, #8]
 8013ef4:	42ab      	cmp	r3, r5
 8013ef6:	dc19      	bgt.n	8013f2c <__multadd+0x74>
 8013ef8:	6861      	ldr	r1, [r4, #4]
 8013efa:	4638      	mov	r0, r7
 8013efc:	3101      	adds	r1, #1
 8013efe:	f7ff ff79 	bl	8013df4 <_Balloc>
 8013f02:	4680      	mov	r8, r0
 8013f04:	b928      	cbnz	r0, 8013f12 <__multadd+0x5a>
 8013f06:	4602      	mov	r2, r0
 8013f08:	21b5      	movs	r1, #181	; 0xb5
 8013f0a:	4b0c      	ldr	r3, [pc, #48]	; (8013f3c <__multadd+0x84>)
 8013f0c:	480c      	ldr	r0, [pc, #48]	; (8013f40 <__multadd+0x88>)
 8013f0e:	f7ff f889 	bl	8013024 <__assert_func>
 8013f12:	6922      	ldr	r2, [r4, #16]
 8013f14:	f104 010c 	add.w	r1, r4, #12
 8013f18:	3202      	adds	r2, #2
 8013f1a:	0092      	lsls	r2, r2, #2
 8013f1c:	300c      	adds	r0, #12
 8013f1e:	f7ff ff4f 	bl	8013dc0 <memcpy>
 8013f22:	4621      	mov	r1, r4
 8013f24:	4638      	mov	r0, r7
 8013f26:	f7ff ffa5 	bl	8013e74 <_Bfree>
 8013f2a:	4644      	mov	r4, r8
 8013f2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013f30:	3501      	adds	r5, #1
 8013f32:	615e      	str	r6, [r3, #20]
 8013f34:	6125      	str	r5, [r4, #16]
 8013f36:	4620      	mov	r0, r4
 8013f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f3c:	0801634e 	.word	0x0801634e
 8013f40:	0801635f 	.word	0x0801635f

08013f44 <__hi0bits>:
 8013f44:	0c02      	lsrs	r2, r0, #16
 8013f46:	0412      	lsls	r2, r2, #16
 8013f48:	4603      	mov	r3, r0
 8013f4a:	b9ca      	cbnz	r2, 8013f80 <__hi0bits+0x3c>
 8013f4c:	0403      	lsls	r3, r0, #16
 8013f4e:	2010      	movs	r0, #16
 8013f50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013f54:	bf04      	itt	eq
 8013f56:	021b      	lsleq	r3, r3, #8
 8013f58:	3008      	addeq	r0, #8
 8013f5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013f5e:	bf04      	itt	eq
 8013f60:	011b      	lsleq	r3, r3, #4
 8013f62:	3004      	addeq	r0, #4
 8013f64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013f68:	bf04      	itt	eq
 8013f6a:	009b      	lsleq	r3, r3, #2
 8013f6c:	3002      	addeq	r0, #2
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	db05      	blt.n	8013f7e <__hi0bits+0x3a>
 8013f72:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8013f76:	f100 0001 	add.w	r0, r0, #1
 8013f7a:	bf08      	it	eq
 8013f7c:	2020      	moveq	r0, #32
 8013f7e:	4770      	bx	lr
 8013f80:	2000      	movs	r0, #0
 8013f82:	e7e5      	b.n	8013f50 <__hi0bits+0xc>

08013f84 <__lo0bits>:
 8013f84:	6803      	ldr	r3, [r0, #0]
 8013f86:	4602      	mov	r2, r0
 8013f88:	f013 0007 	ands.w	r0, r3, #7
 8013f8c:	d00b      	beq.n	8013fa6 <__lo0bits+0x22>
 8013f8e:	07d9      	lsls	r1, r3, #31
 8013f90:	d421      	bmi.n	8013fd6 <__lo0bits+0x52>
 8013f92:	0798      	lsls	r0, r3, #30
 8013f94:	bf49      	itett	mi
 8013f96:	085b      	lsrmi	r3, r3, #1
 8013f98:	089b      	lsrpl	r3, r3, #2
 8013f9a:	2001      	movmi	r0, #1
 8013f9c:	6013      	strmi	r3, [r2, #0]
 8013f9e:	bf5c      	itt	pl
 8013fa0:	2002      	movpl	r0, #2
 8013fa2:	6013      	strpl	r3, [r2, #0]
 8013fa4:	4770      	bx	lr
 8013fa6:	b299      	uxth	r1, r3
 8013fa8:	b909      	cbnz	r1, 8013fae <__lo0bits+0x2a>
 8013faa:	2010      	movs	r0, #16
 8013fac:	0c1b      	lsrs	r3, r3, #16
 8013fae:	b2d9      	uxtb	r1, r3
 8013fb0:	b909      	cbnz	r1, 8013fb6 <__lo0bits+0x32>
 8013fb2:	3008      	adds	r0, #8
 8013fb4:	0a1b      	lsrs	r3, r3, #8
 8013fb6:	0719      	lsls	r1, r3, #28
 8013fb8:	bf04      	itt	eq
 8013fba:	091b      	lsreq	r3, r3, #4
 8013fbc:	3004      	addeq	r0, #4
 8013fbe:	0799      	lsls	r1, r3, #30
 8013fc0:	bf04      	itt	eq
 8013fc2:	089b      	lsreq	r3, r3, #2
 8013fc4:	3002      	addeq	r0, #2
 8013fc6:	07d9      	lsls	r1, r3, #31
 8013fc8:	d403      	bmi.n	8013fd2 <__lo0bits+0x4e>
 8013fca:	085b      	lsrs	r3, r3, #1
 8013fcc:	f100 0001 	add.w	r0, r0, #1
 8013fd0:	d003      	beq.n	8013fda <__lo0bits+0x56>
 8013fd2:	6013      	str	r3, [r2, #0]
 8013fd4:	4770      	bx	lr
 8013fd6:	2000      	movs	r0, #0
 8013fd8:	4770      	bx	lr
 8013fda:	2020      	movs	r0, #32
 8013fdc:	4770      	bx	lr
	...

08013fe0 <__i2b>:
 8013fe0:	b510      	push	{r4, lr}
 8013fe2:	460c      	mov	r4, r1
 8013fe4:	2101      	movs	r1, #1
 8013fe6:	f7ff ff05 	bl	8013df4 <_Balloc>
 8013fea:	4602      	mov	r2, r0
 8013fec:	b928      	cbnz	r0, 8013ffa <__i2b+0x1a>
 8013fee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ff2:	4b04      	ldr	r3, [pc, #16]	; (8014004 <__i2b+0x24>)
 8013ff4:	4804      	ldr	r0, [pc, #16]	; (8014008 <__i2b+0x28>)
 8013ff6:	f7ff f815 	bl	8013024 <__assert_func>
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	6144      	str	r4, [r0, #20]
 8013ffe:	6103      	str	r3, [r0, #16]
 8014000:	bd10      	pop	{r4, pc}
 8014002:	bf00      	nop
 8014004:	0801634e 	.word	0x0801634e
 8014008:	0801635f 	.word	0x0801635f

0801400c <__multiply>:
 801400c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014010:	4691      	mov	r9, r2
 8014012:	690a      	ldr	r2, [r1, #16]
 8014014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014018:	460c      	mov	r4, r1
 801401a:	429a      	cmp	r2, r3
 801401c:	bfbe      	ittt	lt
 801401e:	460b      	movlt	r3, r1
 8014020:	464c      	movlt	r4, r9
 8014022:	4699      	movlt	r9, r3
 8014024:	6927      	ldr	r7, [r4, #16]
 8014026:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801402a:	68a3      	ldr	r3, [r4, #8]
 801402c:	6861      	ldr	r1, [r4, #4]
 801402e:	eb07 060a 	add.w	r6, r7, sl
 8014032:	42b3      	cmp	r3, r6
 8014034:	b085      	sub	sp, #20
 8014036:	bfb8      	it	lt
 8014038:	3101      	addlt	r1, #1
 801403a:	f7ff fedb 	bl	8013df4 <_Balloc>
 801403e:	b930      	cbnz	r0, 801404e <__multiply+0x42>
 8014040:	4602      	mov	r2, r0
 8014042:	f240 115d 	movw	r1, #349	; 0x15d
 8014046:	4b43      	ldr	r3, [pc, #268]	; (8014154 <__multiply+0x148>)
 8014048:	4843      	ldr	r0, [pc, #268]	; (8014158 <__multiply+0x14c>)
 801404a:	f7fe ffeb 	bl	8013024 <__assert_func>
 801404e:	f100 0514 	add.w	r5, r0, #20
 8014052:	462b      	mov	r3, r5
 8014054:	2200      	movs	r2, #0
 8014056:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801405a:	4543      	cmp	r3, r8
 801405c:	d321      	bcc.n	80140a2 <__multiply+0x96>
 801405e:	f104 0314 	add.w	r3, r4, #20
 8014062:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014066:	f109 0314 	add.w	r3, r9, #20
 801406a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801406e:	9202      	str	r2, [sp, #8]
 8014070:	1b3a      	subs	r2, r7, r4
 8014072:	3a15      	subs	r2, #21
 8014074:	f022 0203 	bic.w	r2, r2, #3
 8014078:	3204      	adds	r2, #4
 801407a:	f104 0115 	add.w	r1, r4, #21
 801407e:	428f      	cmp	r7, r1
 8014080:	bf38      	it	cc
 8014082:	2204      	movcc	r2, #4
 8014084:	9201      	str	r2, [sp, #4]
 8014086:	9a02      	ldr	r2, [sp, #8]
 8014088:	9303      	str	r3, [sp, #12]
 801408a:	429a      	cmp	r2, r3
 801408c:	d80c      	bhi.n	80140a8 <__multiply+0x9c>
 801408e:	2e00      	cmp	r6, #0
 8014090:	dd03      	ble.n	801409a <__multiply+0x8e>
 8014092:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014096:	2b00      	cmp	r3, #0
 8014098:	d059      	beq.n	801414e <__multiply+0x142>
 801409a:	6106      	str	r6, [r0, #16]
 801409c:	b005      	add	sp, #20
 801409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a2:	f843 2b04 	str.w	r2, [r3], #4
 80140a6:	e7d8      	b.n	801405a <__multiply+0x4e>
 80140a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80140ac:	f1ba 0f00 	cmp.w	sl, #0
 80140b0:	d023      	beq.n	80140fa <__multiply+0xee>
 80140b2:	46a9      	mov	r9, r5
 80140b4:	f04f 0c00 	mov.w	ip, #0
 80140b8:	f104 0e14 	add.w	lr, r4, #20
 80140bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80140c0:	f8d9 1000 	ldr.w	r1, [r9]
 80140c4:	fa1f fb82 	uxth.w	fp, r2
 80140c8:	b289      	uxth	r1, r1
 80140ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80140ce:	4461      	add	r1, ip
 80140d0:	f8d9 c000 	ldr.w	ip, [r9]
 80140d4:	0c12      	lsrs	r2, r2, #16
 80140d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80140da:	fb0a c202 	mla	r2, sl, r2, ip
 80140de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80140e2:	b289      	uxth	r1, r1
 80140e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80140e8:	4577      	cmp	r7, lr
 80140ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80140ee:	f849 1b04 	str.w	r1, [r9], #4
 80140f2:	d8e3      	bhi.n	80140bc <__multiply+0xb0>
 80140f4:	9a01      	ldr	r2, [sp, #4]
 80140f6:	f845 c002 	str.w	ip, [r5, r2]
 80140fa:	9a03      	ldr	r2, [sp, #12]
 80140fc:	3304      	adds	r3, #4
 80140fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014102:	f1b9 0f00 	cmp.w	r9, #0
 8014106:	d020      	beq.n	801414a <__multiply+0x13e>
 8014108:	46ae      	mov	lr, r5
 801410a:	f04f 0a00 	mov.w	sl, #0
 801410e:	6829      	ldr	r1, [r5, #0]
 8014110:	f104 0c14 	add.w	ip, r4, #20
 8014114:	f8bc b000 	ldrh.w	fp, [ip]
 8014118:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801411c:	b289      	uxth	r1, r1
 801411e:	fb09 220b 	mla	r2, r9, fp, r2
 8014122:	4492      	add	sl, r2
 8014124:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014128:	f84e 1b04 	str.w	r1, [lr], #4
 801412c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014130:	f8be 1000 	ldrh.w	r1, [lr]
 8014134:	0c12      	lsrs	r2, r2, #16
 8014136:	fb09 1102 	mla	r1, r9, r2, r1
 801413a:	4567      	cmp	r7, ip
 801413c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014140:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014144:	d8e6      	bhi.n	8014114 <__multiply+0x108>
 8014146:	9a01      	ldr	r2, [sp, #4]
 8014148:	50a9      	str	r1, [r5, r2]
 801414a:	3504      	adds	r5, #4
 801414c:	e79b      	b.n	8014086 <__multiply+0x7a>
 801414e:	3e01      	subs	r6, #1
 8014150:	e79d      	b.n	801408e <__multiply+0x82>
 8014152:	bf00      	nop
 8014154:	0801634e 	.word	0x0801634e
 8014158:	0801635f 	.word	0x0801635f

0801415c <__pow5mult>:
 801415c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014160:	4615      	mov	r5, r2
 8014162:	f012 0203 	ands.w	r2, r2, #3
 8014166:	4606      	mov	r6, r0
 8014168:	460f      	mov	r7, r1
 801416a:	d007      	beq.n	801417c <__pow5mult+0x20>
 801416c:	4c25      	ldr	r4, [pc, #148]	; (8014204 <__pow5mult+0xa8>)
 801416e:	3a01      	subs	r2, #1
 8014170:	2300      	movs	r3, #0
 8014172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014176:	f7ff fe9f 	bl	8013eb8 <__multadd>
 801417a:	4607      	mov	r7, r0
 801417c:	10ad      	asrs	r5, r5, #2
 801417e:	d03d      	beq.n	80141fc <__pow5mult+0xa0>
 8014180:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014182:	b97c      	cbnz	r4, 80141a4 <__pow5mult+0x48>
 8014184:	2010      	movs	r0, #16
 8014186:	f7fe f93b 	bl	8012400 <malloc>
 801418a:	4602      	mov	r2, r0
 801418c:	6270      	str	r0, [r6, #36]	; 0x24
 801418e:	b928      	cbnz	r0, 801419c <__pow5mult+0x40>
 8014190:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014194:	4b1c      	ldr	r3, [pc, #112]	; (8014208 <__pow5mult+0xac>)
 8014196:	481d      	ldr	r0, [pc, #116]	; (801420c <__pow5mult+0xb0>)
 8014198:	f7fe ff44 	bl	8013024 <__assert_func>
 801419c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80141a0:	6004      	str	r4, [r0, #0]
 80141a2:	60c4      	str	r4, [r0, #12]
 80141a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80141a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80141ac:	b94c      	cbnz	r4, 80141c2 <__pow5mult+0x66>
 80141ae:	f240 2171 	movw	r1, #625	; 0x271
 80141b2:	4630      	mov	r0, r6
 80141b4:	f7ff ff14 	bl	8013fe0 <__i2b>
 80141b8:	2300      	movs	r3, #0
 80141ba:	4604      	mov	r4, r0
 80141bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80141c0:	6003      	str	r3, [r0, #0]
 80141c2:	f04f 0900 	mov.w	r9, #0
 80141c6:	07eb      	lsls	r3, r5, #31
 80141c8:	d50a      	bpl.n	80141e0 <__pow5mult+0x84>
 80141ca:	4639      	mov	r1, r7
 80141cc:	4622      	mov	r2, r4
 80141ce:	4630      	mov	r0, r6
 80141d0:	f7ff ff1c 	bl	801400c <__multiply>
 80141d4:	4680      	mov	r8, r0
 80141d6:	4639      	mov	r1, r7
 80141d8:	4630      	mov	r0, r6
 80141da:	f7ff fe4b 	bl	8013e74 <_Bfree>
 80141de:	4647      	mov	r7, r8
 80141e0:	106d      	asrs	r5, r5, #1
 80141e2:	d00b      	beq.n	80141fc <__pow5mult+0xa0>
 80141e4:	6820      	ldr	r0, [r4, #0]
 80141e6:	b938      	cbnz	r0, 80141f8 <__pow5mult+0x9c>
 80141e8:	4622      	mov	r2, r4
 80141ea:	4621      	mov	r1, r4
 80141ec:	4630      	mov	r0, r6
 80141ee:	f7ff ff0d 	bl	801400c <__multiply>
 80141f2:	6020      	str	r0, [r4, #0]
 80141f4:	f8c0 9000 	str.w	r9, [r0]
 80141f8:	4604      	mov	r4, r0
 80141fa:	e7e4      	b.n	80141c6 <__pow5mult+0x6a>
 80141fc:	4638      	mov	r0, r7
 80141fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014202:	bf00      	nop
 8014204:	080164b0 	.word	0x080164b0
 8014208:	08016238 	.word	0x08016238
 801420c:	0801635f 	.word	0x0801635f

08014210 <__lshift>:
 8014210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014214:	460c      	mov	r4, r1
 8014216:	4607      	mov	r7, r0
 8014218:	4691      	mov	r9, r2
 801421a:	6923      	ldr	r3, [r4, #16]
 801421c:	6849      	ldr	r1, [r1, #4]
 801421e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014222:	68a3      	ldr	r3, [r4, #8]
 8014224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014228:	f108 0601 	add.w	r6, r8, #1
 801422c:	42b3      	cmp	r3, r6
 801422e:	db0b      	blt.n	8014248 <__lshift+0x38>
 8014230:	4638      	mov	r0, r7
 8014232:	f7ff fddf 	bl	8013df4 <_Balloc>
 8014236:	4605      	mov	r5, r0
 8014238:	b948      	cbnz	r0, 801424e <__lshift+0x3e>
 801423a:	4602      	mov	r2, r0
 801423c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014240:	4b29      	ldr	r3, [pc, #164]	; (80142e8 <__lshift+0xd8>)
 8014242:	482a      	ldr	r0, [pc, #168]	; (80142ec <__lshift+0xdc>)
 8014244:	f7fe feee 	bl	8013024 <__assert_func>
 8014248:	3101      	adds	r1, #1
 801424a:	005b      	lsls	r3, r3, #1
 801424c:	e7ee      	b.n	801422c <__lshift+0x1c>
 801424e:	2300      	movs	r3, #0
 8014250:	f100 0114 	add.w	r1, r0, #20
 8014254:	f100 0210 	add.w	r2, r0, #16
 8014258:	4618      	mov	r0, r3
 801425a:	4553      	cmp	r3, sl
 801425c:	db37      	blt.n	80142ce <__lshift+0xbe>
 801425e:	6920      	ldr	r0, [r4, #16]
 8014260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014264:	f104 0314 	add.w	r3, r4, #20
 8014268:	f019 091f 	ands.w	r9, r9, #31
 801426c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014270:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014274:	d02f      	beq.n	80142d6 <__lshift+0xc6>
 8014276:	468a      	mov	sl, r1
 8014278:	f04f 0c00 	mov.w	ip, #0
 801427c:	f1c9 0e20 	rsb	lr, r9, #32
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	fa02 f209 	lsl.w	r2, r2, r9
 8014286:	ea42 020c 	orr.w	r2, r2, ip
 801428a:	f84a 2b04 	str.w	r2, [sl], #4
 801428e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014292:	4298      	cmp	r0, r3
 8014294:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014298:	d8f2      	bhi.n	8014280 <__lshift+0x70>
 801429a:	1b03      	subs	r3, r0, r4
 801429c:	3b15      	subs	r3, #21
 801429e:	f023 0303 	bic.w	r3, r3, #3
 80142a2:	3304      	adds	r3, #4
 80142a4:	f104 0215 	add.w	r2, r4, #21
 80142a8:	4290      	cmp	r0, r2
 80142aa:	bf38      	it	cc
 80142ac:	2304      	movcc	r3, #4
 80142ae:	f841 c003 	str.w	ip, [r1, r3]
 80142b2:	f1bc 0f00 	cmp.w	ip, #0
 80142b6:	d001      	beq.n	80142bc <__lshift+0xac>
 80142b8:	f108 0602 	add.w	r6, r8, #2
 80142bc:	3e01      	subs	r6, #1
 80142be:	4638      	mov	r0, r7
 80142c0:	4621      	mov	r1, r4
 80142c2:	612e      	str	r6, [r5, #16]
 80142c4:	f7ff fdd6 	bl	8013e74 <_Bfree>
 80142c8:	4628      	mov	r0, r5
 80142ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80142d2:	3301      	adds	r3, #1
 80142d4:	e7c1      	b.n	801425a <__lshift+0x4a>
 80142d6:	3904      	subs	r1, #4
 80142d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80142dc:	4298      	cmp	r0, r3
 80142de:	f841 2f04 	str.w	r2, [r1, #4]!
 80142e2:	d8f9      	bhi.n	80142d8 <__lshift+0xc8>
 80142e4:	e7ea      	b.n	80142bc <__lshift+0xac>
 80142e6:	bf00      	nop
 80142e8:	0801634e 	.word	0x0801634e
 80142ec:	0801635f 	.word	0x0801635f

080142f0 <__mcmp>:
 80142f0:	4603      	mov	r3, r0
 80142f2:	690a      	ldr	r2, [r1, #16]
 80142f4:	6900      	ldr	r0, [r0, #16]
 80142f6:	b530      	push	{r4, r5, lr}
 80142f8:	1a80      	subs	r0, r0, r2
 80142fa:	d10d      	bne.n	8014318 <__mcmp+0x28>
 80142fc:	3314      	adds	r3, #20
 80142fe:	3114      	adds	r1, #20
 8014300:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014304:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014308:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801430c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014310:	4295      	cmp	r5, r2
 8014312:	d002      	beq.n	801431a <__mcmp+0x2a>
 8014314:	d304      	bcc.n	8014320 <__mcmp+0x30>
 8014316:	2001      	movs	r0, #1
 8014318:	bd30      	pop	{r4, r5, pc}
 801431a:	42a3      	cmp	r3, r4
 801431c:	d3f4      	bcc.n	8014308 <__mcmp+0x18>
 801431e:	e7fb      	b.n	8014318 <__mcmp+0x28>
 8014320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014324:	e7f8      	b.n	8014318 <__mcmp+0x28>
	...

08014328 <__mdiff>:
 8014328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801432c:	460d      	mov	r5, r1
 801432e:	4607      	mov	r7, r0
 8014330:	4611      	mov	r1, r2
 8014332:	4628      	mov	r0, r5
 8014334:	4614      	mov	r4, r2
 8014336:	f7ff ffdb 	bl	80142f0 <__mcmp>
 801433a:	1e06      	subs	r6, r0, #0
 801433c:	d111      	bne.n	8014362 <__mdiff+0x3a>
 801433e:	4631      	mov	r1, r6
 8014340:	4638      	mov	r0, r7
 8014342:	f7ff fd57 	bl	8013df4 <_Balloc>
 8014346:	4602      	mov	r2, r0
 8014348:	b928      	cbnz	r0, 8014356 <__mdiff+0x2e>
 801434a:	f240 2132 	movw	r1, #562	; 0x232
 801434e:	4b3a      	ldr	r3, [pc, #232]	; (8014438 <__mdiff+0x110>)
 8014350:	483a      	ldr	r0, [pc, #232]	; (801443c <__mdiff+0x114>)
 8014352:	f7fe fe67 	bl	8013024 <__assert_func>
 8014356:	2301      	movs	r3, #1
 8014358:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801435c:	4610      	mov	r0, r2
 801435e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014362:	bfa4      	itt	ge
 8014364:	4623      	movge	r3, r4
 8014366:	462c      	movge	r4, r5
 8014368:	4638      	mov	r0, r7
 801436a:	6861      	ldr	r1, [r4, #4]
 801436c:	bfa6      	itte	ge
 801436e:	461d      	movge	r5, r3
 8014370:	2600      	movge	r6, #0
 8014372:	2601      	movlt	r6, #1
 8014374:	f7ff fd3e 	bl	8013df4 <_Balloc>
 8014378:	4602      	mov	r2, r0
 801437a:	b918      	cbnz	r0, 8014384 <__mdiff+0x5c>
 801437c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014380:	4b2d      	ldr	r3, [pc, #180]	; (8014438 <__mdiff+0x110>)
 8014382:	e7e5      	b.n	8014350 <__mdiff+0x28>
 8014384:	f102 0814 	add.w	r8, r2, #20
 8014388:	46c2      	mov	sl, r8
 801438a:	f04f 0c00 	mov.w	ip, #0
 801438e:	6927      	ldr	r7, [r4, #16]
 8014390:	60c6      	str	r6, [r0, #12]
 8014392:	692e      	ldr	r6, [r5, #16]
 8014394:	f104 0014 	add.w	r0, r4, #20
 8014398:	f105 0914 	add.w	r9, r5, #20
 801439c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80143a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80143a4:	3410      	adds	r4, #16
 80143a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80143aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80143ae:	fa1f f18b 	uxth.w	r1, fp
 80143b2:	448c      	add	ip, r1
 80143b4:	b299      	uxth	r1, r3
 80143b6:	0c1b      	lsrs	r3, r3, #16
 80143b8:	ebac 0101 	sub.w	r1, ip, r1
 80143bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80143c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80143c4:	b289      	uxth	r1, r1
 80143c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80143ca:	454e      	cmp	r6, r9
 80143cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80143d0:	f84a 3b04 	str.w	r3, [sl], #4
 80143d4:	d8e7      	bhi.n	80143a6 <__mdiff+0x7e>
 80143d6:	1b73      	subs	r3, r6, r5
 80143d8:	3b15      	subs	r3, #21
 80143da:	f023 0303 	bic.w	r3, r3, #3
 80143de:	3515      	adds	r5, #21
 80143e0:	3304      	adds	r3, #4
 80143e2:	42ae      	cmp	r6, r5
 80143e4:	bf38      	it	cc
 80143e6:	2304      	movcc	r3, #4
 80143e8:	4418      	add	r0, r3
 80143ea:	4443      	add	r3, r8
 80143ec:	461e      	mov	r6, r3
 80143ee:	4605      	mov	r5, r0
 80143f0:	4575      	cmp	r5, lr
 80143f2:	d30e      	bcc.n	8014412 <__mdiff+0xea>
 80143f4:	f10e 0103 	add.w	r1, lr, #3
 80143f8:	1a09      	subs	r1, r1, r0
 80143fa:	f021 0103 	bic.w	r1, r1, #3
 80143fe:	3803      	subs	r0, #3
 8014400:	4586      	cmp	lr, r0
 8014402:	bf38      	it	cc
 8014404:	2100      	movcc	r1, #0
 8014406:	4419      	add	r1, r3
 8014408:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801440c:	b18b      	cbz	r3, 8014432 <__mdiff+0x10a>
 801440e:	6117      	str	r7, [r2, #16]
 8014410:	e7a4      	b.n	801435c <__mdiff+0x34>
 8014412:	f855 8b04 	ldr.w	r8, [r5], #4
 8014416:	fa1f f188 	uxth.w	r1, r8
 801441a:	4461      	add	r1, ip
 801441c:	140c      	asrs	r4, r1, #16
 801441e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014422:	b289      	uxth	r1, r1
 8014424:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014428:	ea4f 4c24 	mov.w	ip, r4, asr #16
 801442c:	f846 1b04 	str.w	r1, [r6], #4
 8014430:	e7de      	b.n	80143f0 <__mdiff+0xc8>
 8014432:	3f01      	subs	r7, #1
 8014434:	e7e8      	b.n	8014408 <__mdiff+0xe0>
 8014436:	bf00      	nop
 8014438:	0801634e 	.word	0x0801634e
 801443c:	0801635f 	.word	0x0801635f

08014440 <__d2b>:
 8014440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014444:	2101      	movs	r1, #1
 8014446:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801444a:	4690      	mov	r8, r2
 801444c:	461d      	mov	r5, r3
 801444e:	f7ff fcd1 	bl	8013df4 <_Balloc>
 8014452:	4604      	mov	r4, r0
 8014454:	b930      	cbnz	r0, 8014464 <__d2b+0x24>
 8014456:	4602      	mov	r2, r0
 8014458:	f240 310a 	movw	r1, #778	; 0x30a
 801445c:	4b24      	ldr	r3, [pc, #144]	; (80144f0 <__d2b+0xb0>)
 801445e:	4825      	ldr	r0, [pc, #148]	; (80144f4 <__d2b+0xb4>)
 8014460:	f7fe fde0 	bl	8013024 <__assert_func>
 8014464:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8014468:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801446c:	bb2d      	cbnz	r5, 80144ba <__d2b+0x7a>
 801446e:	9301      	str	r3, [sp, #4]
 8014470:	f1b8 0300 	subs.w	r3, r8, #0
 8014474:	d026      	beq.n	80144c4 <__d2b+0x84>
 8014476:	4668      	mov	r0, sp
 8014478:	9300      	str	r3, [sp, #0]
 801447a:	f7ff fd83 	bl	8013f84 <__lo0bits>
 801447e:	9900      	ldr	r1, [sp, #0]
 8014480:	b1f0      	cbz	r0, 80144c0 <__d2b+0x80>
 8014482:	9a01      	ldr	r2, [sp, #4]
 8014484:	f1c0 0320 	rsb	r3, r0, #32
 8014488:	fa02 f303 	lsl.w	r3, r2, r3
 801448c:	430b      	orrs	r3, r1
 801448e:	40c2      	lsrs	r2, r0
 8014490:	6163      	str	r3, [r4, #20]
 8014492:	9201      	str	r2, [sp, #4]
 8014494:	9b01      	ldr	r3, [sp, #4]
 8014496:	2b00      	cmp	r3, #0
 8014498:	bf14      	ite	ne
 801449a:	2102      	movne	r1, #2
 801449c:	2101      	moveq	r1, #1
 801449e:	61a3      	str	r3, [r4, #24]
 80144a0:	6121      	str	r1, [r4, #16]
 80144a2:	b1c5      	cbz	r5, 80144d6 <__d2b+0x96>
 80144a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80144a8:	4405      	add	r5, r0
 80144aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80144ae:	603d      	str	r5, [r7, #0]
 80144b0:	6030      	str	r0, [r6, #0]
 80144b2:	4620      	mov	r0, r4
 80144b4:	b002      	add	sp, #8
 80144b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80144be:	e7d6      	b.n	801446e <__d2b+0x2e>
 80144c0:	6161      	str	r1, [r4, #20]
 80144c2:	e7e7      	b.n	8014494 <__d2b+0x54>
 80144c4:	a801      	add	r0, sp, #4
 80144c6:	f7ff fd5d 	bl	8013f84 <__lo0bits>
 80144ca:	2101      	movs	r1, #1
 80144cc:	9b01      	ldr	r3, [sp, #4]
 80144ce:	6121      	str	r1, [r4, #16]
 80144d0:	6163      	str	r3, [r4, #20]
 80144d2:	3020      	adds	r0, #32
 80144d4:	e7e5      	b.n	80144a2 <__d2b+0x62>
 80144d6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80144da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80144de:	6038      	str	r0, [r7, #0]
 80144e0:	6918      	ldr	r0, [r3, #16]
 80144e2:	f7ff fd2f 	bl	8013f44 <__hi0bits>
 80144e6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80144ea:	6031      	str	r1, [r6, #0]
 80144ec:	e7e1      	b.n	80144b2 <__d2b+0x72>
 80144ee:	bf00      	nop
 80144f0:	0801634e 	.word	0x0801634e
 80144f4:	0801635f 	.word	0x0801635f

080144f8 <_calloc_r>:
 80144f8:	b570      	push	{r4, r5, r6, lr}
 80144fa:	fba1 5402 	umull	r5, r4, r1, r2
 80144fe:	b934      	cbnz	r4, 801450e <_calloc_r+0x16>
 8014500:	4629      	mov	r1, r5
 8014502:	f7fd fffd 	bl	8012500 <_malloc_r>
 8014506:	4606      	mov	r6, r0
 8014508:	b928      	cbnz	r0, 8014516 <_calloc_r+0x1e>
 801450a:	4630      	mov	r0, r6
 801450c:	bd70      	pop	{r4, r5, r6, pc}
 801450e:	220c      	movs	r2, #12
 8014510:	2600      	movs	r6, #0
 8014512:	6002      	str	r2, [r0, #0]
 8014514:	e7f9      	b.n	801450a <_calloc_r+0x12>
 8014516:	462a      	mov	r2, r5
 8014518:	4621      	mov	r1, r4
 801451a:	f7fd ff81 	bl	8012420 <memset>
 801451e:	e7f4      	b.n	801450a <_calloc_r+0x12>

08014520 <__ssputs_r>:
 8014520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014524:	688e      	ldr	r6, [r1, #8]
 8014526:	4682      	mov	sl, r0
 8014528:	429e      	cmp	r6, r3
 801452a:	460c      	mov	r4, r1
 801452c:	4690      	mov	r8, r2
 801452e:	461f      	mov	r7, r3
 8014530:	d838      	bhi.n	80145a4 <__ssputs_r+0x84>
 8014532:	898a      	ldrh	r2, [r1, #12]
 8014534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014538:	d032      	beq.n	80145a0 <__ssputs_r+0x80>
 801453a:	6825      	ldr	r5, [r4, #0]
 801453c:	6909      	ldr	r1, [r1, #16]
 801453e:	3301      	adds	r3, #1
 8014540:	eba5 0901 	sub.w	r9, r5, r1
 8014544:	6965      	ldr	r5, [r4, #20]
 8014546:	444b      	add	r3, r9
 8014548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801454c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014550:	106d      	asrs	r5, r5, #1
 8014552:	429d      	cmp	r5, r3
 8014554:	bf38      	it	cc
 8014556:	461d      	movcc	r5, r3
 8014558:	0553      	lsls	r3, r2, #21
 801455a:	d531      	bpl.n	80145c0 <__ssputs_r+0xa0>
 801455c:	4629      	mov	r1, r5
 801455e:	f7fd ffcf 	bl	8012500 <_malloc_r>
 8014562:	4606      	mov	r6, r0
 8014564:	b950      	cbnz	r0, 801457c <__ssputs_r+0x5c>
 8014566:	230c      	movs	r3, #12
 8014568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801456c:	f8ca 3000 	str.w	r3, [sl]
 8014570:	89a3      	ldrh	r3, [r4, #12]
 8014572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014576:	81a3      	strh	r3, [r4, #12]
 8014578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801457c:	464a      	mov	r2, r9
 801457e:	6921      	ldr	r1, [r4, #16]
 8014580:	f7ff fc1e 	bl	8013dc0 <memcpy>
 8014584:	89a3      	ldrh	r3, [r4, #12]
 8014586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801458e:	81a3      	strh	r3, [r4, #12]
 8014590:	6126      	str	r6, [r4, #16]
 8014592:	444e      	add	r6, r9
 8014594:	6026      	str	r6, [r4, #0]
 8014596:	463e      	mov	r6, r7
 8014598:	6165      	str	r5, [r4, #20]
 801459a:	eba5 0509 	sub.w	r5, r5, r9
 801459e:	60a5      	str	r5, [r4, #8]
 80145a0:	42be      	cmp	r6, r7
 80145a2:	d900      	bls.n	80145a6 <__ssputs_r+0x86>
 80145a4:	463e      	mov	r6, r7
 80145a6:	4632      	mov	r2, r6
 80145a8:	4641      	mov	r1, r8
 80145aa:	6820      	ldr	r0, [r4, #0]
 80145ac:	f000 fd76 	bl	801509c <memmove>
 80145b0:	68a3      	ldr	r3, [r4, #8]
 80145b2:	2000      	movs	r0, #0
 80145b4:	1b9b      	subs	r3, r3, r6
 80145b6:	60a3      	str	r3, [r4, #8]
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	4433      	add	r3, r6
 80145bc:	6023      	str	r3, [r4, #0]
 80145be:	e7db      	b.n	8014578 <__ssputs_r+0x58>
 80145c0:	462a      	mov	r2, r5
 80145c2:	f000 fd85 	bl	80150d0 <_realloc_r>
 80145c6:	4606      	mov	r6, r0
 80145c8:	2800      	cmp	r0, #0
 80145ca:	d1e1      	bne.n	8014590 <__ssputs_r+0x70>
 80145cc:	4650      	mov	r0, sl
 80145ce:	6921      	ldr	r1, [r4, #16]
 80145d0:	f7fd ff2e 	bl	8012430 <_free_r>
 80145d4:	e7c7      	b.n	8014566 <__ssputs_r+0x46>
	...

080145d8 <_svfiprintf_r>:
 80145d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145dc:	4698      	mov	r8, r3
 80145de:	898b      	ldrh	r3, [r1, #12]
 80145e0:	4607      	mov	r7, r0
 80145e2:	061b      	lsls	r3, r3, #24
 80145e4:	460d      	mov	r5, r1
 80145e6:	4614      	mov	r4, r2
 80145e8:	b09d      	sub	sp, #116	; 0x74
 80145ea:	d50e      	bpl.n	801460a <_svfiprintf_r+0x32>
 80145ec:	690b      	ldr	r3, [r1, #16]
 80145ee:	b963      	cbnz	r3, 801460a <_svfiprintf_r+0x32>
 80145f0:	2140      	movs	r1, #64	; 0x40
 80145f2:	f7fd ff85 	bl	8012500 <_malloc_r>
 80145f6:	6028      	str	r0, [r5, #0]
 80145f8:	6128      	str	r0, [r5, #16]
 80145fa:	b920      	cbnz	r0, 8014606 <_svfiprintf_r+0x2e>
 80145fc:	230c      	movs	r3, #12
 80145fe:	603b      	str	r3, [r7, #0]
 8014600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014604:	e0d1      	b.n	80147aa <_svfiprintf_r+0x1d2>
 8014606:	2340      	movs	r3, #64	; 0x40
 8014608:	616b      	str	r3, [r5, #20]
 801460a:	2300      	movs	r3, #0
 801460c:	9309      	str	r3, [sp, #36]	; 0x24
 801460e:	2320      	movs	r3, #32
 8014610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014614:	2330      	movs	r3, #48	; 0x30
 8014616:	f04f 0901 	mov.w	r9, #1
 801461a:	f8cd 800c 	str.w	r8, [sp, #12]
 801461e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80147c4 <_svfiprintf_r+0x1ec>
 8014622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014626:	4623      	mov	r3, r4
 8014628:	469a      	mov	sl, r3
 801462a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801462e:	b10a      	cbz	r2, 8014634 <_svfiprintf_r+0x5c>
 8014630:	2a25      	cmp	r2, #37	; 0x25
 8014632:	d1f9      	bne.n	8014628 <_svfiprintf_r+0x50>
 8014634:	ebba 0b04 	subs.w	fp, sl, r4
 8014638:	d00b      	beq.n	8014652 <_svfiprintf_r+0x7a>
 801463a:	465b      	mov	r3, fp
 801463c:	4622      	mov	r2, r4
 801463e:	4629      	mov	r1, r5
 8014640:	4638      	mov	r0, r7
 8014642:	f7ff ff6d 	bl	8014520 <__ssputs_r>
 8014646:	3001      	adds	r0, #1
 8014648:	f000 80aa 	beq.w	80147a0 <_svfiprintf_r+0x1c8>
 801464c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801464e:	445a      	add	r2, fp
 8014650:	9209      	str	r2, [sp, #36]	; 0x24
 8014652:	f89a 3000 	ldrb.w	r3, [sl]
 8014656:	2b00      	cmp	r3, #0
 8014658:	f000 80a2 	beq.w	80147a0 <_svfiprintf_r+0x1c8>
 801465c:	2300      	movs	r3, #0
 801465e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014666:	f10a 0a01 	add.w	sl, sl, #1
 801466a:	9304      	str	r3, [sp, #16]
 801466c:	9307      	str	r3, [sp, #28]
 801466e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014672:	931a      	str	r3, [sp, #104]	; 0x68
 8014674:	4654      	mov	r4, sl
 8014676:	2205      	movs	r2, #5
 8014678:	f814 1b01 	ldrb.w	r1, [r4], #1
 801467c:	4851      	ldr	r0, [pc, #324]	; (80147c4 <_svfiprintf_r+0x1ec>)
 801467e:	f7ff fb91 	bl	8013da4 <memchr>
 8014682:	9a04      	ldr	r2, [sp, #16]
 8014684:	b9d8      	cbnz	r0, 80146be <_svfiprintf_r+0xe6>
 8014686:	06d0      	lsls	r0, r2, #27
 8014688:	bf44      	itt	mi
 801468a:	2320      	movmi	r3, #32
 801468c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014690:	0711      	lsls	r1, r2, #28
 8014692:	bf44      	itt	mi
 8014694:	232b      	movmi	r3, #43	; 0x2b
 8014696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801469a:	f89a 3000 	ldrb.w	r3, [sl]
 801469e:	2b2a      	cmp	r3, #42	; 0x2a
 80146a0:	d015      	beq.n	80146ce <_svfiprintf_r+0xf6>
 80146a2:	4654      	mov	r4, sl
 80146a4:	2000      	movs	r0, #0
 80146a6:	f04f 0c0a 	mov.w	ip, #10
 80146aa:	9a07      	ldr	r2, [sp, #28]
 80146ac:	4621      	mov	r1, r4
 80146ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146b2:	3b30      	subs	r3, #48	; 0x30
 80146b4:	2b09      	cmp	r3, #9
 80146b6:	d94e      	bls.n	8014756 <_svfiprintf_r+0x17e>
 80146b8:	b1b0      	cbz	r0, 80146e8 <_svfiprintf_r+0x110>
 80146ba:	9207      	str	r2, [sp, #28]
 80146bc:	e014      	b.n	80146e8 <_svfiprintf_r+0x110>
 80146be:	eba0 0308 	sub.w	r3, r0, r8
 80146c2:	fa09 f303 	lsl.w	r3, r9, r3
 80146c6:	4313      	orrs	r3, r2
 80146c8:	46a2      	mov	sl, r4
 80146ca:	9304      	str	r3, [sp, #16]
 80146cc:	e7d2      	b.n	8014674 <_svfiprintf_r+0x9c>
 80146ce:	9b03      	ldr	r3, [sp, #12]
 80146d0:	1d19      	adds	r1, r3, #4
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	9103      	str	r1, [sp, #12]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	bfbb      	ittet	lt
 80146da:	425b      	neglt	r3, r3
 80146dc:	f042 0202 	orrlt.w	r2, r2, #2
 80146e0:	9307      	strge	r3, [sp, #28]
 80146e2:	9307      	strlt	r3, [sp, #28]
 80146e4:	bfb8      	it	lt
 80146e6:	9204      	strlt	r2, [sp, #16]
 80146e8:	7823      	ldrb	r3, [r4, #0]
 80146ea:	2b2e      	cmp	r3, #46	; 0x2e
 80146ec:	d10c      	bne.n	8014708 <_svfiprintf_r+0x130>
 80146ee:	7863      	ldrb	r3, [r4, #1]
 80146f0:	2b2a      	cmp	r3, #42	; 0x2a
 80146f2:	d135      	bne.n	8014760 <_svfiprintf_r+0x188>
 80146f4:	9b03      	ldr	r3, [sp, #12]
 80146f6:	3402      	adds	r4, #2
 80146f8:	1d1a      	adds	r2, r3, #4
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	9203      	str	r2, [sp, #12]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	bfb8      	it	lt
 8014702:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014706:	9305      	str	r3, [sp, #20]
 8014708:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80147c8 <_svfiprintf_r+0x1f0>
 801470c:	2203      	movs	r2, #3
 801470e:	4650      	mov	r0, sl
 8014710:	7821      	ldrb	r1, [r4, #0]
 8014712:	f7ff fb47 	bl	8013da4 <memchr>
 8014716:	b140      	cbz	r0, 801472a <_svfiprintf_r+0x152>
 8014718:	2340      	movs	r3, #64	; 0x40
 801471a:	eba0 000a 	sub.w	r0, r0, sl
 801471e:	fa03 f000 	lsl.w	r0, r3, r0
 8014722:	9b04      	ldr	r3, [sp, #16]
 8014724:	3401      	adds	r4, #1
 8014726:	4303      	orrs	r3, r0
 8014728:	9304      	str	r3, [sp, #16]
 801472a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801472e:	2206      	movs	r2, #6
 8014730:	4826      	ldr	r0, [pc, #152]	; (80147cc <_svfiprintf_r+0x1f4>)
 8014732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014736:	f7ff fb35 	bl	8013da4 <memchr>
 801473a:	2800      	cmp	r0, #0
 801473c:	d038      	beq.n	80147b0 <_svfiprintf_r+0x1d8>
 801473e:	4b24      	ldr	r3, [pc, #144]	; (80147d0 <_svfiprintf_r+0x1f8>)
 8014740:	bb1b      	cbnz	r3, 801478a <_svfiprintf_r+0x1b2>
 8014742:	9b03      	ldr	r3, [sp, #12]
 8014744:	3307      	adds	r3, #7
 8014746:	f023 0307 	bic.w	r3, r3, #7
 801474a:	3308      	adds	r3, #8
 801474c:	9303      	str	r3, [sp, #12]
 801474e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014750:	4433      	add	r3, r6
 8014752:	9309      	str	r3, [sp, #36]	; 0x24
 8014754:	e767      	b.n	8014626 <_svfiprintf_r+0x4e>
 8014756:	460c      	mov	r4, r1
 8014758:	2001      	movs	r0, #1
 801475a:	fb0c 3202 	mla	r2, ip, r2, r3
 801475e:	e7a5      	b.n	80146ac <_svfiprintf_r+0xd4>
 8014760:	2300      	movs	r3, #0
 8014762:	f04f 0c0a 	mov.w	ip, #10
 8014766:	4619      	mov	r1, r3
 8014768:	3401      	adds	r4, #1
 801476a:	9305      	str	r3, [sp, #20]
 801476c:	4620      	mov	r0, r4
 801476e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014772:	3a30      	subs	r2, #48	; 0x30
 8014774:	2a09      	cmp	r2, #9
 8014776:	d903      	bls.n	8014780 <_svfiprintf_r+0x1a8>
 8014778:	2b00      	cmp	r3, #0
 801477a:	d0c5      	beq.n	8014708 <_svfiprintf_r+0x130>
 801477c:	9105      	str	r1, [sp, #20]
 801477e:	e7c3      	b.n	8014708 <_svfiprintf_r+0x130>
 8014780:	4604      	mov	r4, r0
 8014782:	2301      	movs	r3, #1
 8014784:	fb0c 2101 	mla	r1, ip, r1, r2
 8014788:	e7f0      	b.n	801476c <_svfiprintf_r+0x194>
 801478a:	ab03      	add	r3, sp, #12
 801478c:	9300      	str	r3, [sp, #0]
 801478e:	462a      	mov	r2, r5
 8014790:	4638      	mov	r0, r7
 8014792:	4b10      	ldr	r3, [pc, #64]	; (80147d4 <_svfiprintf_r+0x1fc>)
 8014794:	a904      	add	r1, sp, #16
 8014796:	f7fd ffc5 	bl	8012724 <_printf_float>
 801479a:	1c42      	adds	r2, r0, #1
 801479c:	4606      	mov	r6, r0
 801479e:	d1d6      	bne.n	801474e <_svfiprintf_r+0x176>
 80147a0:	89ab      	ldrh	r3, [r5, #12]
 80147a2:	065b      	lsls	r3, r3, #25
 80147a4:	f53f af2c 	bmi.w	8014600 <_svfiprintf_r+0x28>
 80147a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80147aa:	b01d      	add	sp, #116	; 0x74
 80147ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b0:	ab03      	add	r3, sp, #12
 80147b2:	9300      	str	r3, [sp, #0]
 80147b4:	462a      	mov	r2, r5
 80147b6:	4638      	mov	r0, r7
 80147b8:	4b06      	ldr	r3, [pc, #24]	; (80147d4 <_svfiprintf_r+0x1fc>)
 80147ba:	a904      	add	r1, sp, #16
 80147bc:	f7fe fa4e 	bl	8012c5c <_printf_i>
 80147c0:	e7eb      	b.n	801479a <_svfiprintf_r+0x1c2>
 80147c2:	bf00      	nop
 80147c4:	080164bc 	.word	0x080164bc
 80147c8:	080164c2 	.word	0x080164c2
 80147cc:	080164c6 	.word	0x080164c6
 80147d0:	08012725 	.word	0x08012725
 80147d4:	08014521 	.word	0x08014521

080147d8 <__sfputc_r>:
 80147d8:	6893      	ldr	r3, [r2, #8]
 80147da:	b410      	push	{r4}
 80147dc:	3b01      	subs	r3, #1
 80147de:	2b00      	cmp	r3, #0
 80147e0:	6093      	str	r3, [r2, #8]
 80147e2:	da07      	bge.n	80147f4 <__sfputc_r+0x1c>
 80147e4:	6994      	ldr	r4, [r2, #24]
 80147e6:	42a3      	cmp	r3, r4
 80147e8:	db01      	blt.n	80147ee <__sfputc_r+0x16>
 80147ea:	290a      	cmp	r1, #10
 80147ec:	d102      	bne.n	80147f4 <__sfputc_r+0x1c>
 80147ee:	bc10      	pop	{r4}
 80147f0:	f000 b95e 	b.w	8014ab0 <__swbuf_r>
 80147f4:	6813      	ldr	r3, [r2, #0]
 80147f6:	1c58      	adds	r0, r3, #1
 80147f8:	6010      	str	r0, [r2, #0]
 80147fa:	7019      	strb	r1, [r3, #0]
 80147fc:	4608      	mov	r0, r1
 80147fe:	bc10      	pop	{r4}
 8014800:	4770      	bx	lr

08014802 <__sfputs_r>:
 8014802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014804:	4606      	mov	r6, r0
 8014806:	460f      	mov	r7, r1
 8014808:	4614      	mov	r4, r2
 801480a:	18d5      	adds	r5, r2, r3
 801480c:	42ac      	cmp	r4, r5
 801480e:	d101      	bne.n	8014814 <__sfputs_r+0x12>
 8014810:	2000      	movs	r0, #0
 8014812:	e007      	b.n	8014824 <__sfputs_r+0x22>
 8014814:	463a      	mov	r2, r7
 8014816:	4630      	mov	r0, r6
 8014818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801481c:	f7ff ffdc 	bl	80147d8 <__sfputc_r>
 8014820:	1c43      	adds	r3, r0, #1
 8014822:	d1f3      	bne.n	801480c <__sfputs_r+0xa>
 8014824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014828 <_vfiprintf_r>:
 8014828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801482c:	460d      	mov	r5, r1
 801482e:	4614      	mov	r4, r2
 8014830:	4698      	mov	r8, r3
 8014832:	4606      	mov	r6, r0
 8014834:	b09d      	sub	sp, #116	; 0x74
 8014836:	b118      	cbz	r0, 8014840 <_vfiprintf_r+0x18>
 8014838:	6983      	ldr	r3, [r0, #24]
 801483a:	b90b      	cbnz	r3, 8014840 <_vfiprintf_r+0x18>
 801483c:	f000 fb16 	bl	8014e6c <__sinit>
 8014840:	4b89      	ldr	r3, [pc, #548]	; (8014a68 <_vfiprintf_r+0x240>)
 8014842:	429d      	cmp	r5, r3
 8014844:	d11b      	bne.n	801487e <_vfiprintf_r+0x56>
 8014846:	6875      	ldr	r5, [r6, #4]
 8014848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801484a:	07d9      	lsls	r1, r3, #31
 801484c:	d405      	bmi.n	801485a <_vfiprintf_r+0x32>
 801484e:	89ab      	ldrh	r3, [r5, #12]
 8014850:	059a      	lsls	r2, r3, #22
 8014852:	d402      	bmi.n	801485a <_vfiprintf_r+0x32>
 8014854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014856:	f000 fba7 	bl	8014fa8 <__retarget_lock_acquire_recursive>
 801485a:	89ab      	ldrh	r3, [r5, #12]
 801485c:	071b      	lsls	r3, r3, #28
 801485e:	d501      	bpl.n	8014864 <_vfiprintf_r+0x3c>
 8014860:	692b      	ldr	r3, [r5, #16]
 8014862:	b9eb      	cbnz	r3, 80148a0 <_vfiprintf_r+0x78>
 8014864:	4629      	mov	r1, r5
 8014866:	4630      	mov	r0, r6
 8014868:	f000 f974 	bl	8014b54 <__swsetup_r>
 801486c:	b1c0      	cbz	r0, 80148a0 <_vfiprintf_r+0x78>
 801486e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014870:	07dc      	lsls	r4, r3, #31
 8014872:	d50e      	bpl.n	8014892 <_vfiprintf_r+0x6a>
 8014874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014878:	b01d      	add	sp, #116	; 0x74
 801487a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801487e:	4b7b      	ldr	r3, [pc, #492]	; (8014a6c <_vfiprintf_r+0x244>)
 8014880:	429d      	cmp	r5, r3
 8014882:	d101      	bne.n	8014888 <_vfiprintf_r+0x60>
 8014884:	68b5      	ldr	r5, [r6, #8]
 8014886:	e7df      	b.n	8014848 <_vfiprintf_r+0x20>
 8014888:	4b79      	ldr	r3, [pc, #484]	; (8014a70 <_vfiprintf_r+0x248>)
 801488a:	429d      	cmp	r5, r3
 801488c:	bf08      	it	eq
 801488e:	68f5      	ldreq	r5, [r6, #12]
 8014890:	e7da      	b.n	8014848 <_vfiprintf_r+0x20>
 8014892:	89ab      	ldrh	r3, [r5, #12]
 8014894:	0598      	lsls	r0, r3, #22
 8014896:	d4ed      	bmi.n	8014874 <_vfiprintf_r+0x4c>
 8014898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801489a:	f000 fb86 	bl	8014faa <__retarget_lock_release_recursive>
 801489e:	e7e9      	b.n	8014874 <_vfiprintf_r+0x4c>
 80148a0:	2300      	movs	r3, #0
 80148a2:	9309      	str	r3, [sp, #36]	; 0x24
 80148a4:	2320      	movs	r3, #32
 80148a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148aa:	2330      	movs	r3, #48	; 0x30
 80148ac:	f04f 0901 	mov.w	r9, #1
 80148b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80148b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8014a74 <_vfiprintf_r+0x24c>
 80148b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148bc:	4623      	mov	r3, r4
 80148be:	469a      	mov	sl, r3
 80148c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148c4:	b10a      	cbz	r2, 80148ca <_vfiprintf_r+0xa2>
 80148c6:	2a25      	cmp	r2, #37	; 0x25
 80148c8:	d1f9      	bne.n	80148be <_vfiprintf_r+0x96>
 80148ca:	ebba 0b04 	subs.w	fp, sl, r4
 80148ce:	d00b      	beq.n	80148e8 <_vfiprintf_r+0xc0>
 80148d0:	465b      	mov	r3, fp
 80148d2:	4622      	mov	r2, r4
 80148d4:	4629      	mov	r1, r5
 80148d6:	4630      	mov	r0, r6
 80148d8:	f7ff ff93 	bl	8014802 <__sfputs_r>
 80148dc:	3001      	adds	r0, #1
 80148de:	f000 80aa 	beq.w	8014a36 <_vfiprintf_r+0x20e>
 80148e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148e4:	445a      	add	r2, fp
 80148e6:	9209      	str	r2, [sp, #36]	; 0x24
 80148e8:	f89a 3000 	ldrb.w	r3, [sl]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	f000 80a2 	beq.w	8014a36 <_vfiprintf_r+0x20e>
 80148f2:	2300      	movs	r3, #0
 80148f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148fc:	f10a 0a01 	add.w	sl, sl, #1
 8014900:	9304      	str	r3, [sp, #16]
 8014902:	9307      	str	r3, [sp, #28]
 8014904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014908:	931a      	str	r3, [sp, #104]	; 0x68
 801490a:	4654      	mov	r4, sl
 801490c:	2205      	movs	r2, #5
 801490e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014912:	4858      	ldr	r0, [pc, #352]	; (8014a74 <_vfiprintf_r+0x24c>)
 8014914:	f7ff fa46 	bl	8013da4 <memchr>
 8014918:	9a04      	ldr	r2, [sp, #16]
 801491a:	b9d8      	cbnz	r0, 8014954 <_vfiprintf_r+0x12c>
 801491c:	06d1      	lsls	r1, r2, #27
 801491e:	bf44      	itt	mi
 8014920:	2320      	movmi	r3, #32
 8014922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014926:	0713      	lsls	r3, r2, #28
 8014928:	bf44      	itt	mi
 801492a:	232b      	movmi	r3, #43	; 0x2b
 801492c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014930:	f89a 3000 	ldrb.w	r3, [sl]
 8014934:	2b2a      	cmp	r3, #42	; 0x2a
 8014936:	d015      	beq.n	8014964 <_vfiprintf_r+0x13c>
 8014938:	4654      	mov	r4, sl
 801493a:	2000      	movs	r0, #0
 801493c:	f04f 0c0a 	mov.w	ip, #10
 8014940:	9a07      	ldr	r2, [sp, #28]
 8014942:	4621      	mov	r1, r4
 8014944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014948:	3b30      	subs	r3, #48	; 0x30
 801494a:	2b09      	cmp	r3, #9
 801494c:	d94e      	bls.n	80149ec <_vfiprintf_r+0x1c4>
 801494e:	b1b0      	cbz	r0, 801497e <_vfiprintf_r+0x156>
 8014950:	9207      	str	r2, [sp, #28]
 8014952:	e014      	b.n	801497e <_vfiprintf_r+0x156>
 8014954:	eba0 0308 	sub.w	r3, r0, r8
 8014958:	fa09 f303 	lsl.w	r3, r9, r3
 801495c:	4313      	orrs	r3, r2
 801495e:	46a2      	mov	sl, r4
 8014960:	9304      	str	r3, [sp, #16]
 8014962:	e7d2      	b.n	801490a <_vfiprintf_r+0xe2>
 8014964:	9b03      	ldr	r3, [sp, #12]
 8014966:	1d19      	adds	r1, r3, #4
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	9103      	str	r1, [sp, #12]
 801496c:	2b00      	cmp	r3, #0
 801496e:	bfbb      	ittet	lt
 8014970:	425b      	neglt	r3, r3
 8014972:	f042 0202 	orrlt.w	r2, r2, #2
 8014976:	9307      	strge	r3, [sp, #28]
 8014978:	9307      	strlt	r3, [sp, #28]
 801497a:	bfb8      	it	lt
 801497c:	9204      	strlt	r2, [sp, #16]
 801497e:	7823      	ldrb	r3, [r4, #0]
 8014980:	2b2e      	cmp	r3, #46	; 0x2e
 8014982:	d10c      	bne.n	801499e <_vfiprintf_r+0x176>
 8014984:	7863      	ldrb	r3, [r4, #1]
 8014986:	2b2a      	cmp	r3, #42	; 0x2a
 8014988:	d135      	bne.n	80149f6 <_vfiprintf_r+0x1ce>
 801498a:	9b03      	ldr	r3, [sp, #12]
 801498c:	3402      	adds	r4, #2
 801498e:	1d1a      	adds	r2, r3, #4
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	9203      	str	r2, [sp, #12]
 8014994:	2b00      	cmp	r3, #0
 8014996:	bfb8      	it	lt
 8014998:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801499c:	9305      	str	r3, [sp, #20]
 801499e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8014a78 <_vfiprintf_r+0x250>
 80149a2:	2203      	movs	r2, #3
 80149a4:	4650      	mov	r0, sl
 80149a6:	7821      	ldrb	r1, [r4, #0]
 80149a8:	f7ff f9fc 	bl	8013da4 <memchr>
 80149ac:	b140      	cbz	r0, 80149c0 <_vfiprintf_r+0x198>
 80149ae:	2340      	movs	r3, #64	; 0x40
 80149b0:	eba0 000a 	sub.w	r0, r0, sl
 80149b4:	fa03 f000 	lsl.w	r0, r3, r0
 80149b8:	9b04      	ldr	r3, [sp, #16]
 80149ba:	3401      	adds	r4, #1
 80149bc:	4303      	orrs	r3, r0
 80149be:	9304      	str	r3, [sp, #16]
 80149c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149c4:	2206      	movs	r2, #6
 80149c6:	482d      	ldr	r0, [pc, #180]	; (8014a7c <_vfiprintf_r+0x254>)
 80149c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149cc:	f7ff f9ea 	bl	8013da4 <memchr>
 80149d0:	2800      	cmp	r0, #0
 80149d2:	d03f      	beq.n	8014a54 <_vfiprintf_r+0x22c>
 80149d4:	4b2a      	ldr	r3, [pc, #168]	; (8014a80 <_vfiprintf_r+0x258>)
 80149d6:	bb1b      	cbnz	r3, 8014a20 <_vfiprintf_r+0x1f8>
 80149d8:	9b03      	ldr	r3, [sp, #12]
 80149da:	3307      	adds	r3, #7
 80149dc:	f023 0307 	bic.w	r3, r3, #7
 80149e0:	3308      	adds	r3, #8
 80149e2:	9303      	str	r3, [sp, #12]
 80149e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149e6:	443b      	add	r3, r7
 80149e8:	9309      	str	r3, [sp, #36]	; 0x24
 80149ea:	e767      	b.n	80148bc <_vfiprintf_r+0x94>
 80149ec:	460c      	mov	r4, r1
 80149ee:	2001      	movs	r0, #1
 80149f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80149f4:	e7a5      	b.n	8014942 <_vfiprintf_r+0x11a>
 80149f6:	2300      	movs	r3, #0
 80149f8:	f04f 0c0a 	mov.w	ip, #10
 80149fc:	4619      	mov	r1, r3
 80149fe:	3401      	adds	r4, #1
 8014a00:	9305      	str	r3, [sp, #20]
 8014a02:	4620      	mov	r0, r4
 8014a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a08:	3a30      	subs	r2, #48	; 0x30
 8014a0a:	2a09      	cmp	r2, #9
 8014a0c:	d903      	bls.n	8014a16 <_vfiprintf_r+0x1ee>
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d0c5      	beq.n	801499e <_vfiprintf_r+0x176>
 8014a12:	9105      	str	r1, [sp, #20]
 8014a14:	e7c3      	b.n	801499e <_vfiprintf_r+0x176>
 8014a16:	4604      	mov	r4, r0
 8014a18:	2301      	movs	r3, #1
 8014a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a1e:	e7f0      	b.n	8014a02 <_vfiprintf_r+0x1da>
 8014a20:	ab03      	add	r3, sp, #12
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	462a      	mov	r2, r5
 8014a26:	4630      	mov	r0, r6
 8014a28:	4b16      	ldr	r3, [pc, #88]	; (8014a84 <_vfiprintf_r+0x25c>)
 8014a2a:	a904      	add	r1, sp, #16
 8014a2c:	f7fd fe7a 	bl	8012724 <_printf_float>
 8014a30:	4607      	mov	r7, r0
 8014a32:	1c78      	adds	r0, r7, #1
 8014a34:	d1d6      	bne.n	80149e4 <_vfiprintf_r+0x1bc>
 8014a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a38:	07d9      	lsls	r1, r3, #31
 8014a3a:	d405      	bmi.n	8014a48 <_vfiprintf_r+0x220>
 8014a3c:	89ab      	ldrh	r3, [r5, #12]
 8014a3e:	059a      	lsls	r2, r3, #22
 8014a40:	d402      	bmi.n	8014a48 <_vfiprintf_r+0x220>
 8014a42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a44:	f000 fab1 	bl	8014faa <__retarget_lock_release_recursive>
 8014a48:	89ab      	ldrh	r3, [r5, #12]
 8014a4a:	065b      	lsls	r3, r3, #25
 8014a4c:	f53f af12 	bmi.w	8014874 <_vfiprintf_r+0x4c>
 8014a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a52:	e711      	b.n	8014878 <_vfiprintf_r+0x50>
 8014a54:	ab03      	add	r3, sp, #12
 8014a56:	9300      	str	r3, [sp, #0]
 8014a58:	462a      	mov	r2, r5
 8014a5a:	4630      	mov	r0, r6
 8014a5c:	4b09      	ldr	r3, [pc, #36]	; (8014a84 <_vfiprintf_r+0x25c>)
 8014a5e:	a904      	add	r1, sp, #16
 8014a60:	f7fe f8fc 	bl	8012c5c <_printf_i>
 8014a64:	e7e4      	b.n	8014a30 <_vfiprintf_r+0x208>
 8014a66:	bf00      	nop
 8014a68:	080164f0 	.word	0x080164f0
 8014a6c:	08016510 	.word	0x08016510
 8014a70:	080164d0 	.word	0x080164d0
 8014a74:	080164bc 	.word	0x080164bc
 8014a78:	080164c2 	.word	0x080164c2
 8014a7c:	080164c6 	.word	0x080164c6
 8014a80:	08012725 	.word	0x08012725
 8014a84:	08014803 	.word	0x08014803

08014a88 <_kill_r>:
 8014a88:	b538      	push	{r3, r4, r5, lr}
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	4d06      	ldr	r5, [pc, #24]	; (8014aa8 <_kill_r+0x20>)
 8014a8e:	4604      	mov	r4, r0
 8014a90:	4608      	mov	r0, r1
 8014a92:	4611      	mov	r1, r2
 8014a94:	602b      	str	r3, [r5, #0]
 8014a96:	f7f1 fdf2 	bl	800667e <_kill>
 8014a9a:	1c43      	adds	r3, r0, #1
 8014a9c:	d102      	bne.n	8014aa4 <_kill_r+0x1c>
 8014a9e:	682b      	ldr	r3, [r5, #0]
 8014aa0:	b103      	cbz	r3, 8014aa4 <_kill_r+0x1c>
 8014aa2:	6023      	str	r3, [r4, #0]
 8014aa4:	bd38      	pop	{r3, r4, r5, pc}
 8014aa6:	bf00      	nop
 8014aa8:	20006278 	.word	0x20006278

08014aac <_getpid_r>:
 8014aac:	f7f1 bde0 	b.w	8006670 <_getpid>

08014ab0 <__swbuf_r>:
 8014ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ab2:	460e      	mov	r6, r1
 8014ab4:	4614      	mov	r4, r2
 8014ab6:	4605      	mov	r5, r0
 8014ab8:	b118      	cbz	r0, 8014ac2 <__swbuf_r+0x12>
 8014aba:	6983      	ldr	r3, [r0, #24]
 8014abc:	b90b      	cbnz	r3, 8014ac2 <__swbuf_r+0x12>
 8014abe:	f000 f9d5 	bl	8014e6c <__sinit>
 8014ac2:	4b21      	ldr	r3, [pc, #132]	; (8014b48 <__swbuf_r+0x98>)
 8014ac4:	429c      	cmp	r4, r3
 8014ac6:	d12b      	bne.n	8014b20 <__swbuf_r+0x70>
 8014ac8:	686c      	ldr	r4, [r5, #4]
 8014aca:	69a3      	ldr	r3, [r4, #24]
 8014acc:	60a3      	str	r3, [r4, #8]
 8014ace:	89a3      	ldrh	r3, [r4, #12]
 8014ad0:	071a      	lsls	r2, r3, #28
 8014ad2:	d52f      	bpl.n	8014b34 <__swbuf_r+0x84>
 8014ad4:	6923      	ldr	r3, [r4, #16]
 8014ad6:	b36b      	cbz	r3, 8014b34 <__swbuf_r+0x84>
 8014ad8:	6923      	ldr	r3, [r4, #16]
 8014ada:	6820      	ldr	r0, [r4, #0]
 8014adc:	b2f6      	uxtb	r6, r6
 8014ade:	1ac0      	subs	r0, r0, r3
 8014ae0:	6963      	ldr	r3, [r4, #20]
 8014ae2:	4637      	mov	r7, r6
 8014ae4:	4283      	cmp	r3, r0
 8014ae6:	dc04      	bgt.n	8014af2 <__swbuf_r+0x42>
 8014ae8:	4621      	mov	r1, r4
 8014aea:	4628      	mov	r0, r5
 8014aec:	f000 f92a 	bl	8014d44 <_fflush_r>
 8014af0:	bb30      	cbnz	r0, 8014b40 <__swbuf_r+0x90>
 8014af2:	68a3      	ldr	r3, [r4, #8]
 8014af4:	3001      	adds	r0, #1
 8014af6:	3b01      	subs	r3, #1
 8014af8:	60a3      	str	r3, [r4, #8]
 8014afa:	6823      	ldr	r3, [r4, #0]
 8014afc:	1c5a      	adds	r2, r3, #1
 8014afe:	6022      	str	r2, [r4, #0]
 8014b00:	701e      	strb	r6, [r3, #0]
 8014b02:	6963      	ldr	r3, [r4, #20]
 8014b04:	4283      	cmp	r3, r0
 8014b06:	d004      	beq.n	8014b12 <__swbuf_r+0x62>
 8014b08:	89a3      	ldrh	r3, [r4, #12]
 8014b0a:	07db      	lsls	r3, r3, #31
 8014b0c:	d506      	bpl.n	8014b1c <__swbuf_r+0x6c>
 8014b0e:	2e0a      	cmp	r6, #10
 8014b10:	d104      	bne.n	8014b1c <__swbuf_r+0x6c>
 8014b12:	4621      	mov	r1, r4
 8014b14:	4628      	mov	r0, r5
 8014b16:	f000 f915 	bl	8014d44 <_fflush_r>
 8014b1a:	b988      	cbnz	r0, 8014b40 <__swbuf_r+0x90>
 8014b1c:	4638      	mov	r0, r7
 8014b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b20:	4b0a      	ldr	r3, [pc, #40]	; (8014b4c <__swbuf_r+0x9c>)
 8014b22:	429c      	cmp	r4, r3
 8014b24:	d101      	bne.n	8014b2a <__swbuf_r+0x7a>
 8014b26:	68ac      	ldr	r4, [r5, #8]
 8014b28:	e7cf      	b.n	8014aca <__swbuf_r+0x1a>
 8014b2a:	4b09      	ldr	r3, [pc, #36]	; (8014b50 <__swbuf_r+0xa0>)
 8014b2c:	429c      	cmp	r4, r3
 8014b2e:	bf08      	it	eq
 8014b30:	68ec      	ldreq	r4, [r5, #12]
 8014b32:	e7ca      	b.n	8014aca <__swbuf_r+0x1a>
 8014b34:	4621      	mov	r1, r4
 8014b36:	4628      	mov	r0, r5
 8014b38:	f000 f80c 	bl	8014b54 <__swsetup_r>
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	d0cb      	beq.n	8014ad8 <__swbuf_r+0x28>
 8014b40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014b44:	e7ea      	b.n	8014b1c <__swbuf_r+0x6c>
 8014b46:	bf00      	nop
 8014b48:	080164f0 	.word	0x080164f0
 8014b4c:	08016510 	.word	0x08016510
 8014b50:	080164d0 	.word	0x080164d0

08014b54 <__swsetup_r>:
 8014b54:	4b32      	ldr	r3, [pc, #200]	; (8014c20 <__swsetup_r+0xcc>)
 8014b56:	b570      	push	{r4, r5, r6, lr}
 8014b58:	681d      	ldr	r5, [r3, #0]
 8014b5a:	4606      	mov	r6, r0
 8014b5c:	460c      	mov	r4, r1
 8014b5e:	b125      	cbz	r5, 8014b6a <__swsetup_r+0x16>
 8014b60:	69ab      	ldr	r3, [r5, #24]
 8014b62:	b913      	cbnz	r3, 8014b6a <__swsetup_r+0x16>
 8014b64:	4628      	mov	r0, r5
 8014b66:	f000 f981 	bl	8014e6c <__sinit>
 8014b6a:	4b2e      	ldr	r3, [pc, #184]	; (8014c24 <__swsetup_r+0xd0>)
 8014b6c:	429c      	cmp	r4, r3
 8014b6e:	d10f      	bne.n	8014b90 <__swsetup_r+0x3c>
 8014b70:	686c      	ldr	r4, [r5, #4]
 8014b72:	89a3      	ldrh	r3, [r4, #12]
 8014b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b78:	0719      	lsls	r1, r3, #28
 8014b7a:	d42c      	bmi.n	8014bd6 <__swsetup_r+0x82>
 8014b7c:	06dd      	lsls	r5, r3, #27
 8014b7e:	d411      	bmi.n	8014ba4 <__swsetup_r+0x50>
 8014b80:	2309      	movs	r3, #9
 8014b82:	6033      	str	r3, [r6, #0]
 8014b84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b8c:	81a3      	strh	r3, [r4, #12]
 8014b8e:	e03e      	b.n	8014c0e <__swsetup_r+0xba>
 8014b90:	4b25      	ldr	r3, [pc, #148]	; (8014c28 <__swsetup_r+0xd4>)
 8014b92:	429c      	cmp	r4, r3
 8014b94:	d101      	bne.n	8014b9a <__swsetup_r+0x46>
 8014b96:	68ac      	ldr	r4, [r5, #8]
 8014b98:	e7eb      	b.n	8014b72 <__swsetup_r+0x1e>
 8014b9a:	4b24      	ldr	r3, [pc, #144]	; (8014c2c <__swsetup_r+0xd8>)
 8014b9c:	429c      	cmp	r4, r3
 8014b9e:	bf08      	it	eq
 8014ba0:	68ec      	ldreq	r4, [r5, #12]
 8014ba2:	e7e6      	b.n	8014b72 <__swsetup_r+0x1e>
 8014ba4:	0758      	lsls	r0, r3, #29
 8014ba6:	d512      	bpl.n	8014bce <__swsetup_r+0x7a>
 8014ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014baa:	b141      	cbz	r1, 8014bbe <__swsetup_r+0x6a>
 8014bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bb0:	4299      	cmp	r1, r3
 8014bb2:	d002      	beq.n	8014bba <__swsetup_r+0x66>
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	f7fd fc3b 	bl	8012430 <_free_r>
 8014bba:	2300      	movs	r3, #0
 8014bbc:	6363      	str	r3, [r4, #52]	; 0x34
 8014bbe:	89a3      	ldrh	r3, [r4, #12]
 8014bc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014bc4:	81a3      	strh	r3, [r4, #12]
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	6063      	str	r3, [r4, #4]
 8014bca:	6923      	ldr	r3, [r4, #16]
 8014bcc:	6023      	str	r3, [r4, #0]
 8014bce:	89a3      	ldrh	r3, [r4, #12]
 8014bd0:	f043 0308 	orr.w	r3, r3, #8
 8014bd4:	81a3      	strh	r3, [r4, #12]
 8014bd6:	6923      	ldr	r3, [r4, #16]
 8014bd8:	b94b      	cbnz	r3, 8014bee <__swsetup_r+0x9a>
 8014bda:	89a3      	ldrh	r3, [r4, #12]
 8014bdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014be4:	d003      	beq.n	8014bee <__swsetup_r+0x9a>
 8014be6:	4621      	mov	r1, r4
 8014be8:	4630      	mov	r0, r6
 8014bea:	f000 fa05 	bl	8014ff8 <__smakebuf_r>
 8014bee:	89a0      	ldrh	r0, [r4, #12]
 8014bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bf4:	f010 0301 	ands.w	r3, r0, #1
 8014bf8:	d00a      	beq.n	8014c10 <__swsetup_r+0xbc>
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	60a3      	str	r3, [r4, #8]
 8014bfe:	6963      	ldr	r3, [r4, #20]
 8014c00:	425b      	negs	r3, r3
 8014c02:	61a3      	str	r3, [r4, #24]
 8014c04:	6923      	ldr	r3, [r4, #16]
 8014c06:	b943      	cbnz	r3, 8014c1a <__swsetup_r+0xc6>
 8014c08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c0c:	d1ba      	bne.n	8014b84 <__swsetup_r+0x30>
 8014c0e:	bd70      	pop	{r4, r5, r6, pc}
 8014c10:	0781      	lsls	r1, r0, #30
 8014c12:	bf58      	it	pl
 8014c14:	6963      	ldrpl	r3, [r4, #20]
 8014c16:	60a3      	str	r3, [r4, #8]
 8014c18:	e7f4      	b.n	8014c04 <__swsetup_r+0xb0>
 8014c1a:	2000      	movs	r0, #0
 8014c1c:	e7f7      	b.n	8014c0e <__swsetup_r+0xba>
 8014c1e:	bf00      	nop
 8014c20:	20000080 	.word	0x20000080
 8014c24:	080164f0 	.word	0x080164f0
 8014c28:	08016510 	.word	0x08016510
 8014c2c:	080164d0 	.word	0x080164d0

08014c30 <abort>:
 8014c30:	2006      	movs	r0, #6
 8014c32:	b508      	push	{r3, lr}
 8014c34:	f000 faa4 	bl	8015180 <raise>
 8014c38:	2001      	movs	r0, #1
 8014c3a:	f7f1 fd30 	bl	800669e <_exit>
	...

08014c40 <__sflush_r>:
 8014c40:	898a      	ldrh	r2, [r1, #12]
 8014c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c44:	4605      	mov	r5, r0
 8014c46:	0710      	lsls	r0, r2, #28
 8014c48:	460c      	mov	r4, r1
 8014c4a:	d457      	bmi.n	8014cfc <__sflush_r+0xbc>
 8014c4c:	684b      	ldr	r3, [r1, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	dc04      	bgt.n	8014c5c <__sflush_r+0x1c>
 8014c52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	dc01      	bgt.n	8014c5c <__sflush_r+0x1c>
 8014c58:	2000      	movs	r0, #0
 8014c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c5e:	2e00      	cmp	r6, #0
 8014c60:	d0fa      	beq.n	8014c58 <__sflush_r+0x18>
 8014c62:	2300      	movs	r3, #0
 8014c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014c68:	682f      	ldr	r7, [r5, #0]
 8014c6a:	602b      	str	r3, [r5, #0]
 8014c6c:	d032      	beq.n	8014cd4 <__sflush_r+0x94>
 8014c6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014c70:	89a3      	ldrh	r3, [r4, #12]
 8014c72:	075a      	lsls	r2, r3, #29
 8014c74:	d505      	bpl.n	8014c82 <__sflush_r+0x42>
 8014c76:	6863      	ldr	r3, [r4, #4]
 8014c78:	1ac0      	subs	r0, r0, r3
 8014c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c7c:	b10b      	cbz	r3, 8014c82 <__sflush_r+0x42>
 8014c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014c80:	1ac0      	subs	r0, r0, r3
 8014c82:	2300      	movs	r3, #0
 8014c84:	4602      	mov	r2, r0
 8014c86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c88:	4628      	mov	r0, r5
 8014c8a:	6a21      	ldr	r1, [r4, #32]
 8014c8c:	47b0      	blx	r6
 8014c8e:	1c43      	adds	r3, r0, #1
 8014c90:	89a3      	ldrh	r3, [r4, #12]
 8014c92:	d106      	bne.n	8014ca2 <__sflush_r+0x62>
 8014c94:	6829      	ldr	r1, [r5, #0]
 8014c96:	291d      	cmp	r1, #29
 8014c98:	d82c      	bhi.n	8014cf4 <__sflush_r+0xb4>
 8014c9a:	4a29      	ldr	r2, [pc, #164]	; (8014d40 <__sflush_r+0x100>)
 8014c9c:	40ca      	lsrs	r2, r1
 8014c9e:	07d6      	lsls	r6, r2, #31
 8014ca0:	d528      	bpl.n	8014cf4 <__sflush_r+0xb4>
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	6062      	str	r2, [r4, #4]
 8014ca6:	6922      	ldr	r2, [r4, #16]
 8014ca8:	04d9      	lsls	r1, r3, #19
 8014caa:	6022      	str	r2, [r4, #0]
 8014cac:	d504      	bpl.n	8014cb8 <__sflush_r+0x78>
 8014cae:	1c42      	adds	r2, r0, #1
 8014cb0:	d101      	bne.n	8014cb6 <__sflush_r+0x76>
 8014cb2:	682b      	ldr	r3, [r5, #0]
 8014cb4:	b903      	cbnz	r3, 8014cb8 <__sflush_r+0x78>
 8014cb6:	6560      	str	r0, [r4, #84]	; 0x54
 8014cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014cba:	602f      	str	r7, [r5, #0]
 8014cbc:	2900      	cmp	r1, #0
 8014cbe:	d0cb      	beq.n	8014c58 <__sflush_r+0x18>
 8014cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cc4:	4299      	cmp	r1, r3
 8014cc6:	d002      	beq.n	8014cce <__sflush_r+0x8e>
 8014cc8:	4628      	mov	r0, r5
 8014cca:	f7fd fbb1 	bl	8012430 <_free_r>
 8014cce:	2000      	movs	r0, #0
 8014cd0:	6360      	str	r0, [r4, #52]	; 0x34
 8014cd2:	e7c2      	b.n	8014c5a <__sflush_r+0x1a>
 8014cd4:	6a21      	ldr	r1, [r4, #32]
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	4628      	mov	r0, r5
 8014cda:	47b0      	blx	r6
 8014cdc:	1c41      	adds	r1, r0, #1
 8014cde:	d1c7      	bne.n	8014c70 <__sflush_r+0x30>
 8014ce0:	682b      	ldr	r3, [r5, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d0c4      	beq.n	8014c70 <__sflush_r+0x30>
 8014ce6:	2b1d      	cmp	r3, #29
 8014ce8:	d001      	beq.n	8014cee <__sflush_r+0xae>
 8014cea:	2b16      	cmp	r3, #22
 8014cec:	d101      	bne.n	8014cf2 <__sflush_r+0xb2>
 8014cee:	602f      	str	r7, [r5, #0]
 8014cf0:	e7b2      	b.n	8014c58 <__sflush_r+0x18>
 8014cf2:	89a3      	ldrh	r3, [r4, #12]
 8014cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cf8:	81a3      	strh	r3, [r4, #12]
 8014cfa:	e7ae      	b.n	8014c5a <__sflush_r+0x1a>
 8014cfc:	690f      	ldr	r7, [r1, #16]
 8014cfe:	2f00      	cmp	r7, #0
 8014d00:	d0aa      	beq.n	8014c58 <__sflush_r+0x18>
 8014d02:	0793      	lsls	r3, r2, #30
 8014d04:	bf18      	it	ne
 8014d06:	2300      	movne	r3, #0
 8014d08:	680e      	ldr	r6, [r1, #0]
 8014d0a:	bf08      	it	eq
 8014d0c:	694b      	ldreq	r3, [r1, #20]
 8014d0e:	1bf6      	subs	r6, r6, r7
 8014d10:	600f      	str	r7, [r1, #0]
 8014d12:	608b      	str	r3, [r1, #8]
 8014d14:	2e00      	cmp	r6, #0
 8014d16:	dd9f      	ble.n	8014c58 <__sflush_r+0x18>
 8014d18:	4633      	mov	r3, r6
 8014d1a:	463a      	mov	r2, r7
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	6a21      	ldr	r1, [r4, #32]
 8014d20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8014d24:	47e0      	blx	ip
 8014d26:	2800      	cmp	r0, #0
 8014d28:	dc06      	bgt.n	8014d38 <__sflush_r+0xf8>
 8014d2a:	89a3      	ldrh	r3, [r4, #12]
 8014d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d34:	81a3      	strh	r3, [r4, #12]
 8014d36:	e790      	b.n	8014c5a <__sflush_r+0x1a>
 8014d38:	4407      	add	r7, r0
 8014d3a:	1a36      	subs	r6, r6, r0
 8014d3c:	e7ea      	b.n	8014d14 <__sflush_r+0xd4>
 8014d3e:	bf00      	nop
 8014d40:	20400001 	.word	0x20400001

08014d44 <_fflush_r>:
 8014d44:	b538      	push	{r3, r4, r5, lr}
 8014d46:	690b      	ldr	r3, [r1, #16]
 8014d48:	4605      	mov	r5, r0
 8014d4a:	460c      	mov	r4, r1
 8014d4c:	b913      	cbnz	r3, 8014d54 <_fflush_r+0x10>
 8014d4e:	2500      	movs	r5, #0
 8014d50:	4628      	mov	r0, r5
 8014d52:	bd38      	pop	{r3, r4, r5, pc}
 8014d54:	b118      	cbz	r0, 8014d5e <_fflush_r+0x1a>
 8014d56:	6983      	ldr	r3, [r0, #24]
 8014d58:	b90b      	cbnz	r3, 8014d5e <_fflush_r+0x1a>
 8014d5a:	f000 f887 	bl	8014e6c <__sinit>
 8014d5e:	4b14      	ldr	r3, [pc, #80]	; (8014db0 <_fflush_r+0x6c>)
 8014d60:	429c      	cmp	r4, r3
 8014d62:	d11b      	bne.n	8014d9c <_fflush_r+0x58>
 8014d64:	686c      	ldr	r4, [r5, #4]
 8014d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d0ef      	beq.n	8014d4e <_fflush_r+0xa>
 8014d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014d70:	07d0      	lsls	r0, r2, #31
 8014d72:	d404      	bmi.n	8014d7e <_fflush_r+0x3a>
 8014d74:	0599      	lsls	r1, r3, #22
 8014d76:	d402      	bmi.n	8014d7e <_fflush_r+0x3a>
 8014d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d7a:	f000 f915 	bl	8014fa8 <__retarget_lock_acquire_recursive>
 8014d7e:	4628      	mov	r0, r5
 8014d80:	4621      	mov	r1, r4
 8014d82:	f7ff ff5d 	bl	8014c40 <__sflush_r>
 8014d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d88:	4605      	mov	r5, r0
 8014d8a:	07da      	lsls	r2, r3, #31
 8014d8c:	d4e0      	bmi.n	8014d50 <_fflush_r+0xc>
 8014d8e:	89a3      	ldrh	r3, [r4, #12]
 8014d90:	059b      	lsls	r3, r3, #22
 8014d92:	d4dd      	bmi.n	8014d50 <_fflush_r+0xc>
 8014d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d96:	f000 f908 	bl	8014faa <__retarget_lock_release_recursive>
 8014d9a:	e7d9      	b.n	8014d50 <_fflush_r+0xc>
 8014d9c:	4b05      	ldr	r3, [pc, #20]	; (8014db4 <_fflush_r+0x70>)
 8014d9e:	429c      	cmp	r4, r3
 8014da0:	d101      	bne.n	8014da6 <_fflush_r+0x62>
 8014da2:	68ac      	ldr	r4, [r5, #8]
 8014da4:	e7df      	b.n	8014d66 <_fflush_r+0x22>
 8014da6:	4b04      	ldr	r3, [pc, #16]	; (8014db8 <_fflush_r+0x74>)
 8014da8:	429c      	cmp	r4, r3
 8014daa:	bf08      	it	eq
 8014dac:	68ec      	ldreq	r4, [r5, #12]
 8014dae:	e7da      	b.n	8014d66 <_fflush_r+0x22>
 8014db0:	080164f0 	.word	0x080164f0
 8014db4:	08016510 	.word	0x08016510
 8014db8:	080164d0 	.word	0x080164d0

08014dbc <std>:
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	b510      	push	{r4, lr}
 8014dc0:	4604      	mov	r4, r0
 8014dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8014dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014dca:	6083      	str	r3, [r0, #8]
 8014dcc:	8181      	strh	r1, [r0, #12]
 8014dce:	6643      	str	r3, [r0, #100]	; 0x64
 8014dd0:	81c2      	strh	r2, [r0, #14]
 8014dd2:	6183      	str	r3, [r0, #24]
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	2208      	movs	r2, #8
 8014dd8:	305c      	adds	r0, #92	; 0x5c
 8014dda:	f7fd fb21 	bl	8012420 <memset>
 8014dde:	4b05      	ldr	r3, [pc, #20]	; (8014df4 <std+0x38>)
 8014de0:	6224      	str	r4, [r4, #32]
 8014de2:	6263      	str	r3, [r4, #36]	; 0x24
 8014de4:	4b04      	ldr	r3, [pc, #16]	; (8014df8 <std+0x3c>)
 8014de6:	62a3      	str	r3, [r4, #40]	; 0x28
 8014de8:	4b04      	ldr	r3, [pc, #16]	; (8014dfc <std+0x40>)
 8014dea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014dec:	4b04      	ldr	r3, [pc, #16]	; (8014e00 <std+0x44>)
 8014dee:	6323      	str	r3, [r4, #48]	; 0x30
 8014df0:	bd10      	pop	{r4, pc}
 8014df2:	bf00      	nop
 8014df4:	08015191 	.word	0x08015191
 8014df8:	080151b3 	.word	0x080151b3
 8014dfc:	080151eb 	.word	0x080151eb
 8014e00:	0801520f 	.word	0x0801520f

08014e04 <_cleanup_r>:
 8014e04:	4901      	ldr	r1, [pc, #4]	; (8014e0c <_cleanup_r+0x8>)
 8014e06:	f000 b8af 	b.w	8014f68 <_fwalk_reent>
 8014e0a:	bf00      	nop
 8014e0c:	08014d45 	.word	0x08014d45

08014e10 <__sfmoreglue>:
 8014e10:	2268      	movs	r2, #104	; 0x68
 8014e12:	b570      	push	{r4, r5, r6, lr}
 8014e14:	1e4d      	subs	r5, r1, #1
 8014e16:	4355      	muls	r5, r2
 8014e18:	460e      	mov	r6, r1
 8014e1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e1e:	f7fd fb6f 	bl	8012500 <_malloc_r>
 8014e22:	4604      	mov	r4, r0
 8014e24:	b140      	cbz	r0, 8014e38 <__sfmoreglue+0x28>
 8014e26:	2100      	movs	r1, #0
 8014e28:	e9c0 1600 	strd	r1, r6, [r0]
 8014e2c:	300c      	adds	r0, #12
 8014e2e:	60a0      	str	r0, [r4, #8]
 8014e30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e34:	f7fd faf4 	bl	8012420 <memset>
 8014e38:	4620      	mov	r0, r4
 8014e3a:	bd70      	pop	{r4, r5, r6, pc}

08014e3c <__sfp_lock_acquire>:
 8014e3c:	4801      	ldr	r0, [pc, #4]	; (8014e44 <__sfp_lock_acquire+0x8>)
 8014e3e:	f000 b8b3 	b.w	8014fa8 <__retarget_lock_acquire_recursive>
 8014e42:	bf00      	nop
 8014e44:	2000627d 	.word	0x2000627d

08014e48 <__sfp_lock_release>:
 8014e48:	4801      	ldr	r0, [pc, #4]	; (8014e50 <__sfp_lock_release+0x8>)
 8014e4a:	f000 b8ae 	b.w	8014faa <__retarget_lock_release_recursive>
 8014e4e:	bf00      	nop
 8014e50:	2000627d 	.word	0x2000627d

08014e54 <__sinit_lock_acquire>:
 8014e54:	4801      	ldr	r0, [pc, #4]	; (8014e5c <__sinit_lock_acquire+0x8>)
 8014e56:	f000 b8a7 	b.w	8014fa8 <__retarget_lock_acquire_recursive>
 8014e5a:	bf00      	nop
 8014e5c:	2000627e 	.word	0x2000627e

08014e60 <__sinit_lock_release>:
 8014e60:	4801      	ldr	r0, [pc, #4]	; (8014e68 <__sinit_lock_release+0x8>)
 8014e62:	f000 b8a2 	b.w	8014faa <__retarget_lock_release_recursive>
 8014e66:	bf00      	nop
 8014e68:	2000627e 	.word	0x2000627e

08014e6c <__sinit>:
 8014e6c:	b510      	push	{r4, lr}
 8014e6e:	4604      	mov	r4, r0
 8014e70:	f7ff fff0 	bl	8014e54 <__sinit_lock_acquire>
 8014e74:	69a3      	ldr	r3, [r4, #24]
 8014e76:	b11b      	cbz	r3, 8014e80 <__sinit+0x14>
 8014e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e7c:	f7ff bff0 	b.w	8014e60 <__sinit_lock_release>
 8014e80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014e84:	6523      	str	r3, [r4, #80]	; 0x50
 8014e86:	4b13      	ldr	r3, [pc, #76]	; (8014ed4 <__sinit+0x68>)
 8014e88:	4a13      	ldr	r2, [pc, #76]	; (8014ed8 <__sinit+0x6c>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8014e8e:	42a3      	cmp	r3, r4
 8014e90:	bf08      	it	eq
 8014e92:	2301      	moveq	r3, #1
 8014e94:	4620      	mov	r0, r4
 8014e96:	bf08      	it	eq
 8014e98:	61a3      	streq	r3, [r4, #24]
 8014e9a:	f000 f81f 	bl	8014edc <__sfp>
 8014e9e:	6060      	str	r0, [r4, #4]
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	f000 f81b 	bl	8014edc <__sfp>
 8014ea6:	60a0      	str	r0, [r4, #8]
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	f000 f817 	bl	8014edc <__sfp>
 8014eae:	2200      	movs	r2, #0
 8014eb0:	2104      	movs	r1, #4
 8014eb2:	60e0      	str	r0, [r4, #12]
 8014eb4:	6860      	ldr	r0, [r4, #4]
 8014eb6:	f7ff ff81 	bl	8014dbc <std>
 8014eba:	2201      	movs	r2, #1
 8014ebc:	2109      	movs	r1, #9
 8014ebe:	68a0      	ldr	r0, [r4, #8]
 8014ec0:	f7ff ff7c 	bl	8014dbc <std>
 8014ec4:	2202      	movs	r2, #2
 8014ec6:	2112      	movs	r1, #18
 8014ec8:	68e0      	ldr	r0, [r4, #12]
 8014eca:	f7ff ff77 	bl	8014dbc <std>
 8014ece:	2301      	movs	r3, #1
 8014ed0:	61a3      	str	r3, [r4, #24]
 8014ed2:	e7d1      	b.n	8014e78 <__sinit+0xc>
 8014ed4:	08016200 	.word	0x08016200
 8014ed8:	08014e05 	.word	0x08014e05

08014edc <__sfp>:
 8014edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ede:	4607      	mov	r7, r0
 8014ee0:	f7ff ffac 	bl	8014e3c <__sfp_lock_acquire>
 8014ee4:	4b1e      	ldr	r3, [pc, #120]	; (8014f60 <__sfp+0x84>)
 8014ee6:	681e      	ldr	r6, [r3, #0]
 8014ee8:	69b3      	ldr	r3, [r6, #24]
 8014eea:	b913      	cbnz	r3, 8014ef2 <__sfp+0x16>
 8014eec:	4630      	mov	r0, r6
 8014eee:	f7ff ffbd 	bl	8014e6c <__sinit>
 8014ef2:	3648      	adds	r6, #72	; 0x48
 8014ef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014ef8:	3b01      	subs	r3, #1
 8014efa:	d503      	bpl.n	8014f04 <__sfp+0x28>
 8014efc:	6833      	ldr	r3, [r6, #0]
 8014efe:	b30b      	cbz	r3, 8014f44 <__sfp+0x68>
 8014f00:	6836      	ldr	r6, [r6, #0]
 8014f02:	e7f7      	b.n	8014ef4 <__sfp+0x18>
 8014f04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014f08:	b9d5      	cbnz	r5, 8014f40 <__sfp+0x64>
 8014f0a:	4b16      	ldr	r3, [pc, #88]	; (8014f64 <__sfp+0x88>)
 8014f0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014f10:	60e3      	str	r3, [r4, #12]
 8014f12:	6665      	str	r5, [r4, #100]	; 0x64
 8014f14:	f000 f847 	bl	8014fa6 <__retarget_lock_init_recursive>
 8014f18:	f7ff ff96 	bl	8014e48 <__sfp_lock_release>
 8014f1c:	2208      	movs	r2, #8
 8014f1e:	4629      	mov	r1, r5
 8014f20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014f24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014f28:	6025      	str	r5, [r4, #0]
 8014f2a:	61a5      	str	r5, [r4, #24]
 8014f2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f30:	f7fd fa76 	bl	8012420 <memset>
 8014f34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f40:	3468      	adds	r4, #104	; 0x68
 8014f42:	e7d9      	b.n	8014ef8 <__sfp+0x1c>
 8014f44:	2104      	movs	r1, #4
 8014f46:	4638      	mov	r0, r7
 8014f48:	f7ff ff62 	bl	8014e10 <__sfmoreglue>
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	6030      	str	r0, [r6, #0]
 8014f50:	2800      	cmp	r0, #0
 8014f52:	d1d5      	bne.n	8014f00 <__sfp+0x24>
 8014f54:	f7ff ff78 	bl	8014e48 <__sfp_lock_release>
 8014f58:	230c      	movs	r3, #12
 8014f5a:	603b      	str	r3, [r7, #0]
 8014f5c:	e7ee      	b.n	8014f3c <__sfp+0x60>
 8014f5e:	bf00      	nop
 8014f60:	08016200 	.word	0x08016200
 8014f64:	ffff0001 	.word	0xffff0001

08014f68 <_fwalk_reent>:
 8014f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f6c:	4606      	mov	r6, r0
 8014f6e:	4688      	mov	r8, r1
 8014f70:	2700      	movs	r7, #0
 8014f72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014f76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f7a:	f1b9 0901 	subs.w	r9, r9, #1
 8014f7e:	d505      	bpl.n	8014f8c <_fwalk_reent+0x24>
 8014f80:	6824      	ldr	r4, [r4, #0]
 8014f82:	2c00      	cmp	r4, #0
 8014f84:	d1f7      	bne.n	8014f76 <_fwalk_reent+0xe>
 8014f86:	4638      	mov	r0, r7
 8014f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f8c:	89ab      	ldrh	r3, [r5, #12]
 8014f8e:	2b01      	cmp	r3, #1
 8014f90:	d907      	bls.n	8014fa2 <_fwalk_reent+0x3a>
 8014f92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f96:	3301      	adds	r3, #1
 8014f98:	d003      	beq.n	8014fa2 <_fwalk_reent+0x3a>
 8014f9a:	4629      	mov	r1, r5
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	47c0      	blx	r8
 8014fa0:	4307      	orrs	r7, r0
 8014fa2:	3568      	adds	r5, #104	; 0x68
 8014fa4:	e7e9      	b.n	8014f7a <_fwalk_reent+0x12>

08014fa6 <__retarget_lock_init_recursive>:
 8014fa6:	4770      	bx	lr

08014fa8 <__retarget_lock_acquire_recursive>:
 8014fa8:	4770      	bx	lr

08014faa <__retarget_lock_release_recursive>:
 8014faa:	4770      	bx	lr

08014fac <__swhatbuf_r>:
 8014fac:	b570      	push	{r4, r5, r6, lr}
 8014fae:	460e      	mov	r6, r1
 8014fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fb4:	4614      	mov	r4, r2
 8014fb6:	2900      	cmp	r1, #0
 8014fb8:	461d      	mov	r5, r3
 8014fba:	b096      	sub	sp, #88	; 0x58
 8014fbc:	da08      	bge.n	8014fd0 <__swhatbuf_r+0x24>
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014fc4:	602a      	str	r2, [r5, #0]
 8014fc6:	061a      	lsls	r2, r3, #24
 8014fc8:	d410      	bmi.n	8014fec <__swhatbuf_r+0x40>
 8014fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014fce:	e00e      	b.n	8014fee <__swhatbuf_r+0x42>
 8014fd0:	466a      	mov	r2, sp
 8014fd2:	f000 f94f 	bl	8015274 <_fstat_r>
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	dbf1      	blt.n	8014fbe <__swhatbuf_r+0x12>
 8014fda:	9a01      	ldr	r2, [sp, #4]
 8014fdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014fe0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014fe4:	425a      	negs	r2, r3
 8014fe6:	415a      	adcs	r2, r3
 8014fe8:	602a      	str	r2, [r5, #0]
 8014fea:	e7ee      	b.n	8014fca <__swhatbuf_r+0x1e>
 8014fec:	2340      	movs	r3, #64	; 0x40
 8014fee:	2000      	movs	r0, #0
 8014ff0:	6023      	str	r3, [r4, #0]
 8014ff2:	b016      	add	sp, #88	; 0x58
 8014ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08014ff8 <__smakebuf_r>:
 8014ff8:	898b      	ldrh	r3, [r1, #12]
 8014ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ffc:	079d      	lsls	r5, r3, #30
 8014ffe:	4606      	mov	r6, r0
 8015000:	460c      	mov	r4, r1
 8015002:	d507      	bpl.n	8015014 <__smakebuf_r+0x1c>
 8015004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015008:	6023      	str	r3, [r4, #0]
 801500a:	6123      	str	r3, [r4, #16]
 801500c:	2301      	movs	r3, #1
 801500e:	6163      	str	r3, [r4, #20]
 8015010:	b002      	add	sp, #8
 8015012:	bd70      	pop	{r4, r5, r6, pc}
 8015014:	466a      	mov	r2, sp
 8015016:	ab01      	add	r3, sp, #4
 8015018:	f7ff ffc8 	bl	8014fac <__swhatbuf_r>
 801501c:	9900      	ldr	r1, [sp, #0]
 801501e:	4605      	mov	r5, r0
 8015020:	4630      	mov	r0, r6
 8015022:	f7fd fa6d 	bl	8012500 <_malloc_r>
 8015026:	b948      	cbnz	r0, 801503c <__smakebuf_r+0x44>
 8015028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801502c:	059a      	lsls	r2, r3, #22
 801502e:	d4ef      	bmi.n	8015010 <__smakebuf_r+0x18>
 8015030:	f023 0303 	bic.w	r3, r3, #3
 8015034:	f043 0302 	orr.w	r3, r3, #2
 8015038:	81a3      	strh	r3, [r4, #12]
 801503a:	e7e3      	b.n	8015004 <__smakebuf_r+0xc>
 801503c:	4b0d      	ldr	r3, [pc, #52]	; (8015074 <__smakebuf_r+0x7c>)
 801503e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015040:	89a3      	ldrh	r3, [r4, #12]
 8015042:	6020      	str	r0, [r4, #0]
 8015044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015048:	81a3      	strh	r3, [r4, #12]
 801504a:	9b00      	ldr	r3, [sp, #0]
 801504c:	6120      	str	r0, [r4, #16]
 801504e:	6163      	str	r3, [r4, #20]
 8015050:	9b01      	ldr	r3, [sp, #4]
 8015052:	b15b      	cbz	r3, 801506c <__smakebuf_r+0x74>
 8015054:	4630      	mov	r0, r6
 8015056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801505a:	f000 f91d 	bl	8015298 <_isatty_r>
 801505e:	b128      	cbz	r0, 801506c <__smakebuf_r+0x74>
 8015060:	89a3      	ldrh	r3, [r4, #12]
 8015062:	f023 0303 	bic.w	r3, r3, #3
 8015066:	f043 0301 	orr.w	r3, r3, #1
 801506a:	81a3      	strh	r3, [r4, #12]
 801506c:	89a0      	ldrh	r0, [r4, #12]
 801506e:	4305      	orrs	r5, r0
 8015070:	81a5      	strh	r5, [r4, #12]
 8015072:	e7cd      	b.n	8015010 <__smakebuf_r+0x18>
 8015074:	08014e05 	.word	0x08014e05

08015078 <__ascii_mbtowc>:
 8015078:	b082      	sub	sp, #8
 801507a:	b901      	cbnz	r1, 801507e <__ascii_mbtowc+0x6>
 801507c:	a901      	add	r1, sp, #4
 801507e:	b142      	cbz	r2, 8015092 <__ascii_mbtowc+0x1a>
 8015080:	b14b      	cbz	r3, 8015096 <__ascii_mbtowc+0x1e>
 8015082:	7813      	ldrb	r3, [r2, #0]
 8015084:	600b      	str	r3, [r1, #0]
 8015086:	7812      	ldrb	r2, [r2, #0]
 8015088:	1e10      	subs	r0, r2, #0
 801508a:	bf18      	it	ne
 801508c:	2001      	movne	r0, #1
 801508e:	b002      	add	sp, #8
 8015090:	4770      	bx	lr
 8015092:	4610      	mov	r0, r2
 8015094:	e7fb      	b.n	801508e <__ascii_mbtowc+0x16>
 8015096:	f06f 0001 	mvn.w	r0, #1
 801509a:	e7f8      	b.n	801508e <__ascii_mbtowc+0x16>

0801509c <memmove>:
 801509c:	4288      	cmp	r0, r1
 801509e:	b510      	push	{r4, lr}
 80150a0:	eb01 0402 	add.w	r4, r1, r2
 80150a4:	d902      	bls.n	80150ac <memmove+0x10>
 80150a6:	4284      	cmp	r4, r0
 80150a8:	4623      	mov	r3, r4
 80150aa:	d807      	bhi.n	80150bc <memmove+0x20>
 80150ac:	1e43      	subs	r3, r0, #1
 80150ae:	42a1      	cmp	r1, r4
 80150b0:	d008      	beq.n	80150c4 <memmove+0x28>
 80150b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150ba:	e7f8      	b.n	80150ae <memmove+0x12>
 80150bc:	4601      	mov	r1, r0
 80150be:	4402      	add	r2, r0
 80150c0:	428a      	cmp	r2, r1
 80150c2:	d100      	bne.n	80150c6 <memmove+0x2a>
 80150c4:	bd10      	pop	{r4, pc}
 80150c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80150ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80150ce:	e7f7      	b.n	80150c0 <memmove+0x24>

080150d0 <_realloc_r>:
 80150d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150d4:	4680      	mov	r8, r0
 80150d6:	4614      	mov	r4, r2
 80150d8:	460e      	mov	r6, r1
 80150da:	b921      	cbnz	r1, 80150e6 <_realloc_r+0x16>
 80150dc:	4611      	mov	r1, r2
 80150de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150e2:	f7fd ba0d 	b.w	8012500 <_malloc_r>
 80150e6:	b92a      	cbnz	r2, 80150f4 <_realloc_r+0x24>
 80150e8:	f7fd f9a2 	bl	8012430 <_free_r>
 80150ec:	4625      	mov	r5, r4
 80150ee:	4628      	mov	r0, r5
 80150f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150f4:	f000 f8f2 	bl	80152dc <_malloc_usable_size_r>
 80150f8:	4284      	cmp	r4, r0
 80150fa:	4607      	mov	r7, r0
 80150fc:	d802      	bhi.n	8015104 <_realloc_r+0x34>
 80150fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015102:	d812      	bhi.n	801512a <_realloc_r+0x5a>
 8015104:	4621      	mov	r1, r4
 8015106:	4640      	mov	r0, r8
 8015108:	f7fd f9fa 	bl	8012500 <_malloc_r>
 801510c:	4605      	mov	r5, r0
 801510e:	2800      	cmp	r0, #0
 8015110:	d0ed      	beq.n	80150ee <_realloc_r+0x1e>
 8015112:	42bc      	cmp	r4, r7
 8015114:	4622      	mov	r2, r4
 8015116:	4631      	mov	r1, r6
 8015118:	bf28      	it	cs
 801511a:	463a      	movcs	r2, r7
 801511c:	f7fe fe50 	bl	8013dc0 <memcpy>
 8015120:	4631      	mov	r1, r6
 8015122:	4640      	mov	r0, r8
 8015124:	f7fd f984 	bl	8012430 <_free_r>
 8015128:	e7e1      	b.n	80150ee <_realloc_r+0x1e>
 801512a:	4635      	mov	r5, r6
 801512c:	e7df      	b.n	80150ee <_realloc_r+0x1e>

0801512e <_raise_r>:
 801512e:	291f      	cmp	r1, #31
 8015130:	b538      	push	{r3, r4, r5, lr}
 8015132:	4604      	mov	r4, r0
 8015134:	460d      	mov	r5, r1
 8015136:	d904      	bls.n	8015142 <_raise_r+0x14>
 8015138:	2316      	movs	r3, #22
 801513a:	6003      	str	r3, [r0, #0]
 801513c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015140:	bd38      	pop	{r3, r4, r5, pc}
 8015142:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015144:	b112      	cbz	r2, 801514c <_raise_r+0x1e>
 8015146:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801514a:	b94b      	cbnz	r3, 8015160 <_raise_r+0x32>
 801514c:	4620      	mov	r0, r4
 801514e:	f7ff fcad 	bl	8014aac <_getpid_r>
 8015152:	462a      	mov	r2, r5
 8015154:	4601      	mov	r1, r0
 8015156:	4620      	mov	r0, r4
 8015158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801515c:	f7ff bc94 	b.w	8014a88 <_kill_r>
 8015160:	2b01      	cmp	r3, #1
 8015162:	d00a      	beq.n	801517a <_raise_r+0x4c>
 8015164:	1c59      	adds	r1, r3, #1
 8015166:	d103      	bne.n	8015170 <_raise_r+0x42>
 8015168:	2316      	movs	r3, #22
 801516a:	6003      	str	r3, [r0, #0]
 801516c:	2001      	movs	r0, #1
 801516e:	e7e7      	b.n	8015140 <_raise_r+0x12>
 8015170:	2400      	movs	r4, #0
 8015172:	4628      	mov	r0, r5
 8015174:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015178:	4798      	blx	r3
 801517a:	2000      	movs	r0, #0
 801517c:	e7e0      	b.n	8015140 <_raise_r+0x12>
	...

08015180 <raise>:
 8015180:	4b02      	ldr	r3, [pc, #8]	; (801518c <raise+0xc>)
 8015182:	4601      	mov	r1, r0
 8015184:	6818      	ldr	r0, [r3, #0]
 8015186:	f7ff bfd2 	b.w	801512e <_raise_r>
 801518a:	bf00      	nop
 801518c:	20000080 	.word	0x20000080

08015190 <__sread>:
 8015190:	b510      	push	{r4, lr}
 8015192:	460c      	mov	r4, r1
 8015194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015198:	f000 f8a8 	bl	80152ec <_read_r>
 801519c:	2800      	cmp	r0, #0
 801519e:	bfab      	itete	ge
 80151a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80151a2:	89a3      	ldrhlt	r3, [r4, #12]
 80151a4:	181b      	addge	r3, r3, r0
 80151a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80151aa:	bfac      	ite	ge
 80151ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80151ae:	81a3      	strhlt	r3, [r4, #12]
 80151b0:	bd10      	pop	{r4, pc}

080151b2 <__swrite>:
 80151b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151b6:	461f      	mov	r7, r3
 80151b8:	898b      	ldrh	r3, [r1, #12]
 80151ba:	4605      	mov	r5, r0
 80151bc:	05db      	lsls	r3, r3, #23
 80151be:	460c      	mov	r4, r1
 80151c0:	4616      	mov	r6, r2
 80151c2:	d505      	bpl.n	80151d0 <__swrite+0x1e>
 80151c4:	2302      	movs	r3, #2
 80151c6:	2200      	movs	r2, #0
 80151c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151cc:	f000 f874 	bl	80152b8 <_lseek_r>
 80151d0:	89a3      	ldrh	r3, [r4, #12]
 80151d2:	4632      	mov	r2, r6
 80151d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80151d8:	81a3      	strh	r3, [r4, #12]
 80151da:	4628      	mov	r0, r5
 80151dc:	463b      	mov	r3, r7
 80151de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151e6:	f000 b823 	b.w	8015230 <_write_r>

080151ea <__sseek>:
 80151ea:	b510      	push	{r4, lr}
 80151ec:	460c      	mov	r4, r1
 80151ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151f2:	f000 f861 	bl	80152b8 <_lseek_r>
 80151f6:	1c43      	adds	r3, r0, #1
 80151f8:	89a3      	ldrh	r3, [r4, #12]
 80151fa:	bf15      	itete	ne
 80151fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80151fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015206:	81a3      	strheq	r3, [r4, #12]
 8015208:	bf18      	it	ne
 801520a:	81a3      	strhne	r3, [r4, #12]
 801520c:	bd10      	pop	{r4, pc}

0801520e <__sclose>:
 801520e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015212:	f000 b81f 	b.w	8015254 <_close_r>

08015216 <__ascii_wctomb>:
 8015216:	4603      	mov	r3, r0
 8015218:	4608      	mov	r0, r1
 801521a:	b141      	cbz	r1, 801522e <__ascii_wctomb+0x18>
 801521c:	2aff      	cmp	r2, #255	; 0xff
 801521e:	d904      	bls.n	801522a <__ascii_wctomb+0x14>
 8015220:	228a      	movs	r2, #138	; 0x8a
 8015222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015226:	601a      	str	r2, [r3, #0]
 8015228:	4770      	bx	lr
 801522a:	2001      	movs	r0, #1
 801522c:	700a      	strb	r2, [r1, #0]
 801522e:	4770      	bx	lr

08015230 <_write_r>:
 8015230:	b538      	push	{r3, r4, r5, lr}
 8015232:	4604      	mov	r4, r0
 8015234:	4608      	mov	r0, r1
 8015236:	4611      	mov	r1, r2
 8015238:	2200      	movs	r2, #0
 801523a:	4d05      	ldr	r5, [pc, #20]	; (8015250 <_write_r+0x20>)
 801523c:	602a      	str	r2, [r5, #0]
 801523e:	461a      	mov	r2, r3
 8015240:	f7f1 fa54 	bl	80066ec <_write>
 8015244:	1c43      	adds	r3, r0, #1
 8015246:	d102      	bne.n	801524e <_write_r+0x1e>
 8015248:	682b      	ldr	r3, [r5, #0]
 801524a:	b103      	cbz	r3, 801524e <_write_r+0x1e>
 801524c:	6023      	str	r3, [r4, #0]
 801524e:	bd38      	pop	{r3, r4, r5, pc}
 8015250:	20006278 	.word	0x20006278

08015254 <_close_r>:
 8015254:	b538      	push	{r3, r4, r5, lr}
 8015256:	2300      	movs	r3, #0
 8015258:	4d05      	ldr	r5, [pc, #20]	; (8015270 <_close_r+0x1c>)
 801525a:	4604      	mov	r4, r0
 801525c:	4608      	mov	r0, r1
 801525e:	602b      	str	r3, [r5, #0]
 8015260:	f7f1 fa60 	bl	8006724 <_close>
 8015264:	1c43      	adds	r3, r0, #1
 8015266:	d102      	bne.n	801526e <_close_r+0x1a>
 8015268:	682b      	ldr	r3, [r5, #0]
 801526a:	b103      	cbz	r3, 801526e <_close_r+0x1a>
 801526c:	6023      	str	r3, [r4, #0]
 801526e:	bd38      	pop	{r3, r4, r5, pc}
 8015270:	20006278 	.word	0x20006278

08015274 <_fstat_r>:
 8015274:	b538      	push	{r3, r4, r5, lr}
 8015276:	2300      	movs	r3, #0
 8015278:	4d06      	ldr	r5, [pc, #24]	; (8015294 <_fstat_r+0x20>)
 801527a:	4604      	mov	r4, r0
 801527c:	4608      	mov	r0, r1
 801527e:	4611      	mov	r1, r2
 8015280:	602b      	str	r3, [r5, #0]
 8015282:	f7f1 fa5a 	bl	800673a <_fstat>
 8015286:	1c43      	adds	r3, r0, #1
 8015288:	d102      	bne.n	8015290 <_fstat_r+0x1c>
 801528a:	682b      	ldr	r3, [r5, #0]
 801528c:	b103      	cbz	r3, 8015290 <_fstat_r+0x1c>
 801528e:	6023      	str	r3, [r4, #0]
 8015290:	bd38      	pop	{r3, r4, r5, pc}
 8015292:	bf00      	nop
 8015294:	20006278 	.word	0x20006278

08015298 <_isatty_r>:
 8015298:	b538      	push	{r3, r4, r5, lr}
 801529a:	2300      	movs	r3, #0
 801529c:	4d05      	ldr	r5, [pc, #20]	; (80152b4 <_isatty_r+0x1c>)
 801529e:	4604      	mov	r4, r0
 80152a0:	4608      	mov	r0, r1
 80152a2:	602b      	str	r3, [r5, #0]
 80152a4:	f7f1 fa58 	bl	8006758 <_isatty>
 80152a8:	1c43      	adds	r3, r0, #1
 80152aa:	d102      	bne.n	80152b2 <_isatty_r+0x1a>
 80152ac:	682b      	ldr	r3, [r5, #0]
 80152ae:	b103      	cbz	r3, 80152b2 <_isatty_r+0x1a>
 80152b0:	6023      	str	r3, [r4, #0]
 80152b2:	bd38      	pop	{r3, r4, r5, pc}
 80152b4:	20006278 	.word	0x20006278

080152b8 <_lseek_r>:
 80152b8:	b538      	push	{r3, r4, r5, lr}
 80152ba:	4604      	mov	r4, r0
 80152bc:	4608      	mov	r0, r1
 80152be:	4611      	mov	r1, r2
 80152c0:	2200      	movs	r2, #0
 80152c2:	4d05      	ldr	r5, [pc, #20]	; (80152d8 <_lseek_r+0x20>)
 80152c4:	602a      	str	r2, [r5, #0]
 80152c6:	461a      	mov	r2, r3
 80152c8:	f7f1 fa50 	bl	800676c <_lseek>
 80152cc:	1c43      	adds	r3, r0, #1
 80152ce:	d102      	bne.n	80152d6 <_lseek_r+0x1e>
 80152d0:	682b      	ldr	r3, [r5, #0]
 80152d2:	b103      	cbz	r3, 80152d6 <_lseek_r+0x1e>
 80152d4:	6023      	str	r3, [r4, #0]
 80152d6:	bd38      	pop	{r3, r4, r5, pc}
 80152d8:	20006278 	.word	0x20006278

080152dc <_malloc_usable_size_r>:
 80152dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80152e0:	1f18      	subs	r0, r3, #4
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	bfbc      	itt	lt
 80152e6:	580b      	ldrlt	r3, [r1, r0]
 80152e8:	18c0      	addlt	r0, r0, r3
 80152ea:	4770      	bx	lr

080152ec <_read_r>:
 80152ec:	b538      	push	{r3, r4, r5, lr}
 80152ee:	4604      	mov	r4, r0
 80152f0:	4608      	mov	r0, r1
 80152f2:	4611      	mov	r1, r2
 80152f4:	2200      	movs	r2, #0
 80152f6:	4d05      	ldr	r5, [pc, #20]	; (801530c <_read_r+0x20>)
 80152f8:	602a      	str	r2, [r5, #0]
 80152fa:	461a      	mov	r2, r3
 80152fc:	f7f1 f9d9 	bl	80066b2 <_read>
 8015300:	1c43      	adds	r3, r0, #1
 8015302:	d102      	bne.n	801530a <_read_r+0x1e>
 8015304:	682b      	ldr	r3, [r5, #0]
 8015306:	b103      	cbz	r3, 801530a <_read_r+0x1e>
 8015308:	6023      	str	r3, [r4, #0]
 801530a:	bd38      	pop	{r3, r4, r5, pc}
 801530c:	20006278 	.word	0x20006278

08015310 <_gettimeofday>:
 8015310:	2258      	movs	r2, #88	; 0x58
 8015312:	4b02      	ldr	r3, [pc, #8]	; (801531c <_gettimeofday+0xc>)
 8015314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015318:	601a      	str	r2, [r3, #0]
 801531a:	4770      	bx	lr
 801531c:	20006278 	.word	0x20006278

08015320 <_init>:
 8015320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015322:	bf00      	nop
 8015324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015326:	bc08      	pop	{r3}
 8015328:	469e      	mov	lr, r3
 801532a:	4770      	bx	lr

0801532c <_fini>:
 801532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801532e:	bf00      	nop
 8015330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015332:	bc08      	pop	{r3}
 8015334:	469e      	mov	lr, r3
 8015336:	4770      	bx	lr
