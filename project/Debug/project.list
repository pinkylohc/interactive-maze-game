
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b30  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f4  08013d18  08013d18  00023d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014f0c  08014f0c  00030248  2**0
                  CONTENTS
  4 .ARM          00000000  08014f0c  08014f0c  00030248  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014f0c  08014f0c  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014f0c  08014f0c  00024f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014f10  08014f10  00024f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08014f14  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006020  20000248  0801515c  00030248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006268  0801515c  00036268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226d2  00000000  00000000  00030271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056c5  00000000  00000000  00052943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c0  00000000  00000000  00058008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e70  00000000  00000000  0005a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008e91  00000000  00000000  0005bf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b5a9  00000000  00000000  00064dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1bde  00000000  00000000  00090372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141f50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c34  00000000  00000000  00141fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0014bbd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0014bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000248 	.word	0x20000248
 8000204:	00000000 	.word	0x00000000
 8000208:	08013d00 	.word	0x08013d00

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000024c 	.word	0x2000024c
 8000224:	08013d00 	.word	0x08013d00

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <playGuessingGame_Distance>:
    } else {
        return 0; // Incorrect guess
    }
}

void playGuessingGame_Distance(int randomNumber) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    //char textangle[] = "The random number is: ";
    char angleString[20];
    sprintf(angleString, "target distance: %d", randomNumber);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	490b      	ldr	r1, [pc, #44]	; (8001184 <playGuessingGame_Distance+0x3c>)
 8001158:	4618      	mov	r0, r3
 800115a:	f010 fc0f 	bl	801197c <siprintf>

    //LCD_DrawString(10, 180, textangle, RED);
    LCD_DrawString(10, 180, angleString, RED);
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001166:	21b4      	movs	r1, #180	; 0xb4
 8001168:	200a      	movs	r0, #10
 800116a:	f001 ff0d 	bl	8002f88 <LCD_DrawString>
    LCD_DrawString(10,200,  "current distance: ", RED);
 800116e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <playGuessingGame_Distance+0x40>)
 8001174:	21c8      	movs	r1, #200	; 0xc8
 8001176:	200a      	movs	r0, #10
 8001178:	f001 ff06 	bl	8002f88 <LCD_DrawString>
        } else {
            LCD_DrawChar(60,60, 'N', RED);	//lose

        }
    }*/
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08013d18 	.word	0x08013d18
 8001188:	08013d2c 	.word	0x08013d2c
 800118c:	00000000 	.word	0x00000000

08001190 <measureDistance>:

int measureDistance() {
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
    int distance = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]

        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	4845      	ldr	r0, [pc, #276]	; (80012b8 <measureDistance+0x128>)
 80011a2:	f007 fc98 	bl	8008ad6 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <measureDistance+0x12c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
        while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 80011ae:	bf00      	nop
 80011b0:	4b42      	ldr	r3, [pc, #264]	; (80012bc <measureDistance+0x12c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	2b09      	cmp	r3, #9
 80011b8:	d9fa      	bls.n	80011b0 <measureDistance+0x20>
        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c0:	483d      	ldr	r0, [pc, #244]	; (80012b8 <measureDistance+0x128>)
 80011c2:	f007 fc88 	bl	8008ad6 <HAL_GPIO_WritePin>

        pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80011c6:	f005 ffdb 	bl	8007180 <HAL_GetTick>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a3c      	ldr	r2, [pc, #240]	; (80012c0 <measureDistance+0x130>)
 80011ce:	6013      	str	r3, [r2, #0]
        // wait for the echo pin to go high
        while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80011d0:	bf00      	nop
 80011d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d6:	4838      	ldr	r0, [pc, #224]	; (80012b8 <measureDistance+0x128>)
 80011d8:	f007 fc66 	bl	8008aa8 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d108      	bne.n	80011f4 <measureDistance+0x64>
 80011e2:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <measureDistance+0x130>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f103 040a 	add.w	r4, r3, #10
 80011ea:	f005 ffc9 	bl	8007180 <HAL_GetTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	429c      	cmp	r4, r3
 80011f2:	d8ee      	bhi.n	80011d2 <measureDistance+0x42>
        Value1 = __HAL_TIM_GET_COUNTER (&htim2);
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <measureDistance+0x12c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <measureDistance+0x134>)
 80011fc:	6013      	str	r3, [r2, #0]

        pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80011fe:	f005 ffbf 	bl	8007180 <HAL_GetTick>
 8001202:	4603      	mov	r3, r0
 8001204:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <measureDistance+0x130>)
 8001206:	6013      	str	r3, [r2, #0]
        // wait for the echo pin to go low
        while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001208:	bf00      	nop
 800120a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120e:	482a      	ldr	r0, [pc, #168]	; (80012b8 <measureDistance+0x128>)
 8001210:	f007 fc4a 	bl	8008aa8 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d008      	beq.n	800122c <measureDistance+0x9c>
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <measureDistance+0x130>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001222:	f005 ffad 	bl	8007180 <HAL_GetTick>
 8001226:	4603      	mov	r3, r0
 8001228:	429c      	cmp	r4, r3
 800122a:	d8ee      	bhi.n	800120a <measureDistance+0x7a>
        Value2 = __HAL_TIM_GET_COUNTER (&htim2);
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <measureDistance+0x12c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <measureDistance+0x138>)
 8001234:	6013      	str	r3, [r2, #0]

        distance = (Value2-Value1)* 0.034/2;
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <measureDistance+0x138>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <measureDistance+0x134>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f93b 	bl	80004bc <__aeabi_ui2d>
 8001246:	a31a      	add	r3, pc, #104	; (adr r3, 80012b0 <measureDistance+0x120>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9b0 	bl	80005b0 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001260:	f7ff fad0 	bl	8000804 <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fc50 	bl	8000b10 <__aeabi_d2iz>
 8001270:	4603      	mov	r3, r0
 8001272:	60fb      	str	r3, [r7, #12]

        char DDistance[3];
        int rounded = distance;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	60bb      	str	r3, [r7, #8]

        sprintf(DDistance, "%d", rounded);
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	4913      	ldr	r1, [pc, #76]	; (80012cc <measureDistance+0x13c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f010 fb7c 	bl	801197c <siprintf>

        LCD_DrawString(150,200,  "   ", RED);
 8001284:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <measureDistance+0x140>)
 800128a:	21c8      	movs	r1, #200	; 0xc8
 800128c:	2096      	movs	r0, #150	; 0x96
 800128e:	f001 fe7b 	bl	8002f88 <LCD_DrawString>
        LCD_DrawString(150, 200, DDistance, RED);
 8001292:	1d3a      	adds	r2, r7, #4
 8001294:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001298:	21c8      	movs	r1, #200	; 0xc8
 800129a:	2096      	movs	r0, #150	; 0x96
 800129c:	f001 fe74 	bl	8002f88 <LCD_DrawString>

        HAL_Delay(100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f005 ff77 	bl	8007194 <HAL_Delay>

      return distance;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	b020c49c 	.word	0xb020c49c
 80012b4:	3fa16872 	.word	0x3fa16872
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	2000274c 	.word	0x2000274c
 80012c0:	20000264 	.word	0x20000264
 80012c4:	20000268 	.word	0x20000268
 80012c8:	2000026c 	.word	0x2000026c
 80012cc:	08013d40 	.word	0x08013d40
 80012d0:	08013d44 	.word	0x08013d44

080012d4 <game_Distance>:

bool game_Distance() {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	481b      	ldr	r0, [pc, #108]	; (8001350 <game_Distance+0x7c>)
 80012e2:	f007 fbf8 	bl	8008ad6 <HAL_GPIO_WritePin>

	 //srand(time(NULL)); // Set the seed for random number generation

    int randomNumber = rand() % 11 + 10;
 80012e6:	f010 fafb 	bl	80118e0 <rand>
 80012ea:	4601      	mov	r1, r0
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <game_Distance+0x80>)
 80012ee:	fb83 2301 	smull	r2, r3, r3, r1
 80012f2:	105a      	asrs	r2, r3, #1
 80012f4:	17cb      	asrs	r3, r1, #31
 80012f6:	1ad2      	subs	r2, r2, r3
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	1aca      	subs	r2, r1, r3
 8001304:	f102 030a 	add.w	r3, r2, #10
 8001308:	607b      	str	r3, [r7, #4]

    LCD_DrawString(100, 250, "give up", RED);
 800130a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <game_Distance+0x84>)
 8001310:	21fa      	movs	r1, #250	; 0xfa
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f001 fe38 	bl	8002f88 <LCD_DrawString>

    	//if (tim > 0) print_digit(tim);

    	int measuredDistance;

    	playGuessingGame_Distance(randomNumber);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff15 	bl	8001148 <playGuessingGame_Distance>

        measuredDistance = measureDistance();
 800131e:	f7ff ff37 	bl	8001190 <measureDistance>
 8001322:	6038      	str	r0, [r7, #0]

        if (measuredDistance == randomNumber) return true; // Exit the loop on correct measurement
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	d101      	bne.n	8001330 <game_Distance+0x5c>
 800132c:	2301      	movs	r3, #1
 800132e:	e00a      	b.n	8001346 <game_Distance+0x72>

        if(Check_touchkey_flag(95, 145, 250, 300)) return false;
 8001330:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001334:	22fa      	movs	r2, #250	; 0xfa
 8001336:	2191      	movs	r1, #145	; 0x91
 8001338:	205f      	movs	r0, #95	; 0x5f
 800133a:	f005 fe75 	bl	8007028 <Check_touchkey_flag>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0e9      	beq.n	8001318 <game_Distance+0x44>
 8001344:	2300      	movs	r3, #0

        //if(tim == 0) return false;
    }

    return false;
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010c00 	.word	0x40010c00
 8001354:	2e8ba2e9 	.word	0x2e8ba2e9
 8001358:	08013d48 	.word	0x08013d48

0800135c <shuffle>:
	    } while (sequence[i] == prev_value); // Repeat if the generated number is the same as the previous value
	    prev_value = sequence[i]; // Update the previous value
	}
}*/

void shuffle(uint8_t* array, int len) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
    for (int i = len - 1; i > 0; --i) {
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3b01      	subs	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e020      	b.n	80013b0 <shuffle+0x54>
        int j = rand() % (i + 1);
 800136e:	f010 fab7 	bl	80118e0 <rand>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	fb92 f1f3 	sdiv	r1, r2, r3
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	613b      	str	r3, [r7, #16]
        int temp = array[i];
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
        array[i] = array[j];
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	441a      	add	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	440b      	add	r3, r1
 800139a:	7812      	ldrb	r2, [r2, #0]
 800139c:	701a      	strb	r2, [r3, #0]
        array[j] = temp;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]
    for (int i = len - 1; i > 0; --i) {
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dcdb      	bgt.n	800136e <shuffle+0x12>
    }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <generate_sequence>:

void generate_sequence() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
    uint8_t numbers[] = {0, 1, 2}; // Array containing the numbers 0, 1, 2
 80013c6:	4a24      	ldr	r2, [pc, #144]	; (8001458 <generate_sequence+0x98>)
 80013c8:	463b      	mov	r3, r7
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	4611      	mov	r1, r2
 80013ce:	8019      	strh	r1, [r3, #0]
 80013d0:	3302      	adds	r3, #2
 80013d2:	0c12      	lsrs	r2, r2, #16
 80013d4:	701a      	strb	r2, [r3, #0]
    int numbers_length = sizeof(numbers) / sizeof(numbers[0]);
 80013d6:	2303      	movs	r3, #3
 80013d8:	607b      	str	r3, [r7, #4]

    // Shuffle the numbers array
    shuffle(numbers, numbers_length);
 80013da:	463b      	mov	r3, r7
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ffbc 	bl	800135c <shuffle>
    // Copy the shuffled numbers to the sequence array
    for (int i = 0; i < numbers_length; i++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	e00b      	b.n	8001402 <generate_sequence+0x42>
        sequence[i] = numbers[i];
 80013ea:	463a      	mov	r2, r7
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	7819      	ldrb	r1, [r3, #0]
 80013f2:	4a1a      	ldr	r2, [pc, #104]	; (800145c <generate_sequence+0x9c>)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	460a      	mov	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < numbers_length; i++) {
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbef      	blt.n	80013ea <generate_sequence+0x2a>
    }
    // Fill the remaining part of the sequence array with random numbers
    for (int i = numbers_length; i < length; i++) {
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	e014      	b.n	800143a <generate_sequence+0x7a>
        sequence[i] = rand() % 3;
 8001410:	f010 fa66 	bl	80118e0 <rand>
 8001414:	4602      	mov	r2, r0
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <generate_sequence+0xa0>)
 8001418:	fb83 3102 	smull	r3, r1, r3, r2
 800141c:	17d3      	asrs	r3, r2, #31
 800141e:	1ac9      	subs	r1, r1, r3
 8001420:	460b      	mov	r3, r1
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	440b      	add	r3, r1
 8001426:	1ad1      	subs	r1, r2, r3
 8001428:	b2c9      	uxtb	r1, r1
 800142a:	4a0c      	ldr	r2, [pc, #48]	; (800145c <generate_sequence+0x9c>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4413      	add	r3, r2
 8001430:	460a      	mov	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
    for (int i = numbers_length; i < length; i++) {
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	3301      	adds	r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <generate_sequence+0xa4>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4293      	cmp	r3, r2
 8001444:	dbe4      	blt.n	8001410 <generate_sequence+0x50>
    }
    shuffle(sequence, 5);
 8001446:	2105      	movs	r1, #5
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <generate_sequence+0x9c>)
 800144a:	f7ff ff87 	bl	800135c <shuffle>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	08013d50 	.word	0x08013d50
 800145c:	20000270 	.word	0x20000270
 8001460:	55555556 	.word	0x55555556
 8001464:	20000000 	.word	0x20000000

08001468 <show_sequence>:


void show_sequence() {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < length; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	e05a      	b.n	800152a <show_sequence+0xc2>
        if (sequence[i] == 0) {
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4a32      	ldr	r2, [pc, #200]	; (8001540 <show_sequence+0xd8>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d113      	bne.n	80014a6 <show_sequence+0x3e>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // red
 800147e:	2200      	movs	r2, #0
 8001480:	2120      	movs	r1, #32
 8001482:	4830      	ldr	r0, [pc, #192]	; (8001544 <show_sequence+0xdc>)
 8001484:	f007 fb27 	bl	8008ad6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	2101      	movs	r1, #1
 800148c:	482d      	ldr	r0, [pc, #180]	; (8001544 <show_sequence+0xdc>)
 800148e:	f007 fb22 	bl	8008ad6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	2102      	movs	r1, #2
 8001496:	482b      	ldr	r0, [pc, #172]	; (8001544 <show_sequence+0xdc>)
 8001498:	f007 fb1d 	bl	8008ad6 <HAL_GPIO_WritePin>
            HAL_Delay(400);
 800149c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014a0:	f005 fe78 	bl	8007194 <HAL_Delay>
 80014a4:	e02b      	b.n	80014fe <show_sequence+0x96>

        } else if (sequence[i] == 1) {
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a25      	ldr	r2, [pc, #148]	; (8001540 <show_sequence+0xd8>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d113      	bne.n	80014d8 <show_sequence+0x70>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // green
 80014b0:	2200      	movs	r2, #0
 80014b2:	2101      	movs	r1, #1
 80014b4:	4823      	ldr	r0, [pc, #140]	; (8001544 <show_sequence+0xdc>)
 80014b6:	f007 fb0e 	bl	8008ad6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2120      	movs	r1, #32
 80014be:	4821      	ldr	r0, [pc, #132]	; (8001544 <show_sequence+0xdc>)
 80014c0:	f007 fb09 	bl	8008ad6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2102      	movs	r1, #2
 80014c8:	481e      	ldr	r0, [pc, #120]	; (8001544 <show_sequence+0xdc>)
 80014ca:	f007 fb04 	bl	8008ad6 <HAL_GPIO_WritePin>
            HAL_Delay(400);
 80014ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014d2:	f005 fe5f 	bl	8007194 <HAL_Delay>
 80014d6:	e012      	b.n	80014fe <show_sequence+0x96>
        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // blue
 80014d8:	2200      	movs	r2, #0
 80014da:	2102      	movs	r1, #2
 80014dc:	4819      	ldr	r0, [pc, #100]	; (8001544 <show_sequence+0xdc>)
 80014de:	f007 fafa 	bl	8008ad6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2120      	movs	r1, #32
 80014e6:	4817      	ldr	r0, [pc, #92]	; (8001544 <show_sequence+0xdc>)
 80014e8:	f007 faf5 	bl	8008ad6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2101      	movs	r1, #1
 80014f0:	4814      	ldr	r0, [pc, #80]	; (8001544 <show_sequence+0xdc>)
 80014f2:	f007 faf0 	bl	8008ad6 <HAL_GPIO_WritePin>
            HAL_Delay(400);
 80014f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014fa:	f005 fe4b 	bl	8007194 <HAL_Delay>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // blue
 80014fe:	2201      	movs	r2, #1
 8001500:	2102      	movs	r1, #2
 8001502:	4810      	ldr	r0, [pc, #64]	; (8001544 <show_sequence+0xdc>)
 8001504:	f007 fae7 	bl	8008ad6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	2120      	movs	r1, #32
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <show_sequence+0xdc>)
 800150e:	f007 fae2 	bl	8008ad6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2101      	movs	r1, #1
 8001516:	480b      	ldr	r0, [pc, #44]	; (8001544 <show_sequence+0xdc>)
 8001518:	f007 fadd 	bl	8008ad6 <HAL_GPIO_WritePin>
        HAL_Delay(400);
 800151c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001520:	f005 fe38 	bl	8007194 <HAL_Delay>
    for (uint8_t i = 0; i < length; i++) {
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	3301      	adds	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <show_sequence+0xe0>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	429a      	cmp	r2, r3
 8001532:	d39f      	bcc.n	8001474 <show_sequence+0xc>
    }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000270 	.word	0x20000270
 8001544:	40010c00 	.word	0x40010c00
 8001548:	20000000 	.word	0x20000000

0800154c <user_input>:

void user_input() {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	uint8_t len = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	71fb      	strb	r3, [r7, #7]
    while (len < length) {
 8001556:	e055      	b.n	8001604 <user_input+0xb8>
         if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET) {
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	482f      	ldr	r0, [pc, #188]	; (8001618 <user_input+0xcc>)
 800155c:	f007 faa4 	bl	8008aa8 <HAL_GPIO_ReadPin>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d115      	bne.n	8001592 <user_input+0x46>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn on LED at PB5 //debug
 8001566:	2200      	movs	r2, #0
 8001568:	2120      	movs	r1, #32
 800156a:	482b      	ldr	r0, [pc, #172]	; (8001618 <user_input+0xcc>)
 800156c:	f007 fab3 	bl	8008ad6 <HAL_GPIO_WritePin>
             result[len] = 0;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4a2a      	ldr	r2, [pc, #168]	; (800161c <user_input+0xd0>)
 8001574:	2100      	movs	r1, #0
 8001576:	54d1      	strb	r1, [r2, r3]
             len++;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3301      	adds	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
             HAL_Delay(300); // Wait for 500ms
 800157e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001582:	f005 fe07 	bl	8007194 <HAL_Delay>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Turn off LED
 8001586:	2201      	movs	r2, #1
 8001588:	2120      	movs	r1, #32
 800158a:	4823      	ldr	r0, [pc, #140]	; (8001618 <user_input+0xcc>)
 800158c:	f007 faa3 	bl	8008ad6 <HAL_GPIO_WritePin>
 8001590:	e038      	b.n	8001604 <user_input+0xb8>

         }else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) {
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	4820      	ldr	r0, [pc, #128]	; (8001618 <user_input+0xcc>)
 8001596:	f007 fa87 	bl	8008aa8 <HAL_GPIO_ReadPin>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d115      	bne.n	80015cc <user_input+0x80>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn on LED at PB0  //debug
 80015a0:	2200      	movs	r2, #0
 80015a2:	2101      	movs	r1, #1
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <user_input+0xcc>)
 80015a6:	f007 fa96 	bl	8008ad6 <HAL_GPIO_WritePin>
             result[len] = 1;
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <user_input+0xd0>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	54d1      	strb	r1, [r2, r3]
             len++;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	3301      	adds	r3, #1
 80015b6:	71fb      	strb	r3, [r7, #7]
             HAL_Delay(300); // Wait for 500ms
 80015b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015bc:	f005 fdea 	bl	8007194 <HAL_Delay>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn off LED
 80015c0:	2201      	movs	r2, #1
 80015c2:	2101      	movs	r1, #1
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <user_input+0xcc>)
 80015c6:	f007 fa86 	bl	8008ad6 <HAL_GPIO_WritePin>
 80015ca:	e01b      	b.n	8001604 <user_input+0xb8>

         }else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
 80015cc:	2104      	movs	r1, #4
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <user_input+0xd4>)
 80015d0:	f007 fa6a 	bl	8008aa8 <HAL_GPIO_ReadPin>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d114      	bne.n	8001604 <user_input+0xb8>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Turn on LED at PB1	//debug
 80015da:	2200      	movs	r2, #0
 80015dc:	2102      	movs	r1, #2
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <user_input+0xcc>)
 80015e0:	f007 fa79 	bl	8008ad6 <HAL_GPIO_WritePin>
             result[len] = 2;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4a0d      	ldr	r2, [pc, #52]	; (800161c <user_input+0xd0>)
 80015e8:	2102      	movs	r1, #2
 80015ea:	54d1      	strb	r1, [r2, r3]
             len++;
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	3301      	adds	r3, #1
 80015f0:	71fb      	strb	r3, [r7, #7]
             HAL_Delay(300); // Wait for 500ms
 80015f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015f6:	f005 fdcd 	bl	8007194 <HAL_Delay>
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Turn off LED
 80015fa:	2201      	movs	r2, #1
 80015fc:	2102      	movs	r1, #2
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <user_input+0xcc>)
 8001600:	f007 fa69 	bl	8008ad6 <HAL_GPIO_WritePin>
    while (len < length) {
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <user_input+0xd8>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	79fa      	ldrb	r2, [r7, #7]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3a4      	bcc.n	8001558 <user_input+0xc>

         }
   }
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40010c00 	.word	0x40010c00
 800161c:	20000278 	.word	0x20000278
 8001620:	40010800 	.word	0x40010800
 8001624:	20000000 	.word	0x20000000

08001628 <check_match>:


bool check_match(){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
    for (int i=0; i<length; i++){
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	e00e      	b.n	8001652 <check_match+0x2a>
    	if (sequence[i] != result[i]) return false;
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <check_match+0x44>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <check_match+0x48>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	440b      	add	r3, r1
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <check_match+0x24>
 8001648:	2300      	movs	r3, #0
 800164a:	e009      	b.n	8001660 <check_match+0x38>
    for (int i=0; i<length; i++){
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3301      	adds	r3, #1
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <check_match+0x4c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4293      	cmp	r3, r2
 800165c:	dbea      	blt.n	8001634 <check_match+0xc>
    }
    return true;
 800165e:	2301      	movs	r3, #1

}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000270 	.word	0x20000270
 8001670:	20000278 	.word	0x20000278
 8001674:	20000000 	.word	0x20000000

08001678 <light_pattern>:

bool light_pattern(){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	generate_sequence();
 800167c:	f7ff fea0 	bl	80013c0 <generate_sequence>
	show_sequence();
 8001680:	f7ff fef2 	bl	8001468 <show_sequence>
	//LCD_DrawString(0, 120, "please enter your sequence", RED);
	user_input();
 8001684:	f7ff ff62 	bl	800154c <user_input>
	return check_match();
 8001688:	f7ff ffce 	bl	8001628 <check_match>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <update_display>:
uint8_t status = 0; //0 - win, 1 - lose
extern char answer[100];
extern UART_HandleTypeDef huart1;
char rxString[100] = {0};

void update_display(){
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	af02      	add	r7, sp, #8
	//if maze == 32-> special case (reach end without 3 keys)
	//if maze == 20??? (hearts region but max hearts)

	LCD_Clear (width_margin+current_y*block_size, height_margin+current_x*block_size, block_size, block_size, WHITE);	//clear the previous (current xy)
 800169a:	4b40      	ldr	r3, [pc, #256]	; (800179c <update_display+0x108>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <update_display+0x10c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	493f      	ldr	r1, [pc, #252]	; (80017a4 <update_display+0x110>)
 80016a8:	7809      	ldrb	r1, [r1, #0]
 80016aa:	b289      	uxth	r1, r1
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	b298      	uxth	r0, r3
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <update_display+0x114>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <update_display+0x118>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4938      	ldr	r1, [pc, #224]	; (80017a4 <update_display+0x110>)
 80016c4:	7809      	ldrb	r1, [r1, #0]
 80016c6:	b289      	uxth	r1, r1
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	b299      	uxth	r1, r3
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <update_display+0x110>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <update_display+0x110>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80016e2:	9400      	str	r4, [sp, #0]
 80016e4:	f001 fbdf 	bl	8002ea6 <LCD_Clear>
	LCD_Drawelement(height_margin+next_x*block_size, width_margin+next_y*block_size, start, RED);
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <update_display+0x114>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <update_display+0x11c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	492b      	ldr	r1, [pc, #172]	; (80017a4 <update_display+0x110>)
 80016f6:	7809      	ldrb	r1, [r1, #0]
 80016f8:	b289      	uxth	r1, r1
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b298      	uxth	r0, r3
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <update_display+0x108>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <update_display+0x120>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	4924      	ldr	r1, [pc, #144]	; (80017a4 <update_display+0x110>)
 8001712:	7809      	ldrb	r1, [r1, #0]
 8001714:	b289      	uxth	r1, r1
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	b29b      	uxth	r3, r3
 800171c:	4413      	add	r3, r2
 800171e:	b299      	uxth	r1, r3
 8001720:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001724:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <update_display+0x124>)
 8001726:	f001 ff69 	bl	80035fc <LCD_Drawelement>
	if (boo_flag == 1){
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <update_display+0x128>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d12f      	bne.n	8001792 <update_display+0xfe>
		boo_flag = 0;
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <update_display+0x128>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
		LCD_Drawelement(height_margin+current_x*block_size, width_margin+current_y*block_size, endpt, 0xFD20);
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <update_display+0x114>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <update_display+0x118>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	4917      	ldr	r1, [pc, #92]	; (80017a4 <update_display+0x110>)
 8001746:	7809      	ldrb	r1, [r1, #0]
 8001748:	b289      	uxth	r1, r1
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	4413      	add	r3, r2
 8001752:	b298      	uxth	r0, r3
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <update_display+0x108>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <update_display+0x10c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4910      	ldr	r1, [pc, #64]	; (80017a4 <update_display+0x110>)
 8001762:	7809      	ldrb	r1, [r1, #0]
 8001764:	b289      	uxth	r1, r1
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	b29b      	uxth	r3, r3
 800176c:	4413      	add	r3, r2
 800176e:	b299      	uxth	r1, r3
 8001770:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <update_display+0x12c>)
 8001776:	f001 ff41 	bl	80035fc <LCD_Drawelement>
		maze[current_x][current_y] = 3;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <update_display+0x130>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <update_display+0x118>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <update_display+0x10c>)
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	4413      	add	r3, r2
 800178e:	2203      	movs	r2, #3
 8001790:	701a      	strb	r2, [r3, #0]
	}

}
 8001792:	bf00      	nop
 8001794:	3704      	adds	r7, #4
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	bf00      	nop
 800179c:	20002888 	.word	0x20002888
 80017a0:	20002873 	.word	0x20002873
 80017a4:	08014864 	.word	0x08014864
 80017a8:	20002889 	.word	0x20002889
 80017ac:	20002872 	.word	0x20002872
 80017b0:	20002874 	.word	0x20002874
 80017b4:	20002875 	.word	0x20002875
 80017b8:	08014928 	.word	0x08014928
 80017bc:	2000027d 	.word	0x2000027d
 80017c0:	08014948 	.word	0x08014948
 80017c4:	20002868 	.word	0x20002868

080017c8 <handle_lose>:

void handle_lose(){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af02      	add	r7, sp, #8
	// end page
	status = 1;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <handle_lose+0x58>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 80017d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017de:	22f0      	movs	r2, #240	; 0xf0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2000      	movs	r0, #0
 80017e4:	f001 fb5f 	bl	8002ea6 <LCD_Clear>
	LCD_DrawString(100, 100, "you lose!", BLUE);
 80017e8:	231f      	movs	r3, #31
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <handle_lose+0x5c>)
 80017ec:	2164      	movs	r1, #100	; 0x64
 80017ee:	2064      	movs	r0, #100	; 0x64
 80017f0:	f001 fbca 	bl	8002f88 <LCD_DrawString>
	game_record();
 80017f4:	f003 fe50 	bl	8005498 <game_record>
	LCD_DrawString(100, 200, "next round", RED);
 80017f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017fc:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <handle_lose+0x60>)
 80017fe:	21c8      	movs	r1, #200	; 0xc8
 8001800:	2064      	movs	r0, #100	; 0x64
 8001802:	f001 fbc1 	bl	8002f88 <LCD_DrawString>
	while(restart_flag == 0) Check_touchkey_start();
 8001806:	e001      	b.n	800180c <handle_lose+0x44>
 8001808:	f005 fbea 	bl	8006fe0 <Check_touchkey_start>
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <handle_lose+0x64>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f9      	beq.n	8001808 <handle_lose+0x40>
	restart();
 8001814:	f002 fea8 	bl	8004568 <restart>
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000027e 	.word	0x2000027e
 8001824:	08013d54 	.word	0x08013d54
 8001828:	08013d60 	.word	0x08013d60
 800182c:	20002878 	.word	0x20002878

08001830 <handle_empty>:

void handle_empty(){	// empty - only need to change the display
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	maze[next_x][next_y] = 2;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <handle_empty+0x4c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <handle_empty+0x50>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <handle_empty+0x54>)
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	4413      	add	r3, r2
 8001848:	2202      	movs	r2, #2
 800184a:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <handle_empty+0x4c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <handle_empty+0x58>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a0c      	ldr	r2, [pc, #48]	; (800188c <handle_empty+0x5c>)
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	4413      	add	r3, r2
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
	update_display(); 	//update maze display
 8001864:	f7ff ff16 	bl	8001694 <update_display>
	current_x = next_x;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <handle_empty+0x50>)
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <handle_empty+0x58>)
 800186e:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <handle_empty+0x54>)
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <handle_empty+0x5c>)
 8001876:	701a      	strb	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20002868 	.word	0x20002868
 8001880:	20002874 	.word	0x20002874
 8001884:	20002875 	.word	0x20002875
 8001888:	20002872 	.word	0x20002872
 800188c:	20002873 	.word	0x20002873

08001890 <handle_endpt>:


void handle_endpt(){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af02      	add	r7, sp, #8
	if(keys == 3){
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <handle_endpt+0xd8>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d13c      	bne.n	8001918 <handle_endpt+0x88>
		//handle end condition
		// end page
		maze[next_x][next_y] = 2;
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <handle_endpt+0xdc>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <handle_endpt+0xe0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a31      	ldr	r2, [pc, #196]	; (8001974 <handle_endpt+0xe4>)
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
	    maze[current_x][current_y] = 0;
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <handle_endpt+0xdc>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <handle_endpt+0xe8>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a2d      	ldr	r2, [pc, #180]	; (800197c <handle_endpt+0xec>)
 80018c6:	7812      	ldrb	r2, [r2, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
		update_display();
 80018ce:	f7ff fee1 	bl	8001694 <update_display>

		LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 80018d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018dc:	22f0      	movs	r2, #240	; 0xf0
 80018de:	2100      	movs	r1, #0
 80018e0:	2000      	movs	r0, #0
 80018e2:	f001 fae0 	bl	8002ea6 <LCD_Clear>
		LCD_DrawString(100, 100, "you win!", BLUE);
 80018e6:	231f      	movs	r3, #31
 80018e8:	4a25      	ldr	r2, [pc, #148]	; (8001980 <handle_endpt+0xf0>)
 80018ea:	2164      	movs	r1, #100	; 0x64
 80018ec:	2064      	movs	r0, #100	; 0x64
 80018ee:	f001 fb4b 	bl	8002f88 <LCD_DrawString>
		game_record();
 80018f2:	f003 fdd1 	bl	8005498 <game_record>
		LCD_DrawString(100, 200, "next round", RED);
 80018f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018fa:	4a22      	ldr	r2, [pc, #136]	; (8001984 <handle_endpt+0xf4>)
 80018fc:	21c8      	movs	r1, #200	; 0xc8
 80018fe:	2064      	movs	r0, #100	; 0x64
 8001900:	f001 fb42 	bl	8002f88 <LCD_DrawString>
		while(restart_flag == 0) Check_touchkey_start();
 8001904:	e001      	b.n	800190a <handle_endpt+0x7a>
 8001906:	f005 fb6b 	bl	8006fe0 <Check_touchkey_start>
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <handle_endpt+0xf8>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f9      	beq.n	8001906 <handle_endpt+0x76>
		restart();
 8001912:	f002 fe29 	bl	8004568 <restart>
		current_x = next_x;
		current_y = next_y;
		boo_flag = 1;
	}

}
 8001916:	e024      	b.n	8001962 <handle_endpt+0xd2>
		maze[next_x][next_y] = 2;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <handle_endpt+0xdc>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <handle_endpt+0xe0>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <handle_endpt+0xe4>)
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	4413      	add	r3, r2
 800192c:	2202      	movs	r2, #2
 800192e:	701a      	strb	r2, [r3, #0]
		maze[current_x][current_y] = 0;
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <handle_endpt+0xdc>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <handle_endpt+0xe8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a0f      	ldr	r2, [pc, #60]	; (800197c <handle_endpt+0xec>)
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	4413      	add	r3, r2
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
		update_display();
 8001948:	f7ff fea4 	bl	8001694 <update_display>
		current_x = next_x;
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <handle_endpt+0xe0>)
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <handle_endpt+0xe8>)
 8001952:	701a      	strb	r2, [r3, #0]
		current_y = next_y;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <handle_endpt+0xe4>)
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <handle_endpt+0xec>)
 800195a:	701a      	strb	r2, [r3, #0]
		boo_flag = 1;
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <handle_endpt+0xfc>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20002877 	.word	0x20002877
 800196c:	20002868 	.word	0x20002868
 8001970:	20002874 	.word	0x20002874
 8001974:	20002875 	.word	0x20002875
 8001978:	20002872 	.word	0x20002872
 800197c:	20002873 	.word	0x20002873
 8001980:	08013d6c 	.word	0x08013d6c
 8001984:	08013d60 	.word	0x08013d60
 8001988:	20002878 	.word	0x20002878
 800198c:	2000027d 	.word	0x2000027d

08001990 <handle_key>:


void handle_key(){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	LCD_Drawkey(10, 15+keys*32); //display the key
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <handle_key+0x70>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	015b      	lsls	r3, r3, #5
 800199c:	b29b      	uxth	r3, r3
 800199e:	330f      	adds	r3, #15
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	200a      	movs	r0, #10
 80019a6:	f001 fe93 	bl	80036d0 <LCD_Drawkey>
	keys++;
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <handle_key+0x70>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <handle_key+0x70>)
 80019b4:	701a      	strb	r2, [r3, #0]
	//LCD_DrawBox(130+(hearts-1)*32, 10, WHITE, 32);
	//hearts--;
	maze[next_x][next_y] = 2;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <handle_key+0x74>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <handle_key+0x78>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <handle_key+0x7c>)
 80019c6:	7812      	ldrb	r2, [r2, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	2202      	movs	r2, #2
 80019cc:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <handle_key+0x74>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <handle_key+0x80>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <handle_key+0x84>)
 80019de:	7812      	ldrb	r2, [r2, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	update_display();
 80019e6:	f7ff fe55 	bl	8001694 <update_display>
	current_x = next_x;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <handle_key+0x78>)
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <handle_key+0x80>)
 80019f0:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <handle_key+0x7c>)
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <handle_key+0x84>)
 80019f8:	701a      	strb	r2, [r3, #0]


}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20002877 	.word	0x20002877
 8001a04:	20002868 	.word	0x20002868
 8001a08:	20002874 	.word	0x20002874
 8001a0c:	20002875 	.word	0x20002875
 8001a10:	20002872 	.word	0x20002872
 8001a14:	20002873 	.word	0x20002873

08001a18 <handle_game1>:


void handle_game1(){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <handle_game1+0x100>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <handle_game1+0x104>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a3c      	ldr	r2, [pc, #240]	; (8001b20 <handle_game1+0x108>)
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	2202      	movs	r2, #2
 8001a34:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <handle_game1+0x100>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <handle_game1+0x10c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <handle_game1+0x110>)
 8001a46:	7812      	ldrb	r2, [r2, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 8001a4e:	f7ff fe21 	bl	8001694 <update_display>
	uint8_t start_flag = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	71fb      	strb	r3, [r7, #7]
	//char str[10];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a60:	22f0      	movs	r2, #240	; 0xf0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2000      	movs	r0, #0
 8001a66:	f001 fa1e 	bl	8002ea6 <LCD_Clear>
	LCD_DrawString(0, 0, "light pattern game, please follow the pattern on the LED under the board and tap the corresponding color buttons", BLUE);
 8001a6a:	231f      	movs	r3, #31
 8001a6c:	4a2f      	ldr	r2, [pc, #188]	; (8001b2c <handle_game1+0x114>)
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f001 fa89 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 8001a76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a7a:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <handle_game1+0x118>)
 8001a7c:	2132      	movs	r1, #50	; 0x32
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f001 fa82 	bl	8002f88 <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 8001a84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <handle_game1+0x11c>)
 8001a8a:	21c8      	movs	r1, #200	; 0xc8
 8001a8c:	2064      	movs	r0, #100	; 0x64
 8001a8e:	f001 fa7b 	bl	8002f88 <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8001a92:	e007      	b.n	8001aa4 <handle_game1+0x8c>
 8001a94:	23e6      	movs	r3, #230	; 0xe6
 8001a96:	22c8      	movs	r2, #200	; 0xc8
 8001a98:	2191      	movs	r1, #145	; 0x91
 8001a9a:	205f      	movs	r0, #95	; 0x5f
 8001a9c:	f005 fac4 	bl	8007028 <Check_touchkey_flag>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f4      	beq.n	8001a94 <handle_game1+0x7c>
	LCD_DrawString(100, 200, "     ", WHITE);
 8001aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aae:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <handle_game1+0x120>)
 8001ab0:	21c8      	movs	r1, #200	; 0xc8
 8001ab2:	2064      	movs	r0, #100	; 0x64
 8001ab4:	f001 fa68 	bl	8002f88 <LCD_DrawString>

	bool game1 = light_pattern();	//check timer?
 8001ab8:	f7ff fdde 	bl	8001678 <light_pattern>
 8001abc:	4603      	mov	r3, r0
 8001abe:	71bb      	strb	r3, [r7, #6]
	if (game1 == false){
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
 8001ac2:	f083 0301 	eor.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <handle_game1+0xc8>
		hearts--;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <handle_game1+0x124>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <handle_game1+0x124>)
 8001ad6:	701a      	strb	r2, [r3, #0]
		play_audio("LOSE.WAV");
 8001ad8:	4819      	ldr	r0, [pc, #100]	; (8001b40 <handle_game1+0x128>)
 8001ada:	f004 fb6b 	bl	80061b4 <play_audio>
 8001ade:	e002      	b.n	8001ae6 <handle_game1+0xce>
	}else play_audio("WIN.WAV");
 8001ae0:	4818      	ldr	r0, [pc, #96]	; (8001b44 <handle_game1+0x12c>)
 8001ae2:	f004 fb67 	bl	80061b4 <play_audio>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001af0:	22f0      	movs	r2, #240	; 0xf0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2000      	movs	r0, #0
 8001af6:	f001 f9d6 	bl	8002ea6 <LCD_Clear>
	LCD_Display();
 8001afa:	f002 fe2f 	bl	800475c <LCD_Display>
	current_x = next_x;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <handle_game1+0x104>)
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <handle_game1+0x10c>)
 8001b04:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <handle_game1+0x108>)
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <handle_game1+0x110>)
 8001b0c:	701a      	strb	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20002868 	.word	0x20002868
 8001b1c:	20002874 	.word	0x20002874
 8001b20:	20002875 	.word	0x20002875
 8001b24:	20002872 	.word	0x20002872
 8001b28:	20002873 	.word	0x20002873
 8001b2c:	08013d78 	.word	0x08013d78
 8001b30:	08013dec 	.word	0x08013dec
 8001b34:	08013e28 	.word	0x08013e28
 8001b38:	08013e30 	.word	0x08013e30
 8001b3c:	20002876 	.word	0x20002876
 8001b40:	08013e38 	.word	0x08013e38
 8001b44:	08013e44 	.word	0x08013e44

08001b48 <handle_game2>:


void handle_game2(){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
		LCD_Display();
		current_x = next_x;
		current_y = next_y;*/


		maze[next_x][next_y] = 2;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <handle_game2+0x4c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <handle_game2+0x50>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <handle_game2+0x54>)
 8001b5c:	7812      	ldrb	r2, [r2, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	2202      	movs	r2, #2
 8001b62:	701a      	strb	r2, [r3, #0]
				maze[current_x][current_y] = 0;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <handle_game2+0x4c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <handle_game2+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <handle_game2+0x5c>)
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]

				//update maze display
				update_display();
 8001b7c:	f7ff fd8a 	bl	8001694 <update_display>

				current_x = next_x;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <handle_game2+0x50>)
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <handle_game2+0x58>)
 8001b86:	701a      	strb	r2, [r3, #0]
				current_y = next_y;
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <handle_game2+0x54>)
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <handle_game2+0x5c>)
 8001b8e:	701a      	strb	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20002868 	.word	0x20002868
 8001b98:	20002874 	.word	0x20002874
 8001b9c:	20002875 	.word	0x20002875
 8001ba0:	20002872 	.word	0x20002872
 8001ba4:	20002873 	.word	0x20002873

08001ba8 <handle_game3>:


void handle_game3(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 8001bae:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <handle_game3+0x100>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <handle_game3+0x104>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3c      	ldr	r2, [pc, #240]	; (8001cb0 <handle_game3+0x108>)
 8001bbe:	7812      	ldrb	r2, [r2, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	701a      	strb	r2, [r3, #0]
		maze[current_x][current_y] = 0;
 8001bc6:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <handle_game3+0x100>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <handle_game3+0x10c>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <handle_game3+0x110>)
 8001bd6:	7812      	ldrb	r2, [r2, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
		update_display(); //update maze display
 8001bde:	f7ff fd59 	bl	8001694 <update_display>
		uint8_t start_flag = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	71fb      	strb	r3, [r7, #7]

		//print instruction
		LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bf0:	22f0      	movs	r2, #240	; 0xf0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f001 f956 	bl	8002ea6 <LCD_Clear>
		LCD_DrawString(0, 0, "distance game! try to put things in the distance that shown on the screen", BLUE);
 8001bfa:	231f      	movs	r3, #31
 8001bfc:	4a2f      	ldr	r2, [pc, #188]	; (8001cbc <handle_game3+0x114>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2000      	movs	r0, #0
 8001c02:	f001 f9c1 	bl	8002f88 <LCD_DrawString>
		LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 8001c06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <handle_game3+0x118>)
 8001c0c:	2132      	movs	r1, #50	; 0x32
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f001 f9ba 	bl	8002f88 <LCD_DrawString>

		LCD_DrawString(100, 200, "start", RED);
 8001c14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c18:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <handle_game3+0x11c>)
 8001c1a:	21c8      	movs	r1, #200	; 0xc8
 8001c1c:	2064      	movs	r0, #100	; 0x64
 8001c1e:	f001 f9b3 	bl	8002f88 <LCD_DrawString>
		while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8001c22:	e007      	b.n	8001c34 <handle_game3+0x8c>
 8001c24:	23e6      	movs	r3, #230	; 0xe6
 8001c26:	22c8      	movs	r2, #200	; 0xc8
 8001c28:	2191      	movs	r1, #145	; 0x91
 8001c2a:	205f      	movs	r0, #95	; 0x5f
 8001c2c:	f005 f9fc 	bl	8007028 <Check_touchkey_flag>
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f4      	beq.n	8001c24 <handle_game3+0x7c>
		LCD_DrawString(100, 200, "     ", WHITE);
 8001c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <handle_game3+0x120>)
 8001c40:	21c8      	movs	r1, #200	; 0xc8
 8001c42:	2064      	movs	r0, #100	; 0x64
 8001c44:	f001 f9a0 	bl	8002f88 <LCD_DrawString>

		//timer = 10;

		bool distance = game_Distance();	//check timer?
 8001c48:	f7ff fb44 	bl	80012d4 <game_Distance>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71bb      	strb	r3, [r7, #6]
		if (distance == false){
 8001c50:	79bb      	ldrb	r3, [r7, #6]
 8001c52:	f083 0301 	eor.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d009      	beq.n	8001c70 <handle_game3+0xc8>
			hearts--;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <handle_game3+0x124>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <handle_game3+0x124>)
 8001c66:	701a      	strb	r2, [r3, #0]
			play_audio("LOSE.WAV");
 8001c68:	4819      	ldr	r0, [pc, #100]	; (8001cd0 <handle_game3+0x128>)
 8001c6a:	f004 faa3 	bl	80061b4 <play_audio>
 8001c6e:	e002      	b.n	8001c76 <handle_game3+0xce>
		}else play_audio("WIN.WAV");
 8001c70:	4818      	ldr	r0, [pc, #96]	; (8001cd4 <handle_game3+0x12c>)
 8001c72:	f004 fa9f 	bl	80061b4 <play_audio>

		//timer = -1;	//clean the dot matrix
		//max7219_Clean();
		//print maze
		LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c80:	22f0      	movs	r2, #240	; 0xf0
 8001c82:	2100      	movs	r1, #0
 8001c84:	2000      	movs	r0, #0
 8001c86:	f001 f90e 	bl	8002ea6 <LCD_Clear>
		LCD_Display();
 8001c8a:	f002 fd67 	bl	800475c <LCD_Display>
		current_x = next_x;
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <handle_game3+0x104>)
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <handle_game3+0x10c>)
 8001c94:	701a      	strb	r2, [r3, #0]
		current_y = next_y;
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <handle_game3+0x108>)
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <handle_game3+0x110>)
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20002868 	.word	0x20002868
 8001cac:	20002874 	.word	0x20002874
 8001cb0:	20002875 	.word	0x20002875
 8001cb4:	20002872 	.word	0x20002872
 8001cb8:	20002873 	.word	0x20002873
 8001cbc:	08013e4c 	.word	0x08013e4c
 8001cc0:	08013dec 	.word	0x08013dec
 8001cc4:	08013e28 	.word	0x08013e28
 8001cc8:	08013e30 	.word	0x08013e30
 8001ccc:	20002876 	.word	0x20002876
 8001cd0:	08013e38 	.word	0x08013e38
 8001cd4:	08013e44 	.word	0x08013e44

08001cd8 <handle_dark>:


void handle_dark(){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 8001cde:	4b6d      	ldr	r3, [pc, #436]	; (8001e94 <handle_dark+0x1bc>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <handle_dark+0x1c0>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6b      	ldr	r2, [pc, #428]	; (8001e9c <handle_dark+0x1c4>)
 8001cee:	7812      	ldrb	r2, [r2, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8001cf6:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <handle_dark+0x1bc>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b69      	ldr	r3, [pc, #420]	; (8001ea0 <handle_dark+0x1c8>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a67      	ldr	r2, [pc, #412]	; (8001ea4 <handle_dark+0x1cc>)
 8001d06:	7812      	ldrb	r2, [r2, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 8001d0e:	f7ff fcc1 	bl	8001694 <update_display>
	uint8_t start_flag = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]
	char str[10];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d20:	22f0      	movs	r2, #240	; 0xf0
 8001d22:	2100      	movs	r1, #0
 8001d24:	2000      	movs	r0, #0
 8001d26:	f001 f8be 	bl	8002ea6 <LCD_Clear>
	LCD_DrawString(0, 0, "oops, something is watching you, please decrease the light to avoid their sight.", BLUE);
 8001d2a:	231f      	movs	r3, #31
 8001d2c:	4a5e      	ldr	r2, [pc, #376]	; (8001ea8 <handle_dark+0x1d0>)
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2000      	movs	r0, #0
 8001d32:	f001 f929 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 8001d36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d3a:	4a5c      	ldr	r2, [pc, #368]	; (8001eac <handle_dark+0x1d4>)
 8001d3c:	2132      	movs	r1, #50	; 0x32
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f001 f922 	bl	8002f88 <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 8001d44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d48:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <handle_dark+0x1d8>)
 8001d4a:	21c8      	movs	r1, #200	; 0xc8
 8001d4c:	2064      	movs	r0, #100	; 0x64
 8001d4e:	f001 f91b 	bl	8002f88 <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 220);
 8001d52:	e007      	b.n	8001d64 <handle_dark+0x8c>
 8001d54:	23dc      	movs	r3, #220	; 0xdc
 8001d56:	22c8      	movs	r2, #200	; 0xc8
 8001d58:	2191      	movs	r1, #145	; 0x91
 8001d5a:	205f      	movs	r0, #95	; 0x5f
 8001d5c:	f005 f964 	bl	8007028 <Check_touchkey_flag>
 8001d60:	4603      	mov	r3, r0
 8001d62:	75fb      	strb	r3, [r7, #23]
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f4      	beq.n	8001d54 <handle_dark+0x7c>

	//start the task
	//LCD_Clear (100, 200, 100, 20, WHITE);	// clear the screen
	LCD_DrawString(100, 200, "       ", RED);
 8001d6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d6e:	4a51      	ldr	r2, [pc, #324]	; (8001eb4 <handle_dark+0x1dc>)
 8001d70:	21c8      	movs	r1, #200	; 0xc8
 8001d72:	2064      	movs	r0, #100	; 0x64
 8001d74:	f001 f908 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(100, 250, "give up", RED);
 8001d78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d7c:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <handle_dark+0x1e0>)
 8001d7e:	21fa      	movs	r1, #250	; 0xfa
 8001d80:	2064      	movs	r0, #100	; 0x64
 8001d82:	f001 f901 	bl	8002f88 <LCD_DrawString>
	//timer = 10;
	//get initial LDR value
	HAL_ADC_Start(&hadc1);	//init the adc
 8001d86:	484d      	ldr	r0, [pc, #308]	; (8001ebc <handle_dark+0x1e4>)
 8001d88:	f005 fb12 	bl	80073b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);	//time need for conversion
 8001d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d90:	484a      	ldr	r0, [pc, #296]	; (8001ebc <handle_dark+0x1e4>)
 8001d92:	f005 fbbb 	bl	800750c <HAL_ADC_PollForConversion>
	int init_data = HAL_ADC_GetValue(&hadc1);
 8001d96:	4849      	ldr	r0, [pc, #292]	; (8001ebc <handle_dark+0x1e4>)
 8001d98:	f005 fd9c 	bl	80078d4 <HAL_ADC_GetValue>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	613b      	str	r3, [r7, #16]
	int data1 = init_data;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	60fb      	str	r3, [r7, #12]
	sprintf(str, "LDR %d  ",init_data);
 8001da4:	463b      	mov	r3, r7
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4945      	ldr	r1, [pc, #276]	; (8001ec0 <handle_dark+0x1e8>)
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00f fde6 	bl	801197c <siprintf>
	LCD_DrawString(100, 150, str, RED);
 8001db0:	463a      	mov	r2, r7
 8001db2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001db6:	2196      	movs	r1, #150	; 0x96
 8001db8:	2064      	movs	r0, #100	; 0x64
 8001dba:	f001 f8e5 	bl	8002f88 <LCD_DrawString>
	timer = 10;
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <handle_dark+0x1ec>)
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	601a      	str	r2, [r3, #0]
	//print_digit(timer);

	while (true){

		//handle LDR
		HAL_ADC_Start(&hadc1);
 8001dc4:	483d      	ldr	r0, [pc, #244]	; (8001ebc <handle_dark+0x1e4>)
 8001dc6:	f005 faf3 	bl	80073b0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);	//time need for conversion
 8001dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dce:	483b      	ldr	r0, [pc, #236]	; (8001ebc <handle_dark+0x1e4>)
 8001dd0:	f005 fb9c 	bl	800750c <HAL_ADC_PollForConversion>
		data1 = HAL_ADC_GetValue(&hadc1);
 8001dd4:	4839      	ldr	r0, [pc, #228]	; (8001ebc <handle_dark+0x1e4>)
 8001dd6:	f005 fd7d 	bl	80078d4 <HAL_ADC_GetValue>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60fb      	str	r3, [r7, #12]
		sprintf(str, "LDR %d  ", data1);
 8001dde:	463b      	mov	r3, r7
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4937      	ldr	r1, [pc, #220]	; (8001ec0 <handle_dark+0x1e8>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00f fdc9 	bl	801197c <siprintf>
		LCD_DrawString(100, 150, str, RED);
 8001dea:	463a      	mov	r2, r7
 8001dec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001df0:	2196      	movs	r1, #150	; 0x96
 8001df2:	2064      	movs	r0, #100	; 0x64
 8001df4:	f001 f8c8 	bl	8002f88 <LCD_DrawString>
    	if((init_data - data1) > 300 || data1 < 500) {play_audio("WIN.WAV"); break;}	//dynamic & abs threshold check //task success
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e02:	dc03      	bgt.n	8001e0c <handle_dark+0x134>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e0a:	da03      	bge.n	8001e14 <handle_dark+0x13c>
 8001e0c:	482e      	ldr	r0, [pc, #184]	; (8001ec8 <handle_dark+0x1f0>)
 8001e0e:	f004 f9d1 	bl	80061b4 <play_audio>
 8001e12:	e020      	b.n	8001e56 <handle_dark+0x17e>

    	//give up flag
    	if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 8001e14:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e18:	22fa      	movs	r2, #250	; 0xfa
 8001e1a:	2191      	movs	r1, #145	; 0x91
 8001e1c:	205f      	movs	r0, #95	; 0x5f
 8001e1e:	f005 f903 	bl	8007028 <Check_touchkey_flag>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <handle_dark+0x164>
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <handle_dark+0x1f4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <handle_dark+0x1f4>)
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	4826      	ldr	r0, [pc, #152]	; (8001ed0 <handle_dark+0x1f8>)
 8001e36:	f004 f9bd 	bl	80061b4 <play_audio>
 8001e3a:	e00c      	b.n	8001e56 <handle_dark+0x17e>

		if(timer == 0){//task failure
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <handle_dark+0x1ec>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1bf      	bne.n	8001dc4 <handle_dark+0xec>
			hearts--;
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <handle_dark+0x1f4>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <handle_dark+0x1f4>)
 8001e4e:	701a      	strb	r2, [r3, #0]
			play_audio("LOSE.WAV");
 8001e50:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <handle_dark+0x1f8>)
 8001e52:	f004 f9af 	bl	80061b4 <play_audio>
			break;
		}
	}
	timer = -1;	//clean the dot matrix
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <handle_dark+0x1ec>)
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e5c:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 8001e5e:	f002 fb29 	bl	80044b4 <max7219_Clean>
	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e6c:	22f0      	movs	r2, #240	; 0xf0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2000      	movs	r0, #0
 8001e72:	f001 f818 	bl	8002ea6 <LCD_Clear>
	LCD_Display();
 8001e76:	f002 fc71 	bl	800475c <LCD_Display>
	current_x = next_x;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <handle_dark+0x1c0>)
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <handle_dark+0x1c8>)
 8001e80:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <handle_dark+0x1c4>)
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <handle_dark+0x1cc>)
 8001e88:	701a      	strb	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20002868 	.word	0x20002868
 8001e98:	20002874 	.word	0x20002874
 8001e9c:	20002875 	.word	0x20002875
 8001ea0:	20002872 	.word	0x20002872
 8001ea4:	20002873 	.word	0x20002873
 8001ea8:	08013e98 	.word	0x08013e98
 8001eac:	08013dec 	.word	0x08013dec
 8001eb0:	08013e28 	.word	0x08013e28
 8001eb4:	08013eec 	.word	0x08013eec
 8001eb8:	08013ef4 	.word	0x08013ef4
 8001ebc:	2000246c 	.word	0x2000246c
 8001ec0:	08013efc 	.word	0x08013efc
 8001ec4:	2000287c 	.word	0x2000287c
 8001ec8:	08013e44 	.word	0x08013e44
 8001ecc:	20002876 	.word	0x20002876
 8001ed0:	08013e38 	.word	0x08013e38

08001ed4 <handle_bright>:


void handle_bright(){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 8001eda:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <handle_bright+0x1bc>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <handle_bright+0x1c0>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6b      	ldr	r2, [pc, #428]	; (8002098 <handle_bright+0x1c4>)
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	2202      	movs	r2, #2
 8001ef0:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <handle_bright+0x1bc>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b69      	ldr	r3, [pc, #420]	; (800209c <handle_bright+0x1c8>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a67      	ldr	r2, [pc, #412]	; (80020a0 <handle_bright+0x1cc>)
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 8001f0a:	f7ff fbc3 	bl	8001694 <update_display>
	uint8_t start_flag = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]
	char str[10];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8001f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f1c:	22f0      	movs	r2, #240	; 0xf0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2000      	movs	r0, #0
 8001f22:	f000 ffc0 	bl	8002ea6 <LCD_Clear>
	LCD_DrawString(0, 0, "Oh, you entered a dark region, you need some light to find the path!", BLUE);
 8001f26:	231f      	movs	r3, #31
 8001f28:	4a5e      	ldr	r2, [pc, #376]	; (80020a4 <handle_bright+0x1d0>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f001 f82b 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 8001f32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f36:	4a5c      	ldr	r2, [pc, #368]	; (80020a8 <handle_bright+0x1d4>)
 8001f38:	2132      	movs	r1, #50	; 0x32
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f001 f824 	bl	8002f88 <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 8001f40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f44:	4a59      	ldr	r2, [pc, #356]	; (80020ac <handle_bright+0x1d8>)
 8001f46:	21c8      	movs	r1, #200	; 0xc8
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	f001 f81d 	bl	8002f88 <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8001f4e:	e007      	b.n	8001f60 <handle_bright+0x8c>
 8001f50:	23e6      	movs	r3, #230	; 0xe6
 8001f52:	22c8      	movs	r2, #200	; 0xc8
 8001f54:	2191      	movs	r1, #145	; 0x91
 8001f56:	205f      	movs	r0, #95	; 0x5f
 8001f58:	f005 f866 	bl	8007028 <Check_touchkey_flag>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	75fb      	strb	r3, [r7, #23]
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f4      	beq.n	8001f50 <handle_bright+0x7c>

	//start the task
	//LCD_Clear (100, 200, 100, 20, WHITE);	// clear the screen
	LCD_DrawString(100, 200, "       ", RED);
 8001f66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f6a:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <handle_bright+0x1dc>)
 8001f6c:	21c8      	movs	r1, #200	; 0xc8
 8001f6e:	2064      	movs	r0, #100	; 0x64
 8001f70:	f001 f80a 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(100, 250, "give up", RED);
 8001f74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f78:	4a4e      	ldr	r2, [pc, #312]	; (80020b4 <handle_bright+0x1e0>)
 8001f7a:	21fa      	movs	r1, #250	; 0xfa
 8001f7c:	2064      	movs	r0, #100	; 0x64
 8001f7e:	f001 f803 	bl	8002f88 <LCD_DrawString>
	//timer = 10;
	//get initial LDR value
	HAL_ADC_Start(&hadc1);	//init the adc
 8001f82:	484d      	ldr	r0, [pc, #308]	; (80020b8 <handle_bright+0x1e4>)
 8001f84:	f005 fa14 	bl	80073b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);	//time need for conversion
 8001f88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f8c:	484a      	ldr	r0, [pc, #296]	; (80020b8 <handle_bright+0x1e4>)
 8001f8e:	f005 fabd 	bl	800750c <HAL_ADC_PollForConversion>
	int init_data = HAL_ADC_GetValue(&hadc1);
 8001f92:	4849      	ldr	r0, [pc, #292]	; (80020b8 <handle_bright+0x1e4>)
 8001f94:	f005 fc9e 	bl	80078d4 <HAL_ADC_GetValue>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]
	int data1 = init_data;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	60fb      	str	r3, [r7, #12]
	sprintf(str, "LDR %d  ",init_data);
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4945      	ldr	r1, [pc, #276]	; (80020bc <handle_bright+0x1e8>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f00f fce8 	bl	801197c <siprintf>
	LCD_DrawString(100, 150, str, RED);
 8001fac:	463a      	mov	r2, r7
 8001fae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fb2:	2196      	movs	r1, #150	; 0x96
 8001fb4:	2064      	movs	r0, #100	; 0x64
 8001fb6:	f000 ffe7 	bl	8002f88 <LCD_DrawString>
	timer = 10;
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <handle_bright+0x1ec>)
 8001fbc:	220a      	movs	r2, #10
 8001fbe:	601a      	str	r2, [r3, #0]
		//display timer value
		//sprintf(str, "%d  ", timer);
		//LCD_DrawString(100, 100, str, RED);

		//give up flag
		if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 8001fc0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001fc4:	22fa      	movs	r2, #250	; 0xfa
 8001fc6:	2191      	movs	r1, #145	; 0x91
 8001fc8:	205f      	movs	r0, #95	; 0x5f
 8001fca:	f005 f82d 	bl	8007028 <Check_touchkey_flag>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <handle_bright+0x114>
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <handle_bright+0x1f0>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <handle_bright+0x1f0>)
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	4839      	ldr	r0, [pc, #228]	; (80020c8 <handle_bright+0x1f4>)
 8001fe2:	f004 f8e7 	bl	80061b4 <play_audio>
 8001fe6:	e035      	b.n	8002054 <handle_bright+0x180>

		//handle LDR
		HAL_ADC_Start(&hadc1);
 8001fe8:	4833      	ldr	r0, [pc, #204]	; (80020b8 <handle_bright+0x1e4>)
 8001fea:	f005 f9e1 	bl	80073b0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);	//time need for conversion
 8001fee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ff2:	4831      	ldr	r0, [pc, #196]	; (80020b8 <handle_bright+0x1e4>)
 8001ff4:	f005 fa8a 	bl	800750c <HAL_ADC_PollForConversion>
		data1 = HAL_ADC_GetValue(&hadc1);
 8001ff8:	482f      	ldr	r0, [pc, #188]	; (80020b8 <handle_bright+0x1e4>)
 8001ffa:	f005 fc6b 	bl	80078d4 <HAL_ADC_GetValue>
 8001ffe:	4603      	mov	r3, r0
 8002000:	60fb      	str	r3, [r7, #12]
		sprintf(str, "LDR %d  ", data1);
 8002002:	463b      	mov	r3, r7
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	492d      	ldr	r1, [pc, #180]	; (80020bc <handle_bright+0x1e8>)
 8002008:	4618      	mov	r0, r3
 800200a:	f00f fcb7 	bl	801197c <siprintf>
		LCD_DrawString(100, 150, str, RED);
 800200e:	463a      	mov	r2, r7
 8002010:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002014:	2196      	movs	r1, #150	; 0x96
 8002016:	2064      	movs	r0, #100	; 0x64
 8002018:	f000 ffb6 	bl	8002f88 <LCD_DrawString>
		if((data1 - init_data) > 500 || data1 > 3800) {play_audio("WIN.WAV"); break;}	//dynamic & abs threshold check //task success
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002026:	dc04      	bgt.n	8002032 <handle_bright+0x15e>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f640 62d8 	movw	r2, #3800	; 0xed8
 800202e:	4293      	cmp	r3, r2
 8002030:	dd03      	ble.n	800203a <handle_bright+0x166>
 8002032:	4826      	ldr	r0, [pc, #152]	; (80020cc <handle_bright+0x1f8>)
 8002034:	f004 f8be 	bl	80061b4 <play_audio>
 8002038:	e00c      	b.n	8002054 <handle_bright+0x180>

		if(timer == 0){
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <handle_bright+0x1ec>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1be      	bne.n	8001fc0 <handle_bright+0xec>
			hearts--;
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <handle_bright+0x1f0>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3b01      	subs	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <handle_bright+0x1f0>)
 800204c:	701a      	strb	r2, [r3, #0]
			play_audio("LOSE.WAV");
 800204e:	481e      	ldr	r0, [pc, #120]	; (80020c8 <handle_bright+0x1f4>)
 8002050:	f004 f8b0 	bl	80061b4 <play_audio>
			break;
		}	//task failure
	}
	timer = -1;	//clean the dot matrix
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <handle_bright+0x1ec>)
 8002056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800205a:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 800205c:	f002 fa2a 	bl	80044b4 <max7219_Clean>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800206a:	22f0      	movs	r2, #240	; 0xf0
 800206c:	2100      	movs	r1, #0
 800206e:	2000      	movs	r0, #0
 8002070:	f000 ff19 	bl	8002ea6 <LCD_Clear>
	LCD_Display();
 8002074:	f002 fb72 	bl	800475c <LCD_Display>
	current_x = next_x;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <handle_bright+0x1c0>)
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <handle_bright+0x1c8>)
 800207e:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <handle_bright+0x1c4>)
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <handle_bright+0x1cc>)
 8002086:	701a      	strb	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20002868 	.word	0x20002868
 8002094:	20002874 	.word	0x20002874
 8002098:	20002875 	.word	0x20002875
 800209c:	20002872 	.word	0x20002872
 80020a0:	20002873 	.word	0x20002873
 80020a4:	08013f08 	.word	0x08013f08
 80020a8:	08013dec 	.word	0x08013dec
 80020ac:	08013e28 	.word	0x08013e28
 80020b0:	08013eec 	.word	0x08013eec
 80020b4:	08013ef4 	.word	0x08013ef4
 80020b8:	2000246c 	.word	0x2000246c
 80020bc:	08013efc 	.word	0x08013efc
 80020c0:	2000287c 	.word	0x2000287c
 80020c4:	20002876 	.word	0x20002876
 80020c8:	08013e38 	.word	0x08013e38
 80020cc:	08013e44 	.word	0x08013e44

080020d0 <handle_ice>:


void handle_ice(){	//increase temp
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 80020d6:	4b5d      	ldr	r3, [pc, #372]	; (800224c <handle_ice+0x17c>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <handle_ice+0x180>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5b      	ldr	r2, [pc, #364]	; (8002254 <handle_ice+0x184>)
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	2202      	movs	r2, #2
 80020ec:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 80020ee:	4b57      	ldr	r3, [pc, #348]	; (800224c <handle_ice+0x17c>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b59      	ldr	r3, [pc, #356]	; (8002258 <handle_ice+0x188>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a57      	ldr	r2, [pc, #348]	; (800225c <handle_ice+0x18c>)
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	4413      	add	r3, r2
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 8002106:	f7ff fac5 	bl	8001694 <update_display>
	uint8_t start_flag = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[20];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 8002110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800211a:	22f0      	movs	r2, #240	; 0xf0
 800211c:	2100      	movs	r1, #0
 800211e:	2000      	movs	r0, #0
 8002120:	f000 fec1 	bl	8002ea6 <LCD_Clear>
	LCD_DrawString(0, 0, "a cube of ice is blocking the road, please try to melt it!", BLUE);
 8002124:	231f      	movs	r3, #31
 8002126:	4a4e      	ldr	r2, [pc, #312]	; (8002260 <handle_ice+0x190>)
 8002128:	2100      	movs	r1, #0
 800212a:	2000      	movs	r0, #0
 800212c:	f000 ff2c 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 8002130:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002134:	4a4b      	ldr	r2, [pc, #300]	; (8002264 <handle_ice+0x194>)
 8002136:	2132      	movs	r1, #50	; 0x32
 8002138:	2000      	movs	r0, #0
 800213a:	f000 ff25 	bl	8002f88 <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 800213e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002142:	4a49      	ldr	r2, [pc, #292]	; (8002268 <handle_ice+0x198>)
 8002144:	21c8      	movs	r1, #200	; 0xc8
 8002146:	2064      	movs	r0, #100	; 0x64
 8002148:	f000 ff1e 	bl	8002f88 <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 800214c:	e008      	b.n	8002160 <handle_ice+0x90>
 800214e:	23e6      	movs	r3, #230	; 0xe6
 8002150:	22c8      	movs	r2, #200	; 0xc8
 8002152:	2191      	movs	r1, #145	; 0x91
 8002154:	205f      	movs	r0, #95	; 0x5f
 8002156:	f004 ff67 	bl	8007028 <Check_touchkey_flag>
 800215a:	4603      	mov	r3, r0
 800215c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f2      	beq.n	800214e <handle_ice+0x7e>

	//start the task
	//LCD_Clear (100, 200, 100, 20, WHITE);	// clear the screen
	LCD_DrawString(100, 200, "       ", RED);
 8002168:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800216c:	4a3f      	ldr	r2, [pc, #252]	; (800226c <handle_ice+0x19c>)
 800216e:	21c8      	movs	r1, #200	; 0xc8
 8002170:	2064      	movs	r0, #100	; 0x64
 8002172:	f000 ff09 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(100, 250, "give up", RED);
 8002176:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800217a:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <handle_ice+0x1a0>)
 800217c:	21fa      	movs	r1, #250	; 0xfa
 800217e:	2064      	movs	r0, #100	; 0x64
 8002180:	f000 ff02 	bl	8002f88 <LCD_DrawString>
	//timer = 15;
	float init_data = temp_value();
 8002184:	f003 ffc6 	bl	8006114 <temp_value>
 8002188:	6238      	str	r0, [r7, #32]
	init_data = temp_value();
 800218a:	f003 ffc3 	bl	8006114 <temp_value>
 800218e:	6238      	str	r0, [r7, #32]
	//int data1 = init_data;
	//int round = init_data;
	//sprintf(str, "init temp %d ",init_data);
	//LCD_DrawString(100, 150, str, RED);
	float data1, re;
	timer = 15;
 8002190:	4b38      	ldr	r3, [pc, #224]	; (8002274 <handle_ice+0x1a4>)
 8002192:	220f      	movs	r2, #15
 8002194:	601a      	str	r2, [r3, #0]
		//display timer value
		//sprintf(str, "%d  ", timer);
		//LCD_DrawString(100, 100, str, RED);

		//read new value
		 data1 = temp_value();
 8002196:	f003 ffbd 	bl	8006114 <temp_value>
 800219a:	61f8      	str	r0, [r7, #28]
		 //round = data1;
		 //sprintf(str, "temp %d ",data1);
		 re = data1 - init_data;
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	69f8      	ldr	r0, [r7, #28]
 80021a0:	f7fe fd02 	bl	8000ba8 <__aeabi_fsub>
 80021a4:	4603      	mov	r3, r0
 80021a6:	61bb      	str	r3, [r7, #24]
		 //LCD_DrawString(100, 180, str, RED);
		 if (re >= 1 || data1 >= 30) {play_audio("WIN.WAV"); break;}
 80021a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80021ac:	69b8      	ldr	r0, [r7, #24]
 80021ae:	f7fe ffb7 	bl	8001120 <__aeabi_fcmpge>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <handle_ice+0xf6>
 80021b8:	492f      	ldr	r1, [pc, #188]	; (8002278 <handle_ice+0x1a8>)
 80021ba:	69f8      	ldr	r0, [r7, #28]
 80021bc:	f7fe ffb0 	bl	8001120 <__aeabi_fcmpge>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <handle_ice+0xfe>
 80021c6:	482d      	ldr	r0, [pc, #180]	; (800227c <handle_ice+0x1ac>)
 80021c8:	f003 fff4 	bl	80061b4 <play_audio>
 80021cc:	e020      	b.n	8002210 <handle_ice+0x140>

		 //give up flag
		 if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 80021ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80021d2:	22fa      	movs	r2, #250	; 0xfa
 80021d4:	2191      	movs	r1, #145	; 0x91
 80021d6:	205f      	movs	r0, #95	; 0x5f
 80021d8:	f004 ff26 	bl	8007028 <Check_touchkey_flag>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <handle_ice+0x126>
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <handle_ice+0x1b0>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <handle_ice+0x1b0>)
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	4825      	ldr	r0, [pc, #148]	; (8002284 <handle_ice+0x1b4>)
 80021f0:	f003 ffe0 	bl	80061b4 <play_audio>
 80021f4:	e00c      	b.n	8002210 <handle_ice+0x140>

		 if(timer == 0){hearts--; play_audio("LOSE.WAV"); break;}	//task failure
 80021f6:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <handle_ice+0x1a4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1cb      	bne.n	8002196 <handle_ice+0xc6>
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <handle_ice+0x1b0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	3b01      	subs	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <handle_ice+0x1b0>)
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	481e      	ldr	r0, [pc, #120]	; (8002284 <handle_ice+0x1b4>)
 800220c:	f003 ffd2 	bl	80061b4 <play_audio>
	}

	timer = -1;	//clean the dot matrix
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <handle_ice+0x1a4>)
 8002212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002216:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 8002218:	f002 f94c 	bl	80044b4 <max7219_Clean>
	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 800221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002226:	22f0      	movs	r2, #240	; 0xf0
 8002228:	2100      	movs	r1, #0
 800222a:	2000      	movs	r0, #0
 800222c:	f000 fe3b 	bl	8002ea6 <LCD_Clear>
	LCD_Display();
 8002230:	f002 fa94 	bl	800475c <LCD_Display>
	current_x = next_x;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <handle_ice+0x180>)
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <handle_ice+0x188>)
 800223a:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <handle_ice+0x184>)
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <handle_ice+0x18c>)
 8002242:	701a      	strb	r2, [r3, #0]
}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20002868 	.word	0x20002868
 8002250:	20002874 	.word	0x20002874
 8002254:	20002875 	.word	0x20002875
 8002258:	20002872 	.word	0x20002872
 800225c:	20002873 	.word	0x20002873
 8002260:	08013f50 	.word	0x08013f50
 8002264:	08013dec 	.word	0x08013dec
 8002268:	08013e28 	.word	0x08013e28
 800226c:	08013eec 	.word	0x08013eec
 8002270:	08013ef4 	.word	0x08013ef4
 8002274:	2000287c 	.word	0x2000287c
 8002278:	41f00000 	.word	0x41f00000
 800227c:	08013e44 	.word	0x08013e44
 8002280:	20002876 	.word	0x20002876
 8002284:	08013e38 	.word	0x08013e38

08002288 <handle_fire>:


void handle_fire(){	//decrease temperature
 8002288:	b580      	push	{r7, lr}
 800228a:	b08c      	sub	sp, #48	; 0x30
 800228c:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 800228e:	4b5d      	ldr	r3, [pc, #372]	; (8002404 <handle_fire+0x17c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <handle_fire+0x180>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a5b      	ldr	r2, [pc, #364]	; (800240c <handle_fire+0x184>)
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 80022a6:	4b57      	ldr	r3, [pc, #348]	; (8002404 <handle_fire+0x17c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b59      	ldr	r3, [pc, #356]	; (8002410 <handle_fire+0x188>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a57      	ldr	r2, [pc, #348]	; (8002414 <handle_fire+0x18c>)
 80022b6:	7812      	ldrb	r2, [r2, #0]
 80022b8:	4413      	add	r3, r2
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 80022be:	f7ff f9e9 	bl	8001694 <update_display>
	uint8_t start_flag = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char str[20];

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 80022c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022d2:	22f0      	movs	r2, #240	; 0xf0
 80022d4:	2100      	movs	r1, #0
 80022d6:	2000      	movs	r0, #0
 80022d8:	f000 fde5 	bl	8002ea6 <LCD_Clear>
	LCD_DrawString(0, 0, "three suns are shine on you and you are so hot, please try to decrease the surrounding temperature", BLUE);
 80022dc:	231f      	movs	r3, #31
 80022de:	4a4e      	ldr	r2, [pc, #312]	; (8002418 <handle_fire+0x190>)
 80022e0:	2100      	movs	r1, #0
 80022e2:	2000      	movs	r0, #0
 80022e4:	f000 fe50 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(0, 80, "Press start to start the task, wait until the timer start", RED);
 80022e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022ec:	4a4b      	ldr	r2, [pc, #300]	; (800241c <handle_fire+0x194>)
 80022ee:	2150      	movs	r1, #80	; 0x50
 80022f0:	2000      	movs	r0, #0
 80022f2:	f000 fe49 	bl	8002f88 <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 80022f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022fa:	4a49      	ldr	r2, [pc, #292]	; (8002420 <handle_fire+0x198>)
 80022fc:	21c8      	movs	r1, #200	; 0xc8
 80022fe:	2064      	movs	r0, #100	; 0x64
 8002300:	f000 fe42 	bl	8002f88 <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 8002304:	e008      	b.n	8002318 <handle_fire+0x90>
 8002306:	23e6      	movs	r3, #230	; 0xe6
 8002308:	22c8      	movs	r2, #200	; 0xc8
 800230a:	2191      	movs	r1, #145	; 0x91
 800230c:	205f      	movs	r0, #95	; 0x5f
 800230e:	f004 fe8b 	bl	8007028 <Check_touchkey_flag>
 8002312:	4603      	mov	r3, r0
 8002314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f2      	beq.n	8002306 <handle_fire+0x7e>

	//start the task
	//LCD_Clear (100, 200, 100, 20, WHITE);	// clear the screen
	LCD_DrawString(100, 250, "give up", RED);
 8002320:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002324:	4a3f      	ldr	r2, [pc, #252]	; (8002424 <handle_fire+0x19c>)
 8002326:	21fa      	movs	r1, #250	; 0xfa
 8002328:	2064      	movs	r0, #100	; 0x64
 800232a:	f000 fe2d 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(100, 200, "       ", RED);
 800232e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002332:	4a3d      	ldr	r2, [pc, #244]	; (8002428 <handle_fire+0x1a0>)
 8002334:	21c8      	movs	r1, #200	; 0xc8
 8002336:	2064      	movs	r0, #100	; 0x64
 8002338:	f000 fe26 	bl	8002f88 <LCD_DrawString>
	//timer = 15;
	float init_data = temp_value();
 800233c:	f003 feea 	bl	8006114 <temp_value>
 8002340:	6238      	str	r0, [r7, #32]
	init_data = temp_value();
 8002342:	f003 fee7 	bl	8006114 <temp_value>
 8002346:	6238      	str	r0, [r7, #32]
	//int data1 = init_data;
	//int round = init_data;
	//sprintf(str, "init temp %d ",init_data);
	//LCD_DrawString(100, 150, str, RED);
	float data1, re;
	timer = 15;
 8002348:	4b38      	ldr	r3, [pc, #224]	; (800242c <handle_fire+0x1a4>)
 800234a:	220f      	movs	r2, #15
 800234c:	601a      	str	r2, [r3, #0]
		//sprintf(str, "%d  ", timer);
		//LCD_DrawString(100, 120, str, RED);
		//print_digit(timer);

		//read new value
		 data1 = temp_value();
 800234e:	f003 fee1 	bl	8006114 <temp_value>
 8002352:	61f8      	str	r0, [r7, #28]
		 //round = data1;
		 //sprintf(str, "temp %d ",data1);
		 //LCD_DrawString(100, 180, str, RED);
		 re = init_data - data1;
 8002354:	69f9      	ldr	r1, [r7, #28]
 8002356:	6a38      	ldr	r0, [r7, #32]
 8002358:	f7fe fc26 	bl	8000ba8 <__aeabi_fsub>
 800235c:	4603      	mov	r3, r0
 800235e:	61bb      	str	r3, [r7, #24]
		 if (re >= 0.25  || data1 <=23) { play_audio("WIN.WAV"); break;}
 8002360:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002364:	69b8      	ldr	r0, [r7, #24]
 8002366:	f7fe fedb 	bl	8001120 <__aeabi_fcmpge>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d106      	bne.n	800237e <handle_fire+0xf6>
 8002370:	492f      	ldr	r1, [pc, #188]	; (8002430 <handle_fire+0x1a8>)
 8002372:	69f8      	ldr	r0, [r7, #28]
 8002374:	f7fe feca 	bl	800110c <__aeabi_fcmple>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <handle_fire+0xfe>
 800237e:	482d      	ldr	r0, [pc, #180]	; (8002434 <handle_fire+0x1ac>)
 8002380:	f003 ff18 	bl	80061b4 <play_audio>
 8002384:	e020      	b.n	80023c8 <handle_fire+0x140>

		 //give up flag
		 if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 8002386:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800238a:	22fa      	movs	r2, #250	; 0xfa
 800238c:	2191      	movs	r1, #145	; 0x91
 800238e:	205f      	movs	r0, #95	; 0x5f
 8002390:	f004 fe4a 	bl	8007028 <Check_touchkey_flag>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <handle_fire+0x126>
 800239a:	4b27      	ldr	r3, [pc, #156]	; (8002438 <handle_fire+0x1b0>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	3b01      	subs	r3, #1
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <handle_fire+0x1b0>)
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	4825      	ldr	r0, [pc, #148]	; (800243c <handle_fire+0x1b4>)
 80023a8:	f003 ff04 	bl	80061b4 <play_audio>
 80023ac:	e00c      	b.n	80023c8 <handle_fire+0x140>

		 if(timer == 0){hearts--; play_audio("LOSE.WAV"); break;}	//task failure
 80023ae:	4b1f      	ldr	r3, [pc, #124]	; (800242c <handle_fire+0x1a4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1cb      	bne.n	800234e <handle_fire+0xc6>
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <handle_fire+0x1b0>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <handle_fire+0x1b0>)
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	481e      	ldr	r0, [pc, #120]	; (800243c <handle_fire+0x1b4>)
 80023c4:	f003 fef6 	bl	80061b4 <play_audio>
	}

	timer = -1;	//clean the dot matrix
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <handle_fire+0x1a4>)
 80023ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023ce:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 80023d0:	f002 f870 	bl	80044b4 <max7219_Clean>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 80023d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023de:	22f0      	movs	r2, #240	; 0xf0
 80023e0:	2100      	movs	r1, #0
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 fd5f 	bl	8002ea6 <LCD_Clear>
	LCD_Display();
 80023e8:	f002 f9b8 	bl	800475c <LCD_Display>
	current_x = next_x;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <handle_fire+0x180>)
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <handle_fire+0x188>)
 80023f2:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <handle_fire+0x184>)
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <handle_fire+0x18c>)
 80023fa:	701a      	strb	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	; 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20002868 	.word	0x20002868
 8002408:	20002874 	.word	0x20002874
 800240c:	20002875 	.word	0x20002875
 8002410:	20002872 	.word	0x20002872
 8002414:	20002873 	.word	0x20002873
 8002418:	08013f8c 	.word	0x08013f8c
 800241c:	08013dec 	.word	0x08013dec
 8002420:	08013e28 	.word	0x08013e28
 8002424:	08013ef4 	.word	0x08013ef4
 8002428:	08013eec 	.word	0x08013eec
 800242c:	2000287c 	.word	0x2000287c
 8002430:	41b80000 	.word	0x41b80000
 8002434:	08013e44 	.word	0x08013e44
 8002438:	20002876 	.word	0x20002876
 800243c:	08013e38 	.word	0x08013e38

08002440 <handle_ghost>:


void handle_ghost(){	//quiz zone (replace ghost)
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af02      	add	r7, sp, #8
	maze[next_x][next_y] = 2;
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <handle_ghost+0x1a4>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b67      	ldr	r3, [pc, #412]	; (80025e8 <handle_ghost+0x1a8>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a65      	ldr	r2, [pc, #404]	; (80025ec <handle_ghost+0x1ac>)
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	4413      	add	r3, r2
 800245a:	2202      	movs	r2, #2
 800245c:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 800245e:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <handle_ghost+0x1a4>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <handle_ghost+0x1b0>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a61      	ldr	r2, [pc, #388]	; (80025f4 <handle_ghost+0x1b4>)
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	4413      	add	r3, r2
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
	update_display(); //update maze display
 8002476:	f7ff f90d 	bl	8001694 <update_display>
	uint8_t start_flag = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	71fb      	strb	r3, [r7, #7]

	//print instruction
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 800247e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002488:	22f0      	movs	r2, #240	; 0xf0
 800248a:	2100      	movs	r1, #0
 800248c:	2000      	movs	r0, #0
 800248e:	f000 fd0a 	bl	8002ea6 <LCD_Clear>
	LCD_DrawString(0, 0, "QUIZ TIME! please answer question with your phone (lowercase/number only)", BLUE);
 8002492:	231f      	movs	r3, #31
 8002494:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <handle_ghost+0x1b8>)
 8002496:	2100      	movs	r1, #0
 8002498:	2000      	movs	r0, #0
 800249a:	f000 fd75 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(0, 50, "Press start to start the task, wait until the timer start", RED);
 800249e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <handle_ghost+0x1bc>)
 80024a4:	2132      	movs	r1, #50	; 0x32
 80024a6:	2000      	movs	r0, #0
 80024a8:	f000 fd6e 	bl	8002f88 <LCD_DrawString>

	LCD_DrawString(100, 200, "start", RED);
 80024ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024b0:	4a53      	ldr	r2, [pc, #332]	; (8002600 <handle_ghost+0x1c0>)
 80024b2:	21c8      	movs	r1, #200	; 0xc8
 80024b4:	2064      	movs	r0, #100	; 0x64
 80024b6:	f000 fd67 	bl	8002f88 <LCD_DrawString>
	while(start_flag == 0) start_flag = Check_touchkey_flag(95, 145, 200, 230);
 80024ba:	e007      	b.n	80024cc <handle_ghost+0x8c>
 80024bc:	23e6      	movs	r3, #230	; 0xe6
 80024be:	22c8      	movs	r2, #200	; 0xc8
 80024c0:	2191      	movs	r1, #145	; 0x91
 80024c2:	205f      	movs	r0, #95	; 0x5f
 80024c4:	f004 fdb0 	bl	8007028 <Check_touchkey_flag>
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f4      	beq.n	80024bc <handle_ghost+0x7c>

	//start the task
	LCD_DrawString(100, 200, "       ", RED);
 80024d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024d6:	4a4b      	ldr	r2, [pc, #300]	; (8002604 <handle_ghost+0x1c4>)
 80024d8:	21c8      	movs	r1, #200	; 0xc8
 80024da:	2064      	movs	r0, #100	; 0x64
 80024dc:	f000 fd54 	bl	8002f88 <LCD_DrawString>
	LCD_DrawString(100, 250, "give up", RED);
 80024e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024e4:	4a48      	ldr	r2, [pc, #288]	; (8002608 <handle_ghost+0x1c8>)
 80024e6:	21fa      	movs	r1, #250	; 0xfa
 80024e8:	2064      	movs	r0, #100	; 0x64
 80024ea:	f000 fd4d 	bl	8002f88 <LCD_DrawString>

	get_question();	//display a random question on LCD
 80024ee:	f000 fa49 	bl	8002984 <get_question>
	int len = strlen(answer);
 80024f2:	4846      	ldr	r0, [pc, #280]	; (800260c <handle_ghost+0x1cc>)
 80024f4:	f7fd fe98 	bl	8000228 <strlen>
 80024f8:	4603      	mov	r3, r0
 80024fa:	603b      	str	r3, [r7, #0]
	len--; //take out the \n
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	3b01      	subs	r3, #1
 8002500:	603b      	str	r3, [r7, #0]
	timer = 15;
 8002502:	4b43      	ldr	r3, [pc, #268]	; (8002610 <handle_ghost+0x1d0>)
 8002504:	220f      	movs	r2, #15
 8002506:	601a      	str	r2, [r3, #0]

	while (true){
		//give up flag
		if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 8002508:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800250c:	22fa      	movs	r2, #250	; 0xfa
 800250e:	2191      	movs	r1, #145	; 0x91
 8002510:	205f      	movs	r0, #95	; 0x5f
 8002512:	f004 fd89 	bl	8007028 <Check_touchkey_flag>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <handle_ghost+0xf0>
 800251c:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <handle_ghost+0x1d4>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	3b01      	subs	r3, #1
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <handle_ghost+0x1d4>)
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	483b      	ldr	r0, [pc, #236]	; (8002618 <handle_ghost+0x1d8>)
 800252a:	f003 fe43 	bl	80061b4 <play_audio>
 800252e:	e03a      	b.n	80025a6 <handle_ghost+0x166>

		if (HAL_UART_Receive(&huart1,(uint8_t*)rxString,len,200)==HAL_OK){
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b29a      	uxth	r2, r3
 8002534:	23c8      	movs	r3, #200	; 0xc8
 8002536:	4939      	ldr	r1, [pc, #228]	; (800261c <handle_ghost+0x1dc>)
 8002538:	4839      	ldr	r0, [pc, #228]	; (8002620 <handle_ghost+0x1e0>)
 800253a:	f009 fe06 	bl	800c14a <HAL_UART_Receive>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d120      	bne.n	8002586 <handle_ghost+0x146>

			if (HAL_UART_Receive(&huart1, (uint8_t*)rxString, 1, 100) == HAL_OK) continue;	//check if the input len > ans len
 8002544:	2364      	movs	r3, #100	; 0x64
 8002546:	2201      	movs	r2, #1
 8002548:	4934      	ldr	r1, [pc, #208]	; (800261c <handle_ghost+0x1dc>)
 800254a:	4835      	ldr	r0, [pc, #212]	; (8002620 <handle_ghost+0x1e0>)
 800254c:	f009 fdfd 	bl	800c14a <HAL_UART_Receive>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d025      	beq.n	80025a2 <handle_ghost+0x162>
			rxString[len] = '\0';
 8002556:	4a31      	ldr	r2, [pc, #196]	; (800261c <handle_ghost+0x1dc>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
			if(strncmp(rxString, answer, len) == 0) { play_audio("WIN.WAV"); break;}
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	4929      	ldr	r1, [pc, #164]	; (800260c <handle_ghost+0x1cc>)
 8002566:	482d      	ldr	r0, [pc, #180]	; (800261c <handle_ghost+0x1dc>)
 8002568:	f00f fa28 	bl	80119bc <strncmp>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d103      	bne.n	800257a <handle_ghost+0x13a>
 8002572:	482c      	ldr	r0, [pc, #176]	; (8002624 <handle_ghost+0x1e4>)
 8002574:	f003 fe1e 	bl	80061b4 <play_audio>
 8002578:	e015      	b.n	80025a6 <handle_ghost+0x166>
			HAL_UART_Receive(&huart1, (uint8_t*)rxString, 100, 100);	//remove remaining char
 800257a:	2364      	movs	r3, #100	; 0x64
 800257c:	2264      	movs	r2, #100	; 0x64
 800257e:	4927      	ldr	r1, [pc, #156]	; (800261c <handle_ghost+0x1dc>)
 8002580:	4827      	ldr	r0, [pc, #156]	; (8002620 <handle_ghost+0x1e0>)
 8002582:	f009 fde2 	bl	800c14a <HAL_UART_Receive>
		}

		if(timer == 0){
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <handle_ghost+0x1d0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1bc      	bne.n	8002508 <handle_ghost+0xc8>
			hearts--;
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <handle_ghost+0x1d4>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	3b01      	subs	r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <handle_ghost+0x1d4>)
 8002598:	701a      	strb	r2, [r3, #0]
			play_audio("LOSE.WAV");
 800259a:	481f      	ldr	r0, [pc, #124]	; (8002618 <handle_ghost+0x1d8>)
 800259c:	f003 fe0a 	bl	80061b4 <play_audio>
			break;
 80025a0:	e001      	b.n	80025a6 <handle_ghost+0x166>
			if (HAL_UART_Receive(&huart1, (uint8_t*)rxString, 1, 100) == HAL_OK) continue;	//check if the input len > ans len
 80025a2:	bf00      	nop
		if(Check_touchkey_flag(95, 145, 250, 300)){hearts--; play_audio("LOSE.WAV"); break;}
 80025a4:	e7b0      	b.n	8002508 <handle_ghost+0xc8>
		}	//task failure
	}
	timer = -1;	//clean the dot matrix
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <handle_ghost+0x1d0>)
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ac:	601a      	str	r2, [r3, #0]
	max7219_Clean();
 80025ae:	f001 ff81 	bl	80044b4 <max7219_Clean>

	//print maze
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 80025b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80025bc:	22f0      	movs	r2, #240	; 0xf0
 80025be:	2100      	movs	r1, #0
 80025c0:	2000      	movs	r0, #0
 80025c2:	f000 fc70 	bl	8002ea6 <LCD_Clear>
	LCD_Display();
 80025c6:	f002 f8c9 	bl	800475c <LCD_Display>
	current_x = next_x;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <handle_ghost+0x1a8>)
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <handle_ghost+0x1b0>)
 80025d0:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <handle_ghost+0x1ac>)
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <handle_ghost+0x1b4>)
 80025d8:	701a      	strb	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20002868 	.word	0x20002868
 80025e8:	20002874 	.word	0x20002874
 80025ec:	20002875 	.word	0x20002875
 80025f0:	20002872 	.word	0x20002872
 80025f4:	20002873 	.word	0x20002873
 80025f8:	08013ff0 	.word	0x08013ff0
 80025fc:	08013dec 	.word	0x08013dec
 8002600:	08013e28 	.word	0x08013e28
 8002604:	08013eec 	.word	0x08013eec
 8002608:	08013ef4 	.word	0x08013ef4
 800260c:	20002408 	.word	0x20002408
 8002610:	2000287c 	.word	0x2000287c
 8002614:	20002876 	.word	0x20002876
 8002618:	08013e38 	.word	0x08013e38
 800261c:	20000280 	.word	0x20000280
 8002620:	200027dc 	.word	0x200027dc
 8002624:	08013e44 	.word	0x08013e44

08002628 <handle_stone>:


void handle_stone(){
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	maze[next_x][next_y] = 2;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <handle_stone+0x4c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <handle_stone+0x50>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <handle_stone+0x54>)
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	4413      	add	r3, r2
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
		maze[current_x][current_y] = 0;
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <handle_stone+0x4c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <handle_stone+0x58>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <handle_stone+0x5c>)
 8002654:	7812      	ldrb	r2, [r2, #0]
 8002656:	4413      	add	r3, r2
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]

		//update maze display
		update_display();
 800265c:	f7ff f81a 	bl	8001694 <update_display>

		current_x = next_x;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <handle_stone+0x50>)
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <handle_stone+0x58>)
 8002666:	701a      	strb	r2, [r3, #0]
		current_y = next_y;
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <handle_stone+0x54>)
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <handle_stone+0x5c>)
 800266e:	701a      	strb	r2, [r3, #0]
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20002868 	.word	0x20002868
 8002678:	20002874 	.word	0x20002874
 800267c:	20002875 	.word	0x20002875
 8002680:	20002872 	.word	0x20002872
 8002684:	20002873 	.word	0x20002873

08002688 <handle_door>:


void handle_door(){
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	maze[next_x][next_y] = 2;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <handle_door+0x4c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <handle_door+0x50>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a10      	ldr	r2, [pc, #64]	; (80026dc <handle_door+0x54>)
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	2202      	movs	r2, #2
 80026a2:	701a      	strb	r2, [r3, #0]
		maze[current_x][current_y] = 0;
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <handle_door+0x4c>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <handle_door+0x58>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <handle_door+0x5c>)
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]

		//update maze display
		update_display();
 80026bc:	f7fe ffea 	bl	8001694 <update_display>

		current_x = next_x;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <handle_door+0x50>)
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <handle_door+0x58>)
 80026c6:	701a      	strb	r2, [r3, #0]
		current_y = next_y;
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <handle_door+0x54>)
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <handle_door+0x5c>)
 80026ce:	701a      	strb	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20002868 	.word	0x20002868
 80026d8:	20002874 	.word	0x20002874
 80026dc:	20002875 	.word	0x20002875
 80026e0:	20002872 	.word	0x20002872
 80026e4:	20002873 	.word	0x20002873

080026e8 <handle_addheart>:


void handle_addheart(){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
		if (hearts == 3){
 80026ec:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <handle_addheart+0xbc>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d122      	bne.n	800273a <handle_addheart+0x52>
			//display - your heart is full, nothing happen
			maze[next_x][next_y] = 2;
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <handle_addheart+0xc0>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <handle_addheart+0xc4>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <handle_addheart+0xc8>)
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	4413      	add	r3, r2
 8002708:	2202      	movs	r2, #2
 800270a:	701a      	strb	r2, [r3, #0]
			maze[current_x][current_y] = 0;
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <handle_addheart+0xc0>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <handle_addheart+0xcc>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <handle_addheart+0xd0>)
 800271c:	7812      	ldrb	r2, [r2, #0]
 800271e:	4413      	add	r3, r2
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
			update_display();
 8002724:	f7fe ffb6 	bl	8001694 <update_display>
			current_x = next_x;
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <handle_addheart+0xc4>)
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <handle_addheart+0xcc>)
 800272e:	701a      	strb	r2, [r3, #0]
			current_y = next_y;
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <handle_addheart+0xc8>)
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <handle_addheart+0xd0>)
 8002736:	701a      	strb	r2, [r3, #0]
			LCD_Drawheart(10, 130+hearts*32); //display the key
			hearts++;
			current_x = next_x;
			current_y = next_y;
		}
}
 8002738:	e032      	b.n	80027a0 <handle_addheart+0xb8>
			maze[next_x][next_y] = 2;
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <handle_addheart+0xc0>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <handle_addheart+0xc4>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <handle_addheart+0xc8>)
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	4413      	add	r3, r2
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
			maze[current_x][current_y] = 0;
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <handle_addheart+0xc0>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <handle_addheart+0xcc>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <handle_addheart+0xd0>)
 8002762:	7812      	ldrb	r2, [r2, #0]
 8002764:	4413      	add	r3, r2
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
			update_display();
 800276a:	f7fe ff93 	bl	8001694 <update_display>
			LCD_Drawheart(10, 130+hearts*32); //display the key
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <handle_addheart+0xbc>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	015b      	lsls	r3, r3, #5
 8002776:	b29b      	uxth	r3, r3
 8002778:	3382      	adds	r3, #130	; 0x82
 800277a:	b29b      	uxth	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	200a      	movs	r0, #10
 8002780:	f001 f80e 	bl	80037a0 <LCD_Drawheart>
			hearts++;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <handle_addheart+0xbc>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	b2da      	uxtb	r2, r3
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <handle_addheart+0xbc>)
 800278e:	701a      	strb	r2, [r3, #0]
			current_x = next_x;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <handle_addheart+0xc4>)
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <handle_addheart+0xcc>)
 8002796:	701a      	strb	r2, [r3, #0]
			current_y = next_y;
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <handle_addheart+0xc8>)
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <handle_addheart+0xd0>)
 800279e:	701a      	strb	r2, [r3, #0]
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20002876 	.word	0x20002876
 80027a8:	20002868 	.word	0x20002868
 80027ac:	20002874 	.word	0x20002874
 80027b0:	20002875 	.word	0x20002875
 80027b4:	20002872 	.word	0x20002872
 80027b8:	20002873 	.word	0x20002873

080027bc <handle_prison>:


void handle_prison(){ // minus one heart
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	maze[next_x][next_y] = 2;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <handle_prison+0x74>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <handle_prison+0x78>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <handle_prison+0x7c>)
 80027d0:	7812      	ldrb	r2, [r2, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	2202      	movs	r2, #2
 80027d6:	701a      	strb	r2, [r3, #0]
	maze[current_x][current_y] = 0;
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <handle_prison+0x74>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <handle_prison+0x80>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a16      	ldr	r2, [pc, #88]	; (8002840 <handle_prison+0x84>)
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]

	//update maze display
	update_display();
 80027f0:	f7fe ff50 	bl	8001694 <update_display>
	LCD_DrawBox(130+(hearts-1)*32, 10, WHITE, 32);
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <handle_prison+0x88>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	015b      	lsls	r3, r3, #5
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3382      	adds	r3, #130	; 0x82
 8002802:	b298      	uxth	r0, r3
 8002804:	2320      	movs	r3, #32
 8002806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800280a:	210a      	movs	r1, #10
 800280c:	f000 fc1c 	bl	8003048 <LCD_DrawBox>
	hearts--;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <handle_prison+0x88>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <handle_prison+0x88>)
 800281a:	701a      	strb	r2, [r3, #0]

	current_x = next_x;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <handle_prison+0x78>)
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <handle_prison+0x80>)
 8002822:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <handle_prison+0x7c>)
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <handle_prison+0x84>)
 800282a:	701a      	strb	r2, [r3, #0]

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20002868 	.word	0x20002868
 8002834:	20002874 	.word	0x20002874
 8002838:	20002875 	.word	0x20002875
 800283c:	20002872 	.word	0x20002872
 8002840:	20002873 	.word	0x20002873
 8002844:	20002876 	.word	0x20002876

08002848 <handle_hidden>:


void handle_hidden(){
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b083      	sub	sp, #12
 800284c:	af02      	add	r7, sp, #8
	//display, you trap in a hidden area
	//jump to somewhere else
	LCD_Clear (width_margin+next_y*block_size, height_margin+next_x*block_size, block_size, block_size, WHITE);
 800284e:	4b43      	ldr	r3, [pc, #268]	; (800295c <handle_hidden+0x114>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b42      	ldr	r3, [pc, #264]	; (8002960 <handle_hidden+0x118>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	4942      	ldr	r1, [pc, #264]	; (8002964 <handle_hidden+0x11c>)
 800285c:	7809      	ldrb	r1, [r1, #0]
 800285e:	b289      	uxth	r1, r1
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	b29b      	uxth	r3, r3
 8002866:	4413      	add	r3, r2
 8002868:	b298      	uxth	r0, r3
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <handle_hidden+0x120>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b29a      	uxth	r2, r3
 8002870:	4b3e      	ldr	r3, [pc, #248]	; (800296c <handle_hidden+0x124>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	493b      	ldr	r1, [pc, #236]	; (8002964 <handle_hidden+0x11c>)
 8002878:	7809      	ldrb	r1, [r1, #0]
 800287a:	b289      	uxth	r1, r1
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	b29b      	uxth	r3, r3
 8002882:	4413      	add	r3, r2
 8002884:	b299      	uxth	r1, r3
 8002886:	4b37      	ldr	r3, [pc, #220]	; (8002964 <handle_hidden+0x11c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b29a      	uxth	r2, r3
 800288c:	4b35      	ldr	r3, [pc, #212]	; (8002964 <handle_hidden+0x11c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002896:	9400      	str	r4, [sp, #0]
 8002898:	f000 fb05 	bl	8002ea6 <LCD_Clear>
	maze[next_x][next_y] = 0;
 800289c:	4b34      	ldr	r3, [pc, #208]	; (8002970 <handle_hidden+0x128>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <handle_hidden+0x124>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2d      	ldr	r2, [pc, #180]	; (8002960 <handle_hidden+0x118>)
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
	while(true){
		next_x = rand() % (rows - 2) + 1;
 80028b4:	f00f f814 	bl	80118e0 <rand>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <handle_hidden+0x12c>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	3b02      	subs	r3, #2
 80028c0:	fb92 f1f3 	sdiv	r1, r2, r3
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <handle_hidden+0x124>)
 80028d2:	701a      	strb	r2, [r3, #0]
		next_y = rand() % (columns - 2) + 1;
 80028d4:	f00f f804 	bl	80118e0 <rand>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <handle_hidden+0x130>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	3b02      	subs	r3, #2
 80028e0:	fb92 f1f3 	sdiv	r1, r2, r3
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <handle_hidden+0x118>)
 80028f2:	701a      	strb	r2, [r3, #0]
		if(maze[next_x][next_y] == 0){
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <handle_hidden+0x128>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <handle_hidden+0x124>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <handle_hidden+0x118>)
 8002904:	7812      	ldrb	r2, [r2, #0]
 8002906:	4413      	add	r3, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1d2      	bne.n	80028b4 <handle_hidden+0x6c>
		   maze[next_x][next_y] = 2;
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <handle_hidden+0x128>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <handle_hidden+0x124>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a10      	ldr	r2, [pc, #64]	; (8002960 <handle_hidden+0x118>)
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	4413      	add	r3, r2
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
		   break;
 8002926:	bf00      	nop
		}
	}
	maze[current_x][current_y] = 0;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <handle_hidden+0x128>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <handle_hidden+0x134>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a12      	ldr	r2, [pc, #72]	; (8002980 <handle_hidden+0x138>)
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	4413      	add	r3, r2
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
	update_display();
 8002940:	f7fe fea8 	bl	8001694 <update_display>
	current_x = next_x;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <handle_hidden+0x124>)
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <handle_hidden+0x134>)
 800294a:	701a      	strb	r2, [r3, #0]
	current_y = next_y;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <handle_hidden+0x118>)
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <handle_hidden+0x138>)
 8002952:	701a      	strb	r2, [r3, #0]
	//update maze display

}
 8002954:	bf00      	nop
 8002956:	3704      	adds	r7, #4
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	20002888 	.word	0x20002888
 8002960:	20002875 	.word	0x20002875
 8002964:	08014864 	.word	0x08014864
 8002968:	20002889 	.word	0x20002889
 800296c:	20002874 	.word	0x20002874
 8002970:	20002868 	.word	0x20002868
 8002974:	2000286c 	.word	0x2000286c
 8002978:	2000286d 	.word	0x2000286d
 800297c:	20002872 	.word	0x20002872
 8002980:	20002873 	.word	0x20002873

08002984 <get_question>:
uint8_t currentLine = 1; // Current line number
char buffer[100] = {0}; // Buffer to store the read line
char question[100];
char answer[100];

void get_question(){
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
  int num_odd_numbers = (41 - 1) / 2 + 1;
 800298a:	2315      	movs	r3, #21
 800298c:	60fb      	str	r3, [r7, #12]
  int index = rand() % num_odd_numbers;
 800298e:	f00e ffa7 	bl	80118e0 <rand>
 8002992:	4603      	mov	r3, r0
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	fb93 f2f2 	sdiv	r2, r3, r2
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	fb01 f202 	mul.w	r2, r1, r2
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
  int lineToRead = 1 + 2 * index;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	3301      	adds	r3, #1
 80029aa:	607b      	str	r3, [r7, #4]
  currentLine = 1;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <get_question+0xe0>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]

  f_mount(&myFATFS,SDPath,1);
 80029b2:	2201      	movs	r2, #1
 80029b4:	492c      	ldr	r1, [pc, #176]	; (8002a68 <get_question+0xe4>)
 80029b6:	482d      	ldr	r0, [pc, #180]	; (8002a6c <get_question+0xe8>)
 80029b8:	f00c fc90 	bl	800f2dc <f_mount>
  f_open(&myFILE, "QUIZ.TXT", FA_OPEN_EXISTING|FA_READ);
 80029bc:	2201      	movs	r2, #1
 80029be:	492c      	ldr	r1, [pc, #176]	; (8002a70 <get_question+0xec>)
 80029c0:	482c      	ldr	r0, [pc, #176]	; (8002a74 <get_question+0xf0>)
 80029c2:	f00c fcd5 	bl	800f370 <f_open>
  while (currentLine <= lineToRead+1) {
 80029c6:	e03a      	b.n	8002a3e <get_question+0xba>
	  if (f_gets(buffer, sizeof(buffer), &myFILE) == NULL) {
 80029c8:	4a2a      	ldr	r2, [pc, #168]	; (8002a74 <get_question+0xf0>)
 80029ca:	2164      	movs	r1, #100	; 0x64
 80029cc:	482a      	ldr	r0, [pc, #168]	; (8002a78 <get_question+0xf4>)
 80029ce:	f00d ffe0 	bl	8010992 <f_gets>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <get_question+0x64>
		  // Handle end of file or read error
		  LCD_DrawString(0,0, "error", RED);
 80029d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <get_question+0xf8>)
 80029de:	2100      	movs	r1, #0
 80029e0:	2000      	movs	r0, #0
 80029e2:	f000 fad1 	bl	8002f88 <LCD_DrawString>
		  break;
 80029e6:	e031      	b.n	8002a4c <get_question+0xc8>
	  }

	  if (currentLine == lineToRead) {
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <get_question+0xe0>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d10b      	bne.n	8002a0c <get_question+0x88>
		  // Process the read line
		  // Here, you can print the line, store it in a variable, or perform any desired operations
		  sprintf(question, "%s", buffer);
 80029f4:	4a20      	ldr	r2, [pc, #128]	; (8002a78 <get_question+0xf4>)
 80029f6:	4922      	ldr	r1, [pc, #136]	; (8002a80 <get_question+0xfc>)
 80029f8:	4822      	ldr	r0, [pc, #136]	; (8002a84 <get_question+0x100>)
 80029fa:	f00e ffbf 	bl	801197c <siprintf>
		  LCD_DrawString(0,100, question, RED);
 80029fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a02:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <get_question+0x100>)
 8002a04:	2164      	movs	r1, #100	; 0x64
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 fabe 	bl	8002f88 <LCD_DrawString>
		  //HAL_Delay(1000);

	  }if (currentLine == lineToRead+1) {
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <get_question+0xe0>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3301      	adds	r3, #1
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10b      	bne.n	8002a32 <get_question+0xae>
		  // Process the read line
		  // Here, you can print the line, store it in a variable, or perform any desired operations
		  sprintf(answer, "%s", buffer);
 8002a1a:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <get_question+0xf4>)
 8002a1c:	4918      	ldr	r1, [pc, #96]	; (8002a80 <get_question+0xfc>)
 8002a1e:	481a      	ldr	r0, [pc, #104]	; (8002a88 <get_question+0x104>)
 8002a20:	f00e ffac 	bl	801197c <siprintf>
		  LCD_DrawString(0,150, answer, BLUE);
 8002a24:	231f      	movs	r3, #31
 8002a26:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <get_question+0x104>)
 8002a28:	2196      	movs	r1, #150	; 0x96
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f000 faac 	bl	8002f88 <LCD_DrawString>
		  //HAL_Delay(1000);
		  break;
 8002a30:	e00c      	b.n	8002a4c <get_question+0xc8>
	  }

	  currentLine++;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <get_question+0xe0>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <get_question+0xe0>)
 8002a3c:	701a      	strb	r2, [r3, #0]
  while (currentLine <= lineToRead+1) {
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <get_question+0xe0>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3301      	adds	r3, #1
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	ddbd      	ble.n	80029c8 <get_question+0x44>
  }
  f_close(&myFILE);
 8002a4c:	4809      	ldr	r0, [pc, #36]	; (8002a74 <get_question+0xf0>)
 8002a4e:	f00d fc84 	bl	801035a <f_close>
  f_mount(&myFATFS," ",0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	490d      	ldr	r1, [pc, #52]	; (8002a8c <get_question+0x108>)
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <get_question+0xe8>)
 8002a58:	f00c fc40 	bl	800f2dc <f_mount>

}
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000001 	.word	0x20000001
 8002a68:	20006228 	.word	0x20006228
 8002a6c:	200002e4 	.word	0x200002e4
 8002a70:	0801403c 	.word	0x0801403c
 8002a74:	20001314 	.word	0x20001314
 8002a78:	20002340 	.word	0x20002340
 8002a7c:	08014048 	.word	0x08014048
 8002a80:	08014050 	.word	0x08014050
 8002a84:	200023a4 	.word	0x200023a4
 8002a88:	20002408 	.word	0x20002408
 8002a8c:	08014054 	.word	0x08014054

08002a90 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );

extern uint8_t key[], heart[], start[], endpt[], elekey[], game[], event[], sheart[], toxic[], random_move[];

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	e002      	b.n	8002aa0 <Delay+0x10>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f9      	bne.n	8002a9a <Delay+0xa>
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <LCD_INIT>:

void LCD_INIT ( void )
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f000 f829 	bl	8002b10 <LCD_BackLed_Control>
	LCD_Rst();
 8002abe:	f000 f80f 	bl	8002ae0 <LCD_Rst>
	LCD_REG_Config();
 8002ac2:	f000 f85f 	bl	8002b84 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8002ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ad0:	22f0      	movs	r2, #240	; 0xf0
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f000 f9e6 	bl	8002ea6 <LCD_Clear>
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4807      	ldr	r0, [pc, #28]	; (8002b08 <LCD_Rst+0x28>)
 8002aea:	f005 fff4 	bl	8008ad6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8002aee:	4807      	ldr	r0, [pc, #28]	; (8002b0c <LCD_Rst+0x2c>)
 8002af0:	f7ff ffce 	bl	8002a90 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2102      	movs	r1, #2
 8002af8:	4803      	ldr	r0, [pc, #12]	; (8002b08 <LCD_Rst+0x28>)
 8002afa:	f005 ffec 	bl	8008ad6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8002afe:	4803      	ldr	r0, [pc, #12]	; (8002b0c <LCD_Rst+0x2c>)
 8002b00:	f7ff ffc6 	bl	8002a90 <Delay>
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40011800 	.word	0x40011800
 8002b0c:	0002bffc 	.word	0x0002bffc

08002b10 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8002b20:	2200      	movs	r2, #0
 8002b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b26:	4807      	ldr	r0, [pc, #28]	; (8002b44 <LCD_BackLed_Control+0x34>)
 8002b28:	f005 ffd5 	bl	8008ad6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8002b2c:	e005      	b.n	8002b3a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b34:	4803      	ldr	r0, [pc, #12]	; (8002b44 <LCD_BackLed_Control+0x34>)
 8002b36:	f005 ffce 	bl	8008ad6 <HAL_GPIO_WritePin>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40011400 	.word	0x40011400

08002b48 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8002b52:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	8013      	strh	r3, [r2, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <LCD_Write_Data+0x1c>)
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	8013      	strh	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	60020000 	.word	0x60020000

08002b84 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8002b88:	20cf      	movs	r0, #207	; 0xcf
 8002b8a:	f7ff ffdd 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7ff ffe8 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8002b94:	2081      	movs	r0, #129	; 0x81
 8002b96:	f7ff ffe5 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8002b9a:	2030      	movs	r0, #48	; 0x30
 8002b9c:	f7ff ffe2 	bl	8002b64 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8002ba0:	20ed      	movs	r0, #237	; 0xed
 8002ba2:	f7ff ffd1 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8002ba6:	2064      	movs	r0, #100	; 0x64
 8002ba8:	f7ff ffdc 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8002bac:	2003      	movs	r0, #3
 8002bae:	f7ff ffd9 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8002bb2:	2012      	movs	r0, #18
 8002bb4:	f7ff ffd6 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8002bb8:	2081      	movs	r0, #129	; 0x81
 8002bba:	f7ff ffd3 	bl	8002b64 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8002bbe:	20e8      	movs	r0, #232	; 0xe8
 8002bc0:	f7ff ffc2 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8002bc4:	2085      	movs	r0, #133	; 0x85
 8002bc6:	f7ff ffcd 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8002bca:	2010      	movs	r0, #16
 8002bcc:	f7ff ffca 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8002bd0:	2078      	movs	r0, #120	; 0x78
 8002bd2:	f7ff ffc7 	bl	8002b64 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8002bd6:	20cb      	movs	r0, #203	; 0xcb
 8002bd8:	f7ff ffb6 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8002bdc:	2039      	movs	r0, #57	; 0x39
 8002bde:	f7ff ffc1 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8002be2:	202c      	movs	r0, #44	; 0x2c
 8002be4:	f7ff ffbe 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7ff ffbb 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8002bee:	2034      	movs	r0, #52	; 0x34
 8002bf0:	f7ff ffb8 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	f7ff ffb5 	bl	8002b64 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8002bfa:	20f7      	movs	r0, #247	; 0xf7
 8002bfc:	f7ff ffa4 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8002c00:	2020      	movs	r0, #32
 8002c02:	f7ff ffaf 	bl	8002b64 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8002c06:	20ea      	movs	r0, #234	; 0xea
 8002c08:	f7ff ff9e 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff ffa9 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7ff ffa6 	bl	8002b64 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8002c18:	20b1      	movs	r0, #177	; 0xb1
 8002c1a:	f7ff ff95 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7ff ffa0 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8002c24:	201b      	movs	r0, #27
 8002c26:	f7ff ff9d 	bl	8002b64 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8002c2a:	20b6      	movs	r0, #182	; 0xb6
 8002c2c:	f7ff ff8c 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8002c30:	200a      	movs	r0, #10
 8002c32:	f7ff ff97 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8002c36:	20a2      	movs	r0, #162	; 0xa2
 8002c38:	f7ff ff94 	bl	8002b64 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8002c3c:	20c0      	movs	r0, #192	; 0xc0
 8002c3e:	f7ff ff83 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8002c42:	2035      	movs	r0, #53	; 0x35
 8002c44:	f7ff ff8e 	bl	8002b64 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8002c48:	20c1      	movs	r0, #193	; 0xc1
 8002c4a:	f7ff ff7d 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8002c4e:	2011      	movs	r0, #17
 8002c50:	f7ff ff88 	bl	8002b64 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8002c54:	20c5      	movs	r0, #197	; 0xc5
 8002c56:	f7ff ff77 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8002c5a:	2045      	movs	r0, #69	; 0x45
 8002c5c:	f7ff ff82 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8002c60:	2045      	movs	r0, #69	; 0x45
 8002c62:	f7ff ff7f 	bl	8002b64 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8002c66:	20c7      	movs	r0, #199	; 0xc7
 8002c68:	f7ff ff6e 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8002c6c:	20a2      	movs	r0, #162	; 0xa2
 8002c6e:	f7ff ff79 	bl	8002b64 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8002c72:	20f2      	movs	r0, #242	; 0xf2
 8002c74:	f7ff ff68 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7ff ff73 	bl	8002b64 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8002c7e:	2026      	movs	r0, #38	; 0x26
 8002c80:	f7ff ff62 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7ff ff6d 	bl	8002b64 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8002c8a:	20e0      	movs	r0, #224	; 0xe0
 8002c8c:	f7ff ff5c 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8002c90:	200f      	movs	r0, #15
 8002c92:	f7ff ff67 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8002c96:	2026      	movs	r0, #38	; 0x26
 8002c98:	f7ff ff64 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8002c9c:	2024      	movs	r0, #36	; 0x24
 8002c9e:	f7ff ff61 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8002ca2:	200b      	movs	r0, #11
 8002ca4:	f7ff ff5e 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8002ca8:	200e      	movs	r0, #14
 8002caa:	f7ff ff5b 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8002cae:	2009      	movs	r0, #9
 8002cb0:	f7ff ff58 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8002cb4:	2054      	movs	r0, #84	; 0x54
 8002cb6:	f7ff ff55 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8002cba:	20a8      	movs	r0, #168	; 0xa8
 8002cbc:	f7ff ff52 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8002cc0:	2046      	movs	r0, #70	; 0x46
 8002cc2:	f7ff ff4f 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8002cc6:	200c      	movs	r0, #12
 8002cc8:	f7ff ff4c 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8002ccc:	2017      	movs	r0, #23
 8002cce:	f7ff ff49 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8002cd2:	2009      	movs	r0, #9
 8002cd4:	f7ff ff46 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8002cd8:	200f      	movs	r0, #15
 8002cda:	f7ff ff43 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8002cde:	2007      	movs	r0, #7
 8002ce0:	f7ff ff40 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7ff ff3d 	bl	8002b64 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8002cea:	20e1      	movs	r0, #225	; 0xe1
 8002cec:	f7ff ff2c 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7ff ff37 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8002cf6:	2019      	movs	r0, #25
 8002cf8:	f7ff ff34 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8002cfc:	201b      	movs	r0, #27
 8002cfe:	f7ff ff31 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8002d02:	2004      	movs	r0, #4
 8002d04:	f7ff ff2e 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8002d08:	2010      	movs	r0, #16
 8002d0a:	f7ff ff2b 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8002d0e:	2007      	movs	r0, #7
 8002d10:	f7ff ff28 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8002d14:	202a      	movs	r0, #42	; 0x2a
 8002d16:	f7ff ff25 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8002d1a:	2047      	movs	r0, #71	; 0x47
 8002d1c:	f7ff ff22 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8002d20:	2039      	movs	r0, #57	; 0x39
 8002d22:	f7ff ff1f 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8002d26:	2003      	movs	r0, #3
 8002d28:	f7ff ff1c 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8002d2c:	2006      	movs	r0, #6
 8002d2e:	f7ff ff19 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8002d32:	2006      	movs	r0, #6
 8002d34:	f7ff ff16 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8002d38:	2030      	movs	r0, #48	; 0x30
 8002d3a:	f7ff ff13 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8002d3e:	2038      	movs	r0, #56	; 0x38
 8002d40:	f7ff ff10 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8002d44:	200f      	movs	r0, #15
 8002d46:	f7ff ff0d 	bl	8002b64 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8002d4a:	2036      	movs	r0, #54	; 0x36
 8002d4c:	f7ff fefc 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8002d50:	20c8      	movs	r0, #200	; 0xc8
 8002d52:	f7ff ff07 	bl	8002b64 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8002d56:	202a      	movs	r0, #42	; 0x2a
 8002d58:	f7ff fef6 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7ff ff01 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7ff fefe 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7ff fefb 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8002d6e:	20ef      	movs	r0, #239	; 0xef
 8002d70:	f7ff fef8 	bl	8002b64 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8002d74:	202b      	movs	r0, #43	; 0x2b
 8002d76:	f7ff fee7 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7ff fef2 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7ff feef 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8002d86:	2001      	movs	r0, #1
 8002d88:	f7ff feec 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8002d8c:	203f      	movs	r0, #63	; 0x3f
 8002d8e:	f7ff fee9 	bl	8002b64 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8002d92:	203a      	movs	r0, #58	; 0x3a
 8002d94:	f7ff fed8 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8002d98:	2055      	movs	r0, #85	; 0x55
 8002d9a:	f7ff fee3 	bl	8002b64 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8002d9e:	2011      	movs	r0, #17
 8002da0:	f7ff fed2 	bl	8002b48 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8002da4:	4803      	ldr	r0, [pc, #12]	; (8002db4 <LCD_REG_Config+0x230>)
 8002da6:	f7ff fe73 	bl	8002a90 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8002daa:	2029      	movs	r0, #41	; 0x29
 8002dac:	f7ff fecc 	bl	8002b48 <LCD_Write_Cmd>
	
	
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	0002bffc 	.word	0x0002bffc

08002db8 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	80fb      	strh	r3, [r7, #6]
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80bb      	strh	r3, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	807b      	strh	r3, [r7, #2]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8002dd6:	202a      	movs	r0, #42	; 0x2a
 8002dd8:	f7ff feb6 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff febe 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff feb8 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8002df4:	88fa      	ldrh	r2, [r7, #6]
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	121b      	asrs	r3, r3, #8
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff feaf 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fea4 	bl	8002b64 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8002e1c:	202b      	movs	r0, #43	; 0x2b
 8002e1e:	f7ff fe93 	bl	8002b48 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8002e22:	88bb      	ldrh	r3, [r7, #4]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fe9b 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8002e2e:	88bb      	ldrh	r3, [r7, #4]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fe95 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8002e3a:	88ba      	ldrh	r2, [r7, #4]
 8002e3c:	883b      	ldrh	r3, [r7, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b01      	subs	r3, #1
 8002e42:	121b      	asrs	r3, r3, #8
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fe8c 	bl	8002b64 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8002e4c:	88ba      	ldrh	r2, [r7, #4]
 8002e4e:	883b      	ldrh	r3, [r7, #0]
 8002e50:	4413      	add	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fe81 	bl	8002b64 <LCD_Write_Data>
	
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}

08002e6a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8002e7a:	202c      	movs	r0, #44	; 0x2c
 8002e7c:	f7ff fe64 	bl	8002b48 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e006      	b.n	8002e94 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8002e86:	887b      	ldrh	r3, [r7, #2]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fe6b 	bl	8002b64 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3301      	adds	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d3f4      	bcc.n	8002e86 <LCD_FillColor+0x1c>
		
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8002ea6:	b590      	push	{r4, r7, lr}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4604      	mov	r4, r0
 8002eae:	4608      	mov	r0, r1
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4623      	mov	r3, r4
 8002eb6:	80fb      	strh	r3, [r7, #6]
 8002eb8:	4603      	mov	r3, r0
 8002eba:	80bb      	strh	r3, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8002ec4:	883b      	ldrh	r3, [r7, #0]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	88b9      	ldrh	r1, [r7, #4]
 8002eca:	88f8      	ldrh	r0, [r7, #6]
 8002ecc:	f7ff ff74 	bl	8002db8 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	883a      	ldrh	r2, [r7, #0]
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	8b3b      	ldrh	r3, [r7, #24]
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f7ff ffc3 	bl	8002e6a <LCD_FillColor>
	
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd90      	pop	{r4, r7, pc}

08002eec <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor )
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	80fb      	strh	r3, [r7, #6]
 8002efe:	4603      	mov	r3, r0
 8002f00:	80bb      	strh	r3, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
 8002f06:	4613      	mov	r3, r2
 8002f08:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	3b20      	subs	r3, #32
 8002f0e:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002f10:	88b9      	ldrh	r1, [r7, #4]
 8002f12:	88f8      	ldrh	r0, [r7, #6]
 8002f14:	2310      	movs	r3, #16
 8002f16:	2208      	movs	r2, #8
 8002f18:	f7ff ff4e 	bl	8002db8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8002f1c:	202c      	movs	r0, #44	; 0x2c
 8002f1e:	f7ff fe13 	bl	8002b48 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002f22:	2300      	movs	r3, #0
 8002f24:	73bb      	strb	r3, [r7, #14]
 8002f26:	e024      	b.n	8002f72 <LCD_DrawChar+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8002f28:	7b3a      	ldrb	r2, [r7, #12]
 8002f2a:	7bbb      	ldrb	r3, [r7, #14]
 8002f2c:	4915      	ldr	r1, [pc, #84]	; (8002f84 <LCD_DrawChar+0x98>)
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	440a      	add	r2, r1
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002f38:	2300      	movs	r3, #0
 8002f3a:	737b      	strb	r3, [r7, #13]
 8002f3c:	e013      	b.n	8002f66 <LCD_DrawChar+0x7a>
		{
			if ( ucTemp & 0x01 )
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <LCD_DrawChar+0x66>
				LCD_Write_Data ( usColor );
 8002f48:	883b      	ldrh	r3, [r7, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fe0a 	bl	8002b64 <LCD_Write_Data>
 8002f50:	e003      	b.n	8002f5a <LCD_DrawChar+0x6e>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8002f52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f56:	f7ff fe05 	bl	8002b64 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002f60:	7b7b      	ldrb	r3, [r7, #13]
 8002f62:	3301      	adds	r3, #1
 8002f64:	737b      	strb	r3, [r7, #13]
 8002f66:	7b7b      	ldrb	r3, [r7, #13]
 8002f68:	2b07      	cmp	r3, #7
 8002f6a:	d9e8      	bls.n	8002f3e <LCD_DrawChar+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	73bb      	strb	r3, [r7, #14]
 8002f72:	7bbb      	ldrb	r3, [r7, #14]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d9d7      	bls.n	8002f28 <LCD_DrawChar+0x3c>
			
		}
		
	}
	
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08014274 	.word	0x08014274

08002f88 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60ba      	str	r2, [r7, #8]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	81fb      	strh	r3, [r7, #14]
 8002f96:	460b      	mov	r3, r1
 8002f98:	81bb      	strh	r3, [r7, #12]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' && *pStr != '\n')
 8002f9e:	e047      	b.n	8003030 <LCD_DrawString+0xa8>
	{
		if (*pStr == ' '){	// do word wrap
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d126      	bne.n	8002ff6 <LCD_DrawString+0x6e>
			const char * wordend = pStr;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	61fb      	str	r3, [r7, #28]
			int length = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
			wordend++;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
			while (*wordend != ' ' && *wordend!= '\0') {	// check for word end position
 8002fb6:	e005      	b.n	8002fc4 <LCD_DrawString+0x3c>
				wordend ++;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
				length ++;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61bb      	str	r3, [r7, #24]
			while (*wordend != ' ' && *wordend!= '\0') {	// check for word end position
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d003      	beq.n	8002fd4 <LCD_DrawString+0x4c>
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f1      	bne.n	8002fb8 <LCD_DrawString+0x30>
			}
			int result = ((usC - LCD_DispWindow_Start_COLUMN) + (WIDTH_EN_CHAR * (length+1)));
 8002fd4:	89fa      	ldrh	r2, [r7, #14]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
			if (result > LCD_DispWindow_COLUMN){
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2bf0      	cmp	r3, #240	; 0xf0
 8002fe4:	dd07      	ble.n	8002ff6 <LCD_DrawString+0x6e>
				pStr++;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
				usC = LCD_DispWindow_Start_COLUMN;
 8002fec:	2300      	movs	r3, #0
 8002fee:	81fb      	strh	r3, [r7, #14]
				usP += HEIGHT_EN_CHAR;
 8002ff0:	89bb      	ldrh	r3, [r7, #12]
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	81bb      	strh	r3, [r7, #12]
			}
		}

		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
 8002ff8:	2be8      	cmp	r3, #232	; 0xe8
 8002ffa:	d904      	bls.n	8003006 <LCD_DrawString+0x7e>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8003000:	89bb      	ldrh	r3, [r7, #12]
 8003002:	3310      	adds	r3, #16
 8003004:	81bb      	strh	r3, [r7, #12]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8003006:	89bb      	ldrh	r3, [r7, #12]
 8003008:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800300c:	d903      	bls.n	8003016 <LCD_DrawString+0x8e>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800300e:	2300      	movs	r3, #0
 8003010:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8003012:	2300      	movs	r3, #0
 8003014:	81bb      	strh	r3, [r7, #12]
		}


		LCD_DrawChar ( usC, usP, * pStr , usColor);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	89b9      	ldrh	r1, [r7, #12]
 800301e:	89f8      	ldrh	r0, [r7, #14]
 8003020:	f7ff ff64 	bl	8002eec <LCD_DrawChar>
		pStr ++;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	3301      	adds	r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
		usC += WIDTH_EN_CHAR;
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	3308      	adds	r3, #8
 800302e:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' && *pStr != '\n')
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <LCD_DrawString+0xb8>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b0a      	cmp	r3, #10
 800303e:	d1af      	bne.n	8002fa0 <LCD_DrawString+0x18>
		
	}
}
 8003040:	bf00      	nop
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <LCD_DrawBox>:
/*
 * start x,y, color, size
 * create a sizexsize box
 */
void LCD_DrawBox(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor, uint8_t size)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	4604      	mov	r4, r0
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4623      	mov	r3, r4
 8003058:	80fb      	strh	r3, [r7, #6]
 800305a:	4603      	mov	r3, r0
 800305c:	80bb      	strh	r3, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	807b      	strh	r3, [r7, #2]
 8003062:	4613      	mov	r3, r2
 8003064:	707b      	strb	r3, [r7, #1]
	for(int i=0; i<size; i++){
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e013      	b.n	8003094 <LCD_DrawBox+0x4c>
		LCD_OpenWindow ( usCOLUMN, usPAGE+i, size, 1 );
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	b29a      	uxth	r2, r3
 8003070:	88bb      	ldrh	r3, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	b299      	uxth	r1, r3
 8003076:	787b      	ldrb	r3, [r7, #1]
 8003078:	b29a      	uxth	r2, r3
 800307a:	88f8      	ldrh	r0, [r7, #6]
 800307c:	2301      	movs	r3, #1
 800307e:	f7ff fe9b 	bl	8002db8 <LCD_OpenWindow>
		LCD_FillColor(size, usColor);
 8003082:	787b      	ldrb	r3, [r7, #1]
 8003084:	887a      	ldrh	r2, [r7, #2]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff feee 	bl	8002e6a <LCD_FillColor>
	for(int i=0; i<size; i++){
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3301      	adds	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	787b      	ldrb	r3, [r7, #1]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	dbe7      	blt.n	800306c <LCD_DrawBox+0x24>
	}

}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd90      	pop	{r4, r7, pc}

080030a6 <LCD_DrawDot>:


void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	80fb      	strh	r3, [r7, #6]
 80030b0:	460b      	mov	r3, r1
 80030b2:	80bb      	strh	r3, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	807b      	strh	r3, [r7, #2]

	LCD_OpenWindow ( usCOLUMN, usPAGE, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80030b8:	88b9      	ldrh	r1, [r7, #4]
 80030ba:	88f8      	ldrh	r0, [r7, #6]
 80030bc:	2310      	movs	r3, #16
 80030be:	2208      	movs	r2, #8
 80030c0:	f7ff fe7a 	bl	8002db8 <LCD_OpenWindow>
	LCD_FillColor(1, usColor);
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	4619      	mov	r1, r3
 80030c8:	2001      	movs	r0, #1
 80030ca:	f7ff fece 	bl	8002e6a <LCD_FillColor>

		
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <LCD_maze>:

void LCD_maze(uint8_t **maze, uint16_t usColumn, uint16_t usPage, uint8_t size, uint8_t row, uint8_t col){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	817b      	strh	r3, [r7, #10]
 80030ea:	460b      	mov	r3, r1
 80030ec:	813b      	strh	r3, [r7, #8]
 80030ee:	4613      	mov	r3, r2
 80030f0:	71fb      	strb	r3, [r7, #7]
			//if == 3 -> green
			// if == 4 -> yellow
			// if >4(obstacles) -> blue

	// or try to display simple # to check array correctness*****
	for (int i = 0; i < row; i++) {
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e26e      	b.n	80035d6 <LCD_maze+0x4fe>
	        for (int j = 0; j < col; j++) {
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	e262      	b.n	80035c4 <LCD_maze+0x4ec>
	            if (maze[i][j] == 1) {
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4413      	add	r3, r2
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d118      	bne.n	8003144 <LCD_maze+0x6c>
	                LCD_DrawBox(usColumn+j*size, usPage+i*size, BLACK, size);  // Print wall
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	b29b      	uxth	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	b292      	uxth	r2, r2
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	b29a      	uxth	r2, r3
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	4413      	add	r3, r2
 8003124:	b298      	uxth	r0, r3
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	b29b      	uxth	r3, r3
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	b292      	uxth	r2, r2
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	b29a      	uxth	r2, r3
 8003134:	893b      	ldrh	r3, [r7, #8]
 8003136:	4413      	add	r3, r2
 8003138:	b299      	uxth	r1, r3
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	2200      	movs	r2, #0
 800313e:	f7ff ff83 	bl	8003048 <LCD_DrawBox>
 8003142:	e23c      	b.n	80035be <LCD_maze+0x4e6>
	            } else if(maze[i][j] == 0) {
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d119      	bne.n	800318c <LCD_maze+0xb4>
	            	LCD_DrawBox(usColumn+j*size, usPage+i*size, WHITE, size);  // Print empty space
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	b29b      	uxth	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	b292      	uxth	r2, r2
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	b29a      	uxth	r2, r3
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	4413      	add	r3, r2
 800316a:	b298      	uxth	r0, r3
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	b29b      	uxth	r3, r3
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	b292      	uxth	r2, r2
 8003174:	fb02 f303 	mul.w	r3, r2, r3
 8003178:	b29a      	uxth	r2, r3
 800317a:	893b      	ldrh	r3, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	b299      	uxth	r1, r3
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003186:	f7ff ff5f 	bl	8003048 <LCD_DrawBox>
 800318a:	e218      	b.n	80035be <LCD_maze+0x4e6>
	            } else if (maze[i][j] == 2){
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d119      	bne.n	80031d4 <LCD_maze+0xfc>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, start, RED);   // print start
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	b292      	uxth	r2, r2
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	893b      	ldrh	r3, [r7, #8]
 80031b0:	4413      	add	r3, r2
 80031b2:	b298      	uxth	r0, r3
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	b292      	uxth	r2, r2
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	897b      	ldrh	r3, [r7, #10]
 80031c4:	4413      	add	r3, r2
 80031c6:	b299      	uxth	r1, r3
 80031c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031cc:	4a91      	ldr	r2, [pc, #580]	; (8003414 <LCD_maze+0x33c>)
 80031ce:	f000 fa15 	bl	80035fc <LCD_Drawelement>
 80031d2:	e1f4      	b.n	80035be <LCD_maze+0x4e6>
	            } else if (maze[i][j] == 3){
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d119      	bne.n	800321c <LCD_maze+0x144>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, endpt, 0xFD20);   // print end
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	b292      	uxth	r2, r2
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	893b      	ldrh	r3, [r7, #8]
 80031f8:	4413      	add	r3, r2
 80031fa:	b298      	uxth	r0, r3
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	b292      	uxth	r2, r2
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	b29a      	uxth	r2, r3
 800320a:	897b      	ldrh	r3, [r7, #10]
 800320c:	4413      	add	r3, r2
 800320e:	b299      	uxth	r1, r3
 8003210:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003214:	4a80      	ldr	r2, [pc, #512]	; (8003418 <LCD_maze+0x340>)
 8003216:	f000 f9f1 	bl	80035fc <LCD_Drawelement>
 800321a:	e1d0      	b.n	80035be <LCD_maze+0x4e6>
	            } else if (maze[i][j]==4){
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d119      	bne.n	8003264 <LCD_maze+0x18c>

	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, elekey, YELLOW);	// print key
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	b29b      	uxth	r3, r3
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	b292      	uxth	r2, r2
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	b29a      	uxth	r2, r3
 800323e:	893b      	ldrh	r3, [r7, #8]
 8003240:	4413      	add	r3, r2
 8003242:	b298      	uxth	r0, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	b29b      	uxth	r3, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	b292      	uxth	r2, r2
 800324c:	fb02 f303 	mul.w	r3, r2, r3
 8003250:	b29a      	uxth	r2, r3
 8003252:	897b      	ldrh	r3, [r7, #10]
 8003254:	4413      	add	r3, r2
 8003256:	b299      	uxth	r1, r3
 8003258:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800325c:	4a6f      	ldr	r2, [pc, #444]	; (800341c <LCD_maze+0x344>)
 800325e:	f000 f9cd 	bl	80035fc <LCD_Drawelement>
 8003262:	e1ac      	b.n	80035be <LCD_maze+0x4e6>

	            } else if (maze[i][j]==5){//light pattern
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b05      	cmp	r3, #5
 8003276:	d119      	bne.n	80032ac <LCD_maze+0x1d4>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, game, GREEN);	// test for individual task
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	b29b      	uxth	r3, r3
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	b292      	uxth	r2, r2
 8003280:	fb02 f303 	mul.w	r3, r2, r3
 8003284:	b29a      	uxth	r2, r3
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	4413      	add	r3, r2
 800328a:	b298      	uxth	r0, r3
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	b29b      	uxth	r3, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	b292      	uxth	r2, r2
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	b29a      	uxth	r2, r3
 800329a:	897b      	ldrh	r3, [r7, #10]
 800329c:	4413      	add	r3, r2
 800329e:	b299      	uxth	r1, r3
 80032a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032a4:	4a5e      	ldr	r2, [pc, #376]	; (8003420 <LCD_maze+0x348>)
 80032a6:	f000 f9a9 	bl	80035fc <LCD_Drawelement>
 80032aa:	e188      	b.n	80035be <LCD_maze+0x4e6>
	            }
	            else if ( maze[i][j]==6){ // clap game
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d118      	bne.n	80032f2 <LCD_maze+0x21a>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, game, BLUE);	//draw game
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	b292      	uxth	r2, r2
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	893b      	ldrh	r3, [r7, #8]
 80032d0:	4413      	add	r3, r2
 80032d2:	b298      	uxth	r0, r3
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	b292      	uxth	r2, r2
 80032dc:	fb02 f303 	mul.w	r3, r2, r3
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	4413      	add	r3, r2
 80032e6:	b299      	uxth	r1, r3
 80032e8:	231f      	movs	r3, #31
 80032ea:	4a4d      	ldr	r2, [pc, #308]	; (8003420 <LCD_maze+0x348>)
 80032ec:	f000 f986 	bl	80035fc <LCD_Drawelement>
 80032f0:	e165      	b.n	80035be <LCD_maze+0x4e6>

	            }else if (maze[i][j]==7){ // distance game
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b07      	cmp	r3, #7
 8003304:	d119      	bne.n	800333a <LCD_maze+0x262>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, game, RED);	//draw game
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	b29b      	uxth	r3, r3
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	b292      	uxth	r2, r2
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	b29a      	uxth	r2, r3
 8003314:	893b      	ldrh	r3, [r7, #8]
 8003316:	4413      	add	r3, r2
 8003318:	b298      	uxth	r0, r3
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	b29b      	uxth	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	b292      	uxth	r2, r2
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	b29a      	uxth	r2, r3
 8003328:	897b      	ldrh	r3, [r7, #10]
 800332a:	4413      	add	r3, r2
 800332c:	b299      	uxth	r1, r3
 800332e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003332:	4a3b      	ldr	r2, [pc, #236]	; (8003420 <LCD_maze+0x348>)
 8003334:	f000 f962 	bl	80035fc <LCD_Drawelement>
 8003338:	e141      	b.n	80035be <LCD_maze+0x4e6>

	            } else if (maze[i][j]==8){//dark
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b08      	cmp	r3, #8
 800334c:	d119      	bne.n	8003382 <LCD_maze+0x2aa>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, GREEN);	// test for individual task
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	b29b      	uxth	r3, r3
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	b292      	uxth	r2, r2
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	b29a      	uxth	r2, r3
 800335c:	893b      	ldrh	r3, [r7, #8]
 800335e:	4413      	add	r3, r2
 8003360:	b298      	uxth	r0, r3
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	b29b      	uxth	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	b292      	uxth	r2, r2
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	b29a      	uxth	r2, r3
 8003370:	897b      	ldrh	r3, [r7, #10]
 8003372:	4413      	add	r3, r2
 8003374:	b299      	uxth	r1, r3
 8003376:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800337a:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <LCD_maze+0x34c>)
 800337c:	f000 f93e 	bl	80035fc <LCD_Drawelement>
 8003380:	e11d      	b.n	80035be <LCD_maze+0x4e6>
	            }else if (maze[i][j]==9){//bright //purple
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b09      	cmp	r3, #9
 8003394:	d119      	bne.n	80033ca <LCD_maze+0x2f2>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, 0xF81F);	// test for individual task
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	b29b      	uxth	r3, r3
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	b292      	uxth	r2, r2
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	893b      	ldrh	r3, [r7, #8]
 80033a6:	4413      	add	r3, r2
 80033a8:	b298      	uxth	r0, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	b292      	uxth	r2, r2
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	897b      	ldrh	r3, [r7, #10]
 80033ba:	4413      	add	r3, r2
 80033bc:	b299      	uxth	r1, r3
 80033be:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <LCD_maze+0x34c>)
 80033c4:	f000 f91a 	bl	80035fc <LCD_Drawelement>
 80033c8:	e0f9      	b.n	80035be <LCD_maze+0x4e6>

	            }else if (maze[i][j]==10){//ice
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b0a      	cmp	r3, #10
 80033dc:	d124      	bne.n	8003428 <LCD_maze+0x350>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, RED);	// test for individual task
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	b292      	uxth	r2, r2
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	893b      	ldrh	r3, [r7, #8]
 80033ee:	4413      	add	r3, r2
 80033f0:	b298      	uxth	r0, r3
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	b292      	uxth	r2, r2
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	b29a      	uxth	r2, r3
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	4413      	add	r3, r2
 8003404:	b299      	uxth	r1, r3
 8003406:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800340a:	4a06      	ldr	r2, [pc, #24]	; (8003424 <LCD_maze+0x34c>)
 800340c:	f000 f8f6 	bl	80035fc <LCD_Drawelement>
 8003410:	e0d5      	b.n	80035be <LCD_maze+0x4e6>
 8003412:	bf00      	nop
 8003414:	08014928 	.word	0x08014928
 8003418:	08014948 	.word	0x08014948
 800341c:	08014968 	.word	0x08014968
 8003420:	08014988 	.word	0x08014988
 8003424:	080149a8 	.word	0x080149a8

	            }else if (maze[i][j]==11){//heat
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b0b      	cmp	r3, #11
 800343a:	d118      	bne.n	800346e <LCD_maze+0x396>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, BLUE);	// test for individual task
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	b29b      	uxth	r3, r3
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	b292      	uxth	r2, r2
 8003444:	fb02 f303 	mul.w	r3, r2, r3
 8003448:	b29a      	uxth	r2, r3
 800344a:	893b      	ldrh	r3, [r7, #8]
 800344c:	4413      	add	r3, r2
 800344e:	b298      	uxth	r0, r3
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	b29b      	uxth	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	b292      	uxth	r2, r2
 8003458:	fb02 f303 	mul.w	r3, r2, r3
 800345c:	b29a      	uxth	r2, r3
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	4413      	add	r3, r2
 8003462:	b299      	uxth	r1, r3
 8003464:	231f      	movs	r3, #31
 8003466:	4a61      	ldr	r2, [pc, #388]	; (80035ec <LCD_maze+0x514>)
 8003468:	f000 f8c8 	bl	80035fc <LCD_Drawelement>
 800346c:	e0a7      	b.n	80035be <LCD_maze+0x4e6>

	            }else if (maze[i][j]==12){//quiz
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d119      	bne.n	80034b6 <LCD_maze+0x3de>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, event, YELLOW);	// test for individual task
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	b29b      	uxth	r3, r3
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	b292      	uxth	r2, r2
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	b29a      	uxth	r2, r3
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	4413      	add	r3, r2
 8003494:	b298      	uxth	r0, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	b29b      	uxth	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	b292      	uxth	r2, r2
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	897b      	ldrh	r3, [r7, #10]
 80034a6:	4413      	add	r3, r2
 80034a8:	b299      	uxth	r1, r3
 80034aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034ae:	4a4f      	ldr	r2, [pc, #316]	; (80035ec <LCD_maze+0x514>)
 80034b0:	f000 f8a4 	bl	80035fc <LCD_Drawelement>
 80034b4:	e083      	b.n	80035be <LCD_maze+0x4e6>

	            }else if (maze[i][j]==15){//add heart
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	d119      	bne.n	80034fe <LCD_maze+0x426>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, sheart, RED);	// test for individual task
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	b292      	uxth	r2, r2
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	893b      	ldrh	r3, [r7, #8]
 80034da:	4413      	add	r3, r2
 80034dc:	b298      	uxth	r0, r3
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	b292      	uxth	r2, r2
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	897b      	ldrh	r3, [r7, #10]
 80034ee:	4413      	add	r3, r2
 80034f0:	b299      	uxth	r1, r3
 80034f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034f6:	4a3e      	ldr	r2, [pc, #248]	; (80035f0 <LCD_maze+0x518>)
 80034f8:	f000 f880 	bl	80035fc <LCD_Drawelement>
 80034fc:	e05f      	b.n	80035be <LCD_maze+0x4e6>

	            }else if (maze[i][j]==16){//toxic
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4413      	add	r3, r2
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b10      	cmp	r3, #16
 8003510:	d118      	bne.n	8003544 <LCD_maze+0x46c>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, toxic, BLACK);	// test for individual task
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	b29b      	uxth	r3, r3
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	b292      	uxth	r2, r2
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	b29a      	uxth	r2, r3
 8003520:	893b      	ldrh	r3, [r7, #8]
 8003522:	4413      	add	r3, r2
 8003524:	b298      	uxth	r0, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	b29b      	uxth	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	b292      	uxth	r2, r2
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	b29a      	uxth	r2, r3
 8003534:	897b      	ldrh	r3, [r7, #10]
 8003536:	4413      	add	r3, r2
 8003538:	b299      	uxth	r1, r3
 800353a:	2300      	movs	r3, #0
 800353c:	4a2d      	ldr	r2, [pc, #180]	; (80035f4 <LCD_maze+0x51c>)
 800353e:	f000 f85d 	bl	80035fc <LCD_Drawelement>
 8003542:	e03c      	b.n	80035be <LCD_maze+0x4e6>

	            }else if (maze[i][j]==17){//random
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b11      	cmp	r3, #17
 8003556:	d119      	bne.n	800358c <LCD_maze+0x4b4>
	            	LCD_Drawelement(usPage+i*size, usColumn+j*size, random_move, 0xF81F);	// test for individual task
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	b29b      	uxth	r3, r3
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	b292      	uxth	r2, r2
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	b29a      	uxth	r2, r3
 8003566:	893b      	ldrh	r3, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	b298      	uxth	r0, r3
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	b29b      	uxth	r3, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	b292      	uxth	r2, r2
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	b29a      	uxth	r2, r3
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	4413      	add	r3, r2
 800357e:	b299      	uxth	r1, r3
 8003580:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003584:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <LCD_maze+0x520>)
 8003586:	f000 f839 	bl	80035fc <LCD_Drawelement>
 800358a:	e018      	b.n	80035be <LCD_maze+0x4e6>

	            }else LCD_Drawelement(usPage+i*size, usColumn+j*size, event, 0xB543);	// draw remaining obs
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	b29b      	uxth	r3, r3
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	b292      	uxth	r2, r2
 8003594:	fb02 f303 	mul.w	r3, r2, r3
 8003598:	b29a      	uxth	r2, r3
 800359a:	893b      	ldrh	r3, [r7, #8]
 800359c:	4413      	add	r3, r2
 800359e:	b298      	uxth	r0, r3
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	b292      	uxth	r2, r2
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	4413      	add	r3, r2
 80035b2:	b299      	uxth	r1, r3
 80035b4:	f24b 5343 	movw	r3, #46403	; 0xb543
 80035b8:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <LCD_maze+0x514>)
 80035ba:	f000 f81f 	bl	80035fc <LCD_Drawelement>
	        for (int j = 0; j < col; j++) {
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3301      	adds	r3, #1
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	f6ff ad97 	blt.w	80030fe <LCD_maze+0x26>
	for (int i = 0; i < row; i++) {
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3301      	adds	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f6ff ad8b 	blt.w	80030f8 <LCD_maze+0x20>
	        }
	}

}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	080149a8 	.word	0x080149a8
 80035f0:	080149c8 	.word	0x080149c8
 80035f4:	080149e8 	.word	0x080149e8
 80035f8:	08014a08 	.word	0x08014a08

080035fc <LCD_Drawelement>:



void LCD_Drawelement(uint16_t startx, uint16_t starty, uint8_t element[], uint16_t color){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	60ba      	str	r2, [r7, #8]
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	81fb      	strh	r3, [r7, #14]
 800360a:	460b      	mov	r3, r1
 800360c:	81bb      	strh	r3, [r7, #12]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]

	//LCD_OpenWindow(100, 100, 32, 32);	// open the write window
	LCD_Write_Cmd(CMD_SetPixel);	// set the write mode
 8003612:	202c      	movs	r0, #44	; 0x2c
 8003614:	f7ff fa98 	bl	8002b48 <LCD_Write_Cmd>

	for (int k = 0; k < 16; k++){	// loop for each row
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	e04f      	b.n	80036be <LCD_Drawelement+0xc2>

		for (int i = 0; i < 2; i++){  // 2 array elements per row on LCD
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e046      	b.n	80036b2 <LCD_Drawelement+0xb6>
			int ucTemp = element[k*2 + i];
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005a      	lsls	r2, r3, #1
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	4413      	add	r3, r2
 800362c:	461a      	mov	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4413      	add	r3, r2
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	617b      	str	r3, [r7, #20]

			for(int j = 0; j < 8; j++){	// loop for each column of a row
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	e034      	b.n	80036a6 <LCD_Drawelement+0xaa>
				if(ucTemp & 0x01)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d014      	beq.n	8003670 <LCD_Drawelement+0x74>
					LCD_DrawDot(starty+(i*8+j), startx+k, color);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	b29b      	uxth	r3, r3
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	b29a      	uxth	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	b29b      	uxth	r3, r3
 8003652:	4413      	add	r3, r2
 8003654:	b29a      	uxth	r2, r3
 8003656:	89bb      	ldrh	r3, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	b298      	uxth	r0, r3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	b29a      	uxth	r2, r3
 8003660:	89fb      	ldrh	r3, [r7, #14]
 8003662:	4413      	add	r3, r2
 8003664:	b29b      	uxth	r3, r3
 8003666:	88fa      	ldrh	r2, [r7, #6]
 8003668:	4619      	mov	r1, r3
 800366a:	f7ff fd1c 	bl	80030a6 <LCD_DrawDot>
 800366e:	e014      	b.n	800369a <LCD_Drawelement+0x9e>
				else
					LCD_DrawDot(starty+(i*8+j), startx+k, WHITE);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	b29b      	uxth	r3, r3
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	b29a      	uxth	r2, r3
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	b29b      	uxth	r3, r3
 800367c:	4413      	add	r3, r2
 800367e:	b29a      	uxth	r2, r3
 8003680:	89bb      	ldrh	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	b298      	uxth	r0, r3
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	b29a      	uxth	r2, r3
 800368a:	89fb      	ldrh	r3, [r7, #14]
 800368c:	4413      	add	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003694:	4619      	mov	r1, r3
 8003696:	f7ff fd06 	bl	80030a6 <LCD_DrawDot>
				ucTemp >>= 1;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	105b      	asrs	r3, r3, #1
 800369e:	617b      	str	r3, [r7, #20]
			for(int j = 0; j < 8; j++){	// loop for each column of a row
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3301      	adds	r3, #1
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	ddc7      	ble.n	800363c <LCD_Drawelement+0x40>
		for (int i = 0; i < 2; i++){  // 2 array elements per row on LCD
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	ddb5      	ble.n	8003624 <LCD_Drawelement+0x28>
	for (int k = 0; k < 16; k++){	// loop for each row
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	3301      	adds	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	ddac      	ble.n	800361e <LCD_Drawelement+0x22>
			}
		}
	}
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <LCD_Drawkey>:

void LCD_Drawkey(uint16_t startx, uint16_t starty){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	460a      	mov	r2, r1
 80036da:	80fb      	strh	r3, [r7, #6]
 80036dc:	4613      	mov	r3, r2
 80036de:	80bb      	strh	r3, [r7, #4]

	//LCD_OpenWindow(100, 100, 32, 32);	// open the write window
	LCD_Write_Cmd(CMD_SetPixel);	// set the write mode
 80036e0:	202c      	movs	r0, #44	; 0x2c
 80036e2:	f7ff fa31 	bl	8002b48 <LCD_Write_Cmd>

	for (int k = 0; k < 24; k++){	// loop for each row
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e04e      	b.n	800378a <LCD_Drawkey+0xba>

		for (int i = 0; i < 4; i++){  // 4 array elements per row on LCD
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	e045      	b.n	800377e <LCD_Drawkey+0xae>
			int ucTemp = key[k*4 + i];
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	009a      	lsls	r2, r3, #2
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	4a28      	ldr	r2, [pc, #160]	; (800379c <LCD_Drawkey+0xcc>)
 80036fc:	5cd3      	ldrb	r3, [r2, r3]
 80036fe:	60fb      	str	r3, [r7, #12]

			for(int j = 0; j < 8; j++){	// loop for each column of a row
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	e035      	b.n	8003772 <LCD_Drawkey+0xa2>
				if(ucTemp & 0x01)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d015      	beq.n	800373c <LCD_Drawkey+0x6c>
					LCD_DrawDot(starty+(i*8+j), startx+k, YELLOW);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	b29b      	uxth	r3, r3
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	b29a      	uxth	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	b29b      	uxth	r3, r3
 800371c:	4413      	add	r3, r2
 800371e:	b29a      	uxth	r2, r3
 8003720:	88bb      	ldrh	r3, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	b298      	uxth	r0, r3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	b29a      	uxth	r2, r3
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	4413      	add	r3, r2
 800372e:	b29b      	uxth	r3, r3
 8003730:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003734:	4619      	mov	r1, r3
 8003736:	f7ff fcb6 	bl	80030a6 <LCD_DrawDot>
 800373a:	e014      	b.n	8003766 <LCD_Drawkey+0x96>
				else
					LCD_DrawDot(starty+(i*8+j), startx+k, WHITE);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	b29b      	uxth	r3, r3
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	b29a      	uxth	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	b29b      	uxth	r3, r3
 8003748:	4413      	add	r3, r2
 800374a:	b29a      	uxth	r2, r3
 800374c:	88bb      	ldrh	r3, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	b298      	uxth	r0, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	b29a      	uxth	r2, r3
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	4413      	add	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003760:	4619      	mov	r1, r3
 8003762:	f7ff fca0 	bl	80030a6 <LCD_DrawDot>
				ucTemp >>= 1;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	105b      	asrs	r3, r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
			for(int j = 0; j < 8; j++){	// loop for each column of a row
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	3301      	adds	r3, #1
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b07      	cmp	r3, #7
 8003776:	ddc6      	ble.n	8003706 <LCD_Drawkey+0x36>
		for (int i = 0; i < 4; i++){  // 4 array elements per row on LCD
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	3301      	adds	r3, #1
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b03      	cmp	r3, #3
 8003782:	ddb6      	ble.n	80036f2 <LCD_Drawkey+0x22>
	for (int k = 0; k < 24; k++){	// loop for each row
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3301      	adds	r3, #1
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b17      	cmp	r3, #23
 800378e:	ddad      	ble.n	80036ec <LCD_Drawkey+0x1c>
			}
		}
	}
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	08014868 	.word	0x08014868

080037a0 <LCD_Drawheart>:

void LCD_Drawheart(uint16_t startx, uint16_t starty){
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	460a      	mov	r2, r1
 80037aa:	80fb      	strh	r3, [r7, #6]
 80037ac:	4613      	mov	r3, r2
 80037ae:	80bb      	strh	r3, [r7, #4]

	//LCD_OpenWindow(100, 100, 32, 32);	// open the write window
	LCD_Write_Cmd(CMD_SetPixel);	// set the write mode
 80037b0:	202c      	movs	r0, #44	; 0x2c
 80037b2:	f7ff f9c9 	bl	8002b48 <LCD_Write_Cmd>

	for (int k = 0; k < 24; k++){	// loop for each row
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e04e      	b.n	800385a <LCD_Drawheart+0xba>

		for (int i = 0; i < 4; i++){  // 4 array elements per row on LCD
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	e045      	b.n	800384e <LCD_Drawheart+0xae>
			int ucTemp = heart[k*4 + i];
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	009a      	lsls	r2, r3, #2
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	4a28      	ldr	r2, [pc, #160]	; (800386c <LCD_Drawheart+0xcc>)
 80037cc:	5cd3      	ldrb	r3, [r2, r3]
 80037ce:	60fb      	str	r3, [r7, #12]

			for(int j = 0; j < 8; j++){	// loop for each column of a row
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	e035      	b.n	8003842 <LCD_Drawheart+0xa2>
				if(ucTemp & 0x01)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <LCD_Drawheart+0x6c>
					LCD_DrawDot(starty+(i*8+j), startx+k, RED);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	88bb      	ldrh	r3, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	b298      	uxth	r0, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	4413      	add	r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003804:	4619      	mov	r1, r3
 8003806:	f7ff fc4e 	bl	80030a6 <LCD_DrawDot>
 800380a:	e014      	b.n	8003836 <LCD_Drawheart+0x96>
				else
					LCD_DrawDot(starty+(i*8+j), startx+k, WHITE);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	b29b      	uxth	r3, r3
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	b29a      	uxth	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	b29b      	uxth	r3, r3
 8003818:	4413      	add	r3, r2
 800381a:	b29a      	uxth	r2, r3
 800381c:	88bb      	ldrh	r3, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	b298      	uxth	r0, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	b29a      	uxth	r2, r3
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	4413      	add	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003830:	4619      	mov	r1, r3
 8003832:	f7ff fc38 	bl	80030a6 <LCD_DrawDot>
				ucTemp >>= 1;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	105b      	asrs	r3, r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
			for(int j = 0; j < 8; j++){	// loop for each column of a row
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	3301      	adds	r3, #1
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b07      	cmp	r3, #7
 8003846:	ddc6      	ble.n	80037d6 <LCD_Drawheart+0x36>
		for (int i = 0; i < 4; i++){  // 4 array elements per row on LCD
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3301      	adds	r3, #1
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b03      	cmp	r3, #3
 8003852:	ddb6      	ble.n	80037c2 <LCD_Drawheart+0x22>
	for (int k = 0; k < 24; k++){	// loop for each row
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3301      	adds	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b17      	cmp	r3, #23
 800385e:	ddad      	ble.n	80037bc <LCD_Drawheart+0x1c>
			}
		}
	}
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	080148c8 	.word	0x080148c8

08003870 <LCD_DrawChar_Color>:


void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	4604      	mov	r4, r0
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4623      	mov	r3, r4
 8003880:	80fb      	strh	r3, [r7, #6]
 8003882:	4603      	mov	r3, r0
 8003884:	80bb      	strh	r3, [r7, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	70fb      	strb	r3, [r7, #3]
 800388a:	4613      	mov	r3, r2
 800388c:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	3b20      	subs	r3, #32
 8003892:	733b      	strb	r3, [r7, #12]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8003894:	88b9      	ldrh	r1, [r7, #4]
 8003896:	88f8      	ldrh	r0, [r7, #6]
 8003898:	2310      	movs	r3, #16
 800389a:	2208      	movs	r2, #8
 800389c:	f7ff fa8c 	bl	8002db8 <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 80038a0:	202c      	movs	r0, #44	; 0x2c
 80038a2:	f7ff f951 	bl	8002b48 <LCD_Write_Cmd>

	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80038a6:	2300      	movs	r3, #0
 80038a8:	73bb      	strb	r3, [r7, #14]
 80038aa:	e024      	b.n	80038f6 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80038ac:	7b3a      	ldrb	r2, [r7, #12]
 80038ae:	7bbb      	ldrb	r3, [r7, #14]
 80038b0:	4915      	ldr	r1, [pc, #84]	; (8003908 <LCD_DrawChar_Color+0x98>)
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	440a      	add	r2, r1
 80038b6:	4413      	add	r3, r2
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	73fb      	strb	r3, [r7, #15]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80038bc:	2300      	movs	r3, #0
 80038be:	737b      	strb	r3, [r7, #13]
 80038c0:	e013      	b.n	80038ea <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80038cc:	8c3b      	ldrh	r3, [r7, #32]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f948 	bl	8002b64 <LCD_Write_Data>
 80038d4:	e003      	b.n	80038de <LCD_DrawChar_Color+0x6e>

			else
				LCD_Write_Data ( usColor_Background );
 80038d6:	883b      	ldrh	r3, [r7, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff f943 	bl	8002b64 <LCD_Write_Data>

			ucTemp >>= 1;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80038e4:	7b7b      	ldrb	r3, [r7, #13]
 80038e6:	3301      	adds	r3, #1
 80038e8:	737b      	strb	r3, [r7, #13]
 80038ea:	7b7b      	ldrb	r3, [r7, #13]
 80038ec:	2b07      	cmp	r3, #7
 80038ee:	d9e8      	bls.n	80038c2 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80038f0:	7bbb      	ldrb	r3, [r7, #14]
 80038f2:	3301      	adds	r3, #1
 80038f4:	73bb      	strb	r3, [r7, #14]
 80038f6:	7bbb      	ldrb	r3, [r7, #14]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d9d7      	bls.n	80038ac <LCD_DrawChar_Color+0x3c>

		}

	}

}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	bd90      	pop	{r4, r7, pc}
 8003906:	bf00      	nop
 8003908:	08014274 	.word	0x08014274

0800390c <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af02      	add	r7, sp, #8
 8003912:	4603      	mov	r3, r0
 8003914:	460a      	mov	r2, r1
 8003916:	80fb      	strh	r3, [r7, #6]
 8003918:	4613      	mov	r3, r2
 800391a:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	3b0a      	subs	r3, #10
 8003920:	b298      	uxth	r0, r3
 8003922:	88b9      	ldrh	r1, [r7, #4]
 8003924:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2301      	movs	r3, #1
 800392c:	2214      	movs	r2, #20
 800392e:	f7ff faba 	bl	8002ea6 <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 8003932:	88bb      	ldrh	r3, [r7, #4]
 8003934:	3b0a      	subs	r3, #10
 8003936:	b299      	uxth	r1, r3
 8003938:	88f8      	ldrh	r0, [r7, #6]
 800393a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2314      	movs	r3, #20
 8003942:	2201      	movs	r2, #1
 8003944:	f7ff faaf 	bl	8002ea6 <LCD_Clear>

}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8003950:	b590      	push	{r4, r7, lr}
 8003952:	b087      	sub	sp, #28
 8003954:	af02      	add	r7, sp, #8
 8003956:	60ba      	str	r2, [r7, #8]
 8003958:	461a      	mov	r2, r3
 800395a:	4603      	mov	r3, r0
 800395c:	81fb      	strh	r3, [r7, #14]
 800395e:	460b      	mov	r3, r1
 8003960:	81bb      	strh	r3, [r7, #12]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8003966:	e01f      	b.n	80039a8 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	2be8      	cmp	r3, #232	; 0xe8
 800396c:	d904      	bls.n	8003978 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800396e:	2300      	movs	r3, #0
 8003970:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8003972:	89bb      	ldrh	r3, [r7, #12]
 8003974:	3310      	adds	r3, #16
 8003976:	81bb      	strh	r3, [r7, #12]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8003978:	89bb      	ldrh	r3, [r7, #12]
 800397a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800397e:	d903      	bls.n	8003988 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8003980:	2300      	movs	r3, #0
 8003982:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8003984:	2300      	movs	r3, #0
 8003986:	81bb      	strh	r3, [r7, #12]
		}

		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	88fc      	ldrh	r4, [r7, #6]
 800398e:	89b9      	ldrh	r1, [r7, #12]
 8003990:	89f8      	ldrh	r0, [r7, #14]
 8003992:	8c3b      	ldrh	r3, [r7, #32]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	4623      	mov	r3, r4
 8003998:	f7ff ff6a 	bl	8003870 <LCD_DrawChar_Color>

		pStr ++;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	3301      	adds	r3, #1
 80039a0:	60bb      	str	r3, [r7, #8]

		usC += WIDTH_EN_CHAR;
 80039a2:	89fb      	ldrh	r3, [r7, #14]
 80039a4:	3308      	adds	r3, #8
 80039a6:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1db      	bne.n	8003968 <LCD_DrawString_Color+0x18>

	}

}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}
	...

080039bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039c0:	f003 fb86 	bl	80070d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039c4:	f000 f856 	bl	8003a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039c8:	f000 fb4a 	bl	8004060 <MX_GPIO_Init>
  MX_FSMC_Init();
 80039cc:	f000 fc72 	bl	80042b4 <MX_FSMC_Init>
  MX_ADC1_Init();
 80039d0:	f000 f8b0 	bl	8003b34 <MX_ADC1_Init>
  MX_TIM3_Init();
 80039d4:	f000 fa92 	bl	8003efc <MX_TIM3_Init>
  MX_TIM1_Init();
 80039d8:	f000 f9f4 	bl	8003dc4 <MX_TIM1_Init>
  MX_I2S2_Init();
 80039dc:	f000 f964 	bl	8003ca8 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 80039e0:	f000 f98a 	bl	8003cf8 <MX_SDIO_SD_Init>
  MX_DMA_Init();
 80039e4:	f000 fb02 	bl	8003fec <MX_DMA_Init>
  MX_ADC3_Init();
 80039e8:	f000 f8e2 	bl	8003bb0 <MX_ADC3_Init>
  MX_FATFS_Init();
 80039ec:	f009 fb66 	bl	800d0bc <MX_FATFS_Init>
  MX_SPI1_Init();
 80039f0:	f000 f9b2 	bl	8003d58 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80039f4:	f000 fad0 	bl	8003f98 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80039f8:	f000 fa34 	bl	8003e64 <MX_TIM2_Init>
  MX_I2C2_Init();
 80039fc:	f000 f926 	bl	8003c4c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  macXPT2046_CS_DISABLE();
 8003a00:	2200      	movs	r2, #0
 8003a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a06:	4814      	ldr	r0, [pc, #80]	; (8003a58 <main+0x9c>)
 8003a08:	f005 f865 	bl	8008ad6 <HAL_GPIO_WritePin>
  LCD_INIT();
 8003a0c:	f7ff f851 	bl	8002ab2 <LCD_INIT>
  HAL_TIM_Base_Start_IT(&htim3);
 8003a10:	4812      	ldr	r0, [pc, #72]	; (8003a5c <main+0xa0>)
 8003a12:	f007 ff6f 	bl	800b8f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8003a16:	4812      	ldr	r0, [pc, #72]	; (8003a60 <main+0xa4>)
 8003a18:	f007 ff6c 	bl	800b8f4 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);	//adc calibration
 8003a1c:	4811      	ldr	r0, [pc, #68]	; (8003a64 <main+0xa8>)
 8003a1e:	f004 f97b 	bl	8007d18 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3);	//adc calibration
 8003a22:	4811      	ldr	r0, [pc, #68]	; (8003a68 <main+0xac>)
 8003a24:	f004 f978 	bl	8007d18 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joy, 2);
 8003a28:	2202      	movs	r2, #2
 8003a2a:	4910      	ldr	r1, [pc, #64]	; (8003a6c <main+0xb0>)
 8003a2c:	480e      	ldr	r0, [pc, #56]	; (8003a68 <main+0xac>)
 8003a2e:	f003 fe73 	bl	8007718 <HAL_ADC_Start_DMA>
  max7219_Init();
 8003a32:	f000 fd1b 	bl	800446c <max7219_Init>
  //HAL_ADC_Stop(&hadc3);
  HAL_TIM_Base_Start(&htim2);
 8003a36:	480e      	ldr	r0, [pc, #56]	; (8003a70 <main+0xb4>)
 8003a38:	f007 ff04 	bl	800b844 <HAL_TIM_Base_Start>
    {
  	  char backward[] = "Backward";
  	  LCD_DrawString(10, 10, backward, RED);
    }*/

  while( ! XPT2046_Touch_Calibrate () );
 8003a3c:	bf00      	nop
 8003a3e:	f002 ffdb 	bl	80069f8 <XPT2046_Touch_Calibrate>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0fa      	beq.n	8003a3e <main+0x82>

  setRandomSeed();	//random the seed
 8003a48:	f000 ff64 	bl	8004914 <setRandomSeed>
  maze_all();
 8003a4c:	f000 fdb4 	bl	80045b8 <maze_all>
  //interrupt - k1 -> next round

  while (1)
  {
	  //handle movement
	 move();
 8003a50:	f001 fbe6 	bl	8005220 <move>
 8003a54:	e7fc      	b.n	8003a50 <main+0x94>
 8003a56:	bf00      	nop
 8003a58:	40011400 	.word	0x40011400
 8003a5c:	20002794 	.word	0x20002794
 8003a60:	20002704 	.word	0x20002704
 8003a64:	2000246c 	.word	0x2000246c
 8003a68:	2000249c 	.word	0x2000249c
 8003a6c:	20002880 	.word	0x20002880
 8003a70:	2000274c 	.word	0x2000274c

08003a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b096      	sub	sp, #88	; 0x58
 8003a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a7e:	2228      	movs	r2, #40	; 0x28
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f00d f9ba 	bl	8010dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a88:	f107 031c 	add.w	r3, r7, #28
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
 8003aa2:	60da      	str	r2, [r3, #12]
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aba:	2302      	movs	r3, #2
 8003abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ac4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003ac8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f005 fc62 	bl	8009398 <HAL_RCC_OscConfig>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003ada:	f000 fc6f 	bl	80043bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ade:	230f      	movs	r3, #15
 8003ae0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003af4:	f107 031c 	add.w	r3, r7, #28
 8003af8:	2102      	movs	r1, #2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f005 fece 	bl	800989c <HAL_RCC_ClockConfig>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003b06:	f000 fc59 	bl	80043bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2S2;
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b12:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f006 f856 	bl	8009bcc <HAL_RCCEx_PeriphCLKConfig>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003b26:	f000 fc49 	bl	80043bc <Error_Handler>
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3758      	adds	r7, #88	; 0x58
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b3a:	1d3b      	adds	r3, r7, #4
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003b44:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <MX_ADC1_Init+0x74>)
 8003b46:	4a19      	ldr	r2, [pc, #100]	; (8003bac <MX_ADC1_Init+0x78>)
 8003b48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <MX_ADC1_Init+0x74>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <MX_ADC1_Init+0x74>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <MX_ADC1_Init+0x74>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <MX_ADC1_Init+0x74>)
 8003b5e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003b62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <MX_ADC1_Init+0x74>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <MX_ADC1_Init+0x74>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b70:	480d      	ldr	r0, [pc, #52]	; (8003ba8 <MX_ADC1_Init+0x74>)
 8003b72:	f003 fb33 	bl	80071dc <HAL_ADC_Init>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003b7c:	f000 fc1e 	bl	80043bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003b80:	230d      	movs	r3, #13
 8003b82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b84:	2301      	movs	r3, #1
 8003b86:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <MX_ADC1_Init+0x74>)
 8003b92:	f003 fec7 	bl	8007924 <HAL_ADC_ConfigChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003b9c:	f000 fc0e 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	2000246c 	.word	0x2000246c
 8003bac:	40012400 	.word	0x40012400

08003bb0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003bb6:	1d3b      	adds	r3, r7, #4
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8003bc0:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003bc2:	4a21      	ldr	r2, [pc, #132]	; (8003c48 <MX_ADC3_Init+0x98>)
 8003bc4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003bc6:	4b1f      	ldr	r3, [pc, #124]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bcc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003bce:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bda:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003bdc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003be0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003be2:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 2;
 8003be8:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003bea:	2202      	movs	r2, #2
 8003bec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003bee:	4815      	ldr	r0, [pc, #84]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003bf0:	f003 faf4 	bl	80071dc <HAL_ADC_Init>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_ADC3_Init+0x4e>
  {
    Error_Handler();
 8003bfa:	f000 fbdf 	bl	80043bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003bfe:	230a      	movs	r3, #10
 8003c00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003c06:	2307      	movs	r3, #7
 8003c08:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	480d      	ldr	r0, [pc, #52]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003c10:	f003 fe88 	bl	8007924 <HAL_ADC_ConfigChannel>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8003c1a:	f000 fbcf 	bl	80043bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003c1e:	230c      	movs	r3, #12
 8003c20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003c22:	2302      	movs	r3, #2
 8003c24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4806      	ldr	r0, [pc, #24]	; (8003c44 <MX_ADC3_Init+0x94>)
 8003c2c:	f003 fe7a 	bl	8007924 <HAL_ADC_ConfigChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8003c36:	f000 fbc1 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2000249c 	.word	0x2000249c
 8003c48:	40013c00 	.word	0x40013c00

08003c4c <MX_I2C2_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C2_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <MX_I2C2_Init+0x54>)
 8003c54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c58:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <MX_I2C2_Init+0x58>)
 8003c5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003c88:	4804      	ldr	r0, [pc, #16]	; (8003c9c <MX_I2C2_Init+0x50>)
 8003c8a:	f004 ff5f 	bl	8008b4c <HAL_I2C_Init>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003c94:	f000 fb92 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20002510 	.word	0x20002510
 8003ca0:	40005800 	.word	0x40005800
 8003ca4:	00061a80 	.word	0x00061a80

08003ca8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8003cac:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <MX_I2S2_Init+0x48>)
 8003cae:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <MX_I2S2_Init+0x4c>)
 8003cb0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <MX_I2S2_Init+0x48>)
 8003cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <MX_I2S2_Init+0x48>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <MX_I2S2_Init+0x48>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <MX_I2S2_Init+0x48>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <MX_I2S2_Init+0x48>)
 8003cce:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003cd2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <MX_I2S2_Init+0x48>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8003cda:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <MX_I2S2_Init+0x48>)
 8003cdc:	f005 f87a 	bl	8008dd4 <HAL_I2S_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8003ce6:	f000 fb69 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20002564 	.word	0x20002564
 8003cf4:	40003800 	.word	0x40003800

08003cf8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <MX_SDIO_SD_Init+0x58>)
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <MX_SDIO_SD_Init+0x5c>)
 8003d00:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <MX_SDIO_SD_Init+0x58>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <MX_SDIO_SD_Init+0x58>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <MX_SDIO_SD_Init+0x58>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <MX_SDIO_SD_Init+0x58>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <MX_SDIO_SD_Init+0x58>)
 8003d1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d20:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 6;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <MX_SDIO_SD_Init+0x58>)
 8003d24:	2206      	movs	r2, #6
 8003d26:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK){Error_Handler();}
 8003d28:	4809      	ldr	r0, [pc, #36]	; (8003d50 <MX_SDIO_SD_Init+0x58>)
 8003d2a:	f006 f8e9 	bl	8009f00 <HAL_SD_Init>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_SDIO_SD_Init+0x40>
 8003d34:	f000 fb42 	bl	80043bc <Error_Handler>
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK){Error_Handler();}
 8003d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d3c:	4804      	ldr	r0, [pc, #16]	; (8003d50 <MX_SDIO_SD_Init+0x58>)
 8003d3e:	f006 fec1 	bl	800aac4 <HAL_SD_ConfigWideBusOperation>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_SDIO_SD_Init+0x54>
 8003d48:	f000 fb38 	bl	80043bc <Error_Handler>
  /* USER CODE END SDIO_Init 2 */

}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200025e4 	.word	0x200025e4
 8003d54:	40018000 	.word	0x40018000

08003d58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d5c:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d5e:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <MX_SPI1_Init+0x68>)
 8003d60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d62:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d70:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003da4:	220a      	movs	r2, #10
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003da8:	4804      	ldr	r0, [pc, #16]	; (8003dbc <MX_SPI1_Init+0x64>)
 8003daa:	f007 fa32 	bl	800b212 <HAL_SPI_Init>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003db4:	f000 fb02 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20002668 	.word	0x20002668
 8003dc0:	40013000 	.word	0x40013000

08003dc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dca:	f107 0308 	add.w	r3, r7, #8
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	609a      	str	r2, [r3, #8]
 8003dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd8:	463b      	mov	r3, r7
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003de2:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <MX_TIM1_Init+0x9c>)
 8003de4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003de8:	2247      	movs	r2, #71	; 0x47
 8003dea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003df4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003df8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dfa:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e00:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e0c:	4813      	ldr	r0, [pc, #76]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003e0e:	f007 fcca 	bl	800b7a6 <HAL_TIM_Base_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003e18:	f000 fad0 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e22:	f107 0308 	add.w	r3, r7, #8
 8003e26:	4619      	mov	r1, r3
 8003e28:	480c      	ldr	r0, [pc, #48]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003e2a:	f007 fecb 	bl	800bbc4 <HAL_TIM_ConfigClockSource>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003e34:	f000 fac2 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e40:	463b      	mov	r3, r7
 8003e42:	4619      	mov	r1, r3
 8003e44:	4805      	ldr	r0, [pc, #20]	; (8003e5c <MX_TIM1_Init+0x98>)
 8003e46:	f008 f8b5 	bl	800bfb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003e50:	f000 fab4 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e54:	bf00      	nop
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20002704 	.word	0x20002704
 8003e60:	40012c00 	.word	0x40012c00

08003e64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e6a:	f107 0308 	add.w	r3, r7, #8
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e78:	463b      	mov	r3, r7
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <MX_TIM2_Init+0x94>)
 8003e82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003e88:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <MX_TIM2_Init+0x94>)
 8003e8a:	2247      	movs	r2, #71	; 0x47
 8003e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <MX_TIM2_Init+0x94>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003e94:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <MX_TIM2_Init+0x94>)
 8003e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e9c:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <MX_TIM2_Init+0x94>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <MX_TIM2_Init+0x94>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ea8:	4813      	ldr	r0, [pc, #76]	; (8003ef8 <MX_TIM2_Init+0x94>)
 8003eaa:	f007 fc7c 	bl	800b7a6 <HAL_TIM_Base_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003eb4:	f000 fa82 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ebe:	f107 0308 	add.w	r3, r7, #8
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <MX_TIM2_Init+0x94>)
 8003ec6:	f007 fe7d 	bl	800bbc4 <HAL_TIM_ConfigClockSource>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003ed0:	f000 fa74 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003edc:	463b      	mov	r3, r7
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <MX_TIM2_Init+0x94>)
 8003ee2:	f008 f867 	bl	800bfb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003eec:	f000 fa66 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ef0:	bf00      	nop
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	2000274c 	.word	0x2000274c

08003efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f10:	463b      	mov	r3, r7
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <MX_TIM3_Init+0x94>)
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <MX_TIM3_Init+0x98>)
 8003f1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8003f1e:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <MX_TIM3_Init+0x94>)
 8003f20:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003f24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <MX_TIM3_Init+0x94>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <MX_TIM3_Init+0x94>)
 8003f2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f34:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <MX_TIM3_Init+0x94>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <MX_TIM3_Init+0x94>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f40:	4813      	ldr	r0, [pc, #76]	; (8003f90 <MX_TIM3_Init+0x94>)
 8003f42:	f007 fc30 	bl	800b7a6 <HAL_TIM_Base_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003f4c:	f000 fa36 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	480c      	ldr	r0, [pc, #48]	; (8003f90 <MX_TIM3_Init+0x94>)
 8003f5e:	f007 fe31 	bl	800bbc4 <HAL_TIM_ConfigClockSource>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003f68:	f000 fa28 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f74:	463b      	mov	r3, r7
 8003f76:	4619      	mov	r1, r3
 8003f78:	4805      	ldr	r0, [pc, #20]	; (8003f90 <MX_TIM3_Init+0x94>)
 8003f7a:	f008 f81b 	bl	800bfb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003f84:	f000 fa1a 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f88:	bf00      	nop
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20002794 	.word	0x20002794
 8003f94:	40000400 	.word	0x40000400

08003f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <MX_USART1_UART_Init+0x4c>)
 8003f9e:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <MX_USART1_UART_Init+0x50>)
 8003fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <MX_USART1_UART_Init+0x4c>)
 8003fa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <MX_USART1_UART_Init+0x4c>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <MX_USART1_UART_Init+0x4c>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <MX_USART1_UART_Init+0x4c>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <MX_USART1_UART_Init+0x4c>)
 8003fbe:	220c      	movs	r2, #12
 8003fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <MX_USART1_UART_Init+0x4c>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <MX_USART1_UART_Init+0x4c>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fce:	4805      	ldr	r0, [pc, #20]	; (8003fe4 <MX_USART1_UART_Init+0x4c>)
 8003fd0:	f008 f86e 	bl	800c0b0 <HAL_UART_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003fda:	f000 f9ef 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200027dc 	.word	0x200027dc
 8003fe8:	40013800 	.word	0x40013800

08003fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	; (800405c <MX_DMA_Init+0x70>)
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	4a19      	ldr	r2, [pc, #100]	; (800405c <MX_DMA_Init+0x70>)
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	6153      	str	r3, [r2, #20]
 8003ffe:	4b17      	ldr	r3, [pc, #92]	; (800405c <MX_DMA_Init+0x70>)
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <MX_DMA_Init+0x70>)
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4a13      	ldr	r2, [pc, #76]	; (800405c <MX_DMA_Init+0x70>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6153      	str	r3, [r2, #20]
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <MX_DMA_Init+0x70>)
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004022:	2200      	movs	r2, #0
 8004024:	2100      	movs	r1, #0
 8004026:	200d      	movs	r0, #13
 8004028:	f003 fff9 	bl	800801e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800402c:	200d      	movs	r0, #13
 800402e:	f004 f812 	bl	8008056 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	2100      	movs	r1, #0
 8004036:	200f      	movs	r0, #15
 8004038:	f003 fff1 	bl	800801e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800403c:	200f      	movs	r0, #15
 800403e:	f004 f80a 	bl	8008056 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8004042:	2200      	movs	r2, #0
 8004044:	2100      	movs	r1, #0
 8004046:	203b      	movs	r0, #59	; 0x3b
 8004048:	f003 ffe9 	bl	800801e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 800404c:	203b      	movs	r0, #59	; 0x3b
 800404e:	f004 f802 	bl	8008056 <HAL_NVIC_EnableIRQ>

}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000

08004060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004066:	f107 0318 	add.w	r3, r7, #24
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004074:	4b88      	ldr	r3, [pc, #544]	; (8004298 <MX_GPIO_Init+0x238>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	4a87      	ldr	r2, [pc, #540]	; (8004298 <MX_GPIO_Init+0x238>)
 800407a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407e:	6193      	str	r3, [r2, #24]
 8004080:	4b85      	ldr	r3, [pc, #532]	; (8004298 <MX_GPIO_Init+0x238>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800408c:	4b82      	ldr	r3, [pc, #520]	; (8004298 <MX_GPIO_Init+0x238>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	4a81      	ldr	r2, [pc, #516]	; (8004298 <MX_GPIO_Init+0x238>)
 8004092:	f043 0310 	orr.w	r3, r3, #16
 8004096:	6193      	str	r3, [r2, #24]
 8004098:	4b7f      	ldr	r3, [pc, #508]	; (8004298 <MX_GPIO_Init+0x238>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a4:	4b7c      	ldr	r3, [pc, #496]	; (8004298 <MX_GPIO_Init+0x238>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	4a7b      	ldr	r2, [pc, #492]	; (8004298 <MX_GPIO_Init+0x238>)
 80040aa:	f043 0304 	orr.w	r3, r3, #4
 80040ae:	6193      	str	r3, [r2, #24]
 80040b0:	4b79      	ldr	r3, [pc, #484]	; (8004298 <MX_GPIO_Init+0x238>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040bc:	4b76      	ldr	r3, [pc, #472]	; (8004298 <MX_GPIO_Init+0x238>)
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	4a75      	ldr	r2, [pc, #468]	; (8004298 <MX_GPIO_Init+0x238>)
 80040c2:	f043 0308 	orr.w	r3, r3, #8
 80040c6:	6193      	str	r3, [r2, #24]
 80040c8:	4b73      	ldr	r3, [pc, #460]	; (8004298 <MX_GPIO_Init+0x238>)
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040d4:	4b70      	ldr	r3, [pc, #448]	; (8004298 <MX_GPIO_Init+0x238>)
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	4a6f      	ldr	r2, [pc, #444]	; (8004298 <MX_GPIO_Init+0x238>)
 80040da:	f043 0320 	orr.w	r3, r3, #32
 80040de:	6193      	str	r3, [r2, #24]
 80040e0:	4b6d      	ldr	r3, [pc, #436]	; (8004298 <MX_GPIO_Init+0x238>)
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_touch_Pin|LCD_touchE0_Pin|LCDE1_Pin, GPIO_PIN_RESET);
 80040ec:	2200      	movs	r2, #0
 80040ee:	2107      	movs	r1, #7
 80040f0:	486a      	ldr	r0, [pc, #424]	; (800429c <MX_GPIO_Init+0x23c>)
 80040f2:	f004 fcf0 	bl	8008ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_RESET);
 80040f6:	2200      	movs	r2, #0
 80040f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80040fc:	4868      	ldr	r0, [pc, #416]	; (80042a0 <MX_GPIO_Init+0x240>)
 80040fe:	f004 fcea 	bl	8008ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green_LED_Pin|blue_LED_Pin|red_LED_Pin, GPIO_PIN_SET);
 8004102:	2201      	movs	r2, #1
 8004104:	2123      	movs	r1, #35	; 0x23
 8004106:	4867      	ldr	r0, [pc, #412]	; (80042a4 <MX_GPIO_Init+0x244>)
 8004108:	f004 fce5 	bl	8008ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004112:	4865      	ldr	r0, [pc, #404]	; (80042a8 <MX_GPIO_Init+0x248>)
 8004114:	f004 fcdf 	bl	8008ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004118:	2201      	movs	r2, #1
 800411a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800411e:	4860      	ldr	r0, [pc, #384]	; (80042a0 <MX_GPIO_Init+0x240>)
 8004120:	f004 fcd9 	bl	8008ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800412a:	485e      	ldr	r0, [pc, #376]	; (80042a4 <MX_GPIO_Init+0x244>)
 800412c:	f004 fcd3 	bl	8008ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_touch_Pin LCD_touchE0_Pin LCDE1_Pin */
  GPIO_InitStruct.Pin = LCD_touch_Pin|LCD_touchE0_Pin|LCDE1_Pin;
 8004130:	2307      	movs	r3, #7
 8004132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004134:	2301      	movs	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004138:	2300      	movs	r3, #0
 800413a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800413c:	2303      	movs	r3, #3
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004140:	f107 0318 	add.w	r3, r7, #24
 8004144:	4619      	mov	r1, r3
 8004146:	4855      	ldr	r0, [pc, #340]	; (800429c <MX_GPIO_Init+0x23c>)
 8004148:	f004 fb1a 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_touchE3_Pin */
  GPIO_InitStruct.Pin = LCD_touchE3_Pin;
 800414c:	2308      	movs	r3, #8
 800414e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004154:	2301      	movs	r3, #1
 8004156:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_touchE3_GPIO_Port, &GPIO_InitStruct);
 8004158:	f107 0318 	add.w	r3, r7, #24
 800415c:	4619      	mov	r1, r3
 800415e:	484f      	ldr	r0, [pc, #316]	; (800429c <MX_GPIO_Init+0x23c>)
 8004160:	f004 fb0e 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_touchE4_Pin */
  GPIO_InitStruct.Pin = LCD_touchE4_Pin;
 8004164:	2310      	movs	r3, #16
 8004166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004168:	4b50      	ldr	r3, [pc, #320]	; (80042ac <MX_GPIO_Init+0x24c>)
 800416a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2300      	movs	r3, #0
 800416e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_touchE4_GPIO_Port, &GPIO_InitStruct);
 8004170:	f107 0318 	add.w	r3, r7, #24
 8004174:	4619      	mov	r1, r3
 8004176:	4849      	ldr	r0, [pc, #292]	; (800429c <MX_GPIO_Init+0x23c>)
 8004178:	f004 fb02 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800417c:	2360      	movs	r3, #96	; 0x60
 800417e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004188:	f107 0318 	add.w	r3, r7, #24
 800418c:	4619      	mov	r1, r3
 800418e:	4843      	ldr	r0, [pc, #268]	; (800429c <MX_GPIO_Init+0x23c>)
 8004190:	f004 faf6 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8004194:	f242 0320 	movw	r3, #8224	; 0x2020
 8004198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a2:	f107 0318 	add.w	r3, r7, #24
 80041a6:	4619      	mov	r1, r3
 80041a8:	4841      	ldr	r0, [pc, #260]	; (80042b0 <MX_GPIO_Init+0x250>)
 80041aa:	f004 fae9 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pin : K1_button_Pin */
  GPIO_InitStruct.Pin = K1_button_Pin;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <MX_GPIO_Init+0x24c>)
 80041b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K1_button_GPIO_Port, &GPIO_InitStruct);
 80041ba:	f107 0318 	add.w	r3, r7, #24
 80041be:	4619      	mov	r1, r3
 80041c0:	4837      	ldr	r0, [pc, #220]	; (80042a0 <MX_GPIO_Init+0x240>)
 80041c2:	f004 fadd 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 80041c6:	2304      	movs	r3, #4
 80041c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 80041d2:	f107 0318 	add.w	r3, r7, #24
 80041d6:	4619      	mov	r1, r3
 80041d8:	4831      	ldr	r0, [pc, #196]	; (80042a0 <MX_GPIO_Init+0x240>)
 80041da:	f004 fad1 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 80041de:	f44f 53c2 	mov.w	r3, #6208	; 0x1840
 80041e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e4:	2301      	movs	r3, #1
 80041e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ec:	2303      	movs	r3, #3
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f0:	f107 0318 	add.w	r3, r7, #24
 80041f4:	4619      	mov	r1, r3
 80041f6:	482a      	ldr	r0, [pc, #168]	; (80042a0 <MX_GPIO_Init+0x240>)
 80041f8:	f004 fac2 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_LED_Pin blue_LED_Pin red_LED_Pin */
  GPIO_InitStruct.Pin = green_LED_Pin|blue_LED_Pin|red_LED_Pin;
 80041fc:	2323      	movs	r3, #35	; 0x23
 80041fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004200:	2301      	movs	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420c:	f107 0318 	add.w	r3, r7, #24
 8004210:	4619      	mov	r1, r3
 8004212:	4824      	ldr	r0, [pc, #144]	; (80042a4 <MX_GPIO_Init+0x244>)
 8004214:	f004 fab4 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_Pin PD13 */
  GPIO_InitStruct.Pin = LCD_Pin|GPIO_PIN_13;
 8004218:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800421c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800421e:	2301      	movs	r3, #1
 8004220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	2300      	movs	r3, #0
 8004224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004226:	2303      	movs	r3, #3
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800422a:	f107 0318 	add.w	r3, r7, #24
 800422e:	4619      	mov	r1, r3
 8004230:	481d      	ldr	r0, [pc, #116]	; (80042a8 <MX_GPIO_Init+0x248>)
 8004232:	f004 faa5 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800423a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004244:	f107 0318 	add.w	r3, r7, #24
 8004248:	4619      	mov	r1, r3
 800424a:	4816      	ldr	r0, [pc, #88]	; (80042a4 <MX_GPIO_Init+0x244>)
 800424c:	f004 fa98 	bl	8008780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004256:	2301      	movs	r3, #1
 8004258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425e:	2302      	movs	r3, #2
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004262:	f107 0318 	add.w	r3, r7, #24
 8004266:	4619      	mov	r1, r3
 8004268:	480e      	ldr	r0, [pc, #56]	; (80042a4 <MX_GPIO_Init+0x244>)
 800426a:	f004 fa89 	bl	8008780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	2100      	movs	r1, #0
 8004272:	2006      	movs	r0, #6
 8004274:	f003 fed3 	bl	800801e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004278:	2006      	movs	r0, #6
 800427a:	f003 feec 	bl	8008056 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800427e:	2200      	movs	r2, #0
 8004280:	2100      	movs	r1, #0
 8004282:	200a      	movs	r0, #10
 8004284:	f003 fecb 	bl	800801e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004288:	200a      	movs	r0, #10
 800428a:	f003 fee4 	bl	8008056 <HAL_NVIC_EnableIRQ>

}
 800428e:	bf00      	nop
 8004290:	3728      	adds	r7, #40	; 0x28
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	40011800 	.word	0x40011800
 80042a0:	40010800 	.word	0x40010800
 80042a4:	40010c00 	.word	0x40010c00
 80042a8:	40011400 	.word	0x40011400
 80042ac:	10110000 	.word	0x10110000
 80042b0:	40011000 	.word	0x40011000

080042b4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80042ba:	1d3b      	adds	r3, r7, #4
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	611a      	str	r2, [r3, #16]
 80042c8:	615a      	str	r2, [r3, #20]
 80042ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80042cc:	4b28      	ldr	r3, [pc, #160]	; (8004370 <MX_FSMC_Init+0xbc>)
 80042ce:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80042d2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80042d4:	4b26      	ldr	r3, [pc, #152]	; (8004370 <MX_FSMC_Init+0xbc>)
 80042d6:	4a27      	ldr	r2, [pc, #156]	; (8004374 <MX_FSMC_Init+0xc0>)
 80042d8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80042da:	4b25      	ldr	r3, [pc, #148]	; (8004370 <MX_FSMC_Init+0xbc>)
 80042dc:	2200      	movs	r2, #0
 80042de:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <MX_FSMC_Init+0xbc>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <MX_FSMC_Init+0xbc>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80042ec:	4b20      	ldr	r3, [pc, #128]	; (8004370 <MX_FSMC_Init+0xbc>)
 80042ee:	2210      	movs	r2, #16
 80042f0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80042f2:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <MX_FSMC_Init+0xbc>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80042f8:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <MX_FSMC_Init+0xbc>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80042fe:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <MX_FSMC_Init+0xbc>)
 8004300:	2200      	movs	r2, #0
 8004302:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004304:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <MX_FSMC_Init+0xbc>)
 8004306:	2200      	movs	r2, #0
 8004308:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800430a:	4b19      	ldr	r3, [pc, #100]	; (8004370 <MX_FSMC_Init+0xbc>)
 800430c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004310:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <MX_FSMC_Init+0xbc>)
 8004314:	2200      	movs	r2, #0
 8004316:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <MX_FSMC_Init+0xbc>)
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800431e:	4b14      	ldr	r3, [pc, #80]	; (8004370 <MX_FSMC_Init+0xbc>)
 8004320:	2200      	movs	r2, #0
 8004322:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <MX_FSMC_Init+0xbc>)
 8004326:	2200      	movs	r2, #0
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800432a:	230f      	movs	r3, #15
 800432c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800432e:	230f      	movs	r3, #15
 8004330:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8004332:	23ff      	movs	r3, #255	; 0xff
 8004334:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8004336:	230f      	movs	r3, #15
 8004338:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800433a:	2310      	movs	r3, #16
 800433c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800433e:	2311      	movs	r3, #17
 8004340:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8004346:	1d3b      	adds	r3, r7, #4
 8004348:	2200      	movs	r2, #0
 800434a:	4619      	mov	r1, r3
 800434c:	4808      	ldr	r0, [pc, #32]	; (8004370 <MX_FSMC_Init+0xbc>)
 800434e:	f007 f9dd 	bl	800b70c <HAL_SRAM_Init>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8004358:	f000 f830 	bl	80043bc <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <MX_FSMC_Init+0xc4>)
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	4a05      	ldr	r2, [pc, #20]	; (8004378 <MX_FSMC_Init+0xc4>)
 8004362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004366:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004368:	bf00      	nop
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20002820 	.word	0x20002820
 8004374:	a0000104 	.word	0xa0000104
 8004378:	40010000 	.word	0x40010000

0800437c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){	//one second timer for timer3
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
	if (timer >= 0) {
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	db09      	blt.n	80043a0 <HAL_TIM_PeriodElapsedCallback+0x24>
		print_digit(timer);
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f819 	bl	80043c8 <print_digit>
		timer--;
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3b01      	subs	r3, #1
 800439c:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800439e:	6013      	str	r3, [r2, #0]
	}
	if (duration >= 0) duration++;
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80043aa:	701a      	strb	r2, [r3, #0]
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	2000287c 	.word	0x2000287c
 80043b8:	20000002 	.word	0x20000002

080043bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043c0:	b672      	cpsid	i
}
 80043c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043c4:	e7fe      	b.n	80043c4 <Error_Handler+0x8>
	...

080043c8 <print_digit>:

#define CS_SET() 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET)
#define CS_RESET() 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET)


void print_digit(int number){
 80043c8:	b590      	push	{r4, r7, lr}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	int ten_digit = number/10;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a24      	ldr	r2, [pc, #144]	; (8004464 <print_digit+0x9c>)
 80043d4:	fb82 1203 	smull	r1, r2, r2, r3
 80043d8:	1092      	asrs	r2, r2, #2
 80043da:	17db      	asrs	r3, r3, #31
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	613b      	str	r3, [r7, #16]
	int last_digit = number%10;
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4b20      	ldr	r3, [pc, #128]	; (8004464 <print_digit+0x9c>)
 80043e4:	fb83 1302 	smull	r1, r3, r3, r2
 80043e8:	1099      	asrs	r1, r3, #2
 80043ea:	17d3      	asrs	r3, r2, #31
 80043ec:	1ac9      	subs	r1, r1, r3
 80043ee:	460b      	mov	r3, r1
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	60fb      	str	r3, [r7, #12]

	//if ten digit == 0, print empty


	uint8_t col = 0x02;
 80043fa:	2302      	movs	r3, #2
 80043fc:	75fb      	strb	r3, [r7, #23]
	max7219_SendData(0x01, 0x00, 0x01, 0x00);
 80043fe:	2300      	movs	r3, #0
 8004400:	2201      	movs	r2, #1
 8004402:	2100      	movs	r1, #0
 8004404:	2001      	movs	r0, #1
 8004406:	f000 f875 	bl	80044f4 <max7219_SendData>
	for (col = 2; col < 7; ++col){
 800440a:	2302      	movs	r3, #2
 800440c:	75fb      	strb	r3, [r7, #23]
 800440e:	e01b      	b.n	8004448 <print_digit+0x80>
		max7219_SendData(col, font[last_digit][col-2], col, font[ten_digit][col-2]);
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	1e99      	subs	r1, r3, #2
 8004414:	4814      	ldr	r0, [pc, #80]	; (8004468 <print_digit+0xa0>)
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	4403      	add	r3, r0
 8004420:	440b      	add	r3, r1
 8004422:	781c      	ldrb	r4, [r3, #0]
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	1e99      	subs	r1, r3, #2
 8004428:	480f      	ldr	r0, [pc, #60]	; (8004468 <print_digit+0xa0>)
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	4403      	add	r3, r0
 8004434:	440b      	add	r3, r1
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	7dfa      	ldrb	r2, [r7, #23]
 800443a:	7df8      	ldrb	r0, [r7, #23]
 800443c:	4621      	mov	r1, r4
 800443e:	f000 f859 	bl	80044f4 <max7219_SendData>
	for (col = 2; col < 7; ++col){
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	3301      	adds	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b06      	cmp	r3, #6
 800444c:	d9e0      	bls.n	8004410 <print_digit+0x48>
	}
	max7219_SendData(0x08, 0x00, 0x08, 0x00);
 800444e:	2300      	movs	r3, #0
 8004450:	2208      	movs	r2, #8
 8004452:	2100      	movs	r1, #0
 8004454:	2008      	movs	r0, #8
 8004456:	f000 f84d 	bl	80044f4 <max7219_SendData>

}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd90      	pop	{r4, r7, pc}
 8004462:	bf00      	nop
 8004464:	66666667 	.word	0x66666667
 8004468:	20000004 	.word	0x20000004

0800446c <max7219_Init>:


//datasheet - initialize the dot matrix
void max7219_Init()
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
	max7219_SendData(0x09, 0x00, 0x09, 0x00);	//decode mode
 8004470:	2300      	movs	r3, #0
 8004472:	2209      	movs	r2, #9
 8004474:	2100      	movs	r1, #0
 8004476:	2009      	movs	r0, #9
 8004478:	f000 f83c 	bl	80044f4 <max7219_SendData>
	max7219_SendData(0x0a, 0x01, 0x0a, 0x01);	//intensity
 800447c:	2301      	movs	r3, #1
 800447e:	220a      	movs	r2, #10
 8004480:	2101      	movs	r1, #1
 8004482:	200a      	movs	r0, #10
 8004484:	f000 f836 	bl	80044f4 <max7219_SendData>
	max7219_SendData(0x0b, 0x07, 0x0b, 0x07);	//scan limit
 8004488:	2307      	movs	r3, #7
 800448a:	220b      	movs	r2, #11
 800448c:	2107      	movs	r1, #7
 800448e:	200b      	movs	r0, #11
 8004490:	f000 f830 	bl	80044f4 <max7219_SendData>
	max7219_SendData(0x0c, 0x01, 0x0c, 0x01);	//display on
 8004494:	2301      	movs	r3, #1
 8004496:	220c      	movs	r2, #12
 8004498:	2101      	movs	r1, #1
 800449a:	200c      	movs	r0, #12
 800449c:	f000 f82a 	bl	80044f4 <max7219_SendData>
	max7219_SendData(0x0f, 0x00, 0x0f, 0x00);	//disable display test
 80044a0:	2300      	movs	r3, #0
 80044a2:	220f      	movs	r2, #15
 80044a4:	2100      	movs	r1, #0
 80044a6:	200f      	movs	r0, #15
 80044a8:	f000 f824 	bl	80044f4 <max7219_SendData>
	max7219_Clean();
 80044ac:	f000 f802 	bl	80044b4 <max7219_Clean>
}
 80044b0:	bf00      	nop
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <max7219_Clean>:

//clean up the dot matrix with no dot
void max7219_Clean()
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 80044ba:	2300      	movs	r3, #0
 80044bc:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < 8; ++i)
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	e00e      	b.n	80044e2 <max7219_Clean+0x2e>
	{
		max7219_SendData(i + 1, clear, i + 1, clear);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	3301      	adds	r3, #1
 80044ca:	b2d8      	uxtb	r0, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	3301      	adds	r3, #1
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	78f9      	ldrb	r1, [r7, #3]
 80044d8:	f000 f80c 	bl	80044f4 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3301      	adds	r3, #1
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b07      	cmp	r3, #7
 80044e6:	dded      	ble.n	80044c4 <max7219_Clean+0x10>
	}
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <max7219_SendData>:

//send data to the two dot matrix
//addr1, data1 for the second matrix
//addr2, data2 for the first matrix
void max7219_SendData(uint8_t addr1, uint8_t data1, uint8_t addr2, uint8_t data2)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4604      	mov	r4, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4623      	mov	r3, r4
 8004504:	71fb      	strb	r3, [r7, #7]
 8004506:	4603      	mov	r3, r0
 8004508:	71bb      	strb	r3, [r7, #6]
 800450a:	460b      	mov	r3, r1
 800450c:	717b      	strb	r3, [r7, #5]
 800450e:	4613      	mov	r3, r2
 8004510:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi1, &data1, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &addr2, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &data2, 1, HAL_MAX_DELAY);
	CS_RESET();*/

	CS_SET();
 8004512:	2200      	movs	r2, #0
 8004514:	2140      	movs	r1, #64	; 0x40
 8004516:	4812      	ldr	r0, [pc, #72]	; (8004560 <max7219_SendData+0x6c>)
 8004518:	f004 fadd 	bl	8008ad6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, &addr1, 1);
 800451c:	1dfb      	adds	r3, r7, #7
 800451e:	2201      	movs	r2, #1
 8004520:	4619      	mov	r1, r3
 8004522:	4810      	ldr	r0, [pc, #64]	; (8004564 <max7219_SendData+0x70>)
 8004524:	f006 fefa 	bl	800b31c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi1, &data1, 1);
 8004528:	1dbb      	adds	r3, r7, #6
 800452a:	2201      	movs	r2, #1
 800452c:	4619      	mov	r1, r3
 800452e:	480d      	ldr	r0, [pc, #52]	; (8004564 <max7219_SendData+0x70>)
 8004530:	f006 fef4 	bl	800b31c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi1, &addr2, 1);
 8004534:	1d7b      	adds	r3, r7, #5
 8004536:	2201      	movs	r2, #1
 8004538:	4619      	mov	r1, r3
 800453a:	480a      	ldr	r0, [pc, #40]	; (8004564 <max7219_SendData+0x70>)
 800453c:	f006 feee 	bl	800b31c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi1, &data2, 1);
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	2201      	movs	r2, #1
 8004544:	4619      	mov	r1, r3
 8004546:	4807      	ldr	r0, [pc, #28]	; (8004564 <max7219_SendData+0x70>)
 8004548:	f006 fee8 	bl	800b31c <HAL_SPI_Transmit_DMA>
	CS_RESET();
 800454c:	2201      	movs	r2, #1
 800454e:	2140      	movs	r1, #64	; 0x40
 8004550:	4803      	ldr	r0, [pc, #12]	; (8004560 <max7219_SendData+0x6c>)
 8004552:	f004 fac0 	bl	8008ad6 <HAL_GPIO_WritePin>
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}
 800455e:	bf00      	nop
 8004560:	40010800 	.word	0x40010800
 8004564:	20002668 	.word	0x20002668

08004568 <restart>:
uint8_t width_margin, height_margin, boundary, base_obs, rcstart, rsize, csize, level;	//easy-1 //medium-2 //diffcult-3
extern const uint8_t block_size;
extern uint8_t Rxstr;
extern UART_HandleTypeDef huart1;

void restart(){
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af02      	add	r7, sp, #8
	restart_flag = 0;	//test
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <restart+0x44>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
	duration = -1;
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <restart+0x48>)
 8004576:	22ff      	movs	r2, #255	; 0xff
 8004578:	701a      	strb	r2, [r3, #0]
	keys = 0;
 800457a:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <restart+0x4c>)
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8004580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004584:	f002 fe06 	bl	8007194 <HAL_Delay>
	free_maze_array();
 8004588:	f000 fc08 	bl	8004d9c <free_maze_array>
	LCD_Clear (0, 0, 240, 320, WHITE);	// clear the screen
 800458c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004596:	22f0      	movs	r2, #240	; 0xf0
 8004598:	2100      	movs	r1, #0
 800459a:	2000      	movs	r0, #0
 800459c:	f7fe fc83 	bl	8002ea6 <LCD_Clear>
	maze_all();
 80045a0:	f000 f80a 	bl	80045b8 <maze_all>
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20002878 	.word	0x20002878
 80045b0:	20000002 	.word	0x20000002
 80045b4:	20002877 	.word	0x20002877

080045b8 <maze_all>:


void maze_all(){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
	start_page();
 80045bc:	f000 f80c 	bl	80045d8 <start_page>
	generate_whole_maze();
 80045c0:	f000 f944 	bl	800484c <generate_whole_maze>
	LCD_Display();
 80045c4:	f000 f8ca 	bl	800475c <LCD_Display>
	duration = 0;
 80045c8:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <maze_all+0x1c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000002 	.word	0x20000002

080045d8 <start_page>:



void start_page(){
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af02      	add	r7, sp, #8
	//start page - touch option
	level = 0;
 80045de:	4b32      	ldr	r3, [pc, #200]	; (80046a8 <start_page+0xd0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
	LCD_Clear (0, 0, 240, 320, WHITE);
 80045e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80045ee:	22f0      	movs	r2, #240	; 0xf0
 80045f0:	2100      	movs	r1, #0
 80045f2:	2000      	movs	r0, #0
 80045f4:	f7fe fc57 	bl	8002ea6 <LCD_Clear>
    LCD_DrawString(0, 0, "Discover a treasure under a *flag* in an maze by finding three elusive *keys*. Are you up for the challenge?", BLUE);
 80045f8:	231f      	movs	r3, #31
 80045fa:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <start_page+0xd4>)
 80045fc:	2100      	movs	r1, #0
 80045fe:	2000      	movs	r0, #0
 8004600:	f7fe fcc2 	bl	8002f88 <LCD_DrawString>

    LCD_Clear ( 0, 100, 240, 50, RED );
 8004604:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2332      	movs	r3, #50	; 0x32
 800460c:	22f0      	movs	r2, #240	; 0xf0
 800460e:	2164      	movs	r1, #100	; 0x64
 8004610:	2000      	movs	r0, #0
 8004612:	f7fe fc48 	bl	8002ea6 <LCD_Clear>
    LCD_DrawString(110, 120, "easy", 0x03E0);
 8004616:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800461a:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <start_page+0xd8>)
 800461c:	2178      	movs	r1, #120	; 0x78
 800461e:	206e      	movs	r0, #110	; 0x6e
 8004620:	f7fe fcb2 	bl	8002f88 <LCD_DrawString>

    LCD_Clear ( 0, 180, 240, 50, GREEN );
 8004624:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2332      	movs	r3, #50	; 0x32
 800462c:	22f0      	movs	r2, #240	; 0xf0
 800462e:	21b4      	movs	r1, #180	; 0xb4
 8004630:	2000      	movs	r0, #0
 8004632:	f7fe fc38 	bl	8002ea6 <LCD_Clear>
    LCD_DrawString(103, 200, "medium", 0x8008);
 8004636:	f248 0308 	movw	r3, #32776	; 0x8008
 800463a:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <start_page+0xdc>)
 800463c:	21c8      	movs	r1, #200	; 0xc8
 800463e:	2067      	movs	r0, #103	; 0x67
 8004640:	f7fe fca2 	bl	8002f88 <LCD_DrawString>

    LCD_Clear ( 0, 260, 240, 50, YELLOW );
 8004644:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	2332      	movs	r3, #50	; 0x32
 800464c:	22f0      	movs	r2, #240	; 0xf0
 800464e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004652:	2000      	movs	r0, #0
 8004654:	f7fe fc27 	bl	8002ea6 <LCD_Clear>
    LCD_DrawString(110, 280, "hard", 0xF800);
 8004658:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <start_page+0xe0>)
 800465e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004662:	206e      	movs	r0, #110	; 0x6e
 8004664:	f7fe fc90 	bl	8002f88 <LCD_DrawString>

    while (level == 0){	//loop until a level is chosen
 8004668:	e00c      	b.n	8004684 <start_page+0xac>
    	 if ( ucXPT2046_TouchFlag == 1 ){
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <start_page+0xe4>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d104      	bne.n	800467e <start_page+0xa6>
    		Check_touchkey();
 8004674:	f002 fc84 	bl	8006f80 <Check_touchkey>
    		ucXPT2046_TouchFlag = 0;
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <start_page+0xe4>)
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
    	 }
    	HAL_Delay(50);
 800467e:	2032      	movs	r0, #50	; 0x32
 8004680:	f002 fd88 	bl	8007194 <HAL_Delay>
    while (level == 0){	//loop until a level is chosen
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <start_page+0xd0>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ee      	beq.n	800466a <start_page+0x92>
    }

    LCD_Clear (0, 0, 240, 320, WHITE);
 800468c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004696:	22f0      	movs	r2, #240	; 0xf0
 8004698:	2100      	movs	r1, #0
 800469a:	2000      	movs	r0, #0
 800469c:	f7fe fc03 	bl	8002ea6 <LCD_Clear>
				else{ base_obs = Rxstr -'0'; break; }
			}
		}
    }
    LCD_Clear (0, 0, 240, 320, WHITE);*/
}
 80046a0:	bf00      	nop
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000288f 	.word	0x2000288f
 80046ac:	08014058 	.word	0x08014058
 80046b0:	080140c8 	.word	0x080140c8
 80046b4:	080140d0 	.word	0x080140d0
 80046b8:	080140d8 	.word	0x080140d8
 80046bc:	2000621d 	.word	0x2000621d

080046c0 <adjust_level>:

/*
 * adjust the parameter for different level
 * num_obstacles, hearts, row&col range
 */
void adjust_level(){
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
	switch(level){
 80046c4:	4b1f      	ldr	r3, [pc, #124]	; (8004744 <adjust_level+0x84>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d026      	beq.n	800471a <adjust_level+0x5a>
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	dc34      	bgt.n	800473a <adjust_level+0x7a>
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d002      	beq.n	80046da <adjust_level+0x1a>
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d010      	beq.n	80046fa <adjust_level+0x3a>
		rcstart = 13;
		rsize = 5;
		csize = 3;
		break;

	default: break; //error
 80046d8:	e02f      	b.n	800473a <adjust_level+0x7a>
		hearts = 3;
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <adjust_level+0x88>)
 80046dc:	2203      	movs	r2, #3
 80046de:	701a      	strb	r2, [r3, #0]
		base_obs = 4;
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <adjust_level+0x8c>)
 80046e2:	2204      	movs	r2, #4
 80046e4:	701a      	strb	r2, [r3, #0]
		rcstart = 9;
 80046e6:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <adjust_level+0x90>)
 80046e8:	2209      	movs	r2, #9
 80046ea:	701a      	strb	r2, [r3, #0]
		rsize = 3;
 80046ec:	4b19      	ldr	r3, [pc, #100]	; (8004754 <adjust_level+0x94>)
 80046ee:	2203      	movs	r2, #3
 80046f0:	701a      	strb	r2, [r3, #0]
		csize = 3;
 80046f2:	4b19      	ldr	r3, [pc, #100]	; (8004758 <adjust_level+0x98>)
 80046f4:	2203      	movs	r2, #3
 80046f6:	701a      	strb	r2, [r3, #0]
		break;
 80046f8:	e020      	b.n	800473c <adjust_level+0x7c>
		hearts = 3;
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <adjust_level+0x88>)
 80046fc:	2203      	movs	r2, #3
 80046fe:	701a      	strb	r2, [r3, #0]
		base_obs = 7;
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <adjust_level+0x8c>)
 8004702:	2207      	movs	r2, #7
 8004704:	701a      	strb	r2, [r3, #0]
		rcstart = 11;
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <adjust_level+0x90>)
 8004708:	220b      	movs	r2, #11
 800470a:	701a      	strb	r2, [r3, #0]
		rsize = 3;
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <adjust_level+0x94>)
 800470e:	2203      	movs	r2, #3
 8004710:	701a      	strb	r2, [r3, #0]
		csize = 3;
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <adjust_level+0x98>)
 8004714:	2203      	movs	r2, #3
 8004716:	701a      	strb	r2, [r3, #0]
		break;
 8004718:	e010      	b.n	800473c <adjust_level+0x7c>
		hearts = 2;
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <adjust_level+0x88>)
 800471c:	2202      	movs	r2, #2
 800471e:	701a      	strb	r2, [r3, #0]
		base_obs = 9;
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <adjust_level+0x8c>)
 8004722:	2209      	movs	r2, #9
 8004724:	701a      	strb	r2, [r3, #0]
		rcstart = 13;
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <adjust_level+0x90>)
 8004728:	220d      	movs	r2, #13
 800472a:	701a      	strb	r2, [r3, #0]
		rsize = 5;
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <adjust_level+0x94>)
 800472e:	2205      	movs	r2, #5
 8004730:	701a      	strb	r2, [r3, #0]
		csize = 3;
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <adjust_level+0x98>)
 8004734:	2203      	movs	r2, #3
 8004736:	701a      	strb	r2, [r3, #0]
		break;
 8004738:	e000      	b.n	800473c <adjust_level+0x7c>
	default: break; //error
 800473a:	bf00      	nop
	}
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	2000288f 	.word	0x2000288f
 8004748:	20002876 	.word	0x20002876
 800474c:	2000288b 	.word	0x2000288b
 8004750:	2000288c 	.word	0x2000288c
 8004754:	2000288d 	.word	0x2000288d
 8004758:	2000288e 	.word	0x2000288e

0800475c <LCD_Display>:

void LCD_Display(){	//display
 800475c:	b5b0      	push	{r4, r5, r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af02      	add	r7, sp, #8

	for (int i = 0; i<keys; i++){	//display key
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	e00c      	b.n	8004782 <LCD_Display+0x26>
			  LCD_Drawkey(10, 15+i*32);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	b29b      	uxth	r3, r3
 800476c:	015b      	lsls	r3, r3, #5
 800476e:	b29b      	uxth	r3, r3
 8004770:	330f      	adds	r3, #15
 8004772:	b29b      	uxth	r3, r3
 8004774:	4619      	mov	r1, r3
 8004776:	200a      	movs	r0, #10
 8004778:	f7fe ffaa 	bl	80036d0 <LCD_Drawkey>
	for (int i = 0; i<keys; i++){	//display key
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3301      	adds	r3, #1
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	4b2a      	ldr	r3, [pc, #168]	; (800482c <LCD_Display+0xd0>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4293      	cmp	r3, r2
 800478c:	dbec      	blt.n	8004768 <LCD_Display+0xc>
	}

	for (int i = 0; i<hearts; i++){	//display heart
 800478e:	2300      	movs	r3, #0
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	e00c      	b.n	80047ae <LCD_Display+0x52>
	  LCD_Drawheart(10, 130+i*32);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	015b      	lsls	r3, r3, #5
 800479a:	b29b      	uxth	r3, r3
 800479c:	3382      	adds	r3, #130	; 0x82
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4619      	mov	r1, r3
 80047a2:	200a      	movs	r0, #10
 80047a4:	f7fe fffc 	bl	80037a0 <LCD_Drawheart>
	for (int i = 0; i<hearts; i++){	//display heart
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <LCD_Display+0xd4>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4293      	cmp	r3, r2
 80047b8:	dbec      	blt.n	8004794 <LCD_Display+0x38>
	}

	//draw the maze
	width_margin = (240-columns*block_size)/2;	//decide the start position
 80047ba:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <LCD_Display+0xd8>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <LCD_Display+0xdc>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	fb02 f303 	mul.w	r3, r2, r3
 80047c8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80047cc:	0fda      	lsrs	r2, r3, #31
 80047ce:	4413      	add	r3, r2
 80047d0:	105b      	asrs	r3, r3, #1
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	4b19      	ldr	r3, [pc, #100]	; (800483c <LCD_Display+0xe0>)
 80047d6:	701a      	strb	r2, [r3, #0]
	height_margin = (280 - rows*block_size)/2 + 40;
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <LCD_Display+0xe4>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	4b16      	ldr	r3, [pc, #88]	; (8004838 <LCD_Display+0xdc>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 80047ea:	0fda      	lsrs	r2, r3, #31
 80047ec:	4413      	add	r3, r2
 80047ee:	105b      	asrs	r3, r3, #1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	3328      	adds	r3, #40	; 0x28
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4b13      	ldr	r3, [pc, #76]	; (8004844 <LCD_Display+0xe8>)
 80047f8:	701a      	strb	r2, [r3, #0]
	LCD_maze(maze, width_margin, height_margin, block_size, rows, columns);
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <LCD_Display+0xec>)
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <LCD_Display+0xe0>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	b299      	uxth	r1, r3
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <LCD_Display+0xe8>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	b29c      	uxth	r4, r3
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <LCD_Display+0xdc>)
 800480c:	781d      	ldrb	r5, [r3, #0]
 800480e:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <LCD_Display+0xe4>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <LCD_Display+0xd8>)
 8004814:	7812      	ldrb	r2, [r2, #0]
 8004816:	9201      	str	r2, [sp, #4]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	462b      	mov	r3, r5
 800481c:	4622      	mov	r2, r4
 800481e:	f7fe fc5b 	bl	80030d8 <LCD_maze>

}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bdb0      	pop	{r4, r5, r7, pc}
 800482a:	bf00      	nop
 800482c:	20002877 	.word	0x20002877
 8004830:	20002876 	.word	0x20002876
 8004834:	2000286d 	.word	0x2000286d
 8004838:	08014864 	.word	0x08014864
 800483c:	20002888 	.word	0x20002888
 8004840:	2000286c 	.word	0x2000286c
 8004844:	20002889 	.word	0x20002889
 8004848:	20002868 	.word	0x20002868

0800484c <generate_whole_maze>:


void generate_whole_maze(){
 800484c:	b590      	push	{r4, r7, lr}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
	//random the row and col, start_x, start_y, end_x, end_y
	  adjust_level();
 8004852:	f7ff ff35 	bl	80046c0 <adjust_level>
	  get_random_row_col();
 8004856:	f000 f8df 	bl	8004a18 <get_random_row_col>
	  get_random_start();
 800485a:	f000 f923 	bl	8004aa4 <get_random_start>

	  // allocatae memory for the maze array (need to do in main)
	  maze = (uint8_t **)malloc(rows * sizeof(uint8_t *));
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <generate_whole_maze+0xa4>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4618      	mov	r0, r3
 8004866:	f00c fab9 	bl	8010ddc <malloc>
 800486a:	4603      	mov	r3, r0
 800486c:	461a      	mov	r2, r3
 800486e:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <generate_whole_maze+0xa8>)
 8004870:	601a      	str	r2, [r3, #0]
	  // Allocate memory for the columns of each row
	  for (int i = 0; i < rows; i++) {
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	e00f      	b.n	8004898 <generate_whole_maze+0x4c>
		maze[i] = (uint8_t *)malloc(columns * sizeof(uint8_t));
 8004878:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <generate_whole_maze+0xac>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	4619      	mov	r1, r3
 800487e:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <generate_whole_maze+0xa8>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	18d4      	adds	r4, r2, r3
 8004888:	4608      	mov	r0, r1
 800488a:	f00c faa7 	bl	8010ddc <malloc>
 800488e:	4603      	mov	r3, r0
 8004890:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < rows; i++) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3301      	adds	r3, #1
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <generate_whole_maze+0xa4>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4293      	cmp	r3, r2
 80048a2:	dbe9      	blt.n	8004878 <generate_whole_maze+0x2c>
	  }

	  init_maze_array();  // init maze with all wall
 80048a4:	f000 fa48 	bl	8004d38 <init_maze_array>
	  generate_maze(start_x, start_y);    // have the array with path
 80048a8:	4b14      	ldr	r3, [pc, #80]	; (80048fc <generate_whole_maze+0xb0>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	4a14      	ldr	r2, [pc, #80]	; (8004900 <generate_whole_maze+0xb4>)
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 faa4 	bl	8004e00 <generate_maze>
	  get_random_end();
 80048b8:	f000 f98a 	bl	8004bd0 <get_random_end>

	  add_start_end_maze(); //add the start, end position into the array
 80048bc:	f000 fb66 	bl	8004f8c <add_start_end_maze>
	  add_key_maze();     // add the three keys in the array
 80048c0:	f000 fb8c 	bl	8004fdc <add_key_maze>
	  add_obstacle_maze();    // add obstacle into array ***
 80048c4:	f000 fc04 	bl	80050d0 <add_obstacle_maze>

	  current_x = start_x;
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <generate_whole_maze+0xb0>)
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <generate_whole_maze+0xb8>)
 80048ce:	701a      	strb	r2, [r3, #0]
	  current_y = start_y;
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <generate_whole_maze+0xb4>)
 80048d2:	781a      	ldrb	r2, [r3, #0]
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <generate_whole_maze+0xbc>)
 80048d6:	701a      	strb	r2, [r3, #0]
	  next_x = start_x;
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <generate_whole_maze+0xb0>)
 80048da:	781a      	ldrb	r2, [r3, #0]
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <generate_whole_maze+0xc0>)
 80048de:	701a      	strb	r2, [r3, #0]
	  next_y = start_y;
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <generate_whole_maze+0xb4>)
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <generate_whole_maze+0xc4>)
 80048e6:	701a      	strb	r2, [r3, #0]

}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd90      	pop	{r4, r7, pc}
 80048f0:	2000286c 	.word	0x2000286c
 80048f4:	20002868 	.word	0x20002868
 80048f8:	2000286d 	.word	0x2000286d
 80048fc:	2000286e 	.word	0x2000286e
 8004900:	20002870 	.word	0x20002870
 8004904:	20002872 	.word	0x20002872
 8004908:	20002873 	.word	0x20002873
 800490c:	20002874 	.word	0x20002874
 8004910:	20002875 	.word	0x20002875

08004914 <setRandomSeed>:

void setRandomSeed() {
 8004914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004918:	b092      	sub	sp, #72	; 0x48
 800491a:	af00      	add	r7, sp, #0
    struct timeval tv;
    gettimeofday(&tv, NULL);
 800491c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f00d f864 	bl	80119f0 <gettimeofday>
    long long seed = tv.tv_sec * 1000LL + tv.tv_usec / 1000;
 8004928:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800492c:	4622      	mov	r2, r4
 800492e:	462b      	mov	r3, r5
 8004930:	f04f 0000 	mov.w	r0, #0
 8004934:	f04f 0100 	mov.w	r1, #0
 8004938:	0159      	lsls	r1, r3, #5
 800493a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493e:	0150      	lsls	r0, r2, #5
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	ebb2 0804 	subs.w	r8, r2, r4
 8004948:	eb63 0905 	sbc.w	r9, r3, r5
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8004958:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800495c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004960:	4690      	mov	r8, r2
 8004962:	4699      	mov	r9, r3
 8004964:	eb18 0a04 	adds.w	sl, r8, r4
 8004968:	eb49 0b05 	adc.w	fp, r9, r5
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800497c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004980:	4692      	mov	sl, r2
 8004982:	469b      	mov	fp, r3
 8004984:	4654      	mov	r4, sl
 8004986:	465d      	mov	r5, fp
 8004988:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <setRandomSeed+0x100>)
 800498c:	fb83 2301 	smull	r2, r3, r3, r1
 8004990:	119a      	asrs	r2, r3, #6
 8004992:	17cb      	asrs	r3, r1, #31
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	17da      	asrs	r2, r3, #31
 8004998:	62bb      	str	r3, [r7, #40]	; 0x28
 800499a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800499c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80049a0:	460b      	mov	r3, r1
 80049a2:	18e3      	adds	r3, r4, r3
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	4613      	mov	r3, r2
 80049a8:	eb45 0303 	adc.w	r3, r5, r3
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80049b2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    seed ^= getpid();
 80049b6:	f00d f815 	bl	80119e4 <getpid>
 80049ba:	4603      	mov	r3, r0
 80049bc:	17da      	asrs	r2, r3, #31
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	627a      	str	r2, [r7, #36]	; 0x24
 80049c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80049ca:	4604      	mov	r4, r0
 80049cc:	4054      	eors	r4, r2
 80049ce:	60bc      	str	r4, [r7, #8]
 80049d0:	4059      	eors	r1, r3
 80049d2:	60f9      	str	r1, [r7, #12]
 80049d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80049d8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    seed ^= (uintptr_t)&tv;
 80049dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049e0:	2200      	movs	r2, #0
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	61fa      	str	r2, [r7, #28]
 80049e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049ee:	4604      	mov	r4, r0
 80049f0:	4054      	eors	r4, r2
 80049f2:	603c      	str	r4, [r7, #0]
 80049f4:	4059      	eors	r1, r3
 80049f6:	6079      	str	r1, [r7, #4]
 80049f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80049fc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    srand(seed);
 8004a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a02:	4618      	mov	r0, r3
 8004a04:	f00c ff3e 	bl	8011884 <srand>
}
 8004a08:	bf00      	nop
 8004a0a:	3748      	adds	r7, #72	; 0x48
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	10624dd3 	.word	0x10624dd3

08004a18 <get_random_row_col>:

/*
 * set the random height, width for the maze (17,19,21,23)
 */
void get_random_row_col(){
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
    // get the random row and column size of maze array
    rows = 0;
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <get_random_row_col+0x78>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	701a      	strb	r2, [r3, #0]
    columns = 0;
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <get_random_row_col+0x7c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
    do {    // for row size
        rows = rcstart + (rand() % rsize);  //random
 8004a28:	f00c ff5a 	bl	80118e0 <rand>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4a1a      	ldr	r2, [pc, #104]	; (8004a98 <get_random_row_col+0x80>)
 8004a30:	7812      	ldrb	r2, [r2, #0]
 8004a32:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a36:	fb01 f202 	mul.w	r2, r1, r2
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <get_random_row_col+0x84>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <get_random_row_col+0x78>)
 8004a48:	701a      	strb	r2, [r3, #0]
    } while (rows % 2 == 0);
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <get_random_row_col+0x78>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0e7      	beq.n	8004a28 <get_random_row_col+0x10>

    do {    // for col size
        columns = rcstart + (rand() % csize);  //random
 8004a58:	f00c ff42 	bl	80118e0 <rand>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4a10      	ldr	r2, [pc, #64]	; (8004aa0 <get_random_row_col+0x88>)
 8004a60:	7812      	ldrb	r2, [r2, #0]
 8004a62:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a66:	fb01 f202 	mul.w	r2, r1, r2
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <get_random_row_col+0x84>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	4413      	add	r3, r2
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <get_random_row_col+0x7c>)
 8004a78:	701a      	strb	r2, [r3, #0]
    } while (columns % 2 == 0);
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <get_random_row_col+0x7c>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0e7      	beq.n	8004a58 <get_random_row_col+0x40>
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	2000286c 	.word	0x2000286c
 8004a94:	2000286d 	.word	0x2000286d
 8004a98:	2000288d 	.word	0x2000288d
 8004a9c:	2000288c 	.word	0x2000288c
 8004aa0:	2000288e 	.word	0x2000288e

08004aa4 <get_random_start>:

/*
 * randomly set a start position on boundary
 * end point should opposite to the start point
 */
void get_random_start(){
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
    // get the random value for start and end position
    // start and end - should be in opposite boundary
    boundary = rand() % 4;  // Randomly choose one of the four boundaries
 8004aa8:	f00c ff1a 	bl	80118e0 <rand>
 8004aac:	4603      	mov	r3, r0
 8004aae:	425a      	negs	r2, r3
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	f002 0203 	and.w	r2, r2, #3
 8004ab8:	bf58      	it	pl
 8004aba:	4253      	negpl	r3, r2
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4b3f      	ldr	r3, [pc, #252]	; (8004bbc <get_random_start+0x118>)
 8004ac0:	701a      	strb	r2, [r3, #0]
    switch (boundary) {
 8004ac2:	4b3e      	ldr	r3, [pc, #248]	; (8004bbc <get_random_start+0x118>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d874      	bhi.n	8004bb4 <get_random_start+0x110>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <get_random_start+0x2c>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004b13 	.word	0x08004b13
 8004ad8:	08004b4b 	.word	0x08004b4b
 8004adc:	08004b7d 	.word	0x08004b7d
        case 0:  // Top boundary
            start_x = 1;
 8004ae0:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <get_random_start+0x11c>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
            start_y = (rand() % ((columns - 1) / 2)) * 2 + 1;  // odd from 1 to col-2
 8004ae6:	f00c fefb 	bl	80118e0 <rand>
 8004aea:	4602      	mov	r2, r0
 8004aec:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <get_random_start+0x120>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	0fd9      	lsrs	r1, r3, #31
 8004af4:	440b      	add	r3, r1
 8004af6:	105b      	asrs	r3, r3, #1
 8004af8:	fb92 f1f3 	sdiv	r1, r2, r3
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	4b2e      	ldr	r3, [pc, #184]	; (8004bc8 <get_random_start+0x124>)
 8004b0e:	701a      	strb	r2, [r3, #0]
            break;
 8004b10:	e051      	b.n	8004bb6 <get_random_start+0x112>
        case 1:  // Bottom boundary
            start_x = rows - 2;
 8004b12:	4b2e      	ldr	r3, [pc, #184]	; (8004bcc <get_random_start+0x128>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	3b02      	subs	r3, #2
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <get_random_start+0x11c>)
 8004b1c:	701a      	strb	r2, [r3, #0]
            start_y = (rand() % ((columns - 1) / 2)) * 2 + 1;  // odd from1 to col-2
 8004b1e:	f00c fedf 	bl	80118e0 <rand>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <get_random_start+0x120>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	0fd9      	lsrs	r1, r3, #31
 8004b2c:	440b      	add	r3, r1
 8004b2e:	105b      	asrs	r3, r3, #1
 8004b30:	fb92 f1f3 	sdiv	r1, r2, r3
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	3301      	adds	r3, #1
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <get_random_start+0x124>)
 8004b46:	701a      	strb	r2, [r3, #0]
            break;
 8004b48:	e035      	b.n	8004bb6 <get_random_start+0x112>
        case 2:  // Left boundary
            start_x = (rand() % ((rows - 1) / 2)) * 2 + 1;  // odd from 1 to row-2
 8004b4a:	f00c fec9 	bl	80118e0 <rand>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <get_random_start+0x128>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	0fd9      	lsrs	r1, r3, #31
 8004b58:	440b      	add	r3, r1
 8004b5a:	105b      	asrs	r3, r3, #1
 8004b5c:	fb92 f1f3 	sdiv	r1, r2, r3
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <get_random_start+0x11c>)
 8004b72:	701a      	strb	r2, [r3, #0]
            start_y = 1;
 8004b74:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <get_random_start+0x124>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
            break;
 8004b7a:	e01c      	b.n	8004bb6 <get_random_start+0x112>
        case 3:  // Right boundary
            start_x = (rand() % ((rows - 1) / 2)) * 2 + 1;  // odd from 1 to row-2
 8004b7c:	f00c feb0 	bl	80118e0 <rand>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <get_random_start+0x128>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	0fd9      	lsrs	r1, r3, #31
 8004b8a:	440b      	add	r3, r1
 8004b8c:	105b      	asrs	r3, r3, #1
 8004b8e:	fb92 f1f3 	sdiv	r1, r2, r3
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <get_random_start+0x11c>)
 8004ba4:	701a      	strb	r2, [r3, #0]
            start_y = columns - 2;
 8004ba6:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <get_random_start+0x120>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	3b02      	subs	r3, #2
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <get_random_start+0x124>)
 8004bb0:	701a      	strb	r2, [r3, #0]
            break;
 8004bb2:	e000      	b.n	8004bb6 <get_random_start+0x112>
        default:
            break;
 8004bb4:	bf00      	nop
    }
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	2000288a 	.word	0x2000288a
 8004bc0:	2000286e 	.word	0x2000286e
 8004bc4:	2000286d 	.word	0x2000286d
 8004bc8:	20002870 	.word	0x20002870
 8004bcc:	2000286c 	.word	0x2000286c

08004bd0 <get_random_end>:


/*
 * randomly set a end position/opposite to start
 */
void get_random_end(){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
    switch (boundary) {
 8004bd4:	4b52      	ldr	r3, [pc, #328]	; (8004d20 <get_random_end+0x150>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	f200 809d 	bhi.w	8004d18 <get_random_end+0x148>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <get_random_end+0x14>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004bf5 	.word	0x08004bf5
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c87 	.word	0x08004c87
 8004bf0:	08004cd3 	.word	0x08004cd3
        case 0:  // start in Top boundary
            while(1){
                end_x = rows - 2;
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <get_random_end+0x154>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	3b02      	subs	r3, #2
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	4b4a      	ldr	r3, [pc, #296]	; (8004d28 <get_random_end+0x158>)
 8004bfe:	701a      	strb	r2, [r3, #0]
                end_y = rand() % (columns - 2) + 1;    // 1 to col-2
 8004c00:	f00c fe6e 	bl	80118e0 <rand>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b49      	ldr	r3, [pc, #292]	; (8004d2c <get_random_end+0x15c>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	3b02      	subs	r3, #2
 8004c0c:	fb92 f1f3 	sdiv	r1, r2, r3
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	3301      	adds	r3, #1
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	4b44      	ldr	r3, [pc, #272]	; (8004d30 <get_random_end+0x160>)
 8004c1e:	701a      	strb	r2, [r3, #0]
                if(maze[end_x][end_y] == 0){
 8004c20:	4b44      	ldr	r3, [pc, #272]	; (8004d34 <get_random_end+0x164>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b40      	ldr	r3, [pc, #256]	; (8004d28 <get_random_end+0x158>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a40      	ldr	r2, [pc, #256]	; (8004d30 <get_random_end+0x160>)
 8004c30:	7812      	ldrb	r2, [r2, #0]
 8004c32:	4413      	add	r3, r2
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d000      	beq.n	8004c3c <get_random_end+0x6c>
                end_x = rows - 2;
 8004c3a:	e7db      	b.n	8004bf4 <get_random_end+0x24>
                    //end_x += 1;
                    break;
 8004c3c:	bf00      	nop
                }
            }
            break;
 8004c3e:	e06c      	b.n	8004d1a <get_random_end+0x14a>
        case 1:  // start in Bottom boundary
            while(1){
                end_x = 1;
 8004c40:	4b39      	ldr	r3, [pc, #228]	; (8004d28 <get_random_end+0x158>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	701a      	strb	r2, [r3, #0]
                end_y = rand() % (columns - 2) + 1;    // 1 ro col-2
 8004c46:	f00c fe4b 	bl	80118e0 <rand>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <get_random_end+0x15c>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	3b02      	subs	r3, #2
 8004c52:	fb92 f1f3 	sdiv	r1, r2, r3
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	4b33      	ldr	r3, [pc, #204]	; (8004d30 <get_random_end+0x160>)
 8004c64:	701a      	strb	r2, [r3, #0]
                if(maze[end_x][end_y] == 0){
 8004c66:	4b33      	ldr	r3, [pc, #204]	; (8004d34 <get_random_end+0x164>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b2f      	ldr	r3, [pc, #188]	; (8004d28 <get_random_end+0x158>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2e      	ldr	r2, [pc, #184]	; (8004d30 <get_random_end+0x160>)
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	4413      	add	r3, r2
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d000      	beq.n	8004c82 <get_random_end+0xb2>
                end_x = 1;
 8004c80:	e7de      	b.n	8004c40 <get_random_end+0x70>
                    //end_x -= 1;
                    break;
 8004c82:	bf00      	nop
                }
            }
            break;
 8004c84:	e049      	b.n	8004d1a <get_random_end+0x14a>
        case 2:  // start in Left boundary
            while(1){
                end_x = rand() % (rows - 2) + 1;    // 1 to row-2
 8004c86:	f00c fe2b 	bl	80118e0 <rand>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <get_random_end+0x154>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	3b02      	subs	r3, #2
 8004c92:	fb92 f1f3 	sdiv	r1, r2, r3
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <get_random_end+0x158>)
 8004ca4:	701a      	strb	r2, [r3, #0]
                end_y = columns - 2;
 8004ca6:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <get_random_end+0x15c>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	3b02      	subs	r3, #2
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <get_random_end+0x160>)
 8004cb0:	701a      	strb	r2, [r3, #0]
                if(maze[end_x][end_y] == 0){
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <get_random_end+0x164>)
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	4b1c      	ldr	r3, [pc, #112]	; (8004d28 <get_random_end+0x158>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <get_random_end+0x160>)
 8004cc2:	7812      	ldrb	r2, [r2, #0]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d000      	beq.n	8004cce <get_random_end+0xfe>
                end_x = rand() % (rows - 2) + 1;    // 1 to row-2
 8004ccc:	e7db      	b.n	8004c86 <get_random_end+0xb6>
                    //end_y += 1;
                    break;
 8004cce:	bf00      	nop
                }
            }
            break;
 8004cd0:	e023      	b.n	8004d1a <get_random_end+0x14a>
        case 3:  // Right boundary
            while(1){
                end_x = rand() % (rows - 2) + 1;    // 1 to row-2
 8004cd2:	f00c fe05 	bl	80118e0 <rand>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <get_random_end+0x154>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	3b02      	subs	r3, #2
 8004cde:	fb92 f1f3 	sdiv	r1, r2, r3
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <get_random_end+0x158>)
 8004cf0:	701a      	strb	r2, [r3, #0]
                end_y = 1;
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <get_random_end+0x160>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
                if(maze[end_x][end_y] == 0){
 8004cf8:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <get_random_end+0x164>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <get_random_end+0x158>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <get_random_end+0x160>)
 8004d08:	7812      	ldrb	r2, [r2, #0]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d000      	beq.n	8004d14 <get_random_end+0x144>
                end_x = rand() % (rows - 2) + 1;    // 1 to row-2
 8004d12:	e7de      	b.n	8004cd2 <get_random_end+0x102>
                    //end_x -= 1;
                    break;
 8004d14:	bf00      	nop
                }
            }
            break;
 8004d16:	e000      	b.n	8004d1a <get_random_end+0x14a>
        default:
            break;
 8004d18:	bf00      	nop
    }
}
 8004d1a:	bf00      	nop
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	2000288a 	.word	0x2000288a
 8004d24:	2000286c 	.word	0x2000286c
 8004d28:	2000286f 	.word	0x2000286f
 8004d2c:	2000286d 	.word	0x2000286d
 8004d30:	20002871 	.word	0x20002871
 8004d34:	20002868 	.word	0x20002868

08004d38 <init_maze_array>:


/*
 * initialise the maze array to all wall
 */
void init_maze_array(){
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
    // initial the array with all wall
    // wall = 1
    for (int i = 0; i < rows; i++) {
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	e018      	b.n	8004d76 <init_maze_array+0x3e>
        for (int j = 0; j < columns; j++){
 8004d44:	2300      	movs	r3, #0
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	e00c      	b.n	8004d64 <init_maze_array+0x2c>
            maze[i][j] = 1;
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <init_maze_array+0x58>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4413      	add	r3, r2
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < columns; j++){
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	3301      	adds	r3, #1
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <init_maze_array+0x5c>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	dbec      	blt.n	8004d4a <init_maze_array+0x12>
    for (int i = 0; i < rows; i++) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3301      	adds	r3, #1
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <init_maze_array+0x60>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	dbe0      	blt.n	8004d44 <init_maze_array+0xc>
        }
    }
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20002868 	.word	0x20002868
 8004d94:	2000286d 	.word	0x2000286d
 8004d98:	2000286c 	.word	0x2000286c

08004d9c <free_maze_array>:

/*
 * free up the memory allocated to maze array
 */
void free_maze_array(){
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
	//free the dynamically allocated array
	// used when go to next round
    for (int i = 0; i < rows; i++) {
 8004da2:	2300      	movs	r3, #0
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	e013      	b.n	8004dd0 <free_maze_array+0x34>
	        if(maze[i] != NULL) free(maze[i]);
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <free_maze_array+0x5c>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <free_maze_array+0x2e>
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <free_maze_array+0x5c>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f00c f811 	bl	8010dec <free>
    for (int i = 0; i < rows; i++) {
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <free_maze_array+0x60>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	dbe5      	blt.n	8004da8 <free_maze_array+0xc>
	}
    if(maze != NULL) free(maze);
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <free_maze_array+0x5c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <free_maze_array+0x52>
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <free_maze_array+0x5c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f00b ffff 	bl	8010dec <free>
}
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20002868 	.word	0x20002868
 8004dfc:	2000286c 	.word	0x2000286c

08004e00 <generate_maze>:

/*
 * recursive backtracking algorithm - generate maze with path
 * parameter : start xy position
 */
void generate_maze(uint8_t startx, uint8_t starty) {
 8004e00:	b5b0      	push	{r4, r5, r7, lr}
 8004e02:	b098      	sub	sp, #96	; 0x60
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	460a      	mov	r2, r1
 8004e0a:	71fb      	strb	r3, [r7, #7]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	71bb      	strb	r3, [r7, #6]
	//generate the maze array with 1 as wall and 0 as the empty path
    int directions[4][2] = {{0, 2}, {2, 0}, {0, -2}, {-2, 0}};  // Right, Down, Left, Up
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <generate_maze+0x178>)
 8004e12:	f107 0418 	add.w	r4, r7, #24
 8004e16:	461d      	mov	r5, r3
 8004e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int shuffle[4] = {0, 1, 2, 3};
 8004e24:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <generate_maze+0x17c>)
 8004e26:	f107 0408 	add.w	r4, r7, #8
 8004e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Shuffle the directions randomly
    for (int i = 3; i > 0; i--) {
 8004e30:	2303      	movs	r3, #3
 8004e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e34:	e027      	b.n	8004e86 <generate_maze+0x86>
        int j = rand() % (i + 1);
 8004e36:	f00c fd53 	bl	80118e0 <rand>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e3e:	3301      	adds	r3, #1
 8004e40:	fb92 f1f3 	sdiv	r1, r2, r3
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        int temp = shuffle[i];
 8004e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	3360      	adds	r3, #96	; 0x60
 8004e52:	443b      	add	r3, r7
 8004e54:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
        shuffle[i] = shuffle[j];
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	3360      	adds	r3, #96	; 0x60
 8004e60:	443b      	add	r3, r7
 8004e62:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8004e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	3360      	adds	r3, #96	; 0x60
 8004e6c:	443b      	add	r3, r7
 8004e6e:	f843 2c58 	str.w	r2, [r3, #-88]
        shuffle[j] = temp;
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	3360      	adds	r3, #96	; 0x60
 8004e78:	443b      	add	r3, r7
 8004e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e7c:	f843 2c58 	str.w	r2, [r3, #-88]
    for (int i = 3; i > 0; i--) {
 8004e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e82:	3b01      	subs	r3, #1
 8004e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	dcd4      	bgt.n	8004e36 <generate_maze+0x36>
    }

    // Mark the current cell as empty space
    //printf("%d %d\n", row, col);
    maze[startx][starty] = 0;
 8004e8c:	4b3c      	ldr	r3, [pc, #240]	; (8004f80 <generate_maze+0x180>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	79bb      	ldrb	r3, [r7, #6]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 4; i++) {
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ea4:	e05f      	b.n	8004f66 <generate_maze+0x166>
        int dx = directions[shuffle[i]][0];
 8004ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	3360      	adds	r3, #96	; 0x60
 8004eac:	443b      	add	r3, r7
 8004eae:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	3360      	adds	r3, #96	; 0x60
 8004eb6:	443b      	add	r3, r7
 8004eb8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8004ebc:	657b      	str	r3, [r7, #84]	; 0x54
        int dy = directions[shuffle[i]][1];
 8004ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	3360      	adds	r3, #96	; 0x60
 8004ec4:	443b      	add	r3, r7
 8004ec6:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	3360      	adds	r3, #96	; 0x60
 8004ece:	443b      	add	r3, r7
 8004ed0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004ed4:	653b      	str	r3, [r7, #80]	; 0x50
        int newRow = startx + dy;  // Neighbor row
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004eda:	4413      	add	r3, r2
 8004edc:	64fb      	str	r3, [r7, #76]	; 0x4c
        int newCol = starty + dx;  // Neighbor column
 8004ede:	79bb      	ldrb	r3, [r7, #6]
 8004ee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ee2:	4413      	add	r3, r2
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48
        int midRow = startx + dy / 2;  // Midpoint row
 8004ee6:	79fa      	ldrb	r2, [r7, #7]
 8004ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eea:	0fd9      	lsrs	r1, r3, #31
 8004eec:	440b      	add	r3, r1
 8004eee:	105b      	asrs	r3, r3, #1
 8004ef0:	4413      	add	r3, r2
 8004ef2:	647b      	str	r3, [r7, #68]	; 0x44
        int midCol = starty + dx / 2;  // Midpoint column
 8004ef4:	79ba      	ldrb	r2, [r7, #6]
 8004ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef8:	0fd9      	lsrs	r1, r3, #31
 8004efa:	440b      	add	r3, r1
 8004efc:	105b      	asrs	r3, r3, #1
 8004efe:	4413      	add	r3, r2
 8004f00:	643b      	str	r3, [r7, #64]	; 0x40

        // Check if the neighbor coordinates are within the maze boundaries
        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < columns && maze[newRow][newCol] == 1) {
 8004f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	db2b      	blt.n	8004f60 <generate_maze+0x160>
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <generate_maze+0x184>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f10:	4293      	cmp	r3, r2
 8004f12:	da25      	bge.n	8004f60 <generate_maze+0x160>
 8004f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	db22      	blt.n	8004f60 <generate_maze+0x160>
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <generate_maze+0x188>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f22:	4293      	cmp	r3, r2
 8004f24:	da1c      	bge.n	8004f60 <generate_maze+0x160>
 8004f26:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <generate_maze+0x180>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f34:	4413      	add	r3, r2
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d111      	bne.n	8004f60 <generate_maze+0x160>
            // Carve a path between the current cell and the neighbor
            //printf("%d %d\n", midRow, midCol);
            maze[midRow][midCol] = 0;
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <generate_maze+0x180>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f4a:	4413      	add	r3, r2
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
            generate_maze(newRow, newCol);  // Recursively generate the maze from the neighbor cell
 8004f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ff50 	bl	8004e00 <generate_maze>
    for (int i = 0; i < 4; i++) {
 8004f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f62:	3301      	adds	r3, #1
 8004f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	dd9c      	ble.n	8004ea6 <generate_maze+0xa6>
        }
    }
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3760      	adds	r7, #96	; 0x60
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bdb0      	pop	{r4, r5, r7, pc}
 8004f76:	bf00      	nop
 8004f78:	080140e0 	.word	0x080140e0
 8004f7c:	08014100 	.word	0x08014100
 8004f80:	20002868 	.word	0x20002868
 8004f84:	2000286c 	.word	0x2000286c
 8004f88:	2000286d 	.word	0x2000286d

08004f8c <add_start_end_maze>:


/*
 * add the start and end position to the maze
 */
void add_start_end_maze(){
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
    // add the start, end point to maze array
    maze[start_x][start_y] = 2; // 2 - start positiojn
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <add_start_end_maze+0x3c>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <add_start_end_maze+0x40>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <add_start_end_maze+0x44>)
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	701a      	strb	r2, [r3, #0]
    maze[end_x][end_y] = 3;     // 3 - end position
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <add_start_end_maze+0x3c>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <add_start_end_maze+0x48>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a08      	ldr	r2, [pc, #32]	; (8004fd8 <add_start_end_maze+0x4c>)
 8004fb8:	7812      	ldrb	r2, [r2, #0]
 8004fba:	4413      	add	r3, r2
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	701a      	strb	r2, [r3, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr
 8004fc8:	20002868 	.word	0x20002868
 8004fcc:	2000286e 	.word	0x2000286e
 8004fd0:	20002870 	.word	0x20002870
 8004fd4:	2000286f 	.word	0x2000286f
 8004fd8:	20002871 	.word	0x20002871

08004fdc <add_key_maze>:

/*
 * add the three keys to the maze
 */
void add_key_maze(){    //key = 4, three key intotal
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
    uint8_t num_key = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	71fb      	strb	r3, [r7, #7]
    while(num_key < 3){
 8004fe6:	e033      	b.n	8005050 <add_key_maze+0x74>
        uint8_t ran_row = rand() % (rows - 2) + 1;
 8004fe8:	f00c fc7a 	bl	80118e0 <rand>
 8004fec:	4602      	mov	r2, r0
 8004fee:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <add_key_maze+0x84>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	3b02      	subs	r3, #2
 8004ff4:	fb92 f1f3 	sdiv	r1, r2, r3
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	3301      	adds	r3, #1
 8005002:	71bb      	strb	r3, [r7, #6]
        uint8_t ran_col = rand() % (columns - 2) + 1;
 8005004:	f00c fc6c 	bl	80118e0 <rand>
 8005008:	4602      	mov	r2, r0
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <add_key_maze+0x88>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	3b02      	subs	r3, #2
 8005010:	fb92 f1f3 	sdiv	r1, r2, r3
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	b2db      	uxtb	r3, r3
 800501c:	3301      	adds	r3, #1
 800501e:	717b      	strb	r3, [r7, #5]
        if(maze[ran_row][ran_col] == 0){
 8005020:	4b11      	ldr	r3, [pc, #68]	; (8005068 <add_key_maze+0x8c>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	79bb      	ldrb	r3, [r7, #6]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	797b      	ldrb	r3, [r7, #5]
 800502e:	4413      	add	r3, r2
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10c      	bne.n	8005050 <add_key_maze+0x74>
            maze[ran_row][ran_col] = 4;
 8005036:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <add_key_maze+0x8c>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	79bb      	ldrb	r3, [r7, #6]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	797b      	ldrb	r3, [r7, #5]
 8005044:	4413      	add	r3, r2
 8005046:	2204      	movs	r2, #4
 8005048:	701a      	strb	r2, [r3, #0]
            num_key++;
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	3301      	adds	r3, #1
 800504e:	71fb      	strb	r3, [r7, #7]
    while(num_key < 3){
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d9c8      	bls.n	8004fe8 <add_key_maze+0xc>
        }
    }
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	2000286c 	.word	0x2000286c
 8005064:	2000286d 	.word	0x2000286d
 8005068:	20002868 	.word	0x20002868

0800506c <shuffle_array>:


/*
 * random rearrange a array
 */
void shuffle_array(uint8_t arr[], uint8_t size) {    // randomize the array order
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
    for (int i = size - 1; i > 0; i--) {
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	3b01      	subs	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e01f      	b.n	80050c0 <shuffle_array+0x54>
        int j = rand() % (i + 1);
 8005080:	f00c fc2e 	bl	80118e0 <rand>
 8005084:	4602      	mov	r2, r0
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	fb92 f1f3 	sdiv	r1, r2, r3
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	613b      	str	r3, [r7, #16]
        uint8_t temp = arr[i];
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	73fb      	strb	r3, [r7, #15]
        arr[i] = arr[j];
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	441a      	add	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	440b      	add	r3, r1
 80050ac:	7812      	ldrb	r2, [r2, #0]
 80050ae:	701a      	strb	r2, [r3, #0]
        arr[j] = temp;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	4413      	add	r3, r2
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	701a      	strb	r2, [r3, #0]
    for (int i = size - 1; i > 0; i--) {
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	3b01      	subs	r3, #1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	dcdc      	bgt.n	8005080 <shuffle_array+0x14>
    }
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <add_obstacle_maze>:

/*
 * randomly add 8-10 obstacles to the array
 */
void add_obstacle_maze(){    // obstacle - 4 to 9(hardware), 10 - 12(optional software)
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
    uint8_t obstacle_array[13] = {5,6,7,8,9,10,11,12,13,14,15,16,17}; // list of array
 80050d6:	4b4b      	ldr	r3, [pc, #300]	; (8005204 <add_obstacle_maze+0x134>)
 80050d8:	1d3c      	adds	r4, r7, #4
 80050da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050dc:	c407      	stmia	r4!, {r0, r1, r2}
 80050de:	7023      	strb	r3, [r4, #0]
    shuffle_array(obstacle_array, 13);  //redorder the array
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	210d      	movs	r1, #13
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff ffc1 	bl	800506c <shuffle_array>

    // find the random num_obstacles (8-10)
    uint8_t num_obstacles = rand() % 3 + base_obs;
 80050ea:	f00c fbf9 	bl	80118e0 <rand>
 80050ee:	4602      	mov	r2, r0
 80050f0:	4b45      	ldr	r3, [pc, #276]	; (8005208 <add_obstacle_maze+0x138>)
 80050f2:	fb83 3102 	smull	r3, r1, r3, r2
 80050f6:	17d3      	asrs	r3, r2, #31
 80050f8:	1ac9      	subs	r1, r1, r3
 80050fa:	460b      	mov	r3, r1
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	440b      	add	r3, r1
 8005100:	1ad1      	subs	r1, r2, r3
 8005102:	b2ca      	uxtb	r2, r1
 8005104:	4b41      	ldr	r3, [pc, #260]	; (800520c <add_obstacle_maze+0x13c>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	4413      	add	r3, r2
 800510a:	75fb      	strb	r3, [r7, #23]

    //for demo use
    if(level == 1) num_obstacles = 13;
 800510c:	4b40      	ldr	r3, [pc, #256]	; (8005210 <add_obstacle_maze+0x140>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <add_obstacle_maze+0x48>
 8005114:	230d      	movs	r3, #13
 8005116:	75fb      	strb	r3, [r7, #23]

    uint8_t i = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	75bb      	strb	r3, [r7, #22]
    while(i < num_obstacles){   // randomly place the obstacles
 800511c:	e069      	b.n	80051f2 <add_obstacle_maze+0x122>
        uint8_t ran_row = rand() % (rows - 2) + 1;
 800511e:	f00c fbdf 	bl	80118e0 <rand>
 8005122:	4602      	mov	r2, r0
 8005124:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <add_obstacle_maze+0x144>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	3b02      	subs	r3, #2
 800512a:	fb92 f1f3 	sdiv	r1, r2, r3
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	3301      	adds	r3, #1
 8005138:	757b      	strb	r3, [r7, #21]
        uint8_t ran_col = rand() % (columns - 2) + 1;
 800513a:	f00c fbd1 	bl	80118e0 <rand>
 800513e:	4602      	mov	r2, r0
 8005140:	4b35      	ldr	r3, [pc, #212]	; (8005218 <add_obstacle_maze+0x148>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	3b02      	subs	r3, #2
 8005146:	fb92 f1f3 	sdiv	r1, r2, r3
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	b2db      	uxtb	r3, r3
 8005152:	3301      	adds	r3, #1
 8005154:	753b      	strb	r3, [r7, #20]
        if(maze[ran_row][ran_col] == 0 && !(maze[ran_row+1][ran_col]>4) &&
 8005156:	4b31      	ldr	r3, [pc, #196]	; (800521c <add_obstacle_maze+0x14c>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	7d7b      	ldrb	r3, [r7, #21]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	7d3b      	ldrb	r3, [r7, #20]
 8005164:	4413      	add	r3, r2
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d142      	bne.n	80051f2 <add_obstacle_maze+0x122>
 800516c:	4b2b      	ldr	r3, [pc, #172]	; (800521c <add_obstacle_maze+0x14c>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	7d7b      	ldrb	r3, [r7, #21]
 8005172:	3301      	adds	r3, #1
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	7d3b      	ldrb	r3, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d836      	bhi.n	80051f2 <add_obstacle_maze+0x122>
        !(maze[ran_row][ran_col+1]>4) && !(maze[ran_row-1][ran_col]>4) && !(maze[ran_row][ran_col-1]>4)){  // avoid two obstacles next to each other
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <add_obstacle_maze+0x14c>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	7d7b      	ldrb	r3, [r7, #21]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	7d3b      	ldrb	r3, [r7, #20]
 8005192:	3301      	adds	r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	781b      	ldrb	r3, [r3, #0]
        if(maze[ran_row][ran_col] == 0 && !(maze[ran_row+1][ran_col]>4) &&
 8005198:	2b04      	cmp	r3, #4
 800519a:	d82a      	bhi.n	80051f2 <add_obstacle_maze+0x122>
        !(maze[ran_row][ran_col+1]>4) && !(maze[ran_row-1][ran_col]>4) && !(maze[ran_row][ran_col-1]>4)){  // avoid two obstacles next to each other
 800519c:	4b1f      	ldr	r3, [pc, #124]	; (800521c <add_obstacle_maze+0x14c>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	7d7b      	ldrb	r3, [r7, #21]
 80051a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051a6:	3b01      	subs	r3, #1
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	7d3b      	ldrb	r3, [r7, #20]
 80051b0:	4413      	add	r3, r2
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d81c      	bhi.n	80051f2 <add_obstacle_maze+0x122>
 80051b8:	4b18      	ldr	r3, [pc, #96]	; (800521c <add_obstacle_maze+0x14c>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	7d7b      	ldrb	r3, [r7, #21]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	7d3b      	ldrb	r3, [r7, #20]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	4413      	add	r3, r2
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d810      	bhi.n	80051f2 <add_obstacle_maze+0x122>
            maze[ran_row][ran_col] = obstacle_array[i];
 80051d0:	7dba      	ldrb	r2, [r7, #22]
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <add_obstacle_maze+0x14c>)
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	7d7b      	ldrb	r3, [r7, #21]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	7d3b      	ldrb	r3, [r7, #20]
 80051e0:	440b      	add	r3, r1
 80051e2:	3218      	adds	r2, #24
 80051e4:	443a      	add	r2, r7
 80051e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80051ea:	701a      	strb	r2, [r3, #0]
            i++;
 80051ec:	7dbb      	ldrb	r3, [r7, #22]
 80051ee:	3301      	adds	r3, #1
 80051f0:	75bb      	strb	r3, [r7, #22]
    while(i < num_obstacles){   // randomly place the obstacles
 80051f2:	7dba      	ldrb	r2, [r7, #22]
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d391      	bcc.n	800511e <add_obstacle_maze+0x4e>
        }
    }
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd90      	pop	{r4, r7, pc}
 8005204:	08014110 	.word	0x08014110
 8005208:	55555556 	.word	0x55555556
 800520c:	2000288b 	.word	0x2000288b
 8005210:	2000288f 	.word	0x2000288f
 8005214:	2000286c 	.word	0x2000286c
 8005218:	2000286d 	.word	0x2000286d
 800521c:	20002868 	.word	0x20002868

08005220 <move>:
extern uint32_t joy[];
extern ADC_HandleTypeDef hadc3;



void move(){
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
	//buttom2 - down
	//buttom3 - left
	//buttom4 - right
	//HAL_ADC_Start_DMA(&hadc3, joy, 2);

	if(hearts == 0) handle_lose();
 8005224:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <move+0x84>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <move+0x10>
 800522c:	f7fc facc 	bl	80017c8 <handle_lose>
	}else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET){
		move_right();
		HAL_Delay(500);
	}*/

	if (joy[1]>=4000){
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <move+0x88>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005238:	d306      	bcc.n	8005248 <move+0x28>
		move_up();
 800523a:	f000 f837 	bl	80052ac <move_up>
		HAL_Delay(300);
 800523e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005242:	f001 ffa7 	bl	8007194 <HAL_Delay>

	}else if (joy[0]>0 && joy[0]<=800){
		move_right();
		HAL_Delay(300);
	}
}
 8005246:	e02a      	b.n	800529e <move+0x7e>
	}else if (joy[1]>0 && joy[1]<=800){
 8005248:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <move+0x88>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <move+0x48>
 8005250:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <move+0x88>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005258:	d806      	bhi.n	8005268 <move+0x48>
		move_down();
 800525a:	f000 f83f 	bl	80052dc <move_down>
		HAL_Delay(300);
 800525e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005262:	f001 ff97 	bl	8007194 <HAL_Delay>
}
 8005266:	e01a      	b.n	800529e <move+0x7e>
	}else if (joy[0]>=4000){
 8005268:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <move+0x88>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005270:	d306      	bcc.n	8005280 <move+0x60>
		move_left();
 8005272:	f000 f84b 	bl	800530c <move_left>
		HAL_Delay(300);
 8005276:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800527a:	f001 ff8b 	bl	8007194 <HAL_Delay>
}
 800527e:	e00e      	b.n	800529e <move+0x7e>
	}else if (joy[0]>0 && joy[0]<=800){
 8005280:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <move+0x88>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <move+0x7e>
 8005288:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <move+0x88>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005290:	d805      	bhi.n	800529e <move+0x7e>
		move_right();
 8005292:	f000 f853 	bl	800533c <move_right>
		HAL_Delay(300);
 8005296:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800529a:	f001 ff7b 	bl	8007194 <HAL_Delay>
}
 800529e:	bf00      	nop
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20002876 	.word	0x20002876
 80052a8:	20002880 	.word	0x20002880

080052ac <move_up>:

void move_up(){
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
	next_x = current_x - 1;
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <move_up+0x20>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <move_up+0x24>)
 80052ba:	701a      	strb	r2, [r3, #0]
	next_y = current_y;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <move_up+0x28>)
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <move_up+0x2c>)
 80052c2:	701a      	strb	r2, [r3, #0]
	handle_move();
 80052c4:	f000 f852 	bl	800536c <handle_move>
}
 80052c8:	bf00      	nop
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20002872 	.word	0x20002872
 80052d0:	20002874 	.word	0x20002874
 80052d4:	20002873 	.word	0x20002873
 80052d8:	20002875 	.word	0x20002875

080052dc <move_down>:


void move_down(){
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
	next_x = current_x + 1;
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <move_down+0x20>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <move_down+0x24>)
 80052ea:	701a      	strb	r2, [r3, #0]
	next_y = current_y;
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <move_down+0x28>)
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <move_down+0x2c>)
 80052f2:	701a      	strb	r2, [r3, #0]
	handle_move();
 80052f4:	f000 f83a 	bl	800536c <handle_move>
}
 80052f8:	bf00      	nop
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20002872 	.word	0x20002872
 8005300:	20002874 	.word	0x20002874
 8005304:	20002873 	.word	0x20002873
 8005308:	20002875 	.word	0x20002875

0800530c <move_left>:


void move_left(){
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
	next_y = current_y - 1;
 8005310:	4b06      	ldr	r3, [pc, #24]	; (800532c <move_left+0x20>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	3b01      	subs	r3, #1
 8005316:	b2da      	uxtb	r2, r3
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <move_left+0x24>)
 800531a:	701a      	strb	r2, [r3, #0]
	next_x = current_x;
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <move_left+0x28>)
 800531e:	781a      	ldrb	r2, [r3, #0]
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <move_left+0x2c>)
 8005322:	701a      	strb	r2, [r3, #0]
	handle_move();
 8005324:	f000 f822 	bl	800536c <handle_move>
}
 8005328:	bf00      	nop
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20002873 	.word	0x20002873
 8005330:	20002875 	.word	0x20002875
 8005334:	20002872 	.word	0x20002872
 8005338:	20002874 	.word	0x20002874

0800533c <move_right>:


void move_right(){
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
	next_y = current_y + 1;
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <move_right+0x20>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <move_right+0x24>)
 800534a:	701a      	strb	r2, [r3, #0]
	next_x = current_x;
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <move_right+0x28>)
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <move_right+0x2c>)
 8005352:	701a      	strb	r2, [r3, #0]
	handle_move();
 8005354:	f000 f80a 	bl	800536c <handle_move>
}
 8005358:	bf00      	nop
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20002873 	.word	0x20002873
 8005360:	20002875 	.word	0x20002875
 8005364:	20002872 	.word	0x20002872
 8005368:	20002874 	.word	0x20002874

0800536c <handle_move>:

void handle_move(){
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
	int valid = check_valid();
 8005372:	f000 f875 	bl	8005460 <check_valid>
 8005376:	6078      	str	r0, [r7, #4]
	if (valid == 1){	//handle each movement case
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d164      	bne.n	8005448 <handle_move+0xdc>
		switch(maze[next_x][next_y]){
 800537e:	4b35      	ldr	r3, [pc, #212]	; (8005454 <handle_move+0xe8>)
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4b35      	ldr	r3, [pc, #212]	; (8005458 <handle_move+0xec>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a33      	ldr	r2, [pc, #204]	; (800545c <handle_move+0xf0>)
 800538e:	7812      	ldrb	r2, [r2, #0]
 8005390:	4413      	add	r3, r2
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b11      	cmp	r3, #17
 8005396:	d859      	bhi.n	800544c <handle_move+0xe0>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <handle_move+0x34>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053e9 	.word	0x080053e9
 80053a4:	0800544d 	.word	0x0800544d
 80053a8:	0800544d 	.word	0x0800544d
 80053ac:	080053ef 	.word	0x080053ef
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	080053fb 	.word	0x080053fb
 80053b8:	08005401 	.word	0x08005401
 80053bc:	08005407 	.word	0x08005407
 80053c0:	0800540d 	.word	0x0800540d
 80053c4:	08005413 	.word	0x08005413
 80053c8:	08005419 	.word	0x08005419
 80053cc:	0800541f 	.word	0x0800541f
 80053d0:	08005425 	.word	0x08005425
 80053d4:	0800542b 	.word	0x0800542b
 80053d8:	08005431 	.word	0x08005431
 80053dc:	08005437 	.word	0x08005437
 80053e0:	0800543d 	.word	0x0800543d
 80053e4:	08005443 	.word	0x08005443

		case 0:	//empty
			handle_empty(); break;
 80053e8:	f7fc fa22 	bl	8001830 <handle_empty>
 80053ec:	e02f      	b.n	800544e <handle_move+0xe2>
		case 3:
			handle_endpt(); break;
 80053ee:	f7fc fa4f 	bl	8001890 <handle_endpt>
 80053f2:	e02c      	b.n	800544e <handle_move+0xe2>
		case 4:
			handle_key(); break;
 80053f4:	f7fc facc 	bl	8001990 <handle_key>
 80053f8:	e029      	b.n	800544e <handle_move+0xe2>
		case 5:
			handle_game1(); break;	//light pattern
 80053fa:	f7fc fb0d 	bl	8001a18 <handle_game1>
 80053fe:	e026      	b.n	800544e <handle_move+0xe2>
		case 6:
			handle_game2(); break;
 8005400:	f7fc fba2 	bl	8001b48 <handle_game2>
 8005404:	e023      	b.n	800544e <handle_move+0xe2>
		case 7:
			handle_game3(); break;
 8005406:	f7fc fbcf 	bl	8001ba8 <handle_game3>
 800540a:	e020      	b.n	800544e <handle_move+0xe2>
		case 8:
			handle_dark(); break;
 800540c:	f7fc fc64 	bl	8001cd8 <handle_dark>
 8005410:	e01d      	b.n	800544e <handle_move+0xe2>
		case 9:
			handle_bright(); break;
 8005412:	f7fc fd5f 	bl	8001ed4 <handle_bright>
 8005416:	e01a      	b.n	800544e <handle_move+0xe2>
		case 10:
			handle_ice(); break;
 8005418:	f7fc fe5a 	bl	80020d0 <handle_ice>
 800541c:	e017      	b.n	800544e <handle_move+0xe2>
		case 11:
			handle_fire(); break;
 800541e:	f7fc ff33 	bl	8002288 <handle_fire>
 8005422:	e014      	b.n	800544e <handle_move+0xe2>
		case 12:
			handle_ghost(); break;
 8005424:	f7fd f80c 	bl	8002440 <handle_ghost>
 8005428:	e011      	b.n	800544e <handle_move+0xe2>
		case 13:
			handle_stone(); break;
 800542a:	f7fd f8fd 	bl	8002628 <handle_stone>
 800542e:	e00e      	b.n	800544e <handle_move+0xe2>
		case 14:
			handle_door(); break;
 8005430:	f7fd f92a 	bl	8002688 <handle_door>
 8005434:	e00b      	b.n	800544e <handle_move+0xe2>
		case 15:
			handle_addheart(); break;
 8005436:	f7fd f957 	bl	80026e8 <handle_addheart>
 800543a:	e008      	b.n	800544e <handle_move+0xe2>
		case 16:
			handle_prison(); break;
 800543c:	f7fd f9be 	bl	80027bc <handle_prison>
 8005440:	e005      	b.n	800544e <handle_move+0xe2>
		case 17:
			handle_hidden(); break;
 8005442:	f7fd fa01 	bl	8002848 <handle_hidden>
 8005446:	e002      	b.n	800544e <handle_move+0xe2>
		default: break;


		}

	}else return;	// no moving action for non valid move
 8005448:	bf00      	nop
 800544a:	e000      	b.n	800544e <handle_move+0xe2>
		default: break;
 800544c:	bf00      	nop
}
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20002868 	.word	0x20002868
 8005458:	20002874 	.word	0x20002874
 800545c:	20002875 	.word	0x20002875

08005460 <check_valid>:

int check_valid(){	// check if valid movement
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
	if (maze[next_x][next_y] == 1)  return 0;	//move to wall
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <check_valid+0x2c>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <check_valid+0x30>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a08      	ldr	r2, [pc, #32]	; (8005494 <check_valid+0x34>)
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	4413      	add	r3, r2
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <check_valid+0x22>
 800547e:	2300      	movs	r3, #0
 8005480:	e000      	b.n	8005484 <check_valid+0x24>
	//if (maze[next_x][next_y] == 3 && keys != 3) return 0;	//go to end point without all keys
	else return 1;
 8005482:	2301      	movs	r3, #1
}
 8005484:	4618      	mov	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	20002868 	.word	0x20002868
 8005490:	20002874 	.word	0x20002874
 8005494:	20002875 	.word	0x20002875

08005498 <game_record>:
 * no of task finished/failure  -
 * difficulty level  - level
 * round time - duration
 */

void game_record(){
 8005498:	b580      	push	{r7, lr}
 800549a:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
	  //test sd card write
	  FATFS myFATFS;
	  FIL myFILE;
	  char str[30];
	  //UINT numberofbytes;
	  char myPath[] = "game.txt\0";
 80054a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80054a6:	4a68      	ldr	r2, [pc, #416]	; (8005648 <game_record+0x1b0>)
 80054a8:	3b8c      	subs	r3, #140	; 0x8c
 80054aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80054ac:	c303      	stmia	r3!, {r0, r1}
 80054ae:	801a      	strh	r2, [r3, #0]

	  FRESULT res;
	  res = f_mount(&myFATFS,SDPath,1);
 80054b0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80054b4:	f103 0310 	add.w	r3, r3, #16
 80054b8:	3b14      	subs	r3, #20
 80054ba:	2201      	movs	r2, #1
 80054bc:	4963      	ldr	r1, [pc, #396]	; (800564c <game_record+0x1b4>)
 80054be:	4618      	mov	r0, r3
 80054c0:	f009 ff0c 	bl	800f2dc <f_mount>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80054ca:	f102 020f 	add.w	r2, r2, #15
 80054ce:	7013      	strb	r3, [r2, #0]

	  if (res == FR_OK){
 80054d0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80054d4:	f103 030f 	add.w	r3, r3, #15
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 80a7 	bne.w	800562e <game_record+0x196>
	  LCD_DrawString(0,0,"start",RED);
 80054e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054e4:	4a5a      	ldr	r2, [pc, #360]	; (8005650 <game_record+0x1b8>)
 80054e6:	2100      	movs	r1, #0
 80054e8:	2000      	movs	r0, #0
 80054ea:	f7fd fd4d 	bl	8002f88 <LCD_DrawString>
	  HAL_Delay(100);
 80054ee:	2064      	movs	r0, #100	; 0x64
 80054f0:	f001 fe50 	bl	8007194 <HAL_Delay>
	  f_open(&myFILE, myPath, FA_WRITE | FA_OPEN_ALWAYS);
 80054f4:	f107 0110 	add.w	r1, r7, #16
 80054f8:	390c      	subs	r1, #12
 80054fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054fe:	3b20      	subs	r3, #32
 8005500:	2212      	movs	r2, #18
 8005502:	4618      	mov	r0, r3
 8005504:	f009 ff34 	bl	800f370 <f_open>
	  f_lseek(&myFILE, f_size(&myFILE));
 8005508:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800550c:	f8d3 2fac 	ldr.w	r2, [r3, #4012]	; 0xfac
 8005510:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005514:	3b20      	subs	r3, #32
 8005516:	4611      	mov	r1, r2
 8005518:	4618      	mov	r0, r3
 800551a:	f00a ff49 	bl	80103b0 <f_lseek>
	  //f_write(&myFILE, array, sizeof(array), &numberofbytes);
	  //write record
	  f_puts("\n\n", &myFILE);
 800551e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005522:	3b20      	subs	r3, #32
 8005524:	4619      	mov	r1, r3
 8005526:	484b      	ldr	r0, [pc, #300]	; (8005654 <game_record+0x1bc>)
 8005528:	f00b faad 	bl	8010a86 <f_puts>

	  if(status == 0) f_puts("win! ^_^\n", &myFILE);
 800552c:	4b4a      	ldr	r3, [pc, #296]	; (8005658 <game_record+0x1c0>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <game_record+0xac>
 8005534:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005538:	3b20      	subs	r3, #32
 800553a:	4619      	mov	r1, r3
 800553c:	4847      	ldr	r0, [pc, #284]	; (800565c <game_record+0x1c4>)
 800553e:	f00b faa2 	bl	8010a86 <f_puts>
 8005542:	e006      	b.n	8005552 <game_record+0xba>
	  else f_puts("lose! T_T\n", &myFILE);
 8005544:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005548:	3b20      	subs	r3, #32
 800554a:	4619      	mov	r1, r3
 800554c:	4844      	ldr	r0, [pc, #272]	; (8005660 <game_record+0x1c8>)
 800554e:	f00b fa9a 	bl	8010a86 <f_puts>

	  uint8_t min = duration/60;
 8005552:	4b44      	ldr	r3, [pc, #272]	; (8005664 <game_record+0x1cc>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	4a44      	ldr	r2, [pc, #272]	; (8005668 <game_record+0x1d0>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8005562:	f102 020e 	add.w	r2, r2, #14
 8005566:	7013      	strb	r3, [r2, #0]
	  uint8_t sec = duration%60;
 8005568:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <game_record+0x1cc>)
 800556a:	781a      	ldrb	r2, [r3, #0]
 800556c:	4b3e      	ldr	r3, [pc, #248]	; (8005668 <game_record+0x1d0>)
 800556e:	fba3 1302 	umull	r1, r3, r3, r2
 8005572:	0959      	lsrs	r1, r3, #5
 8005574:	460b      	mov	r3, r1
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	1a5b      	subs	r3, r3, r1
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8005582:	f102 020d 	add.w	r2, r2, #13
 8005586:	7013      	strb	r3, [r2, #0]
	  sprintf(str, "time spend: %u:%u \n",min, sec);
 8005588:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800558c:	f103 030e 	add.w	r3, r3, #14
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8005596:	f103 030d 	add.w	r3, r3, #13
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	f107 0010 	add.w	r0, r7, #16
 80055a0:	4932      	ldr	r1, [pc, #200]	; (800566c <game_record+0x1d4>)
 80055a2:	f00c f9eb 	bl	801197c <siprintf>
	  f_puts(str, &myFILE);
 80055a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055aa:	3b20      	subs	r3, #32
 80055ac:	f107 0210 	add.w	r2, r7, #16
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f00b fa67 	bl	8010a86 <f_puts>

	  if(level == 1) f_puts("difficulty level: easy", &myFILE);
 80055b8:	4b2d      	ldr	r3, [pc, #180]	; (8005670 <game_record+0x1d8>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d107      	bne.n	80055d0 <game_record+0x138>
 80055c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055c4:	3b20      	subs	r3, #32
 80055c6:	4619      	mov	r1, r3
 80055c8:	482a      	ldr	r0, [pc, #168]	; (8005674 <game_record+0x1dc>)
 80055ca:	f00b fa5c 	bl	8010a86 <f_puts>
 80055ce:	e016      	b.n	80055fe <game_record+0x166>
	  else if(level == 2) f_puts("difficulty level: medium", &myFILE);
 80055d0:	4b27      	ldr	r3, [pc, #156]	; (8005670 <game_record+0x1d8>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d107      	bne.n	80055e8 <game_record+0x150>
 80055d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055dc:	3b20      	subs	r3, #32
 80055de:	4619      	mov	r1, r3
 80055e0:	4825      	ldr	r0, [pc, #148]	; (8005678 <game_record+0x1e0>)
 80055e2:	f00b fa50 	bl	8010a86 <f_puts>
 80055e6:	e00a      	b.n	80055fe <game_record+0x166>
	  else if(level == 3) f_puts("difficulty level: hard", &myFILE);
 80055e8:	4b21      	ldr	r3, [pc, #132]	; (8005670 <game_record+0x1d8>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d106      	bne.n	80055fe <game_record+0x166>
 80055f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055f4:	3b20      	subs	r3, #32
 80055f6:	4619      	mov	r1, r3
 80055f8:	4820      	ldr	r0, [pc, #128]	; (800567c <game_record+0x1e4>)
 80055fa:	f00b fa44 	bl	8010a86 <f_puts>


	  f_close(&myFILE);
 80055fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005602:	3b20      	subs	r3, #32
 8005604:	4618      	mov	r0, r3
 8005606:	f00a fea8 	bl	801035a <f_close>
	  LCD_DrawString(0,0,"end",RED);
 800560a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800560e:	4a1c      	ldr	r2, [pc, #112]	; (8005680 <game_record+0x1e8>)
 8005610:	2100      	movs	r1, #0
 8005612:	2000      	movs	r0, #0
 8005614:	f7fd fcb8 	bl	8002f88 <LCD_DrawString>
	  f_mount(&myFATFS, " ", 0);
 8005618:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800561c:	f103 0310 	add.w	r3, r3, #16
 8005620:	3b14      	subs	r3, #20
 8005622:	2200      	movs	r2, #0
 8005624:	4917      	ldr	r1, [pc, #92]	; (8005684 <game_record+0x1ec>)
 8005626:	4618      	mov	r0, r3
 8005628:	f009 fe58 	bl	800f2dc <f_mount>
  	f_write(&myFILE, myData, sizeof(myData), &numberofbytes);
  	f_close(&myFILE);
  	LCD_DrawString(0,0,"end",RED);
    }else LCD_DrawString(0,0,"failure",RED);*/

}
 800562c:	e006      	b.n	800563c <game_record+0x1a4>
	  }else LCD_DrawString(0,0,"failure",RED);
 800562e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005632:	4a15      	ldr	r2, [pc, #84]	; (8005688 <game_record+0x1f0>)
 8005634:	2100      	movs	r1, #0
 8005636:	2000      	movs	r0, #0
 8005638:	f7fd fca6 	bl	8002f88 <LCD_DrawString>
}
 800563c:	bf00      	nop
 800563e:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	080141b4 	.word	0x080141b4
 800564c:	20006228 	.word	0x20006228
 8005650:	08014120 	.word	0x08014120
 8005654:	08014128 	.word	0x08014128
 8005658:	2000027e 	.word	0x2000027e
 800565c:	0801412c 	.word	0x0801412c
 8005660:	08014138 	.word	0x08014138
 8005664:	20000002 	.word	0x20000002
 8005668:	88888889 	.word	0x88888889
 800566c:	08014144 	.word	0x08014144
 8005670:	2000288f 	.word	0x2000288f
 8005674:	08014158 	.word	0x08014158
 8005678:	08014170 	.word	0x08014170
 800567c:	0801418c 	.word	0x0801418c
 8005680:	080141a4 	.word	0x080141a4
 8005684:	080141a8 	.word	0x080141a8
 8005688:	080141ac 	.word	0x080141ac

0800568c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <HAL_MspInit+0x5c>)
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <HAL_MspInit+0x5c>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	6193      	str	r3, [r2, #24]
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <HAL_MspInit+0x5c>)
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <HAL_MspInit+0x5c>)
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <HAL_MspInit+0x5c>)
 80056b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b4:	61d3      	str	r3, [r2, #28]
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <HAL_MspInit+0x5c>)
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <HAL_MspInit+0x60>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	4a04      	ldr	r2, [pc, #16]	; (80056ec <HAL_MspInit+0x60>)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	40021000 	.word	0x40021000
 80056ec:	40010000 	.word	0x40010000

080056f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	f107 0318 	add.w	r3, r7, #24
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a3c      	ldr	r2, [pc, #240]	; (80057fc <HAL_ADC_MspInit+0x10c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d122      	bne.n	8005756 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005710:	4b3b      	ldr	r3, [pc, #236]	; (8005800 <HAL_ADC_MspInit+0x110>)
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	4a3a      	ldr	r2, [pc, #232]	; (8005800 <HAL_ADC_MspInit+0x110>)
 8005716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800571a:	6193      	str	r3, [r2, #24]
 800571c:	4b38      	ldr	r3, [pc, #224]	; (8005800 <HAL_ADC_MspInit+0x110>)
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005728:	4b35      	ldr	r3, [pc, #212]	; (8005800 <HAL_ADC_MspInit+0x110>)
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	4a34      	ldr	r2, [pc, #208]	; (8005800 <HAL_ADC_MspInit+0x110>)
 800572e:	f043 0310 	orr.w	r3, r3, #16
 8005732:	6193      	str	r3, [r2, #24]
 8005734:	4b32      	ldr	r3, [pc, #200]	; (8005800 <HAL_ADC_MspInit+0x110>)
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN13_Pin;
 8005740:	2308      	movs	r3, #8
 8005742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005744:	2303      	movs	r3, #3
 8005746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN13_GPIO_Port, &GPIO_InitStruct);
 8005748:	f107 0318 	add.w	r3, r7, #24
 800574c:	4619      	mov	r1, r3
 800574e:	482d      	ldr	r0, [pc, #180]	; (8005804 <HAL_ADC_MspInit+0x114>)
 8005750:	f003 f816 	bl	8008780 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005754:	e04e      	b.n	80057f4 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2b      	ldr	r2, [pc, #172]	; (8005808 <HAL_ADC_MspInit+0x118>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d149      	bne.n	80057f4 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005760:	4b27      	ldr	r3, [pc, #156]	; (8005800 <HAL_ADC_MspInit+0x110>)
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	4a26      	ldr	r2, [pc, #152]	; (8005800 <HAL_ADC_MspInit+0x110>)
 8005766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576a:	6193      	str	r3, [r2, #24]
 800576c:	4b24      	ldr	r3, [pc, #144]	; (8005800 <HAL_ADC_MspInit+0x110>)
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005778:	4b21      	ldr	r3, [pc, #132]	; (8005800 <HAL_ADC_MspInit+0x110>)
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	4a20      	ldr	r2, [pc, #128]	; (8005800 <HAL_ADC_MspInit+0x110>)
 800577e:	f043 0310 	orr.w	r3, r3, #16
 8005782:	6193      	str	r3, [r2, #24]
 8005784:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <HAL_ADC_MspInit+0x110>)
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8005790:	2305      	movs	r3, #5
 8005792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005794:	2303      	movs	r3, #3
 8005796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005798:	f107 0318 	add.w	r3, r7, #24
 800579c:	4619      	mov	r1, r3
 800579e:	4819      	ldr	r0, [pc, #100]	; (8005804 <HAL_ADC_MspInit+0x114>)
 80057a0:	f002 ffee 	bl	8008780 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057a6:	4a1a      	ldr	r2, [pc, #104]	; (8005810 <HAL_ADC_MspInit+0x120>)
 80057a8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057aa:	4b18      	ldr	r3, [pc, #96]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80057b0:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80057b6:	4b15      	ldr	r3, [pc, #84]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80057bc:	4b13      	ldr	r3, [pc, #76]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80057c4:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ca:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80057cc:	4b0f      	ldr	r3, [pc, #60]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057ce:	2220      	movs	r2, #32
 80057d0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80057d2:	4b0e      	ldr	r3, [pc, #56]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80057d8:	480c      	ldr	r0, [pc, #48]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057da:	f002 fc57 	bl	800808c <HAL_DMA_Init>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 80057e4:	f7fe fdea 	bl	80043bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a08      	ldr	r2, [pc, #32]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057ec:	621a      	str	r2, [r3, #32]
 80057ee:	4a07      	ldr	r2, [pc, #28]	; (800580c <HAL_ADC_MspInit+0x11c>)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80057f4:	bf00      	nop
 80057f6:	3728      	adds	r7, #40	; 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40012400 	.word	0x40012400
 8005800:	40021000 	.word	0x40021000
 8005804:	40011000 	.word	0x40011000
 8005808:	40013c00 	.word	0x40013c00
 800580c:	200024cc 	.word	0x200024cc
 8005810:	40020458 	.word	0x40020458

08005814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800581c:	f107 0310 	add.w	r3, r7, #16
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	609a      	str	r2, [r3, #8]
 8005828:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a16      	ldr	r2, [pc, #88]	; (8005888 <HAL_I2C_MspInit+0x74>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d124      	bne.n	800587e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005834:	4b15      	ldr	r3, [pc, #84]	; (800588c <HAL_I2C_MspInit+0x78>)
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	4a14      	ldr	r2, [pc, #80]	; (800588c <HAL_I2C_MspInit+0x78>)
 800583a:	f043 0308 	orr.w	r3, r3, #8
 800583e:	6193      	str	r3, [r2, #24]
 8005840:	4b12      	ldr	r3, [pc, #72]	; (800588c <HAL_I2C_MspInit+0x78>)
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800584c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005852:	2312      	movs	r3, #18
 8005854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005856:	2303      	movs	r3, #3
 8005858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800585a:	f107 0310 	add.w	r3, r7, #16
 800585e:	4619      	mov	r1, r3
 8005860:	480b      	ldr	r0, [pc, #44]	; (8005890 <HAL_I2C_MspInit+0x7c>)
 8005862:	f002 ff8d 	bl	8008780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005866:	4b09      	ldr	r3, [pc, #36]	; (800588c <HAL_I2C_MspInit+0x78>)
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	4a08      	ldr	r2, [pc, #32]	; (800588c <HAL_I2C_MspInit+0x78>)
 800586c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005870:	61d3      	str	r3, [r2, #28]
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <HAL_I2C_MspInit+0x78>)
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800587e:	bf00      	nop
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40005800 	.word	0x40005800
 800588c:	40021000 	.word	0x40021000
 8005890:	40010c00 	.word	0x40010c00

08005894 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800589c:	f107 0310 	add.w	r3, r7, #16
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	609a      	str	r2, [r3, #8]
 80058a8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <HAL_I2S_MspInit+0xc4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d14c      	bne.n	800594e <HAL_I2S_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80058b4:	4b29      	ldr	r3, [pc, #164]	; (800595c <HAL_I2S_MspInit+0xc8>)
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <HAL_I2S_MspInit+0xc8>)
 80058ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058be:	61d3      	str	r3, [r2, #28]
 80058c0:	4b26      	ldr	r3, [pc, #152]	; (800595c <HAL_I2S_MspInit+0xc8>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058cc:	4b23      	ldr	r3, [pc, #140]	; (800595c <HAL_I2S_MspInit+0xc8>)
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	4a22      	ldr	r2, [pc, #136]	; (800595c <HAL_I2S_MspInit+0xc8>)
 80058d2:	f043 0308 	orr.w	r3, r3, #8
 80058d6:	6193      	str	r3, [r2, #24]
 80058d8:	4b20      	ldr	r3, [pc, #128]	; (800595c <HAL_I2S_MspInit+0xc8>)
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80058e4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80058e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ea:	2302      	movs	r3, #2
 80058ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ee:	2302      	movs	r3, #2
 80058f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058f2:	f107 0310 	add.w	r3, r7, #16
 80058f6:	4619      	mov	r1, r3
 80058f8:	4819      	ldr	r0, [pc, #100]	; (8005960 <HAL_I2S_MspInit+0xcc>)
 80058fa:	f002 ff41 	bl	8008780 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80058fe:	4b19      	ldr	r3, [pc, #100]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 8005900:	4a19      	ldr	r2, [pc, #100]	; (8005968 <HAL_I2S_MspInit+0xd4>)
 8005902:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005904:	4b17      	ldr	r3, [pc, #92]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 8005906:	2210      	movs	r2, #16
 8005908:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800590a:	4b16      	ldr	r3, [pc, #88]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 800590c:	2200      	movs	r2, #0
 800590e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005910:	4b14      	ldr	r3, [pc, #80]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005916:	4b13      	ldr	r3, [pc, #76]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 8005918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800591c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800591e:	4b11      	ldr	r3, [pc, #68]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 8005920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005924:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8005926:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 8005928:	2220      	movs	r2, #32
 800592a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 800592e:	2200      	movs	r2, #0
 8005930:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005932:	480c      	ldr	r0, [pc, #48]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 8005934:	f002 fbaa 	bl	800808c <HAL_DMA_Init>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_I2S_MspInit+0xae>
    {
      Error_Handler();
 800593e:	f7fe fd3d 	bl	80043bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a07      	ldr	r2, [pc, #28]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 8005946:	62da      	str	r2, [r3, #44]	; 0x2c
 8005948:	4a06      	ldr	r2, [pc, #24]	; (8005964 <HAL_I2S_MspInit+0xd0>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800594e:	bf00      	nop
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40003800 	.word	0x40003800
 800595c:	40021000 	.word	0x40021000
 8005960:	40010c00 	.word	0x40010c00
 8005964:	200025a0 	.word	0x200025a0
 8005968:	40020058 	.word	0x40020058

0800596c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005974:	f107 0318 	add.w	r3, r7, #24
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	609a      	str	r2, [r3, #8]
 8005980:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a22      	ldr	r2, [pc, #136]	; (8005a10 <HAL_SD_MspInit+0xa4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d13c      	bne.n	8005a06 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800598c:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <HAL_SD_MspInit+0xa8>)
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <HAL_SD_MspInit+0xa8>)
 8005992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005996:	6153      	str	r3, [r2, #20]
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <HAL_SD_MspInit+0xa8>)
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059a4:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <HAL_SD_MspInit+0xa8>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <HAL_SD_MspInit+0xa8>)
 80059aa:	f043 0310 	orr.w	r3, r3, #16
 80059ae:	6193      	str	r3, [r2, #24]
 80059b0:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <HAL_SD_MspInit+0xa8>)
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059bc:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <HAL_SD_MspInit+0xa8>)
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	4a14      	ldr	r2, [pc, #80]	; (8005a14 <HAL_SD_MspInit+0xa8>)
 80059c2:	f043 0320 	orr.w	r3, r3, #32
 80059c6:	6193      	str	r3, [r2, #24]
 80059c8:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <HAL_SD_MspInit+0xa8>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80059d4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80059d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059da:	2302      	movs	r3, #2
 80059dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059de:	2303      	movs	r3, #3
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059e2:	f107 0318 	add.w	r3, r7, #24
 80059e6:	4619      	mov	r1, r3
 80059e8:	480b      	ldr	r0, [pc, #44]	; (8005a18 <HAL_SD_MspInit+0xac>)
 80059ea:	f002 fec9 	bl	8008780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059ee:	2304      	movs	r3, #4
 80059f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f2:	2302      	movs	r3, #2
 80059f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059f6:	2303      	movs	r3, #3
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059fa:	f107 0318 	add.w	r3, r7, #24
 80059fe:	4619      	mov	r1, r3
 8005a00:	4806      	ldr	r0, [pc, #24]	; (8005a1c <HAL_SD_MspInit+0xb0>)
 8005a02:	f002 febd 	bl	8008780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005a06:	bf00      	nop
 8005a08:	3728      	adds	r7, #40	; 0x28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40018000 	.word	0x40018000
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40011000 	.word	0x40011000
 8005a1c:	40011400 	.word	0x40011400

08005a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a28:	f107 0310 	add.w	r3, r7, #16
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	609a      	str	r2, [r3, #8]
 8005a34:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a28      	ldr	r2, [pc, #160]	; (8005adc <HAL_SPI_MspInit+0xbc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d149      	bne.n	8005ad4 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a40:	4b27      	ldr	r3, [pc, #156]	; (8005ae0 <HAL_SPI_MspInit+0xc0>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4a26      	ldr	r2, [pc, #152]	; (8005ae0 <HAL_SPI_MspInit+0xc0>)
 8005a46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a4a:	6193      	str	r3, [r2, #24]
 8005a4c:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <HAL_SPI_MspInit+0xc0>)
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <HAL_SPI_MspInit+0xc0>)
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	4a20      	ldr	r2, [pc, #128]	; (8005ae0 <HAL_SPI_MspInit+0xc0>)
 8005a5e:	f043 0304 	orr.w	r3, r3, #4
 8005a62:	6193      	str	r3, [r2, #24]
 8005a64:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <HAL_SPI_MspInit+0xc0>)
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005a70:	23a0      	movs	r3, #160	; 0xa0
 8005a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a74:	2302      	movs	r3, #2
 8005a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a7c:	f107 0310 	add.w	r3, r7, #16
 8005a80:	4619      	mov	r1, r3
 8005a82:	4818      	ldr	r0, [pc, #96]	; (8005ae4 <HAL_SPI_MspInit+0xc4>)
 8005a84:	f002 fe7c 	bl	8008780 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8005a88:	4b17      	ldr	r3, [pc, #92]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005a8a:	4a18      	ldr	r2, [pc, #96]	; (8005aec <HAL_SPI_MspInit+0xcc>)
 8005a8c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a8e:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005a90:	2210      	movs	r2, #16
 8005a92:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a94:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005a9c:	2280      	movs	r2, #128	; 0x80
 8005a9e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005aa0:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aa6:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005aac:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005ab8:	480b      	ldr	r0, [pc, #44]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005aba:	f002 fae7 	bl	800808c <HAL_DMA_Init>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8005ac4:	f7fe fc7a 	bl	80043bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a07      	ldr	r2, [pc, #28]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005acc:	649a      	str	r2, [r3, #72]	; 0x48
 8005ace:	4a06      	ldr	r2, [pc, #24]	; (8005ae8 <HAL_SPI_MspInit+0xc8>)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005ad4:	bf00      	nop
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40013000 	.word	0x40013000
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	40010800 	.word	0x40010800
 8005ae8:	200026c0 	.word	0x200026c0
 8005aec:	40020030 	.word	0x40020030

08005af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <HAL_TIM_Base_MspInit+0x8c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10c      	bne.n	8005b1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b02:	4b1f      	ldr	r3, [pc, #124]	; (8005b80 <HAL_TIM_Base_MspInit+0x90>)
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <HAL_TIM_Base_MspInit+0x90>)
 8005b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b0c:	6193      	str	r3, [r2, #24]
 8005b0e:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <HAL_TIM_Base_MspInit+0x90>)
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005b1a:	e02a      	b.n	8005b72 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b24:	d10c      	bne.n	8005b40 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b26:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <HAL_TIM_Base_MspInit+0x90>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <HAL_TIM_Base_MspInit+0x90>)
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	61d3      	str	r3, [r2, #28]
 8005b32:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <HAL_TIM_Base_MspInit+0x90>)
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
}
 8005b3e:	e018      	b.n	8005b72 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a0f      	ldr	r2, [pc, #60]	; (8005b84 <HAL_TIM_Base_MspInit+0x94>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d113      	bne.n	8005b72 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <HAL_TIM_Base_MspInit+0x90>)
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4a0c      	ldr	r2, [pc, #48]	; (8005b80 <HAL_TIM_Base_MspInit+0x90>)
 8005b50:	f043 0302 	orr.w	r3, r3, #2
 8005b54:	61d3      	str	r3, [r2, #28]
 8005b56:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <HAL_TIM_Base_MspInit+0x90>)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005b62:	2200      	movs	r2, #0
 8005b64:	2101      	movs	r1, #1
 8005b66:	201d      	movs	r0, #29
 8005b68:	f002 fa59 	bl	800801e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b6c:	201d      	movs	r0, #29
 8005b6e:	f002 fa72 	bl	8008056 <HAL_NVIC_EnableIRQ>
}
 8005b72:	bf00      	nop
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40021000 	.word	0x40021000
 8005b84:	40000400 	.word	0x40000400

08005b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b90:	f107 0310 	add.w	r3, r7, #16
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
 8005b9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <HAL_UART_MspInit+0x8c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d131      	bne.n	8005c0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_UART_MspInit+0x90>)
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <HAL_UART_MspInit+0x90>)
 8005bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bb2:	6193      	str	r3, [r2, #24]
 8005bb4:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <HAL_UART_MspInit+0x90>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc0:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <HAL_UART_MspInit+0x90>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <HAL_UART_MspInit+0x90>)
 8005bc6:	f043 0304 	orr.w	r3, r3, #4
 8005bca:	6193      	str	r3, [r2, #24]
 8005bcc:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <HAL_UART_MspInit+0x90>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bde:	2302      	movs	r3, #2
 8005be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005be2:	2303      	movs	r3, #3
 8005be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005be6:	f107 0310 	add.w	r3, r7, #16
 8005bea:	4619      	mov	r1, r3
 8005bec:	480b      	ldr	r0, [pc, #44]	; (8005c1c <HAL_UART_MspInit+0x94>)
 8005bee:	f002 fdc7 	bl	8008780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	4619      	mov	r1, r3
 8005c06:	4805      	ldr	r0, [pc, #20]	; (8005c1c <HAL_UART_MspInit+0x94>)
 8005c08:	f002 fdba 	bl	8008780 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c0c:	bf00      	nop
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40013800 	.word	0x40013800
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40010800 	.word	0x40010800

08005c20 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005c26:	f107 0308 	add.w	r3, r7, #8
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
 8005c30:	609a      	str	r2, [r3, #8]
 8005c32:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8005c34:	4b18      	ldr	r3, [pc, #96]	; (8005c98 <HAL_FSMC_MspInit+0x78>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d129      	bne.n	8005c90 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8005c3c:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <HAL_FSMC_MspInit+0x78>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005c42:	4b16      	ldr	r3, [pc, #88]	; (8005c9c <HAL_FSMC_MspInit+0x7c>)
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <HAL_FSMC_MspInit+0x7c>)
 8005c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4c:	6153      	str	r3, [r2, #20]
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <HAL_FSMC_MspInit+0x7c>)
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	607b      	str	r3, [r7, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005c5a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005c5e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c60:	2302      	movs	r3, #2
 8005c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c64:	2303      	movs	r3, #3
 8005c66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c68:	f107 0308 	add.w	r3, r7, #8
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	480c      	ldr	r0, [pc, #48]	; (8005ca0 <HAL_FSMC_MspInit+0x80>)
 8005c70:	f002 fd86 	bl	8008780 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005c74:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8005c78:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c82:	f107 0308 	add.w	r3, r7, #8
 8005c86:	4619      	mov	r1, r3
 8005c88:	4806      	ldr	r0, [pc, #24]	; (8005ca4 <HAL_FSMC_MspInit+0x84>)
 8005c8a:	f002 fd79 	bl	8008780 <HAL_GPIO_Init>
 8005c8e:	e000      	b.n	8005c92 <HAL_FSMC_MspInit+0x72>
    return;
 8005c90:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20002890 	.word	0x20002890
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	40011800 	.word	0x40011800
 8005ca4:	40011400 	.word	0x40011400

08005ca8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005cb0:	f7ff ffb6 	bl	8005c20 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005cc0:	e7fe      	b.n	8005cc0 <NMI_Handler+0x4>

08005cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cc6:	e7fe      	b.n	8005cc6 <HardFault_Handler+0x4>

08005cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ccc:	e7fe      	b.n	8005ccc <MemManage_Handler+0x4>

08005cce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cd2:	e7fe      	b.n	8005cd2 <BusFault_Handler+0x4>

08005cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cd8:	e7fe      	b.n	8005cd8 <UsageFault_Handler+0x4>

08005cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cea:	bf00      	nop
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc80      	pop	{r7}
 8005cf0:	4770      	bx	lr

08005cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr

08005cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d02:	f001 fa2b 	bl	800715c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d06:	bf00      	nop
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	//restart the game

  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET){	//if k1 press
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <EXTI0_IRQHandler+0x2c>)
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <EXTI0_IRQHandler+0x22>

	  //restart_flag = 1;
	  //restart();
	  hearts = 0;
 8005d1c:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <EXTI0_IRQHandler+0x30>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]

	 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8005d22:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <EXTI0_IRQHandler+0x2c>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	615a      	str	r2, [r3, #20]
	 HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f002 ff05 	bl	8008b38 <HAL_GPIO_EXTI_Callback>

  }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K1_button_Pin);
 8005d2e:	2001      	movs	r0, #1
 8005d30:	f002 feea 	bl	8008b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005d34:	bf00      	nop
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40010400 	.word	0x40010400
 8005d3c:	20002876 	.word	0x20002876

08005d40 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	//touch screen
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET){
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <EXTI4_IRQHandler+0x2c>)
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <EXTI4_IRQHandler+0x22>
	ucXPT2046_TouchFlag = 1;
 8005d50:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <EXTI4_IRQHandler+0x30>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8005d56:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <EXTI4_IRQHandler+0x2c>)
 8005d58:	2210      	movs	r2, #16
 8005d5a:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8005d5c:	2010      	movs	r0, #16
 8005d5e:	f002 feeb 	bl	8008b38 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_touchE4_Pin);
 8005d62:	2010      	movs	r0, #16
 8005d64:	f002 fed0 	bl	8008b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005d68:	bf00      	nop
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40010400 	.word	0x40010400
 8005d70:	2000621d 	.word	0x2000621d

08005d74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005d78:	4802      	ldr	r0, [pc, #8]	; (8005d84 <DMA1_Channel3_IRQHandler+0x10>)
 8005d7a:	f002 fa97 	bl	80082ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	200026c0 	.word	0x200026c0

08005d88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005d8c:	4802      	ldr	r0, [pc, #8]	; (8005d98 <DMA1_Channel5_IRQHandler+0x10>)
 8005d8e:	f002 fa8d 	bl	80082ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200025a0 	.word	0x200025a0

08005d9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <TIM3_IRQHandler+0x10>)
 8005da2:	f005 fe07 	bl	800b9b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20002794 	.word	0x20002794

08005db0 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005db4:	4802      	ldr	r0, [pc, #8]	; (8005dc0 <DMA2_Channel4_5_IRQHandler+0x10>)
 8005db6:	f002 fa79 	bl	80082ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	200024cc 	.word	0x200024cc

08005dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
	return 1;
 8005dc8:	2301      	movs	r3, #1
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr

08005dd2 <_kill>:

int _kill(int pid, int sig)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005ddc:	f00a ffd4 	bl	8010d88 <__errno>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2216      	movs	r2, #22
 8005de4:	601a      	str	r2, [r3, #0]
	return -1;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <_exit>:

void _exit (int status)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005dfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ffe7 	bl	8005dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005e04:	e7fe      	b.n	8005e04 <_exit+0x12>

08005e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e00a      	b.n	8005e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005e18:	f3af 8000 	nop.w
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	60ba      	str	r2, [r7, #8]
 8005e24:	b2ca      	uxtb	r2, r1
 8005e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	dbf0      	blt.n	8005e18 <_read+0x12>
	}

return len;
 8005e36:	687b      	ldr	r3, [r7, #4]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e009      	b.n	8005e66 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	60ba      	str	r2, [r7, #8]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	3301      	adds	r3, #1
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	dbf1      	blt.n	8005e52 <_write+0x12>
	}
	return len;
 8005e6e:	687b      	ldr	r3, [r7, #4]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <_close>:

int _close(int file)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr

08005e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <_isatty>:

int _isatty(int file)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	return 1;
 8005eb4:	2301      	movs	r3, #1
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
	return 0;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ee0:	4a14      	ldr	r2, [pc, #80]	; (8005f34 <_sbrk+0x5c>)
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <_sbrk+0x60>)
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <_sbrk+0x64>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <_sbrk+0x64>)
 8005ef6:	4a12      	ldr	r2, [pc, #72]	; (8005f40 <_sbrk+0x68>)
 8005ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <_sbrk+0x64>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d207      	bcs.n	8005f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f08:	f00a ff3e 	bl	8010d88 <__errno>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	220c      	movs	r2, #12
 8005f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f16:	e009      	b.n	8005f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <_sbrk+0x64>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <_sbrk+0x64>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	4a05      	ldr	r2, [pc, #20]	; (8005f3c <_sbrk+0x64>)
 8005f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20010000 	.word	0x20010000
 8005f38:	00000400 	.word	0x00000400
 8005f3c:	20002894 	.word	0x20002894
 8005f40:	20006268 	.word	0x20006268

08005f44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f48:	bf00      	nop
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <delay>:
uint16_t temp;
float temperature;
extern TIM_HandleTypeDef htim1;

void delay (uint32_t us)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim1,0);
 8005f58:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <delay+0x2c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim1))<us);
 8005f60:	bf00      	nop
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <delay+0x2c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d8f9      	bhi.n	8005f62 <delay+0x12>
}
 8005f6e:	bf00      	nop
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20002704 	.word	0x20002704

08005f80 <gpio_set_input>:
GPIO_InitTypeDef GPIO_InitStruct;

void gpio_set_input (void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005f84:	4b07      	ldr	r3, [pc, #28]	; (8005fa4 <gpio_set_input+0x24>)
 8005f86:	2220      	movs	r2, #32
 8005f88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f8a:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <gpio_set_input+0x24>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f90:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <gpio_set_input+0x24>)
 8005f92:	2201      	movs	r2, #1
 8005f94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f96:	4903      	ldr	r1, [pc, #12]	; (8005fa4 <gpio_set_input+0x24>)
 8005f98:	4803      	ldr	r0, [pc, #12]	; (8005fa8 <gpio_set_input+0x28>)
 8005f9a:	f002 fbf1 	bl	8008780 <HAL_GPIO_Init>
}
 8005f9e:	bf00      	nop
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	200028a0 	.word	0x200028a0
 8005fa8:	40011000 	.word	0x40011000

08005fac <gpio_set_output>:


void gpio_set_output (void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <gpio_set_output+0x28>)
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fb6:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <gpio_set_output+0x28>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <gpio_set_output+0x28>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fc2:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <gpio_set_output+0x28>)
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fc8:	4902      	ldr	r1, [pc, #8]	; (8005fd4 <gpio_set_output+0x28>)
 8005fca:	4803      	ldr	r0, [pc, #12]	; (8005fd8 <gpio_set_output+0x2c>)
 8005fcc:	f002 fbd8 	bl	8008780 <HAL_GPIO_Init>
}
 8005fd0:	bf00      	nop
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	200028a0 	.word	0x200028a0
 8005fd8:	40011000 	.word	0x40011000

08005fdc <ds18b20_init>:


uint8_t ds18b20_init (void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
	gpio_set_output ();   // set the pin as output
 8005fe0:	f7ff ffe4 	bl	8005fac <gpio_set_output>
	HAL_GPIO_WritePin (GPIOC, GPIO_PIN_5, 0);  // pull the pin low
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2120      	movs	r1, #32
 8005fe8:	480f      	ldr	r0, [pc, #60]	; (8006028 <ds18b20_init+0x4c>)
 8005fea:	f002 fd74 	bl	8008ad6 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8005fee:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005ff2:	f7ff ffad 	bl	8005f50 <delay>

	gpio_set_input ();    // set the pin as input
 8005ff6:	f7ff ffc3 	bl	8005f80 <gpio_set_input>
	delay (80);    // delay according to datasheet
 8005ffa:	2050      	movs	r0, #80	; 0x50
 8005ffc:	f7ff ffa8 	bl	8005f50 <delay>

	if (!(HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_5)))    // if the pin is low i.e the presence pulse is there
 8006000:	2120      	movs	r1, #32
 8006002:	4809      	ldr	r0, [pc, #36]	; (8006028 <ds18b20_init+0x4c>)
 8006004:	f002 fd50 	bl	8008aa8 <HAL_GPIO_ReadPin>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <ds18b20_init+0x3e>
	{
		delay (400);  // wait for 400 us
 800600e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006012:	f7ff ff9d 	bl	8005f50 <delay>
		return 0;
 8006016:	2300      	movs	r3, #0
 8006018:	e004      	b.n	8006024 <ds18b20_init+0x48>
	}

	else
	{
		delay (400);
 800601a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800601e:	f7ff ff97 	bl	8005f50 <delay>
		return 1;
 8006022:	2301      	movs	r3, #1
	}
}
 8006024:	4618      	mov	r0, r3
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40011000 	.word	0x40011000

0800602c <write_ds>:

void write_ds (uint8_t data)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	71fb      	strb	r3, [r7, #7]
	gpio_set_output ();   // set as output
 8006036:	f7ff ffb9 	bl	8005fac <gpio_set_output>

	for (int i=0; i<8; i++)
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e026      	b.n	800608e <write_ds+0x62>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8006040:	79fa      	ldrb	r2, [r7, #7]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	fa42 f303 	asr.w	r3, r2, r3
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00f      	beq.n	8006070 <write_ds+0x44>
		{
			// write 1

			gpio_set_output ();  // set as output
 8006050:	f7ff ffac 	bl	8005fac <gpio_set_output>
			HAL_GPIO_WritePin (GPIOC, GPIO_PIN_5, 0);  // pull the pin LOW
 8006054:	2200      	movs	r2, #0
 8006056:	2120      	movs	r1, #32
 8006058:	4811      	ldr	r0, [pc, #68]	; (80060a0 <write_ds+0x74>)
 800605a:	f002 fd3c 	bl	8008ad6 <HAL_GPIO_WritePin>
			delay (1);  // wait for  us
 800605e:	2001      	movs	r0, #1
 8006060:	f7ff ff76 	bl	8005f50 <delay>

			gpio_set_input ();  // set as input
 8006064:	f7ff ff8c 	bl	8005f80 <gpio_set_input>
			delay (60);  // wait for 60 us
 8006068:	203c      	movs	r0, #60	; 0x3c
 800606a:	f7ff ff71 	bl	8005f50 <delay>
 800606e:	e00b      	b.n	8006088 <write_ds+0x5c>

		else  // if the bit is low
		{
			// write 0

			gpio_set_output ();
 8006070:	f7ff ff9c 	bl	8005fac <gpio_set_output>
			HAL_GPIO_WritePin (GPIOC, GPIO_PIN_5, 0);  // pull the pin LOW
 8006074:	2200      	movs	r2, #0
 8006076:	2120      	movs	r1, #32
 8006078:	4809      	ldr	r0, [pc, #36]	; (80060a0 <write_ds+0x74>)
 800607a:	f002 fd2c 	bl	8008ad6 <HAL_GPIO_WritePin>
			delay (60);  // wait for 60 us
 800607e:	203c      	movs	r0, #60	; 0x3c
 8006080:	f7ff ff66 	bl	8005f50 <delay>

			gpio_set_input ();
 8006084:	f7ff ff7c 	bl	8005f80 <gpio_set_input>
	for (int i=0; i<8; i++)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b07      	cmp	r3, #7
 8006092:	ddd5      	ble.n	8006040 <write_ds+0x14>
		}
	}
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40011000 	.word	0x40011000

080060a4 <read_ds>:


uint8_t read_ds (void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	71fb      	strb	r3, [r7, #7]
	gpio_set_input ();
 80060ae:	f7ff ff67 	bl	8005f80 <gpio_set_input>

	for (int i=0;i<8;i++)
 80060b2:	2300      	movs	r3, #0
 80060b4:	603b      	str	r3, [r7, #0]
 80060b6:	e022      	b.n	80060fe <read_ds+0x5a>
	{
		gpio_set_output ();   // set as output
 80060b8:	f7ff ff78 	bl	8005fac <gpio_set_output>

		HAL_GPIO_WritePin (GPIOC, GPIO_PIN_5, 0);  // pull the data pin LOW
 80060bc:	2200      	movs	r2, #0
 80060be:	2120      	movs	r1, #32
 80060c0:	4813      	ldr	r0, [pc, #76]	; (8006110 <read_ds+0x6c>)
 80060c2:	f002 fd08 	bl	8008ad6 <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 80060c6:	2002      	movs	r0, #2
 80060c8:	f7ff ff42 	bl	8005f50 <delay>

		gpio_set_input ();  // set as input
 80060cc:	f7ff ff58 	bl	8005f80 <gpio_set_input>
		if (HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_5))  // if the pin is HIGH
 80060d0:	2120      	movs	r1, #32
 80060d2:	480f      	ldr	r0, [pc, #60]	; (8006110 <read_ds+0x6c>)
 80060d4:	f002 fce8 	bl	8008aa8 <HAL_GPIO_ReadPin>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <read_ds+0x4e>
		{
			value |= 1<<i;  // read = 1
 80060de:	2201      	movs	r2, #1
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	b25a      	sxtb	r2, r3
 80060e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	b25b      	sxtb	r3, r3
 80060f0:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);  // wait for 60 us
 80060f2:	203c      	movs	r0, #60	; 0x3c
 80060f4:	f7ff ff2c 	bl	8005f50 <delay>
	for (int i=0;i<8;i++)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	603b      	str	r3, [r7, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b07      	cmp	r3, #7
 8006102:	ddd9      	ble.n	80060b8 <read_ds+0x14>
	}
	return value;
 8006104:	79fb      	ldrb	r3, [r7, #7]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40011000 	.word	0x40011000

08006114 <temp_value>:

float temp_value(){
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
	check = ds18b20_init ();
 8006118:	f7ff ff60 	bl	8005fdc <ds18b20_init>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
 8006120:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <temp_value+0x8c>)
 8006122:	701a      	strb	r2, [r3, #0]
	write_ds (0xCC);  // skip ROM
 8006124:	20cc      	movs	r0, #204	; 0xcc
 8006126:	f7ff ff81 	bl	800602c <write_ds>
	write_ds (0x44);  // convert t
 800612a:	2044      	movs	r0, #68	; 0x44
 800612c:	f7ff ff7e 	bl	800602c <write_ds>

	HAL_Delay (500);
 8006130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006134:	f001 f82e 	bl	8007194 <HAL_Delay>

	ds18b20_init ();
 8006138:	f7ff ff50 	bl	8005fdc <ds18b20_init>
	write_ds (0xCC);  // skip ROM
 800613c:	20cc      	movs	r0, #204	; 0xcc
 800613e:	f7ff ff75 	bl	800602c <write_ds>
	write_ds (0xBE);  // Read Scratchpad
 8006142:	20be      	movs	r0, #190	; 0xbe
 8006144:	f7ff ff72 	bl	800602c <write_ds>

	temp_l = read_ds();
 8006148:	f7ff ffac 	bl	80060a4 <read_ds>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	4b14      	ldr	r3, [pc, #80]	; (80061a4 <temp_value+0x90>)
 8006152:	701a      	strb	r2, [r3, #0]
	temp_h = read_ds();
 8006154:	f7ff ffa6 	bl	80060a4 <read_ds>
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <temp_value+0x94>)
 800615e:	701a      	strb	r2, [r3, #0]
	temp = (temp_h<<8)|temp_l;
 8006160:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <temp_value+0x94>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	b21a      	sxth	r2, r3
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <temp_value+0x90>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b21b      	sxth	r3, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	b21b      	sxth	r3, r3
 8006172:	b29a      	uxth	r2, r3
 8006174:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <temp_value+0x98>)
 8006176:	801a      	strh	r2, [r3, #0]
	temperature = (float)temp/16;
 8006178:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <temp_value+0x98>)
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f7fa fdc5 	bl	8000d0c <__aeabi_ui2f>
 8006182:	4603      	mov	r3, r0
 8006184:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8006188:	4618      	mov	r0, r3
 800618a:	f7fa fecb 	bl	8000f24 <__aeabi_fdiv>
 800618e:	4603      	mov	r3, r0
 8006190:	461a      	mov	r2, r3
 8006192:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <temp_value+0x9c>)
 8006194:	601a      	str	r2, [r3, #0]

	return temperature;
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <temp_value+0x9c>)
 8006198:	681b      	ldr	r3, [r3, #0]

}
 800619a:	4618      	mov	r0, r3
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	2000003c 	.word	0x2000003c
 80061a4:	20002898 	.word	0x20002898
 80061a8:	20002899 	.word	0x20002899
 80061ac:	2000289a 	.word	0x2000289a
 80061b0:	2000289c 	.word	0x2000289c

080061b4 <play_audio>:
uint32_t recording_size = 0;
uint32_t played_size = 0;

Callback_Result_t callback_result = UNKNOWN;

void play_audio(char *filename){
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 callback_result = UNKNOWN;
 80061bc:	4b3a      	ldr	r3, [pc, #232]	; (80062a8 <play_audio+0xf4>)
 80061be:	2200      	movs	r2, #0
 80061c0:	701a      	strb	r2, [r3, #0]
 fread_size = 0;
 80061c2:	4b3a      	ldr	r3, [pc, #232]	; (80062ac <play_audio+0xf8>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
 recording_size = 0;
 80061c8:	4b39      	ldr	r3, [pc, #228]	; (80062b0 <play_audio+0xfc>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
 played_size = 0;
 80061ce:	4b39      	ldr	r3, [pc, #228]	; (80062b4 <play_audio+0x100>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]

 fresult = f_mount(&fatfs,SDPath,1);
 80061d4:	2201      	movs	r2, #1
 80061d6:	4938      	ldr	r1, [pc, #224]	; (80062b8 <play_audio+0x104>)
 80061d8:	4838      	ldr	r0, [pc, #224]	; (80062bc <play_audio+0x108>)
 80061da:	f009 f87f 	bl	800f2dc <f_mount>
 80061de:	4603      	mov	r3, r0
 80061e0:	461a      	mov	r2, r3
 80061e2:	4b37      	ldr	r3, [pc, #220]	; (80062c0 <play_audio+0x10c>)
 80061e4:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) return;
 80061e6:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <play_audio+0x10c>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d156      	bne.n	800629c <play_audio+0xe8>

  fresult = f_open(&fil, filename, FA_OPEN_EXISTING|FA_READ); // WIN3 & LOSE2.wav
 80061ee:	2201      	movs	r2, #1
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4834      	ldr	r0, [pc, #208]	; (80062c4 <play_audio+0x110>)
 80061f4:	f009 f8bc 	bl	800f370 <f_open>
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	4b30      	ldr	r3, [pc, #192]	; (80062c0 <play_audio+0x10c>)
 80061fe:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) return;
 8006200:	4b2f      	ldr	r3, [pc, #188]	; (80062c0 <play_audio+0x10c>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d14b      	bne.n	80062a0 <play_audio+0xec>

  f_lseek(&fil, 40); //wav file header 40th byte -> size of file
 8006208:	2128      	movs	r1, #40	; 0x28
 800620a:	482e      	ldr	r0, [pc, #184]	; (80062c4 <play_audio+0x110>)
 800620c:	f00a f8d0 	bl	80103b0 <f_lseek>
  //LCD_DrawString(0,0,"recording seek", BLUE);

  f_read(&fil, &recording_size, 4, &fread_size);
 8006210:	4b26      	ldr	r3, [pc, #152]	; (80062ac <play_audio+0xf8>)
 8006212:	2204      	movs	r2, #4
 8006214:	4926      	ldr	r1, [pc, #152]	; (80062b0 <play_audio+0xfc>)
 8006216:	482b      	ldr	r0, [pc, #172]	; (80062c4 <play_audio+0x110>)
 8006218:	f009 fbb0 	bl	800f97c <f_read>
  //LCD_DrawString(0,0,"recording size", BLUE);

  recording_size /= 2;	// 2 means 2B (16 bit per sample)
 800621c:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <play_audio+0xfc>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	4a23      	ldr	r2, [pc, #140]	; (80062b0 <play_audio+0xfc>)
 8006224:	6013      	str	r3, [r2, #0]

  f_read(&fil,samples, 6400, &fread_size);
 8006226:	4b21      	ldr	r3, [pc, #132]	; (80062ac <play_audio+0xf8>)
 8006228:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800622c:	4926      	ldr	r1, [pc, #152]	; (80062c8 <play_audio+0x114>)
 800622e:	4825      	ldr	r0, [pc, #148]	; (80062c4 <play_audio+0x110>)
 8006230:	f009 fba4 	bl	800f97c <f_read>

  HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t *) samples, 3200);
 8006234:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8006238:	4923      	ldr	r1, [pc, #140]	; (80062c8 <play_audio+0x114>)
 800623a:	4824      	ldr	r0, [pc, #144]	; (80062cc <play_audio+0x118>)
 800623c:	f002 feb0 	bl	8008fa0 <HAL_I2S_Transmit_DMA>

  //LCD_DrawString(0,0,"start   while", RED);

  while (1)
    {
  	  if(callback_result == HALF_COMPLETED)
 8006240:	4b19      	ldr	r3, [pc, #100]	; (80062a8 <play_audio+0xf4>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d109      	bne.n	800625c <play_audio+0xa8>
  	  	  {
  	  		  f_read(&fil, samples, 3200, &fread_size);
 8006248:	4b18      	ldr	r3, [pc, #96]	; (80062ac <play_audio+0xf8>)
 800624a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800624e:	491e      	ldr	r1, [pc, #120]	; (80062c8 <play_audio+0x114>)
 8006250:	481c      	ldr	r0, [pc, #112]	; (80062c4 <play_audio+0x110>)
 8006252:	f009 fb93 	bl	800f97c <f_read>
  	  		  callback_result = UNKNOWN;
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <play_audio+0xf4>)
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
  	  	  }

  	  	  if(callback_result == FULL_COMPLETED)
 800625c:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <play_audio+0xf4>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d109      	bne.n	8006278 <play_audio+0xc4>
  	  	  {
  	  		  f_read(&fil, &samples[1600], 3200, &fread_size);
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <play_audio+0xf8>)
 8006266:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800626a:	4919      	ldr	r1, [pc, #100]	; (80062d0 <play_audio+0x11c>)
 800626c:	4815      	ldr	r0, [pc, #84]	; (80062c4 <play_audio+0x110>)
 800626e:	f009 fb85 	bl	800f97c <f_read>
  	  		  callback_result = UNKNOWN;
 8006272:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <play_audio+0xf4>)
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
  	  	  }

  	  	  if(played_size >= recording_size)
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <play_audio+0x100>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <play_audio+0xfc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d3dd      	bcc.n	8006240 <play_audio+0x8c>
  	  	  {
  	  		  HAL_I2S_DMAStop(&hi2s2);
 8006284:	4811      	ldr	r0, [pc, #68]	; (80062cc <play_audio+0x118>)
 8006286:	f002 ff33 	bl	80090f0 <HAL_I2S_DMAStop>
  	  		//LCD_DrawString(0,0,"stop     ", RED);
  	  		f_close(&fil);
 800628a:	480e      	ldr	r0, [pc, #56]	; (80062c4 <play_audio+0x110>)
 800628c:	f00a f865 	bl	801035a <f_close>
  	  		 f_mount(&fatfs," ",0);
 8006290:	2200      	movs	r2, #0
 8006292:	4910      	ldr	r1, [pc, #64]	; (80062d4 <play_audio+0x120>)
 8006294:	4809      	ldr	r0, [pc, #36]	; (80062bc <play_audio+0x108>)
 8006296:	f009 f821 	bl	800f2dc <f_mount>
  	  		break;
 800629a:	e002      	b.n	80062a2 <play_audio+0xee>
  if (fresult != FR_OK) return;
 800629c:	bf00      	nop
 800629e:	e000      	b.n	80062a2 <play_audio+0xee>
  if (fresult != FR_OK) return;
 80062a0:	bf00      	nop
  	  	  }
    }
}
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	2000621c 	.word	0x2000621c
 80062ac:	20006210 	.word	0x20006210
 80062b0:	20006214 	.word	0x20006214
 80062b4:	20006218 	.word	0x20006218
 80062b8:	20006228 	.word	0x20006228
 80062bc:	200041b0 	.word	0x200041b0
 80062c0:	2000620c 	.word	0x2000620c
 80062c4:	200051e0 	.word	0x200051e0
 80062c8:	200028b0 	.word	0x200028b0
 80062cc:	20002564 	.word	0x20002564
 80062d0:	20003530 	.word	0x20003530
 80062d4:	080141c0 	.word	0x080141c0

080062d8 <HAL_I2S_TxHalfCpltCallback>:

  void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
  {
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  	callback_result = HALF_COMPLETED;
 80062e0:	4b03      	ldr	r3, [pc, #12]	; (80062f0 <HAL_I2S_TxHalfCpltCallback+0x18>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
  }
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr
 80062f0:	2000621c 	.word	0x2000621c

080062f4 <HAL_I2S_TxCpltCallback>:
  void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
  {
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  	callback_result = FULL_COMPLETED;
 80062fc:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_I2S_TxCpltCallback+0x24>)
 80062fe:	2202      	movs	r2, #2
 8006300:	701a      	strb	r2, [r3, #0]
  	played_size += 3200;
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <HAL_I2S_TxCpltCallback+0x28>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800630a:	4a04      	ldr	r2, [pc, #16]	; (800631c <HAL_I2S_TxCpltCallback+0x28>)
 800630c:	6013      	str	r3, [r2, #0]
  }
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr
 8006318:	2000621c 	.word	0x2000621c
 800631c:	20006218 	.word	0x20006218

08006320 <XPT2046_DelayUS>:
// touch v+/vref * width


// for doing delay for touch pad
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	e00a      	b.n	8006344 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;
 800632e:	230c      	movs	r3, #12
 8006330:	72fb      	strb	r3, [r7, #11]

		while ( uc -- );
 8006332:	bf00      	nop
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	1e5a      	subs	r2, r3, #1
 8006338:	72fa      	strb	r2, [r7, #11]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1fa      	bne.n	8006334 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3301      	adds	r3, #1
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	429a      	cmp	r2, r3
 800634a:	d3f0      	bcc.n	800632e <XPT2046_DelayUS+0xe>

	}

}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr

08006358 <XPT2046_WriteCMD>:
 * write command
 * 0x90 - y+
 * 0xd0 - x+
 */
static void XPT2046_WriteCMD ( uint8_t ucCmd )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 8006362:	2200      	movs	r2, #0
 8006364:	2104      	movs	r1, #4
 8006366:	481d      	ldr	r0, [pc, #116]	; (80063dc <XPT2046_WriteCMD+0x84>)
 8006368:	f002 fbb5 	bl	8008ad6 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 800636c:	2200      	movs	r2, #0
 800636e:	2101      	movs	r1, #1
 8006370:	481a      	ldr	r0, [pc, #104]	; (80063dc <XPT2046_WriteCMD+0x84>)
 8006372:	f002 fbb0 	bl	8008ad6 <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ )
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
 800637a:	e027      	b.n	80063cc <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800637c:	79fa      	ldrb	r2, [r7, #7]
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	f1c3 0307 	rsb	r3, r3, #7
 8006384:	fa42 f303 	asr.w	r3, r2, r3
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <XPT2046_WriteCMD+0x44>
 8006390:	2201      	movs	r2, #1
 8006392:	2104      	movs	r1, #4
 8006394:	4811      	ldr	r0, [pc, #68]	; (80063dc <XPT2046_WriteCMD+0x84>)
 8006396:	f002 fb9e 	bl	8008ad6 <HAL_GPIO_WritePin>
 800639a:	e004      	b.n	80063a6 <XPT2046_WriteCMD+0x4e>
 800639c:	2200      	movs	r2, #0
 800639e:	2104      	movs	r1, #4
 80063a0:	480e      	ldr	r0, [pc, #56]	; (80063dc <XPT2046_WriteCMD+0x84>)
 80063a2:	f002 fb98 	bl	8008ad6 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 80063a6:	2005      	movs	r0, #5
 80063a8:	f7ff ffba 	bl	8006320 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 80063ac:	2201      	movs	r2, #1
 80063ae:	2101      	movs	r1, #1
 80063b0:	480a      	ldr	r0, [pc, #40]	; (80063dc <XPT2046_WriteCMD+0x84>)
 80063b2:	f002 fb90 	bl	8008ad6 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 80063b6:	2005      	movs	r0, #5
 80063b8:	f7ff ffb2 	bl	8006320 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80063bc:	2200      	movs	r2, #0
 80063be:	2101      	movs	r1, #1
 80063c0:	4806      	ldr	r0, [pc, #24]	; (80063dc <XPT2046_WriteCMD+0x84>)
 80063c2:	f002 fb88 	bl	8008ad6 <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ )
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	3301      	adds	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b07      	cmp	r3, #7
 80063d0:	d9d4      	bls.n	800637c <XPT2046_WriteCMD+0x24>
	}

}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40011800 	.word	0x40011800

080063e0 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 80063e6:	2300      	movs	r3, #0
 80063e8:	80bb      	strh	r3, [r7, #4]



	macXPT2046_MOSI_0();
 80063ea:	2200      	movs	r2, #0
 80063ec:	2104      	movs	r1, #4
 80063ee:	4819      	ldr	r0, [pc, #100]	; (8006454 <XPT2046_ReadCMD+0x74>)
 80063f0:	f002 fb71 	bl	8008ad6 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80063f4:	2201      	movs	r2, #1
 80063f6:	2101      	movs	r1, #1
 80063f8:	4816      	ldr	r0, [pc, #88]	; (8006454 <XPT2046_ReadCMD+0x74>)
 80063fa:	f002 fb6c 	bl	8008ad6 <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ )
 80063fe:	2300      	movs	r3, #0
 8006400:	71fb      	strb	r3, [r7, #7]
 8006402:	e01e      	b.n	8006442 <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();
 8006404:	2200      	movs	r2, #0
 8006406:	2101      	movs	r1, #1
 8006408:	4812      	ldr	r0, [pc, #72]	; (8006454 <XPT2046_ReadCMD+0x74>)
 800640a:	f002 fb64 	bl	8008ad6 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 800640e:	2108      	movs	r1, #8
 8006410:	4810      	ldr	r0, [pc, #64]	; (8006454 <XPT2046_ReadCMD+0x74>)
 8006412:	f002 fb49 	bl	8008aa8 <HAL_GPIO_ReadPin>
 8006416:	4603      	mov	r3, r0
 8006418:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << ( 11 - i );
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	f1c3 030b 	rsb	r3, r3, #11
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	b21a      	sxth	r2, r3
 8006428:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800642c:	4313      	orrs	r3, r2
 800642e:	b21b      	sxth	r3, r3
 8006430:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8006432:	2201      	movs	r2, #1
 8006434:	2101      	movs	r1, #1
 8006436:	4807      	ldr	r0, [pc, #28]	; (8006454 <XPT2046_ReadCMD+0x74>)
 8006438:	f002 fb4d 	bl	8008ad6 <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ )
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	3301      	adds	r3, #1
 8006440:	71fb      	strb	r3, [r7, #7]
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	2b0b      	cmp	r3, #11
 8006446:	d9dd      	bls.n	8006404 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8006448:	88bb      	ldrh	r3, [r7, #4]

}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40011800 	.word	0x40011800

08006458 <XPT2046_ReadAdc>:
/*
 * take a channel, open adc and then send back adc value
 * channel : x+ 0xd0 y+ 0x90
 */
static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff ff77 	bl	8006358 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 800646a:	f7ff ffb9 	bl	80063e0 <XPT2046_ReadCMD>
 800646e:	4603      	mov	r3, r0

}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <XPT2046_ReadAdc_XY>:

/*
 * read the adc value for x and y channel in 12 bit
 */
static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;



	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8006482:	2090      	movs	r0, #144	; 0x90
 8006484:	f7ff ffe8 	bl	8006458 <XPT2046_ReadAdc>
 8006488:	4603      	mov	r3, r0
 800648a:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 );
 800648c:	2001      	movs	r0, #1
 800648e:	f7ff ff47 	bl	8006320 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y );
 8006492:	20d0      	movs	r0, #208	; 0xd0
 8006494:	f7ff ffe0 	bl	8006458 <XPT2046_ReadAdc>
 8006498:	4603      	mov	r3, r0
 800649a:	81bb      	strh	r3, [r7, #12]


	* sX_Ad = sX_Ad_Temp;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	89fa      	ldrh	r2, [r7, #14]
 80064a0:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	89ba      	ldrh	r2, [r7, #12]
 80064a6:	801a      	strh	r2, [r3, #0]


}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <XPT2046_ReadAdc_Smooth_XY>:
}


#else
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b092      	sub	sp, #72	; 0x48
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80064b8:	2300      	movs	r3, #0
 80064ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	2228      	movs	r2, #40	; 0x28
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f00a fc98 	bl	8010dfc <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do
	{
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );
 80064cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80064d0:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff ffce 	bl	8006478 <XPT2046_ReadAdc_XY>

		sBufferArray [ 0 ] [ ucCount ] = sAD_X;
 80064dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064e0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	3348      	adds	r3, #72	; 0x48
 80064e8:	443b      	add	r3, r7
 80064ea:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 80064ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064f2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80064f6:	330a      	adds	r3, #10
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	3348      	adds	r3, #72	; 0x48
 80064fc:	443b      	add	r3, r7
 80064fe:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount ++;
 8006502:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006506:	3301      	adds	r3, #1
 8006508:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 800650c:	2110      	movs	r1, #16
 800650e:	4871      	ldr	r0, [pc, #452]	; (80066d4 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006510:	f002 faca 	bl	8008aa8 <HAL_GPIO_ReadPin>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <XPT2046_ReadAdc_Smooth_XY+0x72>
 800651a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800651e:	2b09      	cmp	r3, #9
 8006520:	d9d4      	bls.n	80064cc <XPT2046_ReadAdc_Smooth_XY+0x1c>


	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 8006522:	2110      	movs	r1, #16
 8006524:	486b      	ldr	r0, [pc, #428]	; (80066d4 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006526:	f002 fabf 	bl	8008aa8 <HAL_GPIO_ReadPin>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8006530:	4b69      	ldr	r3, [pc, #420]	; (80066d8 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )
 8006536:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800653a:	2b0a      	cmp	r3, #10
 800653c:	f040 80c4 	bne.w	80066c8 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8006540:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006544:	643b      	str	r3, [r7, #64]	; 0x40
 8006546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];
 800654a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800654e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	637b      	str	r3, [r7, #52]	; 0x34

		for ( i = 1; i < 10; i ++ )
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800655a:	e02b      	b.n	80065b4 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 800655c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	3348      	adds	r3, #72	; 0x48
 8006564:	443b      	add	r3, r7
 8006566:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800656a:	461a      	mov	r2, r3
 800656c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656e:	4293      	cmp	r3, r2
 8006570:	dd08      	ble.n	8006584 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8006572:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	3348      	adds	r3, #72	; 0x48
 800657a:	443b      	add	r3, r7
 800657c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006580:	643b      	str	r3, [r7, #64]	; 0x40
 8006582:	e012      	b.n	80065aa <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8006584:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	3348      	adds	r3, #72	; 0x48
 800658c:	443b      	add	r3, r7
 800658e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006592:	461a      	mov	r2, r3
 8006594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006596:	4293      	cmp	r3, r2
 8006598:	da07      	bge.n	80065aa <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 800659a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	3348      	adds	r3, #72	; 0x48
 80065a2:	443b      	add	r3, r7
 80065a4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 80065aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065ae:	3301      	adds	r3, #1
 80065b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80065b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	d9cf      	bls.n	800655c <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for ( i = 1; i < 10; i ++ )
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80065c2:	e02f      	b.n	8006624 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 80065c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065c8:	330a      	adds	r3, #10
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	3348      	adds	r3, #72	; 0x48
 80065ce:	443b      	add	r3, r7
 80065d0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80065d4:	461a      	mov	r2, r3
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	4293      	cmp	r3, r2
 80065da:	dd09      	ble.n	80065f0 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 80065dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065e0:	330a      	adds	r3, #10
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	3348      	adds	r3, #72	; 0x48
 80065e6:	443b      	add	r3, r7
 80065e8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80065ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ee:	e014      	b.n	800661a <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 80065f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80065f4:	330a      	adds	r3, #10
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	3348      	adds	r3, #72	; 0x48
 80065fa:	443b      	add	r3, r7
 80065fc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006600:	461a      	mov	r2, r3
 8006602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006604:	4293      	cmp	r3, r2
 8006606:	da08      	bge.n	800661a <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8006608:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800660c:	330a      	adds	r3, #10
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	3348      	adds	r3, #72	; 0x48
 8006612:	443b      	add	r3, r7
 8006614:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 800661a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800661e:	3301      	adds	r3, #1
 8006620:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006624:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006628:	2b09      	cmp	r3, #9
 800662a:	d9cb      	bls.n	80065c4 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		// count out min and max

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 800662c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006630:	461a      	mov	r2, r3
 8006632:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006636:	4413      	add	r3, r2
 8006638:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006642:	4413      	add	r3, r2
 8006644:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006648:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 800664a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 800664e:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8006650:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006654:	4413      	add	r3, r2
 8006656:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800665a:	4413      	add	r3, r2
 800665c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006660:	4413      	add	r3, r2
 8006662:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006666:	441a      	add	r2, r3
 8006668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800666a:	1ad2      	subs	r2, r2, r3
 800666c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] +
 8006672:	b29a      	uxth	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 8006678:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800667c:	461a      	mov	r2, r3
 800667e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006682:	4413      	add	r3, r2
 8006684:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006688:	4413      	add	r3, r2
 800668a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800668e:	4413      	add	r3, r2
 8006690:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006694:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3;
 8006696:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 800669a:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3;
 800669c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80066a0:	4413      	add	r3, r2
 80066a2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80066a6:	4413      	add	r3, r2
 80066a8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80066ac:	4413      	add	r3, r2
 80066ae:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80066b2:	441a      	add	r2, r3
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] +
 80066be:	b29a      	uxth	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	805a      	strh	r2, [r3, #2]


		return 1;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <XPT2046_ReadAdc_Smooth_XY+0x21a>


	}


	return 0;
 80066c8:	2300      	movs	r3, #0


}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3748      	adds	r7, #72	; 0x48
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40011800 	.word	0x40011800
 80066d8:	2000621d 	.word	0x2000621d

080066dc <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 80066e8:	2301      	movs	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	3308      	adds	r3, #8
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	3204      	adds	r2, #4
 80066fe:	8852      	ldrh	r2, [r2, #2]
 8006700:	4611      	mov	r1, r2
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	3208      	adds	r2, #8
 8006706:	8852      	ldrh	r2, [r2, #2]
 8006708:	1a8a      	subs	r2, r1, r2
 800670a:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	3304      	adds	r3, #4
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	4619      	mov	r1, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	3308      	adds	r3, #8
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	1acb      	subs	r3, r1, r3
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	8849      	ldrh	r1, [r1, #2]
 8006722:	4608      	mov	r0, r1
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	3108      	adds	r1, #8
 8006728:	8849      	ldrh	r1, [r1, #2]
 800672a:	1a41      	subs	r1, r0, r1
 800672c:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	4618      	mov	r0, r3
 8006734:	f7f9 fed2 	bl	80004dc <__aeabi_i2d>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30


	if (  pCalibrationFactor -> Divider == 0  )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	f7fa f996 	bl	8000a80 <__aeabi_dcmpeq>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	75fb      	strb	r3, [r7, #23]
 800675e:	e145      	b.n	80069ec <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3308      	adds	r3, #8
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	3204      	adds	r2, #4
 8006772:	8852      	ldrh	r2, [r2, #2]
 8006774:	4611      	mov	r1, r2
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	3208      	adds	r2, #8
 800677a:	8852      	ldrh	r2, [r2, #2]
 800677c:	1a8a      	subs	r2, r1, r2
 800677e:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3304      	adds	r3, #4
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	4619      	mov	r1, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3308      	adds	r3, #8
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	1acb      	subs	r3, r1, r3
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	8849      	ldrh	r1, [r1, #2]
 8006796:	4608      	mov	r0, r1
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	3108      	adds	r1, #8
 800679c:	8849      	ldrh	r1, [r1, #2]
 800679e:	1a41      	subs	r1, r0, r1
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7f9 fe98 	bl	80004dc <__aeabi_i2d>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) -
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	3308      	adds	r3, #8
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	3204      	adds	r2, #4
 80067c8:	8812      	ldrh	r2, [r2, #0]
 80067ca:	4611      	mov	r1, r2
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	3208      	adds	r2, #8
 80067d0:	8812      	ldrh	r2, [r2, #0]
 80067d2:	1a8a      	subs	r2, r1, r2
 80067d4:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	4619      	mov	r1, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3308      	adds	r3, #8
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	1acb      	subs	r3, r1, r3
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	3104      	adds	r1, #4
 80067ea:	8809      	ldrh	r1, [r1, #0]
 80067ec:	4608      	mov	r0, r1
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	3108      	adds	r1, #8
 80067f2:	8809      	ldrh	r1, [r1, #0]
 80067f4:	1a41      	subs	r1, r0, r1
 80067f6:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) -
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7f9 fe6d 	bl	80004dc <__aeabi_i2d>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	3308      	adds	r3, #8
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3304      	adds	r3, #4
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	fb03 f202 	mul.w	r2, r3, r2
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	3304      	adds	r3, #4
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	4619      	mov	r1, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3308      	adds	r3, #8
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	fb01 f303 	mul.w	r3, r1, r3
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	8852      	ldrh	r2, [r2, #2]
 8006836:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	4619      	mov	r1, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3308      	adds	r3, #8
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	fb03 f101 	mul.w	r1, r3, r1
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	3308      	adds	r3, #8
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	fb00 f303 	mul.w	r3, r0, r3
 800685a:	1acb      	subs	r3, r1, r3
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	3104      	adds	r1, #4
 8006860:	8849      	ldrh	r1, [r1, #2]
 8006862:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8006866:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	3304      	adds	r3, #4
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	4619      	mov	r1, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	fb03 f101 	mul.w	r1, r3, r1
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3304      	adds	r3, #4
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	fb00 f303 	mul.w	r3, r0, r3
 8006888:	1acb      	subs	r3, r1, r3
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	3108      	adds	r1, #8
 800688e:	8849      	ldrh	r1, [r1, #2]
 8006890:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8006894:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8006896:	4618      	mov	r0, r3
 8006898:	f7f9 fe20 	bl	80004dc <__aeabi_i2d>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	885b      	ldrh	r3, [r3, #2]
 80068aa:	461a      	mov	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3308      	adds	r3, #8
 80068b0:	885b      	ldrh	r3, [r3, #2]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	3204      	adds	r2, #4
 80068b8:	8852      	ldrh	r2, [r2, #2]
 80068ba:	4611      	mov	r1, r2
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	3208      	adds	r2, #8
 80068c0:	8852      	ldrh	r2, [r2, #2]
 80068c2:	1a8a      	subs	r2, r1, r2
 80068c4:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3304      	adds	r3, #4
 80068cc:	885b      	ldrh	r3, [r3, #2]
 80068ce:	4619      	mov	r1, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3308      	adds	r3, #8
 80068d4:	885b      	ldrh	r3, [r3, #2]
 80068d6:	1acb      	subs	r3, r1, r3
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	8849      	ldrh	r1, [r1, #2]
 80068dc:	4608      	mov	r0, r1
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	3108      	adds	r1, #8
 80068e2:	8849      	ldrh	r1, [r1, #2]
 80068e4:	1a41      	subs	r1, r0, r1
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) -
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7f9 fdf5 	bl	80004dc <__aeabi_i2d>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) -
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	3308      	adds	r3, #8
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	3204      	adds	r2, #4
 800690e:	8852      	ldrh	r2, [r2, #2]
 8006910:	4611      	mov	r1, r2
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	3208      	adds	r2, #8
 8006916:	8852      	ldrh	r2, [r2, #2]
 8006918:	1a8a      	subs	r2, r1, r2
 800691a:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	885b      	ldrh	r3, [r3, #2]
 8006922:	4619      	mov	r1, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3308      	adds	r3, #8
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	1acb      	subs	r3, r1, r3
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	3104      	adds	r1, #4
 8006930:	8809      	ldrh	r1, [r1, #0]
 8006932:	4608      	mov	r0, r1
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	3108      	adds	r1, #8
 8006938:	8809      	ldrh	r1, [r1, #0]
 800693a:	1a41      	subs	r1, r0, r1
 800693c:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) -
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	4618      	mov	r0, r3
 8006944:	f7f9 fdca 	bl	80004dc <__aeabi_i2d>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	e9c1 2308 	strd	r2, r3, [r1, #32]


		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	3308      	adds	r3, #8
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3304      	adds	r3, #4
 800695e:	885b      	ldrh	r3, [r3, #2]
 8006960:	fb03 f202 	mul.w	r2, r3, r2
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	3304      	adds	r3, #4
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	4619      	mov	r1, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3308      	adds	r3, #8
 8006970:	885b      	ldrh	r3, [r3, #2]
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	8852      	ldrh	r2, [r2, #2]
 800697c:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	4619      	mov	r1, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3308      	adds	r3, #8
 800698a:	885b      	ldrh	r3, [r3, #2]
 800698c:	fb03 f101 	mul.w	r1, r3, r1
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	3308      	adds	r3, #8
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	885b      	ldrh	r3, [r3, #2]
 800699c:	fb00 f303 	mul.w	r3, r0, r3
 80069a0:	1acb      	subs	r3, r1, r3
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	3104      	adds	r1, #4
 80069a6:	8849      	ldrh	r1, [r1, #2]
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 80069ac:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	3304      	adds	r3, #4
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	885b      	ldrh	r3, [r3, #2]
 80069ba:	fb03 f101 	mul.w	r1, r3, r1
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3304      	adds	r3, #4
 80069c8:	885b      	ldrh	r3, [r3, #2]
 80069ca:	fb00 f303 	mul.w	r3, r0, r3
 80069ce:	1acb      	subs	r3, r1, r3
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	3108      	adds	r1, #8
 80069d4:	8849      	ldrh	r1, [r1, #2]
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 80069da:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 80069dc:	4618      	mov	r0, r3
 80069de:	f7f9 fd7d 	bl	80004dc <__aeabi_i2d>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}


	return ucRet;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]


}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 80069f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069fc:	b0a0      	sub	sp, #128	; 0x80
 80069fe:	af02      	add	r7, sp, #8
		uint8_t i;

		char cStr [ 10 ];

    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006a06:	2300      	movs	r3, #0
 8006a08:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8006a12:	2300      	movs	r3, #0
 8006a14:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	  char * pStr = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	66bb      	str	r3, [r7, #104]	; 0x68

	  strType_XPT2046_Calibration CalibrationFactor;


		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 8006a1c:	23f0      	movs	r3, #240	; 0xf0
 8006a1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 8006a22:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006a26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	  #endif



		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 8006a2a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006a2e:	089b      	lsrs	r3, r3, #2
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 8006a36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a3a:	089b      	lsrs	r3, r3, #2
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 8006a42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a46:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 8006a4a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8006a4e:	4613      	mov	r3, r2
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	4413      	add	r3, r2
 8006a54:	109b      	asrs	r3, r3, #2
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 8006a5c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006a60:	4613      	mov	r3, r2
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	4413      	add	r3, r2
 8006a66:	109b      	asrs	r3, r3, #2
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 8006a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a72:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 8006a76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006a7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;
 8006a7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56


		for ( i = 0; i < 4; i ++ )
 8006a86:	2300      	movs	r3, #0
 8006a88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006a8c:	e066      	b.n	8006b5c <XPT2046_Touch_Calibrate+0x164>
		{
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 8006a8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a92:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006a96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a9a:	9100      	str	r1, [sp, #0]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	f7fc fa01 	bl	8002ea6 <LCD_Clear>

			pStr = "Touch Calibrate ......";
 8006aa4:	4bc5      	ldr	r3, [pc, #788]	; (8006dbc <XPT2046_Touch_Calibrate+0x3c4>)
 8006aa6:	66bb      	str	r3, [r7, #104]	; 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );
 8006aa8:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8006aac:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006aae:	f7f9 fbbb 	bl	8000228 <strlen>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	3b07      	subs	r3, #7
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	1ae3      	subs	r3, r4, r3
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	b298      	uxth	r0, r3
 8006abe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ac2:	085b      	lsrs	r3, r3, #1
 8006ac4:	b299      	uxth	r1, r3
 8006ac6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ad0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ad2:	f7fc ff3d 	bl	8003950 <LCD_DrawString_Color>

			sprintf ( cStr, "%d", i + 1 );
 8006ad6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006ae0:	49b7      	ldr	r1, [pc, #732]	; (8006dc0 <XPT2046_Touch_Calibrate+0x3c8>)
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f00a ff4a 	bl	801197c <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 8006ae8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	b298      	uxth	r0, r3
 8006af0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b10      	subs	r3, #16
 8006afa:	b299      	uxth	r1, r3
 8006afc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006b00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b0a:	f7fc ff21 	bl	8003950 <LCD_DrawString_Color>

			XPT2046_DelayUS ( 100000 );
 8006b0e:	48ad      	ldr	r0, [pc, #692]	; (8006dc4 <XPT2046_Touch_Calibrate+0x3cc>)
 8006b10:	f7ff fc06 	bl	8006320 <XPT2046_DelayUS>

			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );
 8006b14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	3378      	adds	r3, #120	; 0x78
 8006b1c:	443b      	add	r3, r7
 8006b1e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8006b22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	3378      	adds	r3, #120	; 0x78
 8006b2a:	443b      	add	r3, r7
 8006b2c:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f7fc feea 	bl	800390c <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );
 8006b38:	bf00      	nop
 8006b3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fcb2 	bl	80064b0 <XPT2046_ReadAdc_Smooth_XY>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f3      	beq.n	8006b3a <XPT2046_Touch_Calibrate+0x142>
		for ( i = 0; i < 4; i ++ )
 8006b52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b56:	3301      	adds	r3, #1
 8006b58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006b5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d994      	bls.n	8006a8e <XPT2046_Touch_Calibrate+0x96>

		}


		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;
 8006b64:	463a      	mov	r2, r7
 8006b66:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006b6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fdb4 	bl	80066dc <XPT2046_Calculate_CalibrationFactor>

		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8006b74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	f7f9 ff7e 	bl	8000a80 <__aeabi_dcmpeq>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f040 8116 	bne.w	8006db8 <XPT2046_Touch_Calibrate+0x3c0>


		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;
 8006b8c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7f9 fca1 	bl	80004dc <__aeabi_i2d>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	f7f9 fd05 	bl	80005b0 <__aeabi_dmul>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4690      	mov	r8, r2
 8006bac:	4699      	mov	r9, r3
 8006bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006bb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7f9 fc90 	bl	80004dc <__aeabi_i2d>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	f7f9 fcf4 	bl	80005b0 <__aeabi_dmul>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4649      	mov	r1, r9
 8006bd0:	f7f9 fb38 	bl	8000244 <__adddf3>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4619      	mov	r1, r3
 8006bdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006be0:	f7f9 fb30 	bl	8000244 <__adddf3>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4610      	mov	r0, r2
 8006bea:	4619      	mov	r1, r3
 8006bec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bf0:	f7f9 fe08 	bl	8000804 <__aeabi_ddiv>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f7f9 ffb0 	bl	8000b60 <__aeabi_d2uiz>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;
 8006c06:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8006c0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7f9 fc64 	bl	80004dc <__aeabi_i2d>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4620      	mov	r0, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f7f9 fcc8 	bl	80005b0 <__aeabi_dmul>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4690      	mov	r8, r2
 8006c26:	4699      	mov	r9, r3
 8006c28:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006c2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7f9 fc53 	bl	80004dc <__aeabi_i2d>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	f7f9 fcb7 	bl	80005b0 <__aeabi_dmul>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 fafb 	bl	8000244 <__adddf3>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4610      	mov	r0, r2
 8006c54:	4619      	mov	r1, r3
 8006c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c5a:	f7f9 faf3 	bl	8000244 <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4610      	mov	r0, r2
 8006c64:	4619      	mov	r1, r3
 8006c66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c6a:	f7f9 fdcb 	bl	8000804 <__aeabi_ddiv>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4610      	mov	r0, r2
 8006c74:	4619      	mov	r1, r3
 8006c76:	f7f9 ff73 	bl	8000b60 <__aeabi_d2uiz>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );
 8006c80:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c84:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d906      	bls.n	8006c9a <XPT2046_Touch_Calibrate+0x2a2>
 8006c8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c90:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	e005      	b.n	8006ca6 <XPT2046_Touch_Calibrate+0x2ae>
 8006c9a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006c9e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );
 8006caa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cae:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d906      	bls.n	8006cc4 <XPT2046_Touch_Calibrate+0x2cc>
 8006cb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cba:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	e005      	b.n	8006cd0 <XPT2046_Touch_Calibrate+0x2d8>
 8006cc4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8006cc8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;
 8006cd4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8006cd8:	2b0a      	cmp	r3, #10
 8006cda:	d87b      	bhi.n	8006dd4 <XPT2046_Touch_Calibrate+0x3dc>
 8006cdc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006ce0:	2b0a      	cmp	r3, #10
 8006ce2:	d877      	bhi.n	8006dd4 <XPT2046_Touch_Calibrate+0x3dc>


		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 8006ce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ce8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006cec:	f7f9 fd8a 	bl	8000804 <__aeabi_ddiv>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4934      	ldr	r1, [pc, #208]	; (8006dc8 <XPT2046_Touch_Calibrate+0x3d0>)
 8006cf6:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 8006cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d02:	f7f9 fd7f 	bl	8000804 <__aeabi_ddiv>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	492f      	ldr	r1, [pc, #188]	; (8006dc8 <XPT2046_Touch_Calibrate+0x3d0>)
 8006d0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 8006d10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d18:	f7f9 fd74 	bl	8000804 <__aeabi_ddiv>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4929      	ldr	r1, [pc, #164]	; (8006dc8 <XPT2046_Touch_Calibrate+0x3d0>)
 8006d22:	e9c1 2304 	strd	r2, r3, [r1, #16]

		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 8006d26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d2e:	f7f9 fd69 	bl	8000804 <__aeabi_ddiv>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4924      	ldr	r1, [pc, #144]	; (8006dc8 <XPT2046_Touch_Calibrate+0x3d0>)
 8006d38:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 8006d3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006d40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d44:	f7f9 fd5e 	bl	8000804 <__aeabi_ddiv>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	491e      	ldr	r1, [pc, #120]	; (8006dc8 <XPT2046_Touch_Calibrate+0x3d0>)
 8006d4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 8006d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d5a:	f7f9 fd53 	bl	8000804 <__aeabi_ddiv>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4919      	ldr	r1, [pc, #100]	; (8006dc8 <XPT2046_Touch_Calibrate+0x3d0>)
 8006d64:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28


	#endif


	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 8006d68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d6c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d74:	9100      	str	r1, [sp, #0]
 8006d76:	2100      	movs	r1, #0
 8006d78:	2000      	movs	r0, #0
 8006d7a:	f7fc f894 	bl	8002ea6 <LCD_Clear>

	pStr = "Calibrate Succed";
 8006d7e:	4b13      	ldr	r3, [pc, #76]	; (8006dcc <XPT2046_Touch_Calibrate+0x3d4>)
 8006d80:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );
 8006d82:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8006d86:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006d88:	f7f9 fa4e 	bl	8000228 <strlen>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	1ae3      	subs	r3, r4, r3
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	b298      	uxth	r0, r3
 8006d96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	b299      	uxth	r1, r3
 8006d9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006da8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006daa:	f7fc fdd1 	bl	8003950 <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 8006dae:	4808      	ldr	r0, [pc, #32]	; (8006dd0 <XPT2046_Touch_Calibrate+0x3d8>)
 8006db0:	f7ff fab6 	bl	8006320 <XPT2046_DelayUS>

	return 1;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e04f      	b.n	8006e58 <XPT2046_Touch_Calibrate+0x460>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8006db8:	bf00      	nop
 8006dba:	e00c      	b.n	8006dd6 <XPT2046_Touch_Calibrate+0x3de>
 8006dbc:	080141c4 	.word	0x080141c4
 8006dc0:	080141dc 	.word	0x080141dc
 8006dc4:	000186a0 	.word	0x000186a0
 8006dc8:	20000040 	.word	0x20000040
 8006dcc:	080141e0 	.word	0x080141e0
 8006dd0:	00030d40 	.word	0x00030d40
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;
 8006dd4:	bf00      	nop


	Failure:

	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 8006dd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006dda:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006dde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006de2:	9100      	str	r1, [sp, #0]
 8006de4:	2100      	movs	r1, #0
 8006de6:	2000      	movs	r0, #0
 8006de8:	f7fc f85d 	bl	8002ea6 <LCD_Clear>

	pStr = "Calibrate fail";
 8006dec:	4b1d      	ldr	r3, [pc, #116]	; (8006e64 <XPT2046_Touch_Calibrate+0x46c>)
 8006dee:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );
 8006df0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8006df4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006df6:	f7f9 fa17 	bl	8000228 <strlen>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	1ae3      	subs	r3, r4, r3
 8006e00:	085b      	lsrs	r3, r3, #1
 8006e02:	b298      	uxth	r0, r3
 8006e04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006e08:	085b      	lsrs	r3, r3, #1
 8006e0a:	b299      	uxth	r1, r3
 8006e0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e18:	f7fc fd9a 	bl	8003950 <LCD_DrawString_Color>

	pStr = "try again";
 8006e1c:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <XPT2046_Touch_Calibrate+0x470>)
 8006e1e:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );
 8006e20:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8006e24:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006e26:	f7f9 f9ff 	bl	8000228 <strlen>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	1ae3      	subs	r3, r4, r3
 8006e30:	085b      	lsrs	r3, r3, #1
 8006e32:	b298      	uxth	r0, r3
 8006e34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006e38:	085b      	lsrs	r3, r3, #1
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3310      	adds	r3, #16
 8006e3e:	b299      	uxth	r1, r3
 8006e40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e4c:	f7fc fd80 	bl	8003950 <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );
 8006e50:	4806      	ldr	r0, [pc, #24]	; (8006e6c <XPT2046_Touch_Calibrate+0x474>)
 8006e52:	f7ff fa65 	bl	8006320 <XPT2046_DelayUS>

	return 0;
 8006e56:	2300      	movs	r3, #0


}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3778      	adds	r7, #120	; 0x78
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e62:	bf00      	nop
 8006e64:	080141f4 	.word	0x080141f4
 8006e68:	08014204 	.word	0x08014204
 8006e6c:	000f4240 	.word	0x000f4240

08006e70 <XPT2046_Get_TouchedPoint>:



uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8006e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;


  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 8006e80:	f107 0308 	add.w	r3, r7, #8
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fb13 	bl	80064b0 <XPT2046_ReadAdc_Smooth_XY>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d06e      	beq.n	8006f6e <XPT2046_Get_TouchedPoint+0xfe>
  {
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006e96:	893b      	ldrh	r3, [r7, #8]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7f9 fb1f 	bl	80004dc <__aeabi_i2d>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	f7f9 fb83 	bl	80005b0 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4690      	mov	r8, r2
 8006eb0:	4699      	mov	r9, r3
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006eb8:	897b      	ldrh	r3, [r7, #10]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7f9 fb0e 	bl	80004dc <__aeabi_i2d>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	f7f9 fb72 	bl	80005b0 <__aeabi_dmul>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 f9b6 	bl	8000244 <__adddf3>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4610      	mov	r0, r2
 8006ede:	4619      	mov	r1, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006ee6:	f7f9 f9ad 	bl	8000244 <__adddf3>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	f7f9 fe35 	bl	8000b60 <__aeabi_d2uiz>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006f04:	893b      	ldrh	r3, [r7, #8]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7f9 fae8 	bl	80004dc <__aeabi_i2d>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7f9 fb4c 	bl	80005b0 <__aeabi_dmul>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4690      	mov	r8, r2
 8006f1e:	4699      	mov	r9, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7f9 fad7 	bl	80004dc <__aeabi_i2d>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4620      	mov	r0, r4
 8006f34:	4629      	mov	r1, r5
 8006f36:	f7f9 fb3b 	bl	80005b0 <__aeabi_dmul>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4640      	mov	r0, r8
 8006f40:	4649      	mov	r1, r9
 8006f42:	f7f9 f97f 	bl	8000244 <__adddf3>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006f54:	f7f9 f976 	bl	8000244 <__adddf3>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4619      	mov	r1, r3
 8006f60:	f7f9 fdfe 	bl	8000b60 <__aeabi_d2uiz>
 8006f64:	4603      	mov	r3, r0
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	805a      	strh	r2, [r3, #2]
 8006f6c:	e001      	b.n	8006f72 <XPT2046_Get_TouchedPoint+0x102>

  }

	else ucRet = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]


}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08006f80 <Check_touchkey>:


void Check_touchkey(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
	strType_XPT2046_Coordinate strDisplayCoordinate;

	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	4913      	ldr	r1, [pc, #76]	; (8006fd8 <Check_touchkey+0x58>)
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff ff70 	bl	8006e70 <XPT2046_Get_TouchedPoint>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01c      	beq.n	8006fd0 <Check_touchkey+0x50>
	{

			if ( ( strDisplayCoordinate .y > 100 ) && ( strDisplayCoordinate .y < 150 ) ){
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	2b64      	cmp	r3, #100	; 0x64
 8006f9a:	d905      	bls.n	8006fa8 <Check_touchkey+0x28>
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	2b95      	cmp	r3, #149	; 0x95
 8006fa0:	d802      	bhi.n	8006fa8 <Check_touchkey+0x28>
				//if ( ( strDisplayCoordinate .x > 95 ) && ( strDisplayCoordinate .x < 145 ) )
				//{
					level = 1;
 8006fa2:	4b0e      	ldr	r3, [pc, #56]	; (8006fdc <Check_touchkey+0x5c>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	701a      	strb	r2, [r3, #0]
				//}
			}

			if ( ( strDisplayCoordinate .y > 180 ) && ( strDisplayCoordinate .y < 230 ) ){
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	2bb4      	cmp	r3, #180	; 0xb4
 8006fac:	d905      	bls.n	8006fba <Check_touchkey+0x3a>
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2be5      	cmp	r3, #229	; 0xe5
 8006fb2:	d802      	bhi.n	8006fba <Check_touchkey+0x3a>
				//if ( ( strDisplayCoordinate .x > 95 ) && ( strDisplayCoordinate .x < 145 ) )
				//{
					level = 2;
 8006fb4:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <Check_touchkey+0x5c>)
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	701a      	strb	r2, [r3, #0]
				//}
			}

			if ( ( strDisplayCoordinate .y > 260 ) && ( strDisplayCoordinate .y < 310 ) ){
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fc0:	d906      	bls.n	8006fd0 <Check_touchkey+0x50>
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006fc8:	d202      	bcs.n	8006fd0 <Check_touchkey+0x50>
			   //if ( ( strDisplayCoordinate .x > 95 ) && ( strDisplayCoordinate .x < 145 ) )
			   //{
			   		level = 3;
 8006fca:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <Check_touchkey+0x5c>)
 8006fcc:	2203      	movs	r2, #3
 8006fce:	701a      	strb	r2, [r3, #0]
			   //}
			}


	}
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20000040 	.word	0x20000040
 8006fdc:	2000288f 	.word	0x2000288f

08006fe0 <Check_touchkey_start>:



void Check_touchkey_start(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
		strType_XPT2046_Coordinate strDisplayCoordinate;

	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	490d      	ldr	r1, [pc, #52]	; (8007020 <Check_touchkey_start+0x40>)
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff ff40 	bl	8006e70 <XPT2046_Get_TouchedPoint>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00f      	beq.n	8007016 <Check_touchkey_start+0x36>
	{
 		//LCD_DrawString(20, 200, "happy");

		if ( ( strDisplayCoordinate .y > 200 ) && ( strDisplayCoordinate .y < 300 ) )
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	2bc8      	cmp	r3, #200	; 0xc8
 8006ffa:	d90c      	bls.n	8007016 <Check_touchkey_start+0x36>
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007002:	d208      	bcs.n	8007016 <Check_touchkey_start+0x36>
				{
					if ( ( strDisplayCoordinate .x > 95 ) && ( strDisplayCoordinate .x < 145 ) )
 8007004:	88bb      	ldrh	r3, [r7, #4]
 8007006:	2b5f      	cmp	r3, #95	; 0x5f
 8007008:	d905      	bls.n	8007016 <Check_touchkey_start+0x36>
 800700a:	88bb      	ldrh	r3, [r7, #4]
 800700c:	2b90      	cmp	r3, #144	; 0x90
 800700e:	d802      	bhi.n	8007016 <Check_touchkey_start+0x36>
					{
						restart_flag = 1;
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <Check_touchkey_start+0x44>)
 8007012:	2201      	movs	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
					}
				}

	}

}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000040 	.word	0x20000040
 8007024:	20002878 	.word	0x20002878

08007028 <Check_touchkey_flag>:

int Check_touchkey_flag(int x1, int x2, int y1, int y2)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
		strType_XPT2046_Coordinate strDisplayCoordinate;

	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	4911      	ldr	r1, [pc, #68]	; (8007080 <Check_touchkey_flag+0x58>)
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff ff17 	bl	8006e70 <XPT2046_Get_TouchedPoint>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d015      	beq.n	8007074 <Check_touchkey_flag+0x4c>
	{
 		//LCD_DrawString(20, 200, "happy");

		if ( ( strDisplayCoordinate .y > y1 ) && ( strDisplayCoordinate .y < y2 ) )
 8007048:	8afb      	ldrh	r3, [r7, #22]
 800704a:	461a      	mov	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4293      	cmp	r3, r2
 8007050:	da10      	bge.n	8007074 <Check_touchkey_flag+0x4c>
 8007052:	8afb      	ldrh	r3, [r7, #22]
 8007054:	461a      	mov	r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	4293      	cmp	r3, r2
 800705a:	dd0b      	ble.n	8007074 <Check_touchkey_flag+0x4c>
				{
					if ( ( strDisplayCoordinate .x > x1 ) && ( strDisplayCoordinate .x < x2 ) )
 800705c:	8abb      	ldrh	r3, [r7, #20]
 800705e:	461a      	mov	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4293      	cmp	r3, r2
 8007064:	da06      	bge.n	8007074 <Check_touchkey_flag+0x4c>
 8007066:	8abb      	ldrh	r3, [r7, #20]
 8007068:	461a      	mov	r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	4293      	cmp	r3, r2
 800706e:	dd01      	ble.n	8007074 <Check_touchkey_flag+0x4c>
					{
						return 1;
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <Check_touchkey_flag+0x4e>
					}
				}

	}
	return 0;
 8007074:	2300      	movs	r3, #0

}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000040 	.word	0x20000040

08007084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007084:	f7fe ff5e 	bl	8005f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007088:	480b      	ldr	r0, [pc, #44]	; (80070b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800708a:	490c      	ldr	r1, [pc, #48]	; (80070bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800708c:	4a0c      	ldr	r2, [pc, #48]	; (80070c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800708e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007090:	e002      	b.n	8007098 <LoopCopyDataInit>

08007092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007096:	3304      	adds	r3, #4

08007098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800709a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800709c:	d3f9      	bcc.n	8007092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800709e:	4a09      	ldr	r2, [pc, #36]	; (80070c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80070a0:	4c09      	ldr	r4, [pc, #36]	; (80070c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80070a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070a4:	e001      	b.n	80070aa <LoopFillZerobss>

080070a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070a8:	3204      	adds	r2, #4

080070aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070ac:	d3fb      	bcc.n	80070a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80070ae:	f009 fe71 	bl	8010d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80070b2:	f7fc fc83 	bl	80039bc <main>
  bx lr
 80070b6:	4770      	bx	lr
  ldr r0, =_sdata
 80070b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070bc:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80070c0:	08014f14 	.word	0x08014f14
  ldr r2, =_sbss
 80070c4:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80070c8:	20006268 	.word	0x20006268

080070cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80070cc:	e7fe      	b.n	80070cc <ADC1_2_IRQHandler>
	...

080070d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070d4:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <HAL_Init+0x28>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a07      	ldr	r2, [pc, #28]	; (80070f8 <HAL_Init+0x28>)
 80070da:	f043 0310 	orr.w	r3, r3, #16
 80070de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070e0:	2003      	movs	r0, #3
 80070e2:	f000 ff91 	bl	8008008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070e6:	200f      	movs	r0, #15
 80070e8:	f000 f808 	bl	80070fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070ec:	f7fe face 	bl	800568c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40022000 	.word	0x40022000

080070fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007104:	4b12      	ldr	r3, [pc, #72]	; (8007150 <HAL_InitTick+0x54>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	4b12      	ldr	r3, [pc, #72]	; (8007154 <HAL_InitTick+0x58>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	4619      	mov	r1, r3
 800710e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007112:	fbb3 f3f1 	udiv	r3, r3, r1
 8007116:	fbb2 f3f3 	udiv	r3, r2, r3
 800711a:	4618      	mov	r0, r3
 800711c:	f000 ffa9 	bl	8008072 <HAL_SYSTICK_Config>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e00e      	b.n	8007148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b0f      	cmp	r3, #15
 800712e:	d80a      	bhi.n	8007146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007130:	2200      	movs	r2, #0
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007138:	f000 ff71 	bl	800801e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800713c:	4a06      	ldr	r2, [pc, #24]	; (8007158 <HAL_InitTick+0x5c>)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	e000      	b.n	8007148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
}
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000038 	.word	0x20000038
 8007154:	20000074 	.word	0x20000074
 8007158:	20000070 	.word	0x20000070

0800715c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <HAL_IncTick+0x1c>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <HAL_IncTick+0x20>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4413      	add	r3, r2
 800716c:	4a03      	ldr	r2, [pc, #12]	; (800717c <HAL_IncTick+0x20>)
 800716e:	6013      	str	r3, [r2, #0]
}
 8007170:	bf00      	nop
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr
 8007178:	20000074 	.word	0x20000074
 800717c:	20006220 	.word	0x20006220

08007180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007180:	b480      	push	{r7}
 8007182:	af00      	add	r7, sp, #0
  return uwTick;
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <HAL_GetTick+0x10>)
 8007186:	681b      	ldr	r3, [r3, #0]
}
 8007188:	4618      	mov	r0, r3
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr
 8007190:	20006220 	.word	0x20006220

08007194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800719c:	f7ff fff0 	bl	8007180 <HAL_GetTick>
 80071a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ac:	d005      	beq.n	80071ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <HAL_Delay+0x44>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80071ba:	bf00      	nop
 80071bc:	f7ff ffe0 	bl	8007180 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d8f7      	bhi.n	80071bc <HAL_Delay+0x28>
  {
  }
}
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000074 	.word	0x20000074

080071dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e0ce      	b.n	800739c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fe fa68 	bl	80056f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fcd1 	bl	8007bc8 <ADC_ConversionStop_Disable>
 8007226:	4603      	mov	r3, r0
 8007228:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 80a9 	bne.w	800738a <HAL_ADC_Init+0x1ae>
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f040 80a5 	bne.w	800738a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007248:	f023 0302 	bic.w	r3, r3, #2
 800724c:	f043 0202 	orr.w	r2, r3, #2
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4951      	ldr	r1, [pc, #324]	; (80073a4 <HAL_ADC_Init+0x1c8>)
 800725e:	428b      	cmp	r3, r1
 8007260:	d10a      	bne.n	8007278 <HAL_ADC_Init+0x9c>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800726a:	d002      	beq.n	8007272 <HAL_ADC_Init+0x96>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	e004      	b.n	800727c <HAL_ADC_Init+0xa0>
 8007272:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007276:	e001      	b.n	800727c <HAL_ADC_Init+0xa0>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800727c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7b1b      	ldrb	r3, [r3, #12]
 8007282:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007284:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4313      	orrs	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007294:	d003      	beq.n	800729e <HAL_ADC_Init+0xc2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d102      	bne.n	80072a4 <HAL_ADC_Init+0xc8>
 800729e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072a2:	e000      	b.n	80072a6 <HAL_ADC_Init+0xca>
 80072a4:	2300      	movs	r3, #0
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	7d1b      	ldrb	r3, [r3, #20]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d119      	bne.n	80072e8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7b1b      	ldrb	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	035a      	lsls	r2, r3, #13
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	e00b      	b.n	80072e8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	f043 0220 	orr.w	r2, r3, #32
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	f043 0201 	orr.w	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <HAL_ADC_Init+0x1cc>)
 8007304:	4013      	ands	r3, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	430b      	orrs	r3, r1
 800730e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007318:	d003      	beq.n	8007322 <HAL_ADC_Init+0x146>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d104      	bne.n	800732c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	3b01      	subs	r3, #1
 8007328:	051b      	lsls	r3, r3, #20
 800732a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	430a      	orrs	r2, r1
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	4b19      	ldr	r3, [pc, #100]	; (80073ac <HAL_ADC_Init+0x1d0>)
 8007348:	4013      	ands	r3, r2
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	429a      	cmp	r2, r3
 800734e:	d10b      	bne.n	8007368 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	f023 0303 	bic.w	r3, r3, #3
 800735e:	f043 0201 	orr.w	r2, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007366:	e018      	b.n	800739a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f023 0312 	bic.w	r3, r3, #18
 8007370:	f043 0210 	orr.w	r2, r3, #16
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	f043 0201 	orr.w	r2, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007388:	e007      	b.n	800739a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738e:	f043 0210 	orr.w	r2, r3, #16
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40013c00 	.word	0x40013c00
 80073a8:	ffe1f7fd 	.word	0xffe1f7fd
 80073ac:	ff1f0efe 	.word	0xff1f0efe

080073b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_ADC_Start+0x1a>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e098      	b.n	80074fc <HAL_ADC_Start+0x14c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fb9e 	bl	8007b14 <ADC_Enable>
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f040 8087 	bne.w	80074f2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a41      	ldr	r2, [pc, #260]	; (8007504 <HAL_ADC_Start+0x154>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d105      	bne.n	800740e <HAL_ADC_Start+0x5e>
 8007402:	4b41      	ldr	r3, [pc, #260]	; (8007508 <HAL_ADC_Start+0x158>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d115      	bne.n	800743a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007424:	2b00      	cmp	r3, #0
 8007426:	d026      	beq.n	8007476 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007430:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007438:	e01d      	b.n	8007476 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2f      	ldr	r2, [pc, #188]	; (8007508 <HAL_ADC_Start+0x158>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d004      	beq.n	800745a <HAL_ADC_Start+0xaa>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2b      	ldr	r2, [pc, #172]	; (8007504 <HAL_ADC_Start+0x154>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d10d      	bne.n	8007476 <HAL_ADC_Start+0xc6>
 800745a:	4b2b      	ldr	r3, [pc, #172]	; (8007508 <HAL_ADC_Start+0x158>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800746e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d006      	beq.n	8007490 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	f023 0206 	bic.w	r2, r3, #6
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	62da      	str	r2, [r3, #44]	; 0x2c
 800748e:	e002      	b.n	8007496 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f06f 0202 	mvn.w	r2, #2
 80074a6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80074b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80074b6:	d113      	bne.n	80074e0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80074bc:	4a11      	ldr	r2, [pc, #68]	; (8007504 <HAL_ADC_Start+0x154>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d105      	bne.n	80074ce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80074c2:	4b11      	ldr	r3, [pc, #68]	; (8007508 <HAL_ADC_Start+0x158>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d108      	bne.n	80074e0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80074dc:	609a      	str	r2, [r3, #8]
 80074de:	e00c      	b.n	80074fa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80074ee:	609a      	str	r2, [r3, #8]
 80074f0:	e003      	b.n	80074fa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	40012800 	.word	0x40012800
 8007508:	40012400 	.word	0x40012400

0800750c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8007522:	f7ff fe2d 	bl	8007180 <HAL_GetTick>
 8007526:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	f043 0220 	orr.w	r2, r3, #32
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e0d3      	b.n	80076f6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007558:	2b00      	cmp	r3, #0
 800755a:	d131      	bne.n	80075c0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007566:	2b00      	cmp	r3, #0
 8007568:	d12a      	bne.n	80075c0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800756a:	e021      	b.n	80075b0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007572:	d01d      	beq.n	80075b0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d007      	beq.n	800758a <HAL_ADC_PollForConversion+0x7e>
 800757a:	f7ff fe01 	bl	8007180 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d212      	bcs.n	80075b0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759c:	f043 0204 	orr.w	r2, r3, #4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e0a2      	b.n	80076f6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0d6      	beq.n	800756c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80075be:	e070      	b.n	80076a2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80075c0:	4b4f      	ldr	r3, [pc, #316]	; (8007700 <HAL_ADC_PollForConversion+0x1f4>)
 80075c2:	681c      	ldr	r4, [r3, #0]
 80075c4:	2002      	movs	r0, #2
 80075c6:	f002 fbb7 	bl	8009d38 <HAL_RCCEx_GetPeriphCLKFreq>
 80075ca:	4603      	mov	r3, r0
 80075cc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6919      	ldr	r1, [r3, #16]
 80075d6:	4b4b      	ldr	r3, [pc, #300]	; (8007704 <HAL_ADC_PollForConversion+0x1f8>)
 80075d8:	400b      	ands	r3, r1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d118      	bne.n	8007610 <HAL_ADC_PollForConversion+0x104>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68d9      	ldr	r1, [r3, #12]
 80075e4:	4b48      	ldr	r3, [pc, #288]	; (8007708 <HAL_ADC_PollForConversion+0x1fc>)
 80075e6:	400b      	ands	r3, r1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d111      	bne.n	8007610 <HAL_ADC_PollForConversion+0x104>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6919      	ldr	r1, [r3, #16]
 80075f2:	4b46      	ldr	r3, [pc, #280]	; (800770c <HAL_ADC_PollForConversion+0x200>)
 80075f4:	400b      	ands	r3, r1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <HAL_ADC_PollForConversion+0x100>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68d9      	ldr	r1, [r3, #12]
 8007600:	4b43      	ldr	r3, [pc, #268]	; (8007710 <HAL_ADC_PollForConversion+0x204>)
 8007602:	400b      	ands	r3, r1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_ADC_PollForConversion+0x100>
 8007608:	2314      	movs	r3, #20
 800760a:	e020      	b.n	800764e <HAL_ADC_PollForConversion+0x142>
 800760c:	2329      	movs	r3, #41	; 0x29
 800760e:	e01e      	b.n	800764e <HAL_ADC_PollForConversion+0x142>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6919      	ldr	r1, [r3, #16]
 8007616:	4b3d      	ldr	r3, [pc, #244]	; (800770c <HAL_ADC_PollForConversion+0x200>)
 8007618:	400b      	ands	r3, r1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_ADC_PollForConversion+0x120>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68d9      	ldr	r1, [r3, #12]
 8007624:	4b3a      	ldr	r3, [pc, #232]	; (8007710 <HAL_ADC_PollForConversion+0x204>)
 8007626:	400b      	ands	r3, r1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00d      	beq.n	8007648 <HAL_ADC_PollForConversion+0x13c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6919      	ldr	r1, [r3, #16]
 8007632:	4b38      	ldr	r3, [pc, #224]	; (8007714 <HAL_ADC_PollForConversion+0x208>)
 8007634:	400b      	ands	r3, r1
 8007636:	2b00      	cmp	r3, #0
 8007638:	d108      	bne.n	800764c <HAL_ADC_PollForConversion+0x140>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68d9      	ldr	r1, [r3, #12]
 8007640:	4b34      	ldr	r3, [pc, #208]	; (8007714 <HAL_ADC_PollForConversion+0x208>)
 8007642:	400b      	ands	r3, r1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <HAL_ADC_PollForConversion+0x140>
 8007648:	2354      	movs	r3, #84	; 0x54
 800764a:	e000      	b.n	800764e <HAL_ADC_PollForConversion+0x142>
 800764c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800764e:	fb02 f303 	mul.w	r3, r2, r3
 8007652:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007654:	e021      	b.n	800769a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800765c:	d01a      	beq.n	8007694 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <HAL_ADC_PollForConversion+0x168>
 8007664:	f7ff fd8c 	bl	8007180 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d20f      	bcs.n	8007694 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	429a      	cmp	r2, r3
 800767a:	d90b      	bls.n	8007694 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007680:	f043 0204 	orr.w	r2, r3, #4
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e030      	b.n	80076f6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d8d9      	bhi.n	8007656 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f06f 0212 	mvn.w	r2, #18
 80076aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80076c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80076c6:	d115      	bne.n	80076f4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d111      	bne.n	80076f4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d105      	bne.n	80076f4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f043 0201 	orr.w	r2, r3, #1
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	371c      	adds	r7, #28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd90      	pop	{r4, r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000038 	.word	0x20000038
 8007704:	24924924 	.word	0x24924924
 8007708:	00924924 	.word	0x00924924
 800770c:	12492492 	.word	0x12492492
 8007710:	00492492 	.word	0x00492492
 8007714:	00249249 	.word	0x00249249

08007718 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a64      	ldr	r2, [pc, #400]	; (80078c0 <HAL_ADC_Start_DMA+0x1a8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d004      	beq.n	800773c <HAL_ADC_Start_DMA+0x24>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a63      	ldr	r2, [pc, #396]	; (80078c4 <HAL_ADC_Start_DMA+0x1ac>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d106      	bne.n	800774a <HAL_ADC_Start_DMA+0x32>
 800773c:	4b60      	ldr	r3, [pc, #384]	; (80078c0 <HAL_ADC_Start_DMA+0x1a8>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007744:	2b00      	cmp	r3, #0
 8007746:	f040 80b3 	bne.w	80078b0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <HAL_ADC_Start_DMA+0x40>
 8007754:	2302      	movs	r3, #2
 8007756:	e0ae      	b.n	80078b6 <HAL_ADC_Start_DMA+0x19e>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f9d7 	bl	8007b14 <ADC_Enable>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 809a 	bne.w	80078a6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a4e      	ldr	r2, [pc, #312]	; (80078c4 <HAL_ADC_Start_DMA+0x1ac>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d105      	bne.n	800779c <HAL_ADC_Start_DMA+0x84>
 8007790:	4b4b      	ldr	r3, [pc, #300]	; (80078c0 <HAL_ADC_Start_DMA+0x1a8>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d115      	bne.n	80077c8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d026      	beq.n	8007804 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077c6:	e01d      	b.n	8007804 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a39      	ldr	r2, [pc, #228]	; (80078c0 <HAL_ADC_Start_DMA+0x1a8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d004      	beq.n	80077e8 <HAL_ADC_Start_DMA+0xd0>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a38      	ldr	r2, [pc, #224]	; (80078c4 <HAL_ADC_Start_DMA+0x1ac>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d10d      	bne.n	8007804 <HAL_ADC_Start_DMA+0xec>
 80077e8:	4b35      	ldr	r3, [pc, #212]	; (80078c0 <HAL_ADC_Start_DMA+0x1a8>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d007      	beq.n	8007804 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	f023 0206 	bic.w	r2, r3, #6
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	62da      	str	r2, [r3, #44]	; 0x2c
 800781c:	e002      	b.n	8007824 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	4a25      	ldr	r2, [pc, #148]	; (80078c8 <HAL_ADC_Start_DMA+0x1b0>)
 8007832:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	4a24      	ldr	r2, [pc, #144]	; (80078cc <HAL_ADC_Start_DMA+0x1b4>)
 800783a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	4a23      	ldr	r2, [pc, #140]	; (80078d0 <HAL_ADC_Start_DMA+0x1b8>)
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0202 	mvn.w	r2, #2
 800784c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800785c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a18      	ldr	r0, [r3, #32]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	334c      	adds	r3, #76	; 0x4c
 8007868:	4619      	mov	r1, r3
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f000 fc83 	bl	8008178 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800787c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007880:	d108      	bne.n	8007894 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007890:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007892:	e00f      	b.n	80078b4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80078a2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80078a4:	e006      	b.n	80078b4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80078ae:	e001      	b.n	80078b4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	40012400 	.word	0x40012400
 80078c4:	40012800 	.word	0x40012800
 80078c8:	08007c4b 	.word	0x08007c4b
 80078cc:	08007cc7 	.word	0x08007cc7
 80078d0:	08007ce3 	.word	0x08007ce3

080078d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr

080078ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr

080078fe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr

08007910 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr
	...

08007924 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_ADC_ConfigChannel+0x20>
 8007940:	2302      	movs	r3, #2
 8007942:	e0dc      	b.n	8007afe <HAL_ADC_ConfigChannel+0x1da>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b06      	cmp	r3, #6
 8007952:	d81c      	bhi.n	800798e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	3b05      	subs	r3, #5
 8007966:	221f      	movs	r2, #31
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	43db      	mvns	r3, r3
 800796e:	4019      	ands	r1, r3
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	3b05      	subs	r3, #5
 8007980:	fa00 f203 	lsl.w	r2, r0, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	635a      	str	r2, [r3, #52]	; 0x34
 800798c:	e03c      	b.n	8007a08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2b0c      	cmp	r3, #12
 8007994:	d81c      	bhi.n	80079d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	3b23      	subs	r3, #35	; 0x23
 80079a8:	221f      	movs	r2, #31
 80079aa:	fa02 f303 	lsl.w	r3, r2, r3
 80079ae:	43db      	mvns	r3, r3
 80079b0:	4019      	ands	r1, r3
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	3b23      	subs	r3, #35	; 0x23
 80079c2:	fa00 f203 	lsl.w	r2, r0, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	631a      	str	r2, [r3, #48]	; 0x30
 80079ce:	e01b      	b.n	8007a08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	3b41      	subs	r3, #65	; 0x41
 80079e2:	221f      	movs	r2, #31
 80079e4:	fa02 f303 	lsl.w	r3, r2, r3
 80079e8:	43db      	mvns	r3, r3
 80079ea:	4019      	ands	r1, r3
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	3b41      	subs	r3, #65	; 0x41
 80079fc:	fa00 f203 	lsl.w	r2, r0, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b09      	cmp	r3, #9
 8007a0e:	d91c      	bls.n	8007a4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68d9      	ldr	r1, [r3, #12]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	4413      	add	r3, r2
 8007a20:	3b1e      	subs	r3, #30
 8007a22:	2207      	movs	r2, #7
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	4019      	ands	r1, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	6898      	ldr	r0, [r3, #8]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	4613      	mov	r3, r2
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	4413      	add	r3, r2
 8007a3a:	3b1e      	subs	r3, #30
 8007a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	60da      	str	r2, [r3, #12]
 8007a48:	e019      	b.n	8007a7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6919      	ldr	r1, [r3, #16]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	4613      	mov	r3, r2
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	2207      	movs	r2, #7
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	43db      	mvns	r3, r3
 8007a62:	4019      	ands	r1, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	6898      	ldr	r0, [r3, #8]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	4413      	add	r3, r2
 8007a72:	fa00 f203 	lsl.w	r2, r0, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b10      	cmp	r3, #16
 8007a84:	d003      	beq.n	8007a8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007a8a:	2b11      	cmp	r3, #17
 8007a8c:	d132      	bne.n	8007af4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1d      	ldr	r2, [pc, #116]	; (8007b08 <HAL_ADC_ConfigChannel+0x1e4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d125      	bne.n	8007ae4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d126      	bne.n	8007af4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007ab4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b10      	cmp	r3, #16
 8007abc:	d11a      	bne.n	8007af4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007abe:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <HAL_ADC_ConfigChannel+0x1e8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <HAL_ADC_ConfigChannel+0x1ec>)
 8007ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac8:	0c9a      	lsrs	r2, r3, #18
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007ad4:	e002      	b.n	8007adc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f9      	bne.n	8007ad6 <HAL_ADC_ConfigChannel+0x1b2>
 8007ae2:	e007      	b.n	8007af4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	f043 0220 	orr.w	r2, r3, #32
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr
 8007b08:	40012400 	.word	0x40012400
 8007b0c:	20000038 	.word	0x20000038
 8007b10:	431bde83 	.word	0x431bde83

08007b14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d040      	beq.n	8007bb4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0201 	orr.w	r2, r2, #1
 8007b40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007b42:	4b1f      	ldr	r3, [pc, #124]	; (8007bc0 <ADC_Enable+0xac>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1f      	ldr	r2, [pc, #124]	; (8007bc4 <ADC_Enable+0xb0>)
 8007b48:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4c:	0c9b      	lsrs	r3, r3, #18
 8007b4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007b50:	e002      	b.n	8007b58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1f9      	bne.n	8007b52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007b5e:	f7ff fb0f 	bl	8007180 <HAL_GetTick>
 8007b62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007b64:	e01f      	b.n	8007ba6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007b66:	f7ff fb0b 	bl	8007180 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d918      	bls.n	8007ba6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d011      	beq.n	8007ba6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	f043 0210 	orr.w	r2, r3, #16
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	f043 0201 	orr.w	r2, r3, #1
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e007      	b.n	8007bb6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d1d8      	bne.n	8007b66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20000038 	.word	0x20000038
 8007bc4:	431bde83 	.word	0x431bde83

08007bc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d12e      	bne.n	8007c40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0201 	bic.w	r2, r2, #1
 8007bf0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007bf2:	f7ff fac5 	bl	8007180 <HAL_GetTick>
 8007bf6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007bf8:	e01b      	b.n	8007c32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007bfa:	f7ff fac1 	bl	8007180 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d914      	bls.n	8007c32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d10d      	bne.n	8007c32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1a:	f043 0210 	orr.w	r2, r3, #16
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	f043 0201 	orr.w	r2, r3, #1
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e007      	b.n	8007c42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d0dc      	beq.n	8007bfa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d127      	bne.n	8007cb4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007c7a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007c7e:	d115      	bne.n	8007cac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d111      	bne.n	8007cac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d105      	bne.n	8007cac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	f043 0201 	orr.w	r2, r3, #1
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f7ff fe1d 	bl	80078ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007cb2:	e004      	b.n	8007cbe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff fe12 	bl	80078fe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	f043 0204 	orr.w	r2, r3, #4
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff fe01 	bl	8007910 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d0e:	bf00      	nop
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_ADCEx_Calibration_Start+0x1e>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e095      	b.n	8007e62 <HAL_ADCEx_Calibration_Start+0x14a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff ff42 	bl	8007bc8 <ADC_ConversionStop_Disable>
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 8084 	bne.w	8007e58 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007d58:	f023 0302 	bic.w	r3, r3, #2
 8007d5c:	f043 0202 	orr.w	r2, r3, #2
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007d64:	4b41      	ldr	r3, [pc, #260]	; (8007e6c <HAL_ADCEx_Calibration_Start+0x154>)
 8007d66:	681c      	ldr	r4, [r3, #0]
 8007d68:	2002      	movs	r0, #2
 8007d6a:	f001 ffe5 	bl	8009d38 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8007d74:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8007d76:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8007d78:	e002      	b.n	8007d80 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1f9      	bne.n	8007d7a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff fec4 	bl	8007b14 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0208 	orr.w	r2, r2, #8
 8007d9a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007d9c:	f7ff f9f0 	bl	8007180 <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007da2:	e01b      	b.n	8007ddc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007da4:	f7ff f9ec 	bl	8007180 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b0a      	cmp	r3, #10
 8007db0:	d914      	bls.n	8007ddc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f003 0308 	and.w	r3, r3, #8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00d      	beq.n	8007ddc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	f023 0312 	bic.w	r3, r3, #18
 8007dc8:	f043 0210 	orr.w	r2, r3, #16
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e042      	b.n	8007e62 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1dc      	bne.n	8007da4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f042 0204 	orr.w	r2, r2, #4
 8007df8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007dfa:	f7ff f9c1 	bl	8007180 <HAL_GetTick>
 8007dfe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007e00:	e01b      	b.n	8007e3a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007e02:	f7ff f9bd 	bl	8007180 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b0a      	cmp	r3, #10
 8007e0e:	d914      	bls.n	8007e3a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00d      	beq.n	8007e3a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e22:	f023 0312 	bic.w	r3, r3, #18
 8007e26:	f043 0210 	orr.w	r2, r3, #16
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e013      	b.n	8007e62 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1dc      	bne.n	8007e02 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4c:	f023 0303 	bic.w	r3, r3, #3
 8007e50:	f043 0201 	orr.w	r2, r3, #1
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd90      	pop	{r4, r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000038 	.word	0x20000038

08007e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e80:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ea2:	4a04      	ldr	r2, [pc, #16]	; (8007eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	60d3      	str	r3, [r2, #12]
}
 8007ea8:	bf00      	nop
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	e000ed00 	.word	0xe000ed00

08007eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ebc:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	0a1b      	lsrs	r3, r3, #8
 8007ec2:	f003 0307 	and.w	r3, r3, #7
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bc80      	pop	{r7}
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	e000ed00 	.word	0xe000ed00

08007ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	db0b      	blt.n	8007efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	f003 021f 	and.w	r2, r3, #31
 8007eec:	4906      	ldr	r1, [pc, #24]	; (8007f08 <__NVIC_EnableIRQ+0x34>)
 8007eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef2:	095b      	lsrs	r3, r3, #5
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8007efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr
 8007f08:	e000e100 	.word	0xe000e100

08007f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	db0a      	blt.n	8007f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	490c      	ldr	r1, [pc, #48]	; (8007f58 <__NVIC_SetPriority+0x4c>)
 8007f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f2a:	0112      	lsls	r2, r2, #4
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	440b      	add	r3, r1
 8007f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f34:	e00a      	b.n	8007f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	4908      	ldr	r1, [pc, #32]	; (8007f5c <__NVIC_SetPriority+0x50>)
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	3b04      	subs	r3, #4
 8007f44:	0112      	lsls	r2, r2, #4
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	440b      	add	r3, r1
 8007f4a:	761a      	strb	r2, [r3, #24]
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	e000e100 	.word	0xe000e100
 8007f5c:	e000ed00 	.word	0xe000ed00

08007f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b089      	sub	sp, #36	; 0x24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f1c3 0307 	rsb	r3, r3, #7
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	bf28      	it	cs
 8007f7e:	2304      	movcs	r3, #4
 8007f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	3304      	adds	r3, #4
 8007f86:	2b06      	cmp	r3, #6
 8007f88:	d902      	bls.n	8007f90 <NVIC_EncodePriority+0x30>
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	3b03      	subs	r3, #3
 8007f8e:	e000      	b.n	8007f92 <NVIC_EncodePriority+0x32>
 8007f90:	2300      	movs	r3, #0
 8007f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43da      	mvns	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	401a      	ands	r2, r3
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb2:	43d9      	mvns	r1, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fb8:	4313      	orrs	r3, r2
         );
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3724      	adds	r7, #36	; 0x24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr

08007fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fd4:	d301      	bcc.n	8007fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e00f      	b.n	8007ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fda:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <SysTick_Config+0x40>)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fe2:	210f      	movs	r1, #15
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fe8:	f7ff ff90 	bl	8007f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fec:	4b05      	ldr	r3, [pc, #20]	; (8008004 <SysTick_Config+0x40>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ff2:	4b04      	ldr	r3, [pc, #16]	; (8008004 <SysTick_Config+0x40>)
 8007ff4:	2207      	movs	r2, #7
 8007ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	e000e010 	.word	0xe000e010

08008008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff ff2d 	bl	8007e70 <__NVIC_SetPriorityGrouping>
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800801e:	b580      	push	{r7, lr}
 8008020:	b086      	sub	sp, #24
 8008022:	af00      	add	r7, sp, #0
 8008024:	4603      	mov	r3, r0
 8008026:	60b9      	str	r1, [r7, #8]
 8008028:	607a      	str	r2, [r7, #4]
 800802a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008030:	f7ff ff42 	bl	8007eb8 <__NVIC_GetPriorityGrouping>
 8008034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	6978      	ldr	r0, [r7, #20]
 800803c:	f7ff ff90 	bl	8007f60 <NVIC_EncodePriority>
 8008040:	4602      	mov	r2, r0
 8008042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008046:	4611      	mov	r1, r2
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff ff5f 	bl	8007f0c <__NVIC_SetPriority>
}
 800804e:	bf00      	nop
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	4603      	mov	r3, r0
 800805e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff ff35 	bl	8007ed4 <__NVIC_EnableIRQ>
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff ffa2 	bl	8007fc4 <SysTick_Config>
 8008080:	4603      	mov	r3, r0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e059      	b.n	8008156 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	4b2d      	ldr	r3, [pc, #180]	; (8008160 <HAL_DMA_Init+0xd4>)
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d80f      	bhi.n	80080ce <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	4b2b      	ldr	r3, [pc, #172]	; (8008164 <HAL_DMA_Init+0xd8>)
 80080b6:	4413      	add	r3, r2
 80080b8:	4a2b      	ldr	r2, [pc, #172]	; (8008168 <HAL_DMA_Init+0xdc>)
 80080ba:	fba2 2303 	umull	r2, r3, r2, r3
 80080be:	091b      	lsrs	r3, r3, #4
 80080c0:	009a      	lsls	r2, r3, #2
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a28      	ldr	r2, [pc, #160]	; (800816c <HAL_DMA_Init+0xe0>)
 80080ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80080cc:	e00e      	b.n	80080ec <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	4b26      	ldr	r3, [pc, #152]	; (8008170 <HAL_DMA_Init+0xe4>)
 80080d6:	4413      	add	r3, r2
 80080d8:	4a23      	ldr	r2, [pc, #140]	; (8008168 <HAL_DMA_Init+0xdc>)
 80080da:	fba2 2303 	umull	r2, r3, r2, r3
 80080de:	091b      	lsrs	r3, r3, #4
 80080e0:	009a      	lsls	r2, r3, #2
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a22      	ldr	r2, [pc, #136]	; (8008174 <HAL_DMA_Init+0xe8>)
 80080ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008102:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008106:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800811c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr
 8008160:	40020407 	.word	0x40020407
 8008164:	bffdfff8 	.word	0xbffdfff8
 8008168:	cccccccd 	.word	0xcccccccd
 800816c:	40020000 	.word	0x40020000
 8008170:	bffdfbf8 	.word	0xbffdfbf8
 8008174:	40020400 	.word	0x40020400

08008178 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d101      	bne.n	8008198 <HAL_DMA_Start_IT+0x20>
 8008194:	2302      	movs	r3, #2
 8008196:	e04a      	b.n	800822e <HAL_DMA_Start_IT+0xb6>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d13a      	bne.n	8008220 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0201 	bic.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 faa8 	bl	8008724 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d008      	beq.n	80081ee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 020e 	orr.w	r2, r2, #14
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	e00f      	b.n	800820e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0204 	bic.w	r2, r2, #4
 80081fc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 020a 	orr.w	r2, r2, #10
 800820c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f042 0201 	orr.w	r2, r2, #1
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e005      	b.n	800822c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008228:	2302      	movs	r3, #2
 800822a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800822c:	7dfb      	ldrb	r3, [r7, #23]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008248:	2b02      	cmp	r3, #2
 800824a:	d008      	beq.n	800825e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2204      	movs	r2, #4
 8008250:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e020      	b.n	80082a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 020e 	bic.w	r2, r2, #14
 800826c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 0201 	bic.w	r2, r2, #1
 800827c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	2101      	movs	r1, #1
 8008288:	fa01 f202 	lsl.w	r2, r1, r2
 800828c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800829e:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
	...

080082ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c8:	2204      	movs	r2, #4
 80082ca:	409a      	lsls	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 80f1 	beq.w	80084b8 <HAL_DMA_IRQHandler+0x20c>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80eb 	beq.w	80084b8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d107      	bne.n	8008300 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0204 	bic.w	r2, r2, #4
 80082fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	4b5f      	ldr	r3, [pc, #380]	; (8008484 <HAL_DMA_IRQHandler+0x1d8>)
 8008308:	429a      	cmp	r2, r3
 800830a:	d958      	bls.n	80083be <HAL_DMA_IRQHandler+0x112>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a5d      	ldr	r2, [pc, #372]	; (8008488 <HAL_DMA_IRQHandler+0x1dc>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d04f      	beq.n	80083b6 <HAL_DMA_IRQHandler+0x10a>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a5c      	ldr	r2, [pc, #368]	; (800848c <HAL_DMA_IRQHandler+0x1e0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d048      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x106>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a5a      	ldr	r2, [pc, #360]	; (8008490 <HAL_DMA_IRQHandler+0x1e4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d040      	beq.n	80083ac <HAL_DMA_IRQHandler+0x100>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a59      	ldr	r2, [pc, #356]	; (8008494 <HAL_DMA_IRQHandler+0x1e8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d038      	beq.n	80083a6 <HAL_DMA_IRQHandler+0xfa>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a57      	ldr	r2, [pc, #348]	; (8008498 <HAL_DMA_IRQHandler+0x1ec>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d030      	beq.n	80083a0 <HAL_DMA_IRQHandler+0xf4>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a56      	ldr	r2, [pc, #344]	; (800849c <HAL_DMA_IRQHandler+0x1f0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d028      	beq.n	800839a <HAL_DMA_IRQHandler+0xee>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a4d      	ldr	r2, [pc, #308]	; (8008484 <HAL_DMA_IRQHandler+0x1d8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d020      	beq.n	8008394 <HAL_DMA_IRQHandler+0xe8>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a52      	ldr	r2, [pc, #328]	; (80084a0 <HAL_DMA_IRQHandler+0x1f4>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d019      	beq.n	8008390 <HAL_DMA_IRQHandler+0xe4>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a50      	ldr	r2, [pc, #320]	; (80084a4 <HAL_DMA_IRQHandler+0x1f8>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d012      	beq.n	800838c <HAL_DMA_IRQHandler+0xe0>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a4f      	ldr	r2, [pc, #316]	; (80084a8 <HAL_DMA_IRQHandler+0x1fc>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00a      	beq.n	8008386 <HAL_DMA_IRQHandler+0xda>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a4d      	ldr	r2, [pc, #308]	; (80084ac <HAL_DMA_IRQHandler+0x200>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d102      	bne.n	8008380 <HAL_DMA_IRQHandler+0xd4>
 800837a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800837e:	e01b      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 8008380:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008384:	e018      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 8008386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800838a:	e015      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 800838c:	2340      	movs	r3, #64	; 0x40
 800838e:	e013      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 8008390:	2304      	movs	r3, #4
 8008392:	e011      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 8008394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008398:	e00e      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 800839a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800839e:	e00b      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 80083a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80083a4:	e008      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 80083a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80083aa:	e005      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 80083ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b0:	e002      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 80083b2:	2340      	movs	r3, #64	; 0x40
 80083b4:	e000      	b.n	80083b8 <HAL_DMA_IRQHandler+0x10c>
 80083b6:	2304      	movs	r3, #4
 80083b8:	4a3d      	ldr	r2, [pc, #244]	; (80084b0 <HAL_DMA_IRQHandler+0x204>)
 80083ba:	6053      	str	r3, [r2, #4]
 80083bc:	e057      	b.n	800846e <HAL_DMA_IRQHandler+0x1c2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a31      	ldr	r2, [pc, #196]	; (8008488 <HAL_DMA_IRQHandler+0x1dc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d04f      	beq.n	8008468 <HAL_DMA_IRQHandler+0x1bc>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a2f      	ldr	r2, [pc, #188]	; (800848c <HAL_DMA_IRQHandler+0x1e0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d048      	beq.n	8008464 <HAL_DMA_IRQHandler+0x1b8>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a2e      	ldr	r2, [pc, #184]	; (8008490 <HAL_DMA_IRQHandler+0x1e4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d040      	beq.n	800845e <HAL_DMA_IRQHandler+0x1b2>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a2c      	ldr	r2, [pc, #176]	; (8008494 <HAL_DMA_IRQHandler+0x1e8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d038      	beq.n	8008458 <HAL_DMA_IRQHandler+0x1ac>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a2b      	ldr	r2, [pc, #172]	; (8008498 <HAL_DMA_IRQHandler+0x1ec>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d030      	beq.n	8008452 <HAL_DMA_IRQHandler+0x1a6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a29      	ldr	r2, [pc, #164]	; (800849c <HAL_DMA_IRQHandler+0x1f0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d028      	beq.n	800844c <HAL_DMA_IRQHandler+0x1a0>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a21      	ldr	r2, [pc, #132]	; (8008484 <HAL_DMA_IRQHandler+0x1d8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d020      	beq.n	8008446 <HAL_DMA_IRQHandler+0x19a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a25      	ldr	r2, [pc, #148]	; (80084a0 <HAL_DMA_IRQHandler+0x1f4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d019      	beq.n	8008442 <HAL_DMA_IRQHandler+0x196>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a24      	ldr	r2, [pc, #144]	; (80084a4 <HAL_DMA_IRQHandler+0x1f8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d012      	beq.n	800843e <HAL_DMA_IRQHandler+0x192>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a22      	ldr	r2, [pc, #136]	; (80084a8 <HAL_DMA_IRQHandler+0x1fc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00a      	beq.n	8008438 <HAL_DMA_IRQHandler+0x18c>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a21      	ldr	r2, [pc, #132]	; (80084ac <HAL_DMA_IRQHandler+0x200>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d102      	bne.n	8008432 <HAL_DMA_IRQHandler+0x186>
 800842c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008430:	e01b      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 8008432:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008436:	e018      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 8008438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800843c:	e015      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 800843e:	2340      	movs	r3, #64	; 0x40
 8008440:	e013      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 8008442:	2304      	movs	r3, #4
 8008444:	e011      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 8008446:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800844a:	e00e      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 800844c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008450:	e00b      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 8008452:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008456:	e008      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 8008458:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800845c:	e005      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 800845e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008462:	e002      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 8008464:	2340      	movs	r3, #64	; 0x40
 8008466:	e000      	b.n	800846a <HAL_DMA_IRQHandler+0x1be>
 8008468:	2304      	movs	r3, #4
 800846a:	4a12      	ldr	r2, [pc, #72]	; (80084b4 <HAL_DMA_IRQHandler+0x208>)
 800846c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8136 	beq.w	80086e4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008480:	e130      	b.n	80086e4 <HAL_DMA_IRQHandler+0x438>
 8008482:	bf00      	nop
 8008484:	40020080 	.word	0x40020080
 8008488:	40020008 	.word	0x40020008
 800848c:	4002001c 	.word	0x4002001c
 8008490:	40020030 	.word	0x40020030
 8008494:	40020044 	.word	0x40020044
 8008498:	40020058 	.word	0x40020058
 800849c:	4002006c 	.word	0x4002006c
 80084a0:	40020408 	.word	0x40020408
 80084a4:	4002041c 	.word	0x4002041c
 80084a8:	40020430 	.word	0x40020430
 80084ac:	40020444 	.word	0x40020444
 80084b0:	40020400 	.word	0x40020400
 80084b4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	2202      	movs	r2, #2
 80084be:	409a      	lsls	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4013      	ands	r3, r2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 80dd 	beq.w	8008684 <HAL_DMA_IRQHandler+0x3d8>
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 80d7 	beq.w	8008684 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0320 	and.w	r3, r3, #32
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10b      	bne.n	80084fc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 020a 	bic.w	r2, r2, #10
 80084f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	4b7b      	ldr	r3, [pc, #492]	; (80086f0 <HAL_DMA_IRQHandler+0x444>)
 8008504:	429a      	cmp	r2, r3
 8008506:	d958      	bls.n	80085ba <HAL_DMA_IRQHandler+0x30e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a79      	ldr	r2, [pc, #484]	; (80086f4 <HAL_DMA_IRQHandler+0x448>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d04f      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x306>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a78      	ldr	r2, [pc, #480]	; (80086f8 <HAL_DMA_IRQHandler+0x44c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d048      	beq.n	80085ae <HAL_DMA_IRQHandler+0x302>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a76      	ldr	r2, [pc, #472]	; (80086fc <HAL_DMA_IRQHandler+0x450>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d040      	beq.n	80085a8 <HAL_DMA_IRQHandler+0x2fc>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a75      	ldr	r2, [pc, #468]	; (8008700 <HAL_DMA_IRQHandler+0x454>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d038      	beq.n	80085a2 <HAL_DMA_IRQHandler+0x2f6>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a73      	ldr	r2, [pc, #460]	; (8008704 <HAL_DMA_IRQHandler+0x458>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d030      	beq.n	800859c <HAL_DMA_IRQHandler+0x2f0>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a72      	ldr	r2, [pc, #456]	; (8008708 <HAL_DMA_IRQHandler+0x45c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d028      	beq.n	8008596 <HAL_DMA_IRQHandler+0x2ea>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a69      	ldr	r2, [pc, #420]	; (80086f0 <HAL_DMA_IRQHandler+0x444>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d020      	beq.n	8008590 <HAL_DMA_IRQHandler+0x2e4>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a6e      	ldr	r2, [pc, #440]	; (800870c <HAL_DMA_IRQHandler+0x460>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d019      	beq.n	800858c <HAL_DMA_IRQHandler+0x2e0>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a6c      	ldr	r2, [pc, #432]	; (8008710 <HAL_DMA_IRQHandler+0x464>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d012      	beq.n	8008588 <HAL_DMA_IRQHandler+0x2dc>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a6b      	ldr	r2, [pc, #428]	; (8008714 <HAL_DMA_IRQHandler+0x468>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d00a      	beq.n	8008582 <HAL_DMA_IRQHandler+0x2d6>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a69      	ldr	r2, [pc, #420]	; (8008718 <HAL_DMA_IRQHandler+0x46c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d102      	bne.n	800857c <HAL_DMA_IRQHandler+0x2d0>
 8008576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800857a:	e01b      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 800857c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008580:	e018      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 8008582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008586:	e015      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 8008588:	2320      	movs	r3, #32
 800858a:	e013      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 800858c:	2302      	movs	r3, #2
 800858e:	e011      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 8008590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008594:	e00e      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 8008596:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800859a:	e00b      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 800859c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085a0:	e008      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 80085a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085a6:	e005      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 80085a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ac:	e002      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 80085ae:	2320      	movs	r3, #32
 80085b0:	e000      	b.n	80085b4 <HAL_DMA_IRQHandler+0x308>
 80085b2:	2302      	movs	r3, #2
 80085b4:	4a59      	ldr	r2, [pc, #356]	; (800871c <HAL_DMA_IRQHandler+0x470>)
 80085b6:	6053      	str	r3, [r2, #4]
 80085b8:	e057      	b.n	800866a <HAL_DMA_IRQHandler+0x3be>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a4d      	ldr	r2, [pc, #308]	; (80086f4 <HAL_DMA_IRQHandler+0x448>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d04f      	beq.n	8008664 <HAL_DMA_IRQHandler+0x3b8>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a4b      	ldr	r2, [pc, #300]	; (80086f8 <HAL_DMA_IRQHandler+0x44c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d048      	beq.n	8008660 <HAL_DMA_IRQHandler+0x3b4>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a4a      	ldr	r2, [pc, #296]	; (80086fc <HAL_DMA_IRQHandler+0x450>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d040      	beq.n	800865a <HAL_DMA_IRQHandler+0x3ae>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a48      	ldr	r2, [pc, #288]	; (8008700 <HAL_DMA_IRQHandler+0x454>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d038      	beq.n	8008654 <HAL_DMA_IRQHandler+0x3a8>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a47      	ldr	r2, [pc, #284]	; (8008704 <HAL_DMA_IRQHandler+0x458>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d030      	beq.n	800864e <HAL_DMA_IRQHandler+0x3a2>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a45      	ldr	r2, [pc, #276]	; (8008708 <HAL_DMA_IRQHandler+0x45c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d028      	beq.n	8008648 <HAL_DMA_IRQHandler+0x39c>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a3d      	ldr	r2, [pc, #244]	; (80086f0 <HAL_DMA_IRQHandler+0x444>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d020      	beq.n	8008642 <HAL_DMA_IRQHandler+0x396>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a41      	ldr	r2, [pc, #260]	; (800870c <HAL_DMA_IRQHandler+0x460>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d019      	beq.n	800863e <HAL_DMA_IRQHandler+0x392>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a40      	ldr	r2, [pc, #256]	; (8008710 <HAL_DMA_IRQHandler+0x464>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d012      	beq.n	800863a <HAL_DMA_IRQHandler+0x38e>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a3e      	ldr	r2, [pc, #248]	; (8008714 <HAL_DMA_IRQHandler+0x468>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d00a      	beq.n	8008634 <HAL_DMA_IRQHandler+0x388>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a3d      	ldr	r2, [pc, #244]	; (8008718 <HAL_DMA_IRQHandler+0x46c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d102      	bne.n	800862e <HAL_DMA_IRQHandler+0x382>
 8008628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800862c:	e01b      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 800862e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008632:	e018      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 8008634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008638:	e015      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 800863a:	2320      	movs	r3, #32
 800863c:	e013      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 800863e:	2302      	movs	r3, #2
 8008640:	e011      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 8008642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008646:	e00e      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 8008648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800864c:	e00b      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 800864e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008652:	e008      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 8008654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008658:	e005      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 800865a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800865e:	e002      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 8008660:	2320      	movs	r3, #32
 8008662:	e000      	b.n	8008666 <HAL_DMA_IRQHandler+0x3ba>
 8008664:	2302      	movs	r3, #2
 8008666:	4a2e      	ldr	r2, [pc, #184]	; (8008720 <HAL_DMA_IRQHandler+0x474>)
 8008668:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008676:	2b00      	cmp	r3, #0
 8008678:	d034      	beq.n	80086e4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008682:	e02f      	b.n	80086e4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	2208      	movs	r2, #8
 800868a:	409a      	lsls	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4013      	ands	r3, r2
 8008690:	2b00      	cmp	r3, #0
 8008692:	d028      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x43a>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d023      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 020e 	bic.w	r2, r2, #14
 80086ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b6:	2101      	movs	r1, #1
 80086b8:	fa01 f202 	lsl.w	r2, r1, r2
 80086bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
    }
  }
  return;
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop
}
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	40020080 	.word	0x40020080
 80086f4:	40020008 	.word	0x40020008
 80086f8:	4002001c 	.word	0x4002001c
 80086fc:	40020030 	.word	0x40020030
 8008700:	40020044 	.word	0x40020044
 8008704:	40020058 	.word	0x40020058
 8008708:	4002006c 	.word	0x4002006c
 800870c:	40020408 	.word	0x40020408
 8008710:	4002041c 	.word	0x4002041c
 8008714:	40020430 	.word	0x40020430
 8008718:	40020444 	.word	0x40020444
 800871c:	40020400 	.word	0x40020400
 8008720:	40020000 	.word	0x40020000

08008724 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873a:	2101      	movs	r1, #1
 800873c:	fa01 f202 	lsl.w	r2, r1, r2
 8008740:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	2b10      	cmp	r3, #16
 8008750:	d108      	bne.n	8008764 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008762:	e007      	b.n	8008774 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	60da      	str	r2, [r3, #12]
}
 8008774:	bf00      	nop
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr
	...

08008780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008780:	b480      	push	{r7}
 8008782:	b08b      	sub	sp, #44	; 0x2c
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800878a:	2300      	movs	r3, #0
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800878e:	2300      	movs	r3, #0
 8008790:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008792:	e179      	b.n	8008a88 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008794:	2201      	movs	r2, #1
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	fa02 f303 	lsl.w	r3, r2, r3
 800879c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	4013      	ands	r3, r2
 80087a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	f040 8168 	bne.w	8008a82 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	4a96      	ldr	r2, [pc, #600]	; (8008a10 <HAL_GPIO_Init+0x290>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d05e      	beq.n	800887a <HAL_GPIO_Init+0xfa>
 80087bc:	4a94      	ldr	r2, [pc, #592]	; (8008a10 <HAL_GPIO_Init+0x290>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d875      	bhi.n	80088ae <HAL_GPIO_Init+0x12e>
 80087c2:	4a94      	ldr	r2, [pc, #592]	; (8008a14 <HAL_GPIO_Init+0x294>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d058      	beq.n	800887a <HAL_GPIO_Init+0xfa>
 80087c8:	4a92      	ldr	r2, [pc, #584]	; (8008a14 <HAL_GPIO_Init+0x294>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d86f      	bhi.n	80088ae <HAL_GPIO_Init+0x12e>
 80087ce:	4a92      	ldr	r2, [pc, #584]	; (8008a18 <HAL_GPIO_Init+0x298>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d052      	beq.n	800887a <HAL_GPIO_Init+0xfa>
 80087d4:	4a90      	ldr	r2, [pc, #576]	; (8008a18 <HAL_GPIO_Init+0x298>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d869      	bhi.n	80088ae <HAL_GPIO_Init+0x12e>
 80087da:	4a90      	ldr	r2, [pc, #576]	; (8008a1c <HAL_GPIO_Init+0x29c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d04c      	beq.n	800887a <HAL_GPIO_Init+0xfa>
 80087e0:	4a8e      	ldr	r2, [pc, #568]	; (8008a1c <HAL_GPIO_Init+0x29c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d863      	bhi.n	80088ae <HAL_GPIO_Init+0x12e>
 80087e6:	4a8e      	ldr	r2, [pc, #568]	; (8008a20 <HAL_GPIO_Init+0x2a0>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d046      	beq.n	800887a <HAL_GPIO_Init+0xfa>
 80087ec:	4a8c      	ldr	r2, [pc, #560]	; (8008a20 <HAL_GPIO_Init+0x2a0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d85d      	bhi.n	80088ae <HAL_GPIO_Init+0x12e>
 80087f2:	2b12      	cmp	r3, #18
 80087f4:	d82a      	bhi.n	800884c <HAL_GPIO_Init+0xcc>
 80087f6:	2b12      	cmp	r3, #18
 80087f8:	d859      	bhi.n	80088ae <HAL_GPIO_Init+0x12e>
 80087fa:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <HAL_GPIO_Init+0x80>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	0800887b 	.word	0x0800887b
 8008804:	08008855 	.word	0x08008855
 8008808:	08008867 	.word	0x08008867
 800880c:	080088a9 	.word	0x080088a9
 8008810:	080088af 	.word	0x080088af
 8008814:	080088af 	.word	0x080088af
 8008818:	080088af 	.word	0x080088af
 800881c:	080088af 	.word	0x080088af
 8008820:	080088af 	.word	0x080088af
 8008824:	080088af 	.word	0x080088af
 8008828:	080088af 	.word	0x080088af
 800882c:	080088af 	.word	0x080088af
 8008830:	080088af 	.word	0x080088af
 8008834:	080088af 	.word	0x080088af
 8008838:	080088af 	.word	0x080088af
 800883c:	080088af 	.word	0x080088af
 8008840:	080088af 	.word	0x080088af
 8008844:	0800885d 	.word	0x0800885d
 8008848:	08008871 	.word	0x08008871
 800884c:	4a75      	ldr	r2, [pc, #468]	; (8008a24 <HAL_GPIO_Init+0x2a4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d013      	beq.n	800887a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008852:	e02c      	b.n	80088ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	623b      	str	r3, [r7, #32]
          break;
 800885a:	e029      	b.n	80088b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	3304      	adds	r3, #4
 8008862:	623b      	str	r3, [r7, #32]
          break;
 8008864:	e024      	b.n	80088b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	3308      	adds	r3, #8
 800886c:	623b      	str	r3, [r7, #32]
          break;
 800886e:	e01f      	b.n	80088b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	330c      	adds	r3, #12
 8008876:	623b      	str	r3, [r7, #32]
          break;
 8008878:	e01a      	b.n	80088b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d102      	bne.n	8008888 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008882:	2304      	movs	r3, #4
 8008884:	623b      	str	r3, [r7, #32]
          break;
 8008886:	e013      	b.n	80088b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d105      	bne.n	800889c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008890:	2308      	movs	r3, #8
 8008892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	611a      	str	r2, [r3, #16]
          break;
 800889a:	e009      	b.n	80088b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800889c:	2308      	movs	r3, #8
 800889e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	69fa      	ldr	r2, [r7, #28]
 80088a4:	615a      	str	r2, [r3, #20]
          break;
 80088a6:	e003      	b.n	80088b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80088a8:	2300      	movs	r3, #0
 80088aa:	623b      	str	r3, [r7, #32]
          break;
 80088ac:	e000      	b.n	80088b0 <HAL_GPIO_Init+0x130>
          break;
 80088ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2bff      	cmp	r3, #255	; 0xff
 80088b4:	d801      	bhi.n	80088ba <HAL_GPIO_Init+0x13a>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	e001      	b.n	80088be <HAL_GPIO_Init+0x13e>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3304      	adds	r3, #4
 80088be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	2bff      	cmp	r3, #255	; 0xff
 80088c4:	d802      	bhi.n	80088cc <HAL_GPIO_Init+0x14c>
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	e002      	b.n	80088d2 <HAL_GPIO_Init+0x152>
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	3b08      	subs	r3, #8
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	210f      	movs	r1, #15
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	fa01 f303 	lsl.w	r3, r1, r3
 80088e0:	43db      	mvns	r3, r3
 80088e2:	401a      	ands	r2, r3
 80088e4:	6a39      	ldr	r1, [r7, #32]
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	fa01 f303 	lsl.w	r3, r1, r3
 80088ec:	431a      	orrs	r2, r3
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 80c1 	beq.w	8008a82 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008900:	4b49      	ldr	r3, [pc, #292]	; (8008a28 <HAL_GPIO_Init+0x2a8>)
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	4a48      	ldr	r2, [pc, #288]	; (8008a28 <HAL_GPIO_Init+0x2a8>)
 8008906:	f043 0301 	orr.w	r3, r3, #1
 800890a:	6193      	str	r3, [r2, #24]
 800890c:	4b46      	ldr	r3, [pc, #280]	; (8008a28 <HAL_GPIO_Init+0x2a8>)
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	60bb      	str	r3, [r7, #8]
 8008916:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008918:	4a44      	ldr	r2, [pc, #272]	; (8008a2c <HAL_GPIO_Init+0x2ac>)
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	089b      	lsrs	r3, r3, #2
 800891e:	3302      	adds	r3, #2
 8008920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008924:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	f003 0303 	and.w	r3, r3, #3
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	220f      	movs	r2, #15
 8008930:	fa02 f303 	lsl.w	r3, r2, r3
 8008934:	43db      	mvns	r3, r3
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4013      	ands	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a3c      	ldr	r2, [pc, #240]	; (8008a30 <HAL_GPIO_Init+0x2b0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d01f      	beq.n	8008984 <HAL_GPIO_Init+0x204>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a3b      	ldr	r2, [pc, #236]	; (8008a34 <HAL_GPIO_Init+0x2b4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d019      	beq.n	8008980 <HAL_GPIO_Init+0x200>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a3a      	ldr	r2, [pc, #232]	; (8008a38 <HAL_GPIO_Init+0x2b8>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d013      	beq.n	800897c <HAL_GPIO_Init+0x1fc>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a39      	ldr	r2, [pc, #228]	; (8008a3c <HAL_GPIO_Init+0x2bc>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00d      	beq.n	8008978 <HAL_GPIO_Init+0x1f8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a38      	ldr	r2, [pc, #224]	; (8008a40 <HAL_GPIO_Init+0x2c0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d007      	beq.n	8008974 <HAL_GPIO_Init+0x1f4>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a37      	ldr	r2, [pc, #220]	; (8008a44 <HAL_GPIO_Init+0x2c4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d101      	bne.n	8008970 <HAL_GPIO_Init+0x1f0>
 800896c:	2305      	movs	r3, #5
 800896e:	e00a      	b.n	8008986 <HAL_GPIO_Init+0x206>
 8008970:	2306      	movs	r3, #6
 8008972:	e008      	b.n	8008986 <HAL_GPIO_Init+0x206>
 8008974:	2304      	movs	r3, #4
 8008976:	e006      	b.n	8008986 <HAL_GPIO_Init+0x206>
 8008978:	2303      	movs	r3, #3
 800897a:	e004      	b.n	8008986 <HAL_GPIO_Init+0x206>
 800897c:	2302      	movs	r3, #2
 800897e:	e002      	b.n	8008986 <HAL_GPIO_Init+0x206>
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <HAL_GPIO_Init+0x206>
 8008984:	2300      	movs	r3, #0
 8008986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008988:	f002 0203 	and.w	r2, r2, #3
 800898c:	0092      	lsls	r2, r2, #2
 800898e:	4093      	lsls	r3, r2
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	4313      	orrs	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008996:	4925      	ldr	r1, [pc, #148]	; (8008a2c <HAL_GPIO_Init+0x2ac>)
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	089b      	lsrs	r3, r3, #2
 800899c:	3302      	adds	r3, #2
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80089b0:	4b25      	ldr	r3, [pc, #148]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	4924      	ldr	r1, [pc, #144]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	600b      	str	r3, [r1, #0]
 80089bc:	e006      	b.n	80089cc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80089be:	4b22      	ldr	r3, [pc, #136]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	43db      	mvns	r3, r3
 80089c6:	4920      	ldr	r1, [pc, #128]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d006      	beq.n	80089e6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80089d8:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	491a      	ldr	r1, [pc, #104]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	604b      	str	r3, [r1, #4]
 80089e4:	e006      	b.n	80089f4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80089e6:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	43db      	mvns	r3, r3
 80089ee:	4916      	ldr	r1, [pc, #88]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 80089f0:	4013      	ands	r3, r2
 80089f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d025      	beq.n	8008a4c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008a00:	4b11      	ldr	r3, [pc, #68]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	4910      	ldr	r1, [pc, #64]	; (8008a48 <HAL_GPIO_Init+0x2c8>)
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	608b      	str	r3, [r1, #8]
 8008a0c:	e025      	b.n	8008a5a <HAL_GPIO_Init+0x2da>
 8008a0e:	bf00      	nop
 8008a10:	10320000 	.word	0x10320000
 8008a14:	10310000 	.word	0x10310000
 8008a18:	10220000 	.word	0x10220000
 8008a1c:	10210000 	.word	0x10210000
 8008a20:	10120000 	.word	0x10120000
 8008a24:	10110000 	.word	0x10110000
 8008a28:	40021000 	.word	0x40021000
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40010800 	.word	0x40010800
 8008a34:	40010c00 	.word	0x40010c00
 8008a38:	40011000 	.word	0x40011000
 8008a3c:	40011400 	.word	0x40011400
 8008a40:	40011800 	.word	0x40011800
 8008a44:	40011c00 	.word	0x40011c00
 8008a48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008a4c:	4b15      	ldr	r3, [pc, #84]	; (8008aa4 <HAL_GPIO_Init+0x324>)
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	43db      	mvns	r3, r3
 8008a54:	4913      	ldr	r1, [pc, #76]	; (8008aa4 <HAL_GPIO_Init+0x324>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d006      	beq.n	8008a74 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <HAL_GPIO_Init+0x324>)
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	490e      	ldr	r1, [pc, #56]	; (8008aa4 <HAL_GPIO_Init+0x324>)
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60cb      	str	r3, [r1, #12]
 8008a72:	e006      	b.n	8008a82 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008a74:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <HAL_GPIO_Init+0x324>)
 8008a76:	68da      	ldr	r2, [r3, #12]
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	4909      	ldr	r1, [pc, #36]	; (8008aa4 <HAL_GPIO_Init+0x324>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	3301      	adds	r3, #1
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f47f ae7e 	bne.w	8008794 <HAL_GPIO_Init+0x14>
  }
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	372c      	adds	r7, #44	; 0x2c
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr
 8008aa4:	40010400 	.word	0x40010400

08008aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	887b      	ldrh	r3, [r7, #2]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	73fb      	strb	r3, [r7, #15]
 8008ac4:	e001      	b.n	8008aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	807b      	strh	r3, [r7, #2]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ae6:	787b      	ldrb	r3, [r7, #1]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008aec:	887a      	ldrh	r2, [r7, #2]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008af2:	e003      	b.n	8008afc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008af4:	887b      	ldrh	r3, [r7, #2]
 8008af6:	041a      	lsls	r2, r3, #16
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	611a      	str	r2, [r3, #16]
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bc80      	pop	{r7}
 8008b04:	4770      	bx	lr
	...

08008b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008b12:	4b08      	ldr	r3, [pc, #32]	; (8008b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b14:	695a      	ldr	r2, [r3, #20]
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d006      	beq.n	8008b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b1e:	4a05      	ldr	r2, [pc, #20]	; (8008b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b20:	88fb      	ldrh	r3, [r7, #6]
 8008b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b24:	88fb      	ldrh	r3, [r7, #6]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 f806 	bl	8008b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	40010400 	.word	0x40010400

08008b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr

08008b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e12b      	b.n	8008db6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d106      	bne.n	8008b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7fc fe4e 	bl	8005814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2224      	movs	r2, #36	; 0x24
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0201 	bic.w	r2, r2, #1
 8008b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008bb0:	f000 ffc6 	bl	8009b40 <HAL_RCC_GetPCLK1Freq>
 8008bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	4a81      	ldr	r2, [pc, #516]	; (8008dc0 <HAL_I2C_Init+0x274>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d807      	bhi.n	8008bd0 <HAL_I2C_Init+0x84>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a80      	ldr	r2, [pc, #512]	; (8008dc4 <HAL_I2C_Init+0x278>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	bf94      	ite	ls
 8008bc8:	2301      	movls	r3, #1
 8008bca:	2300      	movhi	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	e006      	b.n	8008bde <HAL_I2C_Init+0x92>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4a7d      	ldr	r2, [pc, #500]	; (8008dc8 <HAL_I2C_Init+0x27c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	bf94      	ite	ls
 8008bd8:	2301      	movls	r3, #1
 8008bda:	2300      	movhi	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e0e7      	b.n	8008db6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4a78      	ldr	r2, [pc, #480]	; (8008dcc <HAL_I2C_Init+0x280>)
 8008bea:	fba2 2303 	umull	r2, r3, r2, r3
 8008bee:	0c9b      	lsrs	r3, r3, #18
 8008bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	4a6a      	ldr	r2, [pc, #424]	; (8008dc0 <HAL_I2C_Init+0x274>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d802      	bhi.n	8008c20 <HAL_I2C_Init+0xd4>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	e009      	b.n	8008c34 <HAL_I2C_Init+0xe8>
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
 8008c2a:	4a69      	ldr	r2, [pc, #420]	; (8008dd0 <HAL_I2C_Init+0x284>)
 8008c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c30:	099b      	lsrs	r3, r3, #6
 8008c32:	3301      	adds	r3, #1
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	495c      	ldr	r1, [pc, #368]	; (8008dc0 <HAL_I2C_Init+0x274>)
 8008c50:	428b      	cmp	r3, r1
 8008c52:	d819      	bhi.n	8008c88 <HAL_I2C_Init+0x13c>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	1e59      	subs	r1, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c62:	1c59      	adds	r1, r3, #1
 8008c64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c68:	400b      	ands	r3, r1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <HAL_I2C_Init+0x138>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1e59      	subs	r1, r3, #1
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c82:	e051      	b.n	8008d28 <HAL_I2C_Init+0x1dc>
 8008c84:	2304      	movs	r3, #4
 8008c86:	e04f      	b.n	8008d28 <HAL_I2C_Init+0x1dc>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d111      	bne.n	8008cb4 <HAL_I2C_Init+0x168>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	1e58      	subs	r0, r3, #1
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6859      	ldr	r1, [r3, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	440b      	add	r3, r1
 8008c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	bf0c      	ite	eq
 8008cac:	2301      	moveq	r3, #1
 8008cae:	2300      	movne	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	e012      	b.n	8008cda <HAL_I2C_Init+0x18e>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	1e58      	subs	r0, r3, #1
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6859      	ldr	r1, [r3, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	440b      	add	r3, r1
 8008cc2:	0099      	lsls	r1, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cca:	3301      	adds	r3, #1
 8008ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bf0c      	ite	eq
 8008cd4:	2301      	moveq	r3, #1
 8008cd6:	2300      	movne	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <HAL_I2C_Init+0x196>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e022      	b.n	8008d28 <HAL_I2C_Init+0x1dc>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10e      	bne.n	8008d08 <HAL_I2C_Init+0x1bc>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	1e58      	subs	r0, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6859      	ldr	r1, [r3, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	440b      	add	r3, r1
 8008cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d06:	e00f      	b.n	8008d28 <HAL_I2C_Init+0x1dc>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	1e58      	subs	r0, r3, #1
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6859      	ldr	r1, [r3, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	0099      	lsls	r1, r3, #2
 8008d18:	440b      	add	r3, r1
 8008d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d1e:	3301      	adds	r3, #1
 8008d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	6809      	ldr	r1, [r1, #0]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69da      	ldr	r2, [r3, #28]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6911      	ldr	r1, [r2, #16]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	68d2      	ldr	r2, [r2, #12]
 8008d62:	4311      	orrs	r1, r2
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	6812      	ldr	r2, [r2, #0]
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	695a      	ldr	r2, [r3, #20]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	431a      	orrs	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	000186a0 	.word	0x000186a0
 8008dc4:	001e847f 	.word	0x001e847f
 8008dc8:	003d08ff 	.word	0x003d08ff
 8008dcc:	431bde83 	.word	0x431bde83
 8008dd0:	10624dd3 	.word	0x10624dd3

08008dd4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e0d2      	b.n	8008f8c <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7fc fd4a 	bl	8005894 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69db      	ldr	r3, [r3, #28]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e16:	f023 030f 	bic.w	r3, r3, #15
 8008e1a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2202      	movs	r2, #2
 8008e22:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d073      	beq.n	8008f14 <HAL_I2S_Init+0x140>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d102      	bne.n	8008e3a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008e34:	2310      	movs	r3, #16
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e001      	b.n	8008e3e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008e3a:	2320      	movs	r3, #32
 8008e3c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	d802      	bhi.n	8008e4c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
    if (hi2s->Instance == SPI2)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a50      	ldr	r2, [pc, #320]	; (8008f94 <HAL_I2S_Init+0x1c0>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d104      	bne.n	8008e60 <HAL_I2S_Init+0x8c>
    {
      /* Get the source clock value: based on SPI2 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 8008e56:	2004      	movs	r0, #4
 8008e58:	f000 ff6e 	bl	8009d38 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	e00c      	b.n	8008e7a <HAL_I2S_Init+0xa6>
    }
    else if (hi2s->Instance == SPI3)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a4c      	ldr	r2, [pc, #304]	; (8008f98 <HAL_I2S_Init+0x1c4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d104      	bne.n	8008e74 <HAL_I2S_Init+0xa0>
    {
      /* Get the source clock value: based on SPI3 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S3);
 8008e6a:	2008      	movs	r0, #8
 8008e6c:	f000 ff64 	bl	8009d38 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e70:	60f8      	str	r0, [r7, #12]
 8008e72:	e002      	b.n	8008e7a <HAL_I2S_Init+0xa6>
    }
    else
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 8008e74:	f000 fdfc 	bl	8009a70 <HAL_RCC_GetSysClockFreq>
 8008e78:	60f8      	str	r0, [r7, #12]
    }
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e82:	d125      	bne.n	8008ed0 <HAL_I2S_Init+0xfc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d010      	beq.n	8008eae <HAL_I2S_Init+0xda>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea8:	3305      	adds	r3, #5
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	e01f      	b.n	8008eee <HAL_I2S_Init+0x11a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eca:	3305      	adds	r3, #5
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	e00e      	b.n	8008eee <HAL_I2S_Init+0x11a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ed8:	4613      	mov	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	005b      	lsls	r3, r3, #1
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eea:	3305      	adds	r3, #5
 8008eec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	4a2a      	ldr	r2, [pc, #168]	; (8008f9c <HAL_I2S_Init+0x1c8>)
 8008ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef6:	08db      	lsrs	r3, r3, #3
 8008ef8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	085b      	lsrs	r3, r3, #1
 8008f0a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	021b      	lsls	r3, r3, #8
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	e003      	b.n	8008f1c <HAL_I2S_Init+0x148>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008f14:	2302      	movs	r3, #2
 8008f16:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d902      	bls.n	8008f28 <HAL_I2S_Init+0x154>
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	2bff      	cmp	r3, #255	; 0xff
 8008f26:	d907      	bls.n	8008f38 <HAL_I2S_Init+0x164>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	f043 0210 	orr.w	r2, r3, #16
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e029      	b.n	8008f8c <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691a      	ldr	r2, [r3, #16]
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	ea42 0103 	orr.w	r1, r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008f56:	f023 030f 	bic.w	r3, r3, #15
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6851      	ldr	r1, [r2, #4]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6892      	ldr	r2, [r2, #8]
 8008f62:	4311      	orrs	r1, r2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	68d2      	ldr	r2, [r2, #12]
 8008f68:	4311      	orrs	r1, r2
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	6992      	ldr	r2, [r2, #24]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	431a      	orrs	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f7a:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3720      	adds	r7, #32
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	40003800 	.word	0x40003800
 8008f98:	40003c00 	.word	0x40003c00
 8008f9c:	cccccccd 	.word	0xcccccccd

08008fa0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	4613      	mov	r3, r2
 8008fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <HAL_I2S_Transmit_DMA+0x1a>
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e08e      	b.n	80090dc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d101      	bne.n	8008fce <HAL_I2S_Transmit_DMA+0x2e>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e086      	b.n	80090dc <HAL_I2S_Transmit_DMA+0x13c>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d005      	beq.n	8008fee <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8008fea:	2302      	movs	r3, #2
 8008fec:	e076      	b.n	80090dc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	f003 0307 	and.w	r3, r3, #7
 800900c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d002      	beq.n	800901a <HAL_I2S_Transmit_DMA+0x7a>
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2b05      	cmp	r3, #5
 8009018:	d10a      	bne.n	8009030 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	845a      	strh	r2, [r3, #34]	; 0x22
 800902e:	e005      	b.n	800903c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	88fa      	ldrh	r2, [r7, #6]
 8009034:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	88fa      	ldrh	r2, [r7, #6]
 800903a:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	4a28      	ldr	r2, [pc, #160]	; (80090e4 <HAL_I2S_Transmit_DMA+0x144>)
 8009042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	4a27      	ldr	r2, [pc, #156]	; (80090e8 <HAL_I2S_Transmit_DMA+0x148>)
 800904a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	4a26      	ldr	r2, [pc, #152]	; (80090ec <HAL_I2S_Transmit_DMA+0x14c>)
 8009052:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800905c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009064:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	8c1b      	ldrh	r3, [r3, #32]
 800906a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800906c:	f7ff f884 	bl	8008178 <HAL_DMA_Start_IT>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00f      	beq.n	8009096 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907a:	f043 0208 	orr.w	r2, r3, #8
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    __HAL_UNLOCK(hi2s);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e022      	b.n	80090dc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d107      	bne.n	80090b4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69da      	ldr	r2, [r3, #28]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090b2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d107      	bne.n	80090d2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0202 	orr.w	r2, r2, #2
 80090d0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	080092bd 	.word	0x080092bd
 80090e8:	0800927b 	.word	0x0800927b
 80090ec:	080092d9 	.word	0x080092d9

080090f0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009104:	d003      	beq.n	800910e <HAL_I2S_DMAStop+0x1e>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d155      	bne.n	80091ba <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00f      	beq.n	8009136 <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff f88b 	bl	8008236 <HAL_DMA_Abort>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	f043 0208 	orr.w	r2, r3, #8
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	639a      	str	r2, [r3, #56]	; 0x38
        errorcode = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8009136:	2364      	movs	r3, #100	; 0x64
 8009138:	2201      	movs	r2, #1
 800913a:	2102      	movs	r1, #2
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f8f1 	bl	8009324 <I2S_WaitFlagStateUntilTimeout>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	f043 0201 	orr.w	r2, r3, #1
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      errorcode   = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8009160:	2364      	movs	r3, #100	; 0x64
 8009162:	2200      	movs	r2, #0
 8009164:	2180      	movs	r1, #128	; 0x80
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f8dc 	bl	8009324 <I2S_WaitFlagStateUntilTimeout>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00b      	beq.n	800918a <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009176:	f043 0201 	orr.w	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      errorcode   = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69da      	ldr	r2, [r3, #28]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009198:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800919a:	2300      	movs	r3, #0
 800919c:	613b      	str	r3, [r7, #16]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	613b      	str	r3, [r7, #16]
 80091a6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0202 	bic.w	r2, r2, #2
 80091b6:	605a      	str	r2, [r3, #4]
 80091b8:	e04d      	b.n	8009256 <HAL_I2S_DMAStop+0x166>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091c2:	d004      	beq.n	80091ce <HAL_I2S_DMAStop+0xde>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091cc:	d143      	bne.n	8009256 <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00f      	beq.n	80091f6 <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff f82b 	bl	8008236 <HAL_DMA_Abort>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d007      	beq.n	80091f6 <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ea:	f043 0208 	orr.w	r2, r3, #8
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	639a      	str	r2, [r3, #56]	; 0x38
        errorcode = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69da      	ldr	r2, [r3, #28]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009204:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 0201 	bic.w	r2, r2, #1
 800922a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009234:	d10c      	bne.n	8009250 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	639a      	str	r2, [r3, #56]	; 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      errorcode = HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	75fb      	strb	r3, [r7, #23]
 800924e:	e002      	b.n	8009256 <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return errorcode;
 800925e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	bc80      	pop	{r7}
 8009278:	4770      	bx	lr

0800927a <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10e      	bne.n	80092ae <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0202 	bic.w	r2, r2, #2
 800929e:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f7fd f820 	bl	80062f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80092b4:	bf00      	nop
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7fd f804 	bl	80062d8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80092d0:	bf00      	nop
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f022 0203 	bic.w	r2, r2, #3
 80092f4:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	f043 0208 	orr.w	r2, r3, #8
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7ff ffa6 	bl	8009268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800931c:	bf00      	nop
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	4613      	mov	r3, r2
 8009332:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8009334:	f7fd ff24 	bl	8007180 <HAL_GetTick>
 8009338:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800933a:	e018      	b.n	800936e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009342:	d014      	beq.n	800936e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8009344:	f7fd ff1c 	bl	8007180 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d902      	bls.n	800935a <I2S_WaitFlagStateUntilTimeout+0x36>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d109      	bne.n	800936e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e00f      	b.n	800938e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4013      	ands	r3, r2
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	429a      	cmp	r2, r3
 800937c:	bf0c      	ite	eq
 800937e:	2301      	moveq	r3, #1
 8009380:	2300      	movne	r3, #0
 8009382:	b2db      	uxtb	r3, r3
 8009384:	461a      	mov	r2, r3
 8009386:	79fb      	ldrb	r3, [r7, #7]
 8009388:	429a      	cmp	r2, r3
 800938a:	d1d7      	bne.n	800933c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e272      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 8087 	beq.w	80094c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80093b8:	4b92      	ldr	r3, [pc, #584]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f003 030c 	and.w	r3, r3, #12
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d00c      	beq.n	80093de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80093c4:	4b8f      	ldr	r3, [pc, #572]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f003 030c 	and.w	r3, r3, #12
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d112      	bne.n	80093f6 <HAL_RCC_OscConfig+0x5e>
 80093d0:	4b8c      	ldr	r3, [pc, #560]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093dc:	d10b      	bne.n	80093f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093de:	4b89      	ldr	r3, [pc, #548]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d06c      	beq.n	80094c4 <HAL_RCC_OscConfig+0x12c>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d168      	bne.n	80094c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e24c      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fe:	d106      	bne.n	800940e <HAL_RCC_OscConfig+0x76>
 8009400:	4b80      	ldr	r3, [pc, #512]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a7f      	ldr	r2, [pc, #508]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	e02e      	b.n	800946c <HAL_RCC_OscConfig+0xd4>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10c      	bne.n	8009430 <HAL_RCC_OscConfig+0x98>
 8009416:	4b7b      	ldr	r3, [pc, #492]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a7a      	ldr	r2, [pc, #488]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 800941c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	4b78      	ldr	r3, [pc, #480]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a77      	ldr	r2, [pc, #476]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	e01d      	b.n	800946c <HAL_RCC_OscConfig+0xd4>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009438:	d10c      	bne.n	8009454 <HAL_RCC_OscConfig+0xbc>
 800943a:	4b72      	ldr	r3, [pc, #456]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a71      	ldr	r2, [pc, #452]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	4b6f      	ldr	r3, [pc, #444]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a6e      	ldr	r2, [pc, #440]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 800944c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	e00b      	b.n	800946c <HAL_RCC_OscConfig+0xd4>
 8009454:	4b6b      	ldr	r3, [pc, #428]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a6a      	ldr	r2, [pc, #424]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 800945a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	4b68      	ldr	r3, [pc, #416]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a67      	ldr	r2, [pc, #412]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800946a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d013      	beq.n	800949c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009474:	f7fd fe84 	bl	8007180 <HAL_GetTick>
 8009478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800947a:	e008      	b.n	800948e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800947c:	f7fd fe80 	bl	8007180 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b64      	cmp	r3, #100	; 0x64
 8009488:	d901      	bls.n	800948e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e200      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800948e:	4b5d      	ldr	r3, [pc, #372]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0f0      	beq.n	800947c <HAL_RCC_OscConfig+0xe4>
 800949a:	e014      	b.n	80094c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800949c:	f7fd fe70 	bl	8007180 <HAL_GetTick>
 80094a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094a2:	e008      	b.n	80094b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094a4:	f7fd fe6c 	bl	8007180 <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	2b64      	cmp	r3, #100	; 0x64
 80094b0:	d901      	bls.n	80094b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e1ec      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094b6:	4b53      	ldr	r3, [pc, #332]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1f0      	bne.n	80094a4 <HAL_RCC_OscConfig+0x10c>
 80094c2:	e000      	b.n	80094c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d063      	beq.n	800959a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80094d2:	4b4c      	ldr	r3, [pc, #304]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f003 030c 	and.w	r3, r3, #12
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00b      	beq.n	80094f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80094de:	4b49      	ldr	r3, [pc, #292]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f003 030c 	and.w	r3, r3, #12
 80094e6:	2b08      	cmp	r3, #8
 80094e8:	d11c      	bne.n	8009524 <HAL_RCC_OscConfig+0x18c>
 80094ea:	4b46      	ldr	r3, [pc, #280]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d116      	bne.n	8009524 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094f6:	4b43      	ldr	r3, [pc, #268]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <HAL_RCC_OscConfig+0x176>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d001      	beq.n	800950e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e1c0      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800950e:	4b3d      	ldr	r3, [pc, #244]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4939      	ldr	r1, [pc, #228]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 800951e:	4313      	orrs	r3, r2
 8009520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009522:	e03a      	b.n	800959a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d020      	beq.n	800956e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800952c:	4b36      	ldr	r3, [pc, #216]	; (8009608 <HAL_RCC_OscConfig+0x270>)
 800952e:	2201      	movs	r2, #1
 8009530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009532:	f7fd fe25 	bl	8007180 <HAL_GetTick>
 8009536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009538:	e008      	b.n	800954c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800953a:	f7fd fe21 	bl	8007180 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b02      	cmp	r3, #2
 8009546:	d901      	bls.n	800954c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e1a1      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800954c:	4b2d      	ldr	r3, [pc, #180]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0f0      	beq.n	800953a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009558:	4b2a      	ldr	r3, [pc, #168]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	4927      	ldr	r1, [pc, #156]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009568:	4313      	orrs	r3, r2
 800956a:	600b      	str	r3, [r1, #0]
 800956c:	e015      	b.n	800959a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800956e:	4b26      	ldr	r3, [pc, #152]	; (8009608 <HAL_RCC_OscConfig+0x270>)
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009574:	f7fd fe04 	bl	8007180 <HAL_GetTick>
 8009578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800957a:	e008      	b.n	800958e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800957c:	f7fd fe00 	bl	8007180 <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b02      	cmp	r3, #2
 8009588:	d901      	bls.n	800958e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e180      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800958e:	4b1d      	ldr	r3, [pc, #116]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1f0      	bne.n	800957c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0308 	and.w	r3, r3, #8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d03a      	beq.n	800961c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d019      	beq.n	80095e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095ae:	4b17      	ldr	r3, [pc, #92]	; (800960c <HAL_RCC_OscConfig+0x274>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095b4:	f7fd fde4 	bl	8007180 <HAL_GetTick>
 80095b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095ba:	e008      	b.n	80095ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095bc:	f7fd fde0 	bl	8007180 <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d901      	bls.n	80095ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e160      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095ce:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <HAL_RCC_OscConfig+0x26c>)
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0f0      	beq.n	80095bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80095da:	2001      	movs	r0, #1
 80095dc:	f000 fad8 	bl	8009b90 <RCC_Delay>
 80095e0:	e01c      	b.n	800961c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095e2:	4b0a      	ldr	r3, [pc, #40]	; (800960c <HAL_RCC_OscConfig+0x274>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095e8:	f7fd fdca 	bl	8007180 <HAL_GetTick>
 80095ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095ee:	e00f      	b.n	8009610 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095f0:	f7fd fdc6 	bl	8007180 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d908      	bls.n	8009610 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e146      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
 8009602:	bf00      	nop
 8009604:	40021000 	.word	0x40021000
 8009608:	42420000 	.word	0x42420000
 800960c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009610:	4b92      	ldr	r3, [pc, #584]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e9      	bne.n	80095f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0304 	and.w	r3, r3, #4
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80a6 	beq.w	8009776 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800962a:	2300      	movs	r3, #0
 800962c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800962e:	4b8b      	ldr	r3, [pc, #556]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10d      	bne.n	8009656 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800963a:	4b88      	ldr	r3, [pc, #544]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	4a87      	ldr	r2, [pc, #540]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 8009640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009644:	61d3      	str	r3, [r2, #28]
 8009646:	4b85      	ldr	r3, [pc, #532]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800964e:	60bb      	str	r3, [r7, #8]
 8009650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009652:	2301      	movs	r3, #1
 8009654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009656:	4b82      	ldr	r3, [pc, #520]	; (8009860 <HAL_RCC_OscConfig+0x4c8>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965e:	2b00      	cmp	r3, #0
 8009660:	d118      	bne.n	8009694 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009662:	4b7f      	ldr	r3, [pc, #508]	; (8009860 <HAL_RCC_OscConfig+0x4c8>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a7e      	ldr	r2, [pc, #504]	; (8009860 <HAL_RCC_OscConfig+0x4c8>)
 8009668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800966c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800966e:	f7fd fd87 	bl	8007180 <HAL_GetTick>
 8009672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009674:	e008      	b.n	8009688 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009676:	f7fd fd83 	bl	8007180 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	2b64      	cmp	r3, #100	; 0x64
 8009682:	d901      	bls.n	8009688 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e103      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009688:	4b75      	ldr	r3, [pc, #468]	; (8009860 <HAL_RCC_OscConfig+0x4c8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0f0      	beq.n	8009676 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d106      	bne.n	80096aa <HAL_RCC_OscConfig+0x312>
 800969c:	4b6f      	ldr	r3, [pc, #444]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	4a6e      	ldr	r2, [pc, #440]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096a2:	f043 0301 	orr.w	r3, r3, #1
 80096a6:	6213      	str	r3, [r2, #32]
 80096a8:	e02d      	b.n	8009706 <HAL_RCC_OscConfig+0x36e>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10c      	bne.n	80096cc <HAL_RCC_OscConfig+0x334>
 80096b2:	4b6a      	ldr	r3, [pc, #424]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	4a69      	ldr	r2, [pc, #420]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096b8:	f023 0301 	bic.w	r3, r3, #1
 80096bc:	6213      	str	r3, [r2, #32]
 80096be:	4b67      	ldr	r3, [pc, #412]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	4a66      	ldr	r2, [pc, #408]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096c4:	f023 0304 	bic.w	r3, r3, #4
 80096c8:	6213      	str	r3, [r2, #32]
 80096ca:	e01c      	b.n	8009706 <HAL_RCC_OscConfig+0x36e>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	2b05      	cmp	r3, #5
 80096d2:	d10c      	bne.n	80096ee <HAL_RCC_OscConfig+0x356>
 80096d4:	4b61      	ldr	r3, [pc, #388]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	4a60      	ldr	r2, [pc, #384]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096da:	f043 0304 	orr.w	r3, r3, #4
 80096de:	6213      	str	r3, [r2, #32]
 80096e0:	4b5e      	ldr	r3, [pc, #376]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	4a5d      	ldr	r2, [pc, #372]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096e6:	f043 0301 	orr.w	r3, r3, #1
 80096ea:	6213      	str	r3, [r2, #32]
 80096ec:	e00b      	b.n	8009706 <HAL_RCC_OscConfig+0x36e>
 80096ee:	4b5b      	ldr	r3, [pc, #364]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	4a5a      	ldr	r2, [pc, #360]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096f4:	f023 0301 	bic.w	r3, r3, #1
 80096f8:	6213      	str	r3, [r2, #32]
 80096fa:	4b58      	ldr	r3, [pc, #352]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	4a57      	ldr	r2, [pc, #348]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 8009700:	f023 0304 	bic.w	r3, r3, #4
 8009704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d015      	beq.n	800973a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800970e:	f7fd fd37 	bl	8007180 <HAL_GetTick>
 8009712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009714:	e00a      	b.n	800972c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009716:	f7fd fd33 	bl	8007180 <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	f241 3288 	movw	r2, #5000	; 0x1388
 8009724:	4293      	cmp	r3, r2
 8009726:	d901      	bls.n	800972c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e0b1      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800972c:	4b4b      	ldr	r3, [pc, #300]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0ee      	beq.n	8009716 <HAL_RCC_OscConfig+0x37e>
 8009738:	e014      	b.n	8009764 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800973a:	f7fd fd21 	bl	8007180 <HAL_GetTick>
 800973e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009740:	e00a      	b.n	8009758 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009742:	f7fd fd1d 	bl	8007180 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009750:	4293      	cmp	r3, r2
 8009752:	d901      	bls.n	8009758 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e09b      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009758:	4b40      	ldr	r3, [pc, #256]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 800975a:	6a1b      	ldr	r3, [r3, #32]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1ee      	bne.n	8009742 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d105      	bne.n	8009776 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800976a:	4b3c      	ldr	r3, [pc, #240]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	4a3b      	ldr	r2, [pc, #236]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 8009770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 8087 	beq.w	800988e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009780:	4b36      	ldr	r3, [pc, #216]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	f003 030c 	and.w	r3, r3, #12
 8009788:	2b08      	cmp	r3, #8
 800978a:	d061      	beq.n	8009850 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	2b02      	cmp	r3, #2
 8009792:	d146      	bne.n	8009822 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009794:	4b33      	ldr	r3, [pc, #204]	; (8009864 <HAL_RCC_OscConfig+0x4cc>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800979a:	f7fd fcf1 	bl	8007180 <HAL_GetTick>
 800979e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80097a0:	e008      	b.n	80097b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097a2:	f7fd fced 	bl	8007180 <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d901      	bls.n	80097b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e06d      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80097b4:	4b29      	ldr	r3, [pc, #164]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1f0      	bne.n	80097a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c8:	d108      	bne.n	80097dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80097ca:	4b24      	ldr	r3, [pc, #144]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	4921      	ldr	r1, [pc, #132]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097dc:	4b1f      	ldr	r3, [pc, #124]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a19      	ldr	r1, [r3, #32]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	430b      	orrs	r3, r1
 80097ee:	491b      	ldr	r1, [pc, #108]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 80097f0:	4313      	orrs	r3, r2
 80097f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097f4:	4b1b      	ldr	r3, [pc, #108]	; (8009864 <HAL_RCC_OscConfig+0x4cc>)
 80097f6:	2201      	movs	r2, #1
 80097f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097fa:	f7fd fcc1 	bl	8007180 <HAL_GetTick>
 80097fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009800:	e008      	b.n	8009814 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009802:	f7fd fcbd 	bl	8007180 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b02      	cmp	r3, #2
 800980e:	d901      	bls.n	8009814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e03d      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009814:	4b11      	ldr	r3, [pc, #68]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0f0      	beq.n	8009802 <HAL_RCC_OscConfig+0x46a>
 8009820:	e035      	b.n	800988e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009822:	4b10      	ldr	r3, [pc, #64]	; (8009864 <HAL_RCC_OscConfig+0x4cc>)
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009828:	f7fd fcaa 	bl	8007180 <HAL_GetTick>
 800982c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800982e:	e008      	b.n	8009842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009830:	f7fd fca6 	bl	8007180 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b02      	cmp	r3, #2
 800983c:	d901      	bls.n	8009842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e026      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009842:	4b06      	ldr	r3, [pc, #24]	; (800985c <HAL_RCC_OscConfig+0x4c4>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1f0      	bne.n	8009830 <HAL_RCC_OscConfig+0x498>
 800984e:	e01e      	b.n	800988e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d107      	bne.n	8009868 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e019      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
 800985c:	40021000 	.word	0x40021000
 8009860:	40007000 	.word	0x40007000
 8009864:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009868:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <HAL_RCC_OscConfig+0x500>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	429a      	cmp	r2, r3
 800987a:	d106      	bne.n	800988a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009886:	429a      	cmp	r2, r3
 8009888:	d001      	beq.n	800988e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	40021000 	.word	0x40021000

0800989c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e0d0      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098b0:	4b6a      	ldr	r3, [pc, #424]	; (8009a5c <HAL_RCC_ClockConfig+0x1c0>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0307 	and.w	r3, r3, #7
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d910      	bls.n	80098e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098be:	4b67      	ldr	r3, [pc, #412]	; (8009a5c <HAL_RCC_ClockConfig+0x1c0>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f023 0207 	bic.w	r2, r3, #7
 80098c6:	4965      	ldr	r1, [pc, #404]	; (8009a5c <HAL_RCC_ClockConfig+0x1c0>)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098ce:	4b63      	ldr	r3, [pc, #396]	; (8009a5c <HAL_RCC_ClockConfig+0x1c0>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d001      	beq.n	80098e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e0b8      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d020      	beq.n	800992e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0304 	and.w	r3, r3, #4
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d005      	beq.n	8009904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098f8:	4b59      	ldr	r3, [pc, #356]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4a58      	ldr	r2, [pc, #352]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80098fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009902:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0308 	and.w	r3, r3, #8
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009910:	4b53      	ldr	r3, [pc, #332]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	4a52      	ldr	r2, [pc, #328]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 8009916:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800991a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800991c:	4b50      	ldr	r3, [pc, #320]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	494d      	ldr	r1, [pc, #308]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 800992a:	4313      	orrs	r3, r2
 800992c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d040      	beq.n	80099bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d107      	bne.n	8009952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009942:	4b47      	ldr	r3, [pc, #284]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d115      	bne.n	800997a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e07f      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2b02      	cmp	r3, #2
 8009958:	d107      	bne.n	800996a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800995a:	4b41      	ldr	r3, [pc, #260]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d109      	bne.n	800997a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e073      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800996a:	4b3d      	ldr	r3, [pc, #244]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e06b      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800997a:	4b39      	ldr	r3, [pc, #228]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	f023 0203 	bic.w	r2, r3, #3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	4936      	ldr	r1, [pc, #216]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 8009988:	4313      	orrs	r3, r2
 800998a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800998c:	f7fd fbf8 	bl	8007180 <HAL_GetTick>
 8009990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009992:	e00a      	b.n	80099aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009994:	f7fd fbf4 	bl	8007180 <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d901      	bls.n	80099aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e053      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099aa:	4b2d      	ldr	r3, [pc, #180]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f003 020c 	and.w	r2, r3, #12
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d1eb      	bne.n	8009994 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80099bc:	4b27      	ldr	r3, [pc, #156]	; (8009a5c <HAL_RCC_ClockConfig+0x1c0>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0307 	and.w	r3, r3, #7
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d210      	bcs.n	80099ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ca:	4b24      	ldr	r3, [pc, #144]	; (8009a5c <HAL_RCC_ClockConfig+0x1c0>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f023 0207 	bic.w	r2, r3, #7
 80099d2:	4922      	ldr	r1, [pc, #136]	; (8009a5c <HAL_RCC_ClockConfig+0x1c0>)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099da:	4b20      	ldr	r3, [pc, #128]	; (8009a5c <HAL_RCC_ClockConfig+0x1c0>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d001      	beq.n	80099ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	e032      	b.n	8009a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0304 	and.w	r3, r3, #4
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d008      	beq.n	8009a0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099f8:	4b19      	ldr	r3, [pc, #100]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4916      	ldr	r1, [pc, #88]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0308 	and.w	r3, r3, #8
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d009      	beq.n	8009a2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009a16:	4b12      	ldr	r3, [pc, #72]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	490e      	ldr	r1, [pc, #56]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009a2a:	f000 f821 	bl	8009a70 <HAL_RCC_GetSysClockFreq>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <HAL_RCC_ClockConfig+0x1c4>)
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	091b      	lsrs	r3, r3, #4
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	490a      	ldr	r1, [pc, #40]	; (8009a64 <HAL_RCC_ClockConfig+0x1c8>)
 8009a3c:	5ccb      	ldrb	r3, [r1, r3]
 8009a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a42:	4a09      	ldr	r2, [pc, #36]	; (8009a68 <HAL_RCC_ClockConfig+0x1cc>)
 8009a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <HAL_RCC_ClockConfig+0x1d0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fd fb56 	bl	80070fc <HAL_InitTick>

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	40022000 	.word	0x40022000
 8009a60:	40021000 	.word	0x40021000
 8009a64:	08014a28 	.word	0x08014a28
 8009a68:	20000038 	.word	0x20000038
 8009a6c:	20000070 	.word	0x20000070

08009a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a70:	b490      	push	{r4, r7}
 8009a72:	b08a      	sub	sp, #40	; 0x28
 8009a74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009a76:	4b29      	ldr	r3, [pc, #164]	; (8009b1c <HAL_RCC_GetSysClockFreq+0xac>)
 8009a78:	1d3c      	adds	r4, r7, #4
 8009a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009a80:	f240 2301 	movw	r3, #513	; 0x201
 8009a84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	61fb      	str	r3, [r7, #28]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	627b      	str	r3, [r7, #36]	; 0x24
 8009a92:	2300      	movs	r3, #0
 8009a94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009a9a:	4b21      	ldr	r3, [pc, #132]	; (8009b20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f003 030c 	and.w	r3, r3, #12
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d002      	beq.n	8009ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8009aaa:	2b08      	cmp	r3, #8
 8009aac:	d003      	beq.n	8009ab6 <HAL_RCC_GetSysClockFreq+0x46>
 8009aae:	e02b      	b.n	8009b08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009ab0:	4b1c      	ldr	r3, [pc, #112]	; (8009b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009ab2:	623b      	str	r3, [r7, #32]
      break;
 8009ab4:	e02b      	b.n	8009b0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	0c9b      	lsrs	r3, r3, #18
 8009aba:	f003 030f 	and.w	r3, r3, #15
 8009abe:	3328      	adds	r3, #40	; 0x28
 8009ac0:	443b      	add	r3, r7
 8009ac2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009ac6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d012      	beq.n	8009af8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009ad2:	4b13      	ldr	r3, [pc, #76]	; (8009b20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	0c5b      	lsrs	r3, r3, #17
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	3328      	adds	r3, #40	; 0x28
 8009ade:	443b      	add	r3, r7
 8009ae0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009ae4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	4a0e      	ldr	r2, [pc, #56]	; (8009b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009aea:	fb03 f202 	mul.w	r2, r3, r2
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
 8009af6:	e004      	b.n	8009b02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	4a0b      	ldr	r2, [pc, #44]	; (8009b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009afc:	fb02 f303 	mul.w	r3, r2, r3
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	623b      	str	r3, [r7, #32]
      break;
 8009b06:	e002      	b.n	8009b0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009b08:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009b0a:	623b      	str	r3, [r7, #32]
      break;
 8009b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3728      	adds	r7, #40	; 0x28
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bc90      	pop	{r4, r7}
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	08014210 	.word	0x08014210
 8009b20:	40021000 	.word	0x40021000
 8009b24:	007a1200 	.word	0x007a1200
 8009b28:	003d0900 	.word	0x003d0900

08009b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b30:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8009b32:	681b      	ldr	r3, [r3, #0]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bc80      	pop	{r7}
 8009b3a:	4770      	bx	lr
 8009b3c:	20000038 	.word	0x20000038

08009b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009b44:	f7ff fff2 	bl	8009b2c <HAL_RCC_GetHCLKFreq>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	4903      	ldr	r1, [pc, #12]	; (8009b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b56:	5ccb      	ldrb	r3, [r1, r3]
 8009b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	40021000 	.word	0x40021000
 8009b64:	08014a38 	.word	0x08014a38

08009b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009b6c:	f7ff ffde 	bl	8009b2c <HAL_RCC_GetHCLKFreq>
 8009b70:	4602      	mov	r2, r0
 8009b72:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	0adb      	lsrs	r3, r3, #11
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	4903      	ldr	r1, [pc, #12]	; (8009b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b7e:	5ccb      	ldrb	r3, [r1, r3]
 8009b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	40021000 	.word	0x40021000
 8009b8c:	08014a38 	.word	0x08014a38

08009b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <RCC_Delay+0x34>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a0a      	ldr	r2, [pc, #40]	; (8009bc8 <RCC_Delay+0x38>)
 8009b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba2:	0a5b      	lsrs	r3, r3, #9
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	fb02 f303 	mul.w	r3, r2, r3
 8009baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009bac:	bf00      	nop
  }
  while (Delay --);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1e5a      	subs	r2, r3, #1
 8009bb2:	60fa      	str	r2, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1f9      	bne.n	8009bac <RCC_Delay+0x1c>
}
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr
 8009bc4:	20000038 	.word	0x20000038
 8009bc8:	10624dd3 	.word	0x10624dd3

08009bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	613b      	str	r3, [r7, #16]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d07d      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8009be8:	2300      	movs	r3, #0
 8009bea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bec:	4b4f      	ldr	r3, [pc, #316]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10d      	bne.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bf8:	4b4c      	ldr	r3, [pc, #304]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	4a4b      	ldr	r2, [pc, #300]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c02:	61d3      	str	r3, [r2, #28]
 8009c04:	4b49      	ldr	r3, [pc, #292]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c0c:	60bb      	str	r3, [r7, #8]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c10:	2301      	movs	r3, #1
 8009c12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c14:	4b46      	ldr	r3, [pc, #280]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d118      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c20:	4b43      	ldr	r3, [pc, #268]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a42      	ldr	r2, [pc, #264]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c2c:	f7fd faa8 	bl	8007180 <HAL_GetTick>
 8009c30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c32:	e008      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c34:	f7fd faa4 	bl	8007180 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b64      	cmp	r3, #100	; 0x64
 8009c40:	d901      	bls.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e06d      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c46:	4b3a      	ldr	r3, [pc, #232]	; (8009d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0f0      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009c52:	4b36      	ldr	r3, [pc, #216]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d02e      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d027      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c70:	4b2e      	ldr	r3, [pc, #184]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c7a:	4b2e      	ldr	r3, [pc, #184]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009c80:	4b2c      	ldr	r3, [pc, #176]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009c86:	4a29      	ldr	r2, [pc, #164]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d014      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c96:	f7fd fa73 	bl	8007180 <HAL_GetTick>
 8009c9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c9c:	e00a      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c9e:	f7fd fa6f 	bl	8007180 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d901      	bls.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	e036      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cb4:	4b1d      	ldr	r3, [pc, #116]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	f003 0302 	and.w	r3, r3, #2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0ee      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cc0:	4b1a      	ldr	r3, [pc, #104]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	4917      	ldr	r1, [pc, #92]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d105      	bne.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cd8:	4b14      	ldr	r3, [pc, #80]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	4a13      	ldr	r2, [pc, #76]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ce2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0302 	and.w	r3, r3, #2
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d008      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009cf0:	4b0e      	ldr	r3, [pc, #56]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	490b      	ldr	r1, [pc, #44]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0310 	and.w	r3, r3, #16
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d008      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d0e:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	4904      	ldr	r1, [pc, #16]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	40021000 	.word	0x40021000
 8009d30:	40007000 	.word	0x40007000
 8009d34:	42420440 	.word	0x42420440

08009d38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b08d      	sub	sp, #52	; 0x34
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009d40:	4b6a      	ldr	r3, [pc, #424]	; (8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009d42:	f107 040c 	add.w	r4, r7, #12
 8009d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009d4c:	f240 2301 	movw	r3, #513	; 0x201
 8009d50:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	627b      	str	r3, [r7, #36]	; 0x24
 8009d56:	2300      	movs	r3, #0
 8009d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61fb      	str	r3, [r7, #28]
 8009d62:	2300      	movs	r3, #0
 8009d64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	2b0f      	cmp	r3, #15
 8009d6c:	f200 80b4 	bhi.w	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009d70:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8009d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d76:	bf00      	nop
 8009d78:	08009e57 	.word	0x08009e57
 8009d7c:	08009ebd 	.word	0x08009ebd
 8009d80:	08009ed9 	.word	0x08009ed9
 8009d84:	08009e47 	.word	0x08009e47
 8009d88:	08009ed9 	.word	0x08009ed9
 8009d8c:	08009ed9 	.word	0x08009ed9
 8009d90:	08009ed9 	.word	0x08009ed9
 8009d94:	08009e4f 	.word	0x08009e4f
 8009d98:	08009ed9 	.word	0x08009ed9
 8009d9c:	08009ed9 	.word	0x08009ed9
 8009da0:	08009ed9 	.word	0x08009ed9
 8009da4:	08009ed9 	.word	0x08009ed9
 8009da8:	08009ed9 	.word	0x08009ed9
 8009dac:	08009ed9 	.word	0x08009ed9
 8009db0:	08009ed9 	.word	0x08009ed9
 8009db4:	08009db9 	.word	0x08009db9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8009db8:	4b4d      	ldr	r3, [pc, #308]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009dbe:	4b4c      	ldr	r3, [pc, #304]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 8088 	beq.w	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	0c9b      	lsrs	r3, r3, #18
 8009dd0:	f003 030f 	and.w	r3, r3, #15
 8009dd4:	3330      	adds	r3, #48	; 0x30
 8009dd6:	443b      	add	r3, r7
 8009dd8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009ddc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d017      	beq.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009de8:	4b41      	ldr	r3, [pc, #260]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	0c5b      	lsrs	r3, r3, #17
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	3330      	adds	r3, #48	; 0x30
 8009df4:	443b      	add	r3, r7
 8009df6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009dfa:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00d      	beq.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009e06:	4a3b      	ldr	r2, [pc, #236]	; (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	fb02 f303 	mul.w	r3, r2, r3
 8009e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e16:	e004      	b.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	4a37      	ldr	r2, [pc, #220]	; (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8009e1c:	fb02 f303 	mul.w	r3, r2, r3
 8009e20:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009e22:	4b33      	ldr	r3, [pc, #204]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e2e:	d102      	bne.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8009e34:	e052      	b.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8009e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	4a30      	ldr	r2, [pc, #192]	; (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8009e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e40:	085b      	lsrs	r3, r3, #1
 8009e42:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8009e44:	e04a      	b.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8009e46:	f7ff fe13 	bl	8009a70 <HAL_RCC_GetSysClockFreq>
 8009e4a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009e4c:	e049      	b.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8009e4e:	f7ff fe0f 	bl	8009a70 <HAL_RCC_GetSysClockFreq>
 8009e52:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009e54:	e045      	b.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8009e56:	4b26      	ldr	r3, [pc, #152]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e66:	d108      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	f003 0302 	and.w	r3, r3, #2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8009e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e78:	e01f      	b.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e84:	d109      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8009e86:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8009e92:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e98:	e00f      	b.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ea4:	d11c      	bne.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8009ea6:	4b12      	ldr	r3, [pc, #72]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d016      	beq.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8009eb2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8009eb8:	e012      	b.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8009eba:	e011      	b.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009ebc:	f7ff fe54 	bl	8009b68 <HAL_RCC_GetPCLK2Freq>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	0b9b      	lsrs	r3, r3, #14
 8009ec8:	f003 0303 	and.w	r3, r3, #3
 8009ecc:	3301      	adds	r3, #1
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8009ed6:	e004      	b.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8009ed8:	bf00      	nop
 8009eda:	e002      	b.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8009edc:	bf00      	nop
 8009ede:	e000      	b.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8009ee0:	bf00      	nop
    }
  }
  return (frequency);
 8009ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3734      	adds	r7, #52	; 0x34
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd90      	pop	{r4, r7, pc}
 8009eec:	08014220 	.word	0x08014220
 8009ef0:	40021000 	.word	0x40021000
 8009ef4:	007a1200 	.word	0x007a1200
 8009ef8:	003d0900 	.word	0x003d0900
 8009efc:	aaaaaaab 	.word	0xaaaaaaab

08009f00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e022      	b.n	8009f58 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d105      	bne.n	8009f2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7fb fd21 	bl	800596c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2203      	movs	r2, #3
 8009f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f814 	bl	8009f60 <HAL_SD_InitCard>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e00a      	b.n	8009f58 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f60:	b5b0      	push	{r4, r5, r7, lr}
 8009f62:	b08e      	sub	sp, #56	; 0x38
 8009f64:	af04      	add	r7, sp, #16
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009f74:	2300      	movs	r3, #0
 8009f76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009f7c:	2376      	movs	r3, #118	; 0x76
 8009f7e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681d      	ldr	r5, [r3, #0]
 8009f84:	466c      	mov	r4, sp
 8009f86:	f107 0314 	add.w	r3, r7, #20
 8009f8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f92:	f107 0308 	add.w	r3, r7, #8
 8009f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f002 fb27 	bl	800c5ec <SDIO_Init>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e04c      	b.n	800a04a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009fb0:	4b28      	ldr	r3, [pc, #160]	; (800a054 <HAL_SD_InitCard+0xf4>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f002 fb5c 	bl	800c678 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009fc0:	4b24      	ldr	r3, [pc, #144]	; (800a054 <HAL_SD_InitCard+0xf4>)
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 ff04 	bl	800add4 <SD_PowerON>
 8009fcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00b      	beq.n	8009fec <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e02e      	b.n	800a04a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fe23 	bl	800ac38 <SD_InitCard>
 8009ff2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00b      	beq.n	800a012 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	431a      	orrs	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e01b      	b.n	800a04a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a01a:	4618      	mov	r0, r3
 800a01c:	f002 fbba 	bl	800c794 <SDMMC_CmdBlockLength>
 800a020:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00f      	beq.n	800a048 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a0a      	ldr	r2, [pc, #40]	; (800a058 <HAL_SD_InitCard+0xf8>)
 800a02e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	431a      	orrs	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e000      	b.n	800a04a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3728      	adds	r7, #40	; 0x28
 800a04e:	46bd      	mov	sp, r7
 800a050:	bdb0      	pop	{r4, r5, r7, pc}
 800a052:	bf00      	nop
 800a054:	423000a0 	.word	0x423000a0
 800a058:	004005ff 	.word	0x004005ff

0800a05c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b092      	sub	sp, #72	; 0x48
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a06a:	f7fd f889 	bl	8007180 <HAL_GetTick>
 800a06e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d107      	bne.n	800a08e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a082:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e1bd      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b01      	cmp	r3, #1
 800a098:	f040 81b0 	bne.w	800a3fc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	441a      	add	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d907      	bls.n	800a0c0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e1a4      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2203      	movs	r2, #3
 800a0c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d002      	beq.n	800a0de <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0da:	025b      	lsls	r3, r3, #9
 800a0dc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	025b      	lsls	r3, r3, #9
 800a0e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a0ea:	2390      	movs	r3, #144	; 0x90
 800a0ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f107 0214 	add.w	r2, r7, #20
 800a102:	4611      	mov	r1, r2
 800a104:	4618      	mov	r0, r3
 800a106:	f002 fb1a 	bl	800c73e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d90a      	bls.n	800a126 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2202      	movs	r2, #2
 800a114:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a11c:	4618      	mov	r0, r3
 800a11e:	f002 fb7d 	bl	800c81c <SDMMC_CmdReadMultiBlock>
 800a122:	6478      	str	r0, [r7, #68]	; 0x44
 800a124:	e009      	b.n	800a13a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2201      	movs	r2, #1
 800a12a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a132:	4618      	mov	r0, r3
 800a134:	f002 fb50 	bl	800c7d8 <SDMMC_CmdReadSingleBlock>
 800a138:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a13a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d012      	beq.n	800a166 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a7a      	ldr	r2, [pc, #488]	; (800a330 <HAL_SD_ReadBlocks+0x2d4>)
 800a146:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a14e:	431a      	orrs	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e151      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a16a:	e061      	b.n	800a230 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d03c      	beq.n	800a1f4 <HAL_SD_ReadBlocks+0x198>
 800a17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d039      	beq.n	800a1f4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a180:	2300      	movs	r3, #0
 800a182:	643b      	str	r3, [r7, #64]	; 0x40
 800a184:	e033      	b.n	800a1ee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f002 fa58 	bl	800c640 <SDIO_ReadFIFO>
 800a190:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	b2da      	uxtb	r2, r3
 800a196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a198:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19c:	3301      	adds	r3, #1
 800a19e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	0a1b      	lsrs	r3, r3, #8
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1be:	0c1b      	lsrs	r3, r3, #16
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d4:	0e1b      	lsrs	r3, r3, #24
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1de:	3301      	adds	r3, #1
 800a1e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800a1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f0:	2b07      	cmp	r3, #7
 800a1f2:	d9c8      	bls.n	800a186 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a1f4:	f7fc ffc4 	bl	8007180 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a200:	429a      	cmp	r2, r3
 800a202:	d902      	bls.n	800a20a <HAL_SD_ReadBlocks+0x1ae>
 800a204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a206:	2b00      	cmp	r3, #0
 800a208:	d112      	bne.n	800a230 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a48      	ldr	r2, [pc, #288]	; (800a330 <HAL_SD_ReadBlocks+0x2d4>)
 800a210:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a216:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e0ec      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a236:	f240 332a 	movw	r3, #810	; 0x32a
 800a23a:	4013      	ands	r3, r2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d095      	beq.n	800a16c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d022      	beq.n	800a294 <HAL_SD_ReadBlocks+0x238>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d91f      	bls.n	800a294 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d01b      	beq.n	800a294 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4618      	mov	r0, r3
 800a262:	f002 fb41 	bl	800c8e8 <SDMMC_CmdStopTransfer>
 800a266:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d012      	beq.n	800a294 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a2f      	ldr	r2, [pc, #188]	; (800a330 <HAL_SD_ReadBlocks+0x2d4>)
 800a274:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a27c:	431a      	orrs	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e0ba      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a29a:	f003 0308 	and.w	r3, r3, #8
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d012      	beq.n	800a2c8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a22      	ldr	r2, [pc, #136]	; (800a330 <HAL_SD_ReadBlocks+0x2d4>)
 800a2a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ae:	f043 0208 	orr.w	r2, r3, #8
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e0a0      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d012      	beq.n	800a2fc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a15      	ldr	r2, [pc, #84]	; (800a330 <HAL_SD_ReadBlocks+0x2d4>)
 800a2dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e2:	f043 0202 	orr.w	r2, r3, #2
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e086      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a302:	f003 0320 	and.w	r3, r3, #32
 800a306:	2b00      	cmp	r3, #0
 800a308:	d063      	beq.n	800a3d2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a08      	ldr	r2, [pc, #32]	; (800a330 <HAL_SD_ReadBlocks+0x2d4>)
 800a310:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a316:	f043 0220 	orr.w	r2, r3, #32
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e06c      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
 800a330:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4618      	mov	r0, r3
 800a33a:	f002 f981 	bl	800c640 <SDIO_ReadFIFO>
 800a33e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	b2da      	uxtb	r2, r3
 800a344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a346:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34a:	3301      	adds	r3, #1
 800a34c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800a34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a350:	3b01      	subs	r3, #1
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	0a1b      	lsrs	r3, r3, #8
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	3301      	adds	r3, #1
 800a362:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800a364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a366:	3b01      	subs	r3, #1
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36c:	0c1b      	lsrs	r3, r3, #16
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a372:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a376:	3301      	adds	r3, #1
 800a378:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800a37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37c:	3b01      	subs	r3, #1
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	0e1b      	lsrs	r3, r3, #24
 800a384:	b2da      	uxtb	r2, r3
 800a386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a388:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38c:	3301      	adds	r3, #1
 800a38e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800a390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a392:	3b01      	subs	r3, #1
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a396:	f7fc fef3 	bl	8007180 <HAL_GetTick>
 800a39a:	4602      	mov	r2, r0
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d902      	bls.n	800a3ac <HAL_SD_ReadBlocks+0x350>
 800a3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d112      	bne.n	800a3d2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a18      	ldr	r2, [pc, #96]	; (800a414 <HAL_SD_ReadBlocks+0x3b8>)
 800a3b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e01b      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <HAL_SD_ReadBlocks+0x38a>
 800a3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1a6      	bne.n	800a334 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f240 523a 	movw	r2, #1338	; 0x53a
 800a3ee:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e006      	b.n	800a40a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a400:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
  }
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3748      	adds	r7, #72	; 0x48
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	004005ff 	.word	0x004005ff

0800a418 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b092      	sub	sp, #72	; 0x48
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a426:	f7fc feab 	bl	8007180 <HAL_GetTick>
 800a42a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d107      	bne.n	800a44a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e166      	b.n	800a718 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b01      	cmp	r3, #1
 800a454:	f040 8159 	bne.w	800a70a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a45e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	441a      	add	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a468:	429a      	cmp	r2, r3
 800a46a:	d907      	bls.n	800a47c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a470:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e14d      	b.n	800a718 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2203      	movs	r2, #3
 800a480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2200      	movs	r2, #0
 800a48a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a490:	2b01      	cmp	r3, #1
 800a492:	d002      	beq.n	800a49a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	025b      	lsls	r3, r3, #9
 800a498:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a49a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a49e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	025b      	lsls	r3, r3, #9
 800a4a4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a4a6:	2390      	movs	r3, #144	; 0x90
 800a4a8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f107 0218 	add.w	r2, r7, #24
 800a4be:	4611      	mov	r1, r2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f002 f93c 	bl	800c73e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d90a      	bls.n	800a4e2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2220      	movs	r2, #32
 800a4d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f002 f9e3 	bl	800c8a4 <SDMMC_CmdWriteMultiBlock>
 800a4de:	6478      	str	r0, [r7, #68]	; 0x44
 800a4e0:	e009      	b.n	800a4f6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2210      	movs	r2, #16
 800a4e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f002 f9b6 	bl	800c860 <SDMMC_CmdWriteSingleBlock>
 800a4f4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d012      	beq.n	800a522 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a87      	ldr	r2, [pc, #540]	; (800a720 <HAL_SD_WriteBlocks+0x308>)
 800a502:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a50a:	431a      	orrs	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e0fa      	b.n	800a718 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a526:	e065      	b.n	800a5f4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d040      	beq.n	800a5b8 <HAL_SD_WriteBlocks+0x1a0>
 800a536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d03d      	beq.n	800a5b8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a53c:	2300      	movs	r3, #0
 800a53e:	643b      	str	r3, [r7, #64]	; 0x40
 800a540:	e037      	b.n	800a5b2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54a:	3301      	adds	r3, #1
 800a54c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a550:	3b01      	subs	r3, #1
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	021a      	lsls	r2, r3, #8
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a562:	3301      	adds	r3, #1
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a568:	3b01      	subs	r3, #1
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	041a      	lsls	r2, r3, #16
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	4313      	orrs	r3, r2
 800a576:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57a:	3301      	adds	r3, #1
 800a57c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a580:	3b01      	subs	r3, #1
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	061a      	lsls	r2, r3, #24
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a592:	3301      	adds	r3, #1
 800a594:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800a596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a598:	3b01      	subs	r3, #1
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f107 0214 	add.w	r2, r7, #20
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f002 f856 	bl	800c658 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b4:	2b07      	cmp	r3, #7
 800a5b6:	d9c4      	bls.n	800a542 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a5b8:	f7fc fde2 	bl	8007180 <HAL_GetTick>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d902      	bls.n	800a5ce <HAL_SD_WriteBlocks+0x1b6>
 800a5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d112      	bne.n	800a5f4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a53      	ldr	r2, [pc, #332]	; (800a720 <HAL_SD_WriteBlocks+0x308>)
 800a5d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5dc:	431a      	orrs	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	e091      	b.n	800a718 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5fa:	f240 331a 	movw	r3, #794	; 0x31a
 800a5fe:	4013      	ands	r3, r2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d091      	beq.n	800a528 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d022      	beq.n	800a658 <HAL_SD_WriteBlocks+0x240>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d91f      	bls.n	800a658 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d01b      	beq.n	800a658 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4618      	mov	r0, r3
 800a626:	f002 f95f 	bl	800c8e8 <SDMMC_CmdStopTransfer>
 800a62a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a62c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d012      	beq.n	800a658 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a3a      	ldr	r2, [pc, #232]	; (800a720 <HAL_SD_WriteBlocks+0x308>)
 800a638:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a63e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a640:	431a      	orrs	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e05f      	b.n	800a718 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65e:	f003 0308 	and.w	r3, r3, #8
 800a662:	2b00      	cmp	r3, #0
 800a664:	d012      	beq.n	800a68c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a2d      	ldr	r2, [pc, #180]	; (800a720 <HAL_SD_WriteBlocks+0x308>)
 800a66c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	f043 0208 	orr.w	r2, r3, #8
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e045      	b.n	800a718 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d012      	beq.n	800a6c0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a20      	ldr	r2, [pc, #128]	; (800a720 <HAL_SD_WriteBlocks+0x308>)
 800a6a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	f043 0202 	orr.w	r2, r3, #2
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e02b      	b.n	800a718 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c6:	f003 0310 	and.w	r3, r3, #16
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d012      	beq.n	800a6f4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a13      	ldr	r2, [pc, #76]	; (800a720 <HAL_SD_WriteBlocks+0x308>)
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6da:	f043 0210 	orr.w	r2, r3, #16
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e011      	b.n	800a718 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f240 523a 	movw	r2, #1338	; 0x53a
 800a6fc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	e006      	b.n	800a718 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
  }
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3748      	adds	r7, #72	; 0x48
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	004005ff 	.word	0x004005ff

0800a724 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a732:	0f9b      	lsrs	r3, r3, #30
 800a734:	b2da      	uxtb	r2, r3
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a73e:	0e9b      	lsrs	r3, r3, #26
 800a740:	b2db      	uxtb	r3, r3
 800a742:	f003 030f 	and.w	r3, r3, #15
 800a746:	b2da      	uxtb	r2, r3
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a750:	0e1b      	lsrs	r3, r3, #24
 800a752:	b2db      	uxtb	r3, r3
 800a754:	f003 0303 	and.w	r3, r3, #3
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a762:	0c1b      	lsrs	r3, r3, #16
 800a764:	b2da      	uxtb	r2, r3
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a76e:	0a1b      	lsrs	r3, r3, #8
 800a770:	b2da      	uxtb	r2, r3
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a784:	0d1b      	lsrs	r3, r3, #20
 800a786:	b29a      	uxth	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a790:	0c1b      	lsrs	r3, r3, #16
 800a792:	b2db      	uxtb	r3, r3
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7a2:	0bdb      	lsrs	r3, r3, #15
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b4:	0b9b      	lsrs	r3, r3, #14
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7c6:	0b5b      	lsrs	r3, r3, #13
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7d8:	0b1b      	lsrs	r3, r3, #12
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d163      	bne.n	800a8bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7f8:	009a      	lsls	r2, r3, #2
 800a7fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a7fe:	4013      	ands	r3, r2
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a804:	0f92      	lsrs	r2, r2, #30
 800a806:	431a      	orrs	r2, r3
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a810:	0edb      	lsrs	r3, r3, #27
 800a812:	b2db      	uxtb	r3, r3
 800a814:	f003 0307 	and.w	r3, r3, #7
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a822:	0e1b      	lsrs	r3, r3, #24
 800a824:	b2db      	uxtb	r3, r3
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a834:	0d5b      	lsrs	r3, r3, #21
 800a836:	b2db      	uxtb	r3, r3
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a846:	0c9b      	lsrs	r3, r3, #18
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0307 	and.w	r3, r3, #7
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a858:	0bdb      	lsrs	r3, r3, #15
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	f003 0307 	and.w	r3, r3, #7
 800a860:	b2da      	uxtb	r2, r3
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	7e1b      	ldrb	r3, [r3, #24]
 800a874:	b2db      	uxtb	r3, r3
 800a876:	f003 0307 	and.w	r3, r3, #7
 800a87a:	3302      	adds	r3, #2
 800a87c:	2201      	movs	r2, #1
 800a87e:	fa02 f303 	lsl.w	r3, r2, r3
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a886:	fb03 f202 	mul.w	r2, r3, r2
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	7a1b      	ldrb	r3, [r3, #8]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 030f 	and.w	r3, r3, #15
 800a898:	2201      	movs	r2, #1
 800a89a:	409a      	lsls	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a8a8:	0a52      	lsrs	r2, r2, #9
 800a8aa:	fb03 f202 	mul.w	r2, r3, r2
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8b8:	661a      	str	r2, [r3, #96]	; 0x60
 800a8ba:	e031      	b.n	800a920 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d11d      	bne.n	800a900 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8c8:	041b      	lsls	r3, r3, #16
 800a8ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d2:	0c1b      	lsrs	r3, r3, #16
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	029a      	lsls	r2, r3, #10
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	661a      	str	r2, [r3, #96]	; 0x60
 800a8fe:	e00f      	b.n	800a920 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a58      	ldr	r2, [pc, #352]	; (800aa68 <HAL_SD_GetCardCSD+0x344>)
 800a906:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e09d      	b.n	800aa5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a924:	0b9b      	lsrs	r3, r3, #14
 800a926:	b2db      	uxtb	r3, r3
 800a928:	f003 0301 	and.w	r3, r3, #1
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a936:	09db      	lsrs	r3, r3, #7
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a958:	0fdb      	lsrs	r3, r3, #31
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a964:	0f5b      	lsrs	r3, r3, #29
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 0303 	and.w	r3, r3, #3
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a976:	0e9b      	lsrs	r3, r3, #26
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a988:	0d9b      	lsrs	r3, r3, #22
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f003 030f 	and.w	r3, r3, #15
 800a990:	b2da      	uxtb	r2, r3
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a99a:	0d5b      	lsrs	r3, r3, #21
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b6:	0c1b      	lsrs	r3, r3, #16
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ca:	0bdb      	lsrs	r3, r3, #15
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9de:	0b9b      	lsrs	r3, r3, #14
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	0b5b      	lsrs	r3, r3, #13
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa06:	0b1b      	lsrs	r3, r3, #12
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1a:	0a9b      	lsrs	r3, r3, #10
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	f003 0303 	and.w	r3, r3, #3
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa2e:	0a1b      	lsrs	r3, r3, #8
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa42:	085b      	lsrs	r3, r3, #1
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bc80      	pop	{r7}
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	004005ff 	.word	0x004005ff

0800aa6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bc80      	pop	{r7}
 800aac0:	4770      	bx	lr
	...

0800aac4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aac4:	b5b0      	push	{r4, r5, r7, lr}
 800aac6:	b08e      	sub	sp, #56	; 0x38
 800aac8:	af04      	add	r7, sp, #16
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2203      	movs	r2, #3
 800aad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d02e      	beq.n	800ab42 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaea:	d106      	bne.n	800aafa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	639a      	str	r2, [r3, #56]	; 0x38
 800aaf8:	e029      	b.n	800ab4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab00:	d10a      	bne.n	800ab18 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fa1c 	bl	800af40 <SD_WideBus_Enable>
 800ab08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab0e:	6a3b      	ldr	r3, [r7, #32]
 800ab10:	431a      	orrs	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	639a      	str	r2, [r3, #56]	; 0x38
 800ab16:	e01a      	b.n	800ab4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10a      	bne.n	800ab34 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fa59 	bl	800afd6 <SD_WideBus_Disable>
 800ab24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	639a      	str	r2, [r3, #56]	; 0x38
 800ab32:	e00c      	b.n	800ab4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	639a      	str	r2, [r3, #56]	; 0x38
 800ab40:	e005      	b.n	800ab4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00b      	beq.n	800ab6e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a26      	ldr	r2, [pc, #152]	; (800abf4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ab5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab6c:	e01f      	b.n	800abae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681d      	ldr	r5, [r3, #0]
 800ab94:	466c      	mov	r4, sp
 800ab96:	f107 0314 	add.w	r3, r7, #20
 800ab9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aba2:	f107 0308 	add.w	r3, r7, #8
 800aba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aba8:	4628      	mov	r0, r5
 800abaa:	f001 fd1f 	bl	800c5ec <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 fdec 	bl	800c794 <SDMMC_CmdBlockLength>
 800abbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00c      	beq.n	800abde <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a0a      	ldr	r2, [pc, #40]	; (800abf4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800abca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	431a      	orrs	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800abe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800abea:	4618      	mov	r0, r3
 800abec:	3728      	adds	r7, #40	; 0x28
 800abee:	46bd      	mov	sp, r7
 800abf0:	bdb0      	pop	{r4, r5, r7, pc}
 800abf2:	bf00      	nop
 800abf4:	004005ff 	.word	0x004005ff

0800abf8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ac04:	f107 030c 	add.w	r3, r7, #12
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f970 	bl	800aef0 <SD_SendStatus>
 800ac10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d005      	beq.n	800ac24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	0a5b      	lsrs	r3, r3, #9
 800ac28:	f003 030f 	and.w	r3, r3, #15
 800ac2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ac2e:	693b      	ldr	r3, [r7, #16]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3718      	adds	r7, #24
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac38:	b5b0      	push	{r4, r5, r7, lr}
 800ac3a:	b094      	sub	sp, #80	; 0x50
 800ac3c:	af04      	add	r7, sp, #16
 800ac3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ac40:	2301      	movs	r3, #1
 800ac42:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f001 fd24 	bl	800c696 <SDIO_GetPowerState>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac58:	e0b8      	b.n	800adcc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d02f      	beq.n	800acc2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f001 ff48 	bl	800cafc <SDMMC_CmdSendCID>
 800ac6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <SD_InitCard+0x40>
    {
      return errorstate;
 800ac74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac76:	e0a9      	b.n	800adcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f001 fd4b 	bl	800c71a <SDIO_GetResponse>
 800ac84:	4602      	mov	r2, r0
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2104      	movs	r1, #4
 800ac90:	4618      	mov	r0, r3
 800ac92:	f001 fd42 	bl	800c71a <SDIO_GetResponse>
 800ac96:	4602      	mov	r2, r0
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2108      	movs	r1, #8
 800aca2:	4618      	mov	r0, r3
 800aca4:	f001 fd39 	bl	800c71a <SDIO_GetResponse>
 800aca8:	4602      	mov	r2, r0
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	210c      	movs	r1, #12
 800acb4:	4618      	mov	r0, r3
 800acb6:	f001 fd30 	bl	800c71a <SDIO_GetResponse>
 800acba:	4602      	mov	r2, r0
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d00d      	beq.n	800ace6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f107 020e 	add.w	r2, r7, #14
 800acd2:	4611      	mov	r1, r2
 800acd4:	4618      	mov	r0, r3
 800acd6:	f001 ff4e 	bl	800cb76 <SDMMC_CmdSetRelAdd>
 800acda:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800acdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <SD_InitCard+0xae>
    {
      return errorstate;
 800ace2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace4:	e072      	b.n	800adcc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acea:	2b03      	cmp	r3, #3
 800acec:	d036      	beq.n	800ad5c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800acee:	89fb      	ldrh	r3, [r7, #14]
 800acf0:	461a      	mov	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acfe:	041b      	lsls	r3, r3, #16
 800ad00:	4619      	mov	r1, r3
 800ad02:	4610      	mov	r0, r2
 800ad04:	f001 ff18 	bl	800cb38 <SDMMC_CmdSendCSD>
 800ad08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ad10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad12:	e05b      	b.n	800adcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2100      	movs	r1, #0
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f001 fcfd 	bl	800c71a <SDIO_GetResponse>
 800ad20:	4602      	mov	r2, r0
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2104      	movs	r1, #4
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f001 fcf4 	bl	800c71a <SDIO_GetResponse>
 800ad32:	4602      	mov	r2, r0
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2108      	movs	r1, #8
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f001 fceb 	bl	800c71a <SDIO_GetResponse>
 800ad44:	4602      	mov	r2, r0
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	210c      	movs	r1, #12
 800ad50:	4618      	mov	r0, r3
 800ad52:	f001 fce2 	bl	800c71a <SDIO_GetResponse>
 800ad56:	4602      	mov	r2, r0
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2104      	movs	r1, #4
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 fcd9 	bl	800c71a <SDIO_GetResponse>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	0d1a      	lsrs	r2, r3, #20
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ad70:	f107 0310 	add.w	r3, r7, #16
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7ff fcd4 	bl	800a724 <HAL_SD_GetCardCSD>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad86:	e021      	b.n	800adcc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6819      	ldr	r1, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad90:	041b      	lsls	r3, r3, #16
 800ad92:	2200      	movs	r2, #0
 800ad94:	461c      	mov	r4, r3
 800ad96:	4615      	mov	r5, r2
 800ad98:	4622      	mov	r2, r4
 800ad9a:	462b      	mov	r3, r5
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	f001 fdc5 	bl	800c92c <SDMMC_CmdSelDesel>
 800ada2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ada4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <SD_InitCard+0x176>
  {
    return errorstate;
 800adaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adac:	e00e      	b.n	800adcc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681d      	ldr	r5, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	466c      	mov	r4, sp
 800adb6:	f103 0210 	add.w	r2, r3, #16
 800adba:	ca07      	ldmia	r2, {r0, r1, r2}
 800adbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800adc0:	3304      	adds	r3, #4
 800adc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800adc4:	4628      	mov	r0, r5
 800adc6:	f001 fc11 	bl	800c5ec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3740      	adds	r7, #64	; 0x40
 800add0:	46bd      	mov	sp, r7
 800add2:	bdb0      	pop	{r4, r5, r7, pc}

0800add4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800addc:	2300      	movs	r3, #0
 800adde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ade0:	2300      	movs	r3, #0
 800ade2:	617b      	str	r3, [r7, #20]
 800ade4:	2300      	movs	r3, #0
 800ade6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4618      	mov	r0, r3
 800adee:	f001 fdc0 	bl	800c972 <SDMMC_CmdGoIdleState>
 800adf2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <SD_PowerON+0x2a>
  {
    return errorstate;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	e072      	b.n	800aee4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f001 fdd3 	bl	800c9ae <SDMMC_CmdOperCond>
 800ae08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00d      	beq.n	800ae2c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f001 fda9 	bl	800c972 <SDMMC_CmdGoIdleState>
 800ae20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d004      	beq.n	800ae32 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	e05b      	b.n	800aee4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d137      	bne.n	800aeaa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2100      	movs	r1, #0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 fdd3 	bl	800c9ec <SDMMC_CmdAppCommand>
 800ae46:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d02d      	beq.n	800aeaa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae52:	e047      	b.n	800aee4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2100      	movs	r1, #0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f001 fdc6 	bl	800c9ec <SDMMC_CmdAppCommand>
 800ae60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d001      	beq.n	800ae6c <SD_PowerON+0x98>
    {
      return errorstate;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	e03b      	b.n	800aee4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	491e      	ldr	r1, [pc, #120]	; (800aeec <SD_PowerON+0x118>)
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 fddc 	bl	800ca30 <SDMMC_CmdAppOperCommand>
 800ae78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae84:	e02e      	b.n	800aee4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f001 fc44 	bl	800c71a <SDIO_GetResponse>
 800ae92:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	0fdb      	lsrs	r3, r3, #31
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d101      	bne.n	800aea0 <SD_PowerON+0xcc>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e000      	b.n	800aea2 <SD_PowerON+0xce>
 800aea0:	2300      	movs	r3, #0
 800aea2:	613b      	str	r3, [r7, #16]

    count++;
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	3301      	adds	r3, #1
 800aea8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d802      	bhi.n	800aeba <SD_PowerON+0xe6>
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d0cc      	beq.n	800ae54 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d902      	bls.n	800aeca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aec8:	e00c      	b.n	800aee4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d003      	beq.n	800aedc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	645a      	str	r2, [r3, #68]	; 0x44
 800aeda:	e002      	b.n	800aee2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	c1100000 	.word	0xc1100000

0800aef0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800af00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af04:	e018      	b.n	800af38 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af0e:	041b      	lsls	r3, r3, #16
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f001 fe50 	bl	800cbb8 <SDMMC_CmdSendStatus>
 800af18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <SD_SendStatus+0x34>
  {
    return errorstate;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	e009      	b.n	800af38 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2100      	movs	r1, #0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f001 fbf5 	bl	800c71a <SDIO_GetResponse>
 800af30:	4602      	mov	r2, r0
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800af48:	2300      	movs	r3, #0
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	2300      	movs	r3, #0
 800af4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2100      	movs	r1, #0
 800af56:	4618      	mov	r0, r3
 800af58:	f001 fbdf 	bl	800c71a <SDIO_GetResponse>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af66:	d102      	bne.n	800af6e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af6c:	e02f      	b.n	800afce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800af6e:	f107 030c 	add.w	r3, r7, #12
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f879 	bl	800b06c <SD_FindSCR>
 800af7a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d001      	beq.n	800af86 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	e023      	b.n	800afce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d01c      	beq.n	800afca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af98:	041b      	lsls	r3, r3, #16
 800af9a:	4619      	mov	r1, r3
 800af9c:	4610      	mov	r0, r2
 800af9e:	f001 fd25 	bl	800c9ec <SDMMC_CmdAppCommand>
 800afa2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	e00f      	b.n	800afce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2102      	movs	r1, #2
 800afb4:	4618      	mov	r0, r3
 800afb6:	f001 fd5e 	bl	800ca76 <SDMMC_CmdBusWidth>
 800afba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	e003      	b.n	800afce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800afc6:	2300      	movs	r3, #0
 800afc8:	e001      	b.n	800afce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3718      	adds	r7, #24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b086      	sub	sp, #24
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800afde:	2300      	movs	r3, #0
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	2300      	movs	r3, #0
 800afe4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2100      	movs	r1, #0
 800afec:	4618      	mov	r0, r3
 800afee:	f001 fb94 	bl	800c71a <SDIO_GetResponse>
 800aff2:	4603      	mov	r3, r0
 800aff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aff8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800affc:	d102      	bne.n	800b004 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800affe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b002:	e02f      	b.n	800b064 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b004:	f107 030c 	add.w	r3, r7, #12
 800b008:	4619      	mov	r1, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f82e 	bl	800b06c <SD_FindSCR>
 800b010:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	e023      	b.n	800b064 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d01c      	beq.n	800b060 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b02e:	041b      	lsls	r3, r3, #16
 800b030:	4619      	mov	r1, r3
 800b032:	4610      	mov	r0, r2
 800b034:	f001 fcda 	bl	800c9ec <SDMMC_CmdAppCommand>
 800b038:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	e00f      	b.n	800b064 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2100      	movs	r1, #0
 800b04a:	4618      	mov	r0, r3
 800b04c:	f001 fd13 	bl	800ca76 <SDMMC_CmdBusWidth>
 800b050:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	e003      	b.n	800b064 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b05c:	2300      	movs	r3, #0
 800b05e:	e001      	b.n	800b064 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b060:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b06c:	b590      	push	{r4, r7, lr}
 800b06e:	b08f      	sub	sp, #60	; 0x3c
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b076:	f7fc f883 	bl	8007180 <HAL_GetTick>
 800b07a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b07c:	2300      	movs	r3, #0
 800b07e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b080:	2300      	movs	r3, #0
 800b082:	60bb      	str	r3, [r7, #8]
 800b084:	2300      	movs	r3, #0
 800b086:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2108      	movs	r1, #8
 800b092:	4618      	mov	r0, r3
 800b094:	f001 fb7e 	bl	800c794 <SDMMC_CmdBlockLength>
 800b098:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	e0b2      	b.n	800b20a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ac:	041b      	lsls	r3, r3, #16
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f001 fc9b 	bl	800c9ec <SDMMC_CmdAppCommand>
 800b0b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	e0a3      	b.n	800b20a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b0c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b0c8:	2308      	movs	r3, #8
 800b0ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b0cc:	2330      	movs	r3, #48	; 0x30
 800b0ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f107 0210 	add.w	r2, r7, #16
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 fb29 	bl	800c73e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f001 fce2 	bl	800caba <SDMMC_CmdSendSCR>
 800b0f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d02a      	beq.n	800b154 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	e083      	b.n	800b20a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00f      	beq.n	800b130 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6819      	ldr	r1, [r3, #0]
 800b114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	f107 0208 	add.w	r2, r7, #8
 800b11c:	18d4      	adds	r4, r2, r3
 800b11e:	4608      	mov	r0, r1
 800b120:	f001 fa8e 	bl	800c640 <SDIO_ReadFIFO>
 800b124:	4603      	mov	r3, r0
 800b126:	6023      	str	r3, [r4, #0]
      index++;
 800b128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12a:	3301      	adds	r3, #1
 800b12c:	637b      	str	r3, [r7, #52]	; 0x34
 800b12e:	e006      	b.n	800b13e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d012      	beq.n	800b164 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b13e:	f7fc f81f 	bl	8007180 <HAL_GetTick>
 800b142:	4602      	mov	r2, r0
 800b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b14c:	d102      	bne.n	800b154 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b14e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b152:	e05a      	b.n	800b20a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0cf      	beq.n	800b102 <SD_FindSCR+0x96>
 800b162:	e000      	b.n	800b166 <SD_FindSCR+0xfa>
      break;
 800b164:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b16c:	f003 0308 	and.w	r3, r3, #8
 800b170:	2b00      	cmp	r3, #0
 800b172:	d005      	beq.n	800b180 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2208      	movs	r2, #8
 800b17a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b17c:	2308      	movs	r3, #8
 800b17e:	e044      	b.n	800b20a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b186:	f003 0302 	and.w	r3, r3, #2
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d005      	beq.n	800b19a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2202      	movs	r2, #2
 800b194:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b196:	2302      	movs	r3, #2
 800b198:	e037      	b.n	800b20a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a0:	f003 0320 	and.w	r3, r3, #32
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d005      	beq.n	800b1b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b1b0:	2320      	movs	r3, #32
 800b1b2:	e02a      	b.n	800b20a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b1bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	061a      	lsls	r2, r3, #24
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	021b      	lsls	r3, r3, #8
 800b1c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	0a1b      	lsrs	r3, r3, #8
 800b1d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	0e1b      	lsrs	r3, r3, #24
 800b1da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1de:	601a      	str	r2, [r3, #0]
    scr++;
 800b1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	061a      	lsls	r2, r3, #24
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	021b      	lsls	r3, r3, #8
 800b1ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	0a1b      	lsrs	r3, r3, #8
 800b1f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	0e1b      	lsrs	r3, r3, #24
 800b202:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b206:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	373c      	adds	r7, #60	; 0x3c
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd90      	pop	{r4, r7, pc}

0800b212 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e076      	b.n	800b312 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d108      	bne.n	800b23e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b234:	d009      	beq.n	800b24a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	61da      	str	r2, [r3, #28]
 800b23c:	e005      	b.n	800b24a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d106      	bne.n	800b26a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7fa fbdb 	bl	8005a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2202      	movs	r2, #2
 800b26e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b280:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b292:	431a      	orrs	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b29c:	431a      	orrs	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	f003 0302 	and.w	r3, r3, #2
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ce:	ea42 0103 	orr.w	r1, r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	430a      	orrs	r2, r1
 800b2e0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	699b      	ldr	r3, [r3, #24]
 800b2e6:	0c1a      	lsrs	r2, r3, #16
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f002 0204 	and.w	r2, r2, #4
 800b2f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	69da      	ldr	r2, [r3, #28]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b300:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	4613      	mov	r3, r2
 800b328:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b334:	2b01      	cmp	r3, #1
 800b336:	d101      	bne.n	800b33c <HAL_SPI_Transmit_DMA+0x20>
 800b338:	2302      	movs	r3, #2
 800b33a:	e09b      	b.n	800b474 <HAL_SPI_Transmit_DMA+0x158>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d002      	beq.n	800b356 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b350:	2302      	movs	r3, #2
 800b352:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b354:	e089      	b.n	800b46a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <HAL_SPI_Transmit_DMA+0x46>
 800b35c:	88fb      	ldrh	r3, [r7, #6]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d102      	bne.n	800b368 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b366:	e080      	b.n	800b46a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2203      	movs	r2, #3
 800b36c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	88fa      	ldrh	r2, [r7, #6]
 800b380:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	88fa      	ldrh	r2, [r7, #6]
 800b386:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3ae:	d10f      	bne.n	800b3d0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3d4:	4a29      	ldr	r2, [pc, #164]	; (800b47c <HAL_SPI_Transmit_DMA+0x160>)
 800b3d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3dc:	4a28      	ldr	r2, [pc, #160]	; (800b480 <HAL_SPI_Transmit_DMA+0x164>)
 800b3de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3e4:	4a27      	ldr	r2, [pc, #156]	; (800b484 <HAL_SPI_Transmit_DMA+0x168>)
 800b3e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	330c      	adds	r3, #12
 800b400:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b406:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b408:	f7fc feb6 	bl	8008178 <HAL_DMA_Start_IT>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00c      	beq.n	800b42c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b416:	f043 0210 	orr.w	r2, r3, #16
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2201      	movs	r2, #1
 800b426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b42a:	e01e      	b.n	800b46a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b436:	2b40      	cmp	r3, #64	; 0x40
 800b438:	d007      	beq.n	800b44a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b448:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	685a      	ldr	r2, [r3, #4]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f042 0220 	orr.w	r2, r2, #32
 800b458:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f042 0202 	orr.w	r2, r2, #2
 800b468:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b472:	7dfb      	ldrb	r3, [r7, #23]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	0800b565 	.word	0x0800b565
 800b480:	0800b4bf 	.word	0x0800b4bf
 800b484:	0800b581 	.word	0x0800b581

0800b488 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	bc80      	pop	{r7}
 800b498:	4770      	bx	lr

0800b49a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b083      	sub	sp, #12
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b4a2:	bf00      	nop
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bc80      	pop	{r7}
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bc80      	pop	{r7}
 800b4bc:	4770      	bx	lr

0800b4be <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b086      	sub	sp, #24
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4cc:	f7fb fe58 	bl	8007180 <HAL_GetTick>
 800b4d0:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 0320 	and.w	r3, r3, #32
 800b4dc:	2b20      	cmp	r3, #32
 800b4de:	d03b      	beq.n	800b558 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f022 0220 	bic.w	r2, r2, #32
 800b4ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f022 0202 	bic.w	r2, r2, #2
 800b4fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	2164      	movs	r1, #100	; 0x64
 800b504:	6978      	ldr	r0, [r7, #20]
 800b506:	f000 f8e3 	bl	800b6d0 <SPI_EndRxTxTransaction>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d005      	beq.n	800b51c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b514:	f043 0220 	orr.w	r2, r3, #32
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b524:	2300      	movs	r3, #0
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	60fb      	str	r3, [r7, #12]
 800b538:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	2200      	movs	r2, #0
 800b53e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b550:	6978      	ldr	r0, [r7, #20]
 800b552:	f7ff ffab 	bl	800b4ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b556:	e002      	b.n	800b55e <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b558:	6978      	ldr	r0, [r7, #20]
 800b55a:	f7ff ff95 	bl	800b488 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b570:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7ff ff91 	bl	800b49a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b578:	bf00      	nop
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f022 0203 	bic.w	r2, r2, #3
 800b59c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5a2:	f043 0210 	orr.w	r2, r3, #16
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff ff7a 	bl	800b4ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b5b8:	bf00      	nop
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	603b      	str	r3, [r7, #0]
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b5d0:	f7fb fdd6 	bl	8007180 <HAL_GetTick>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d8:	1a9b      	subs	r3, r3, r2
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	4413      	add	r3, r2
 800b5de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b5e0:	f7fb fdce 	bl	8007180 <HAL_GetTick>
 800b5e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b5e6:	4b39      	ldr	r3, [pc, #228]	; (800b6cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	015b      	lsls	r3, r3, #5
 800b5ec:	0d1b      	lsrs	r3, r3, #20
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	fb02 f303 	mul.w	r3, r2, r3
 800b5f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b5f6:	e054      	b.n	800b6a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5fe:	d050      	beq.n	800b6a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b600:	f7fb fdbe 	bl	8007180 <HAL_GetTick>
 800b604:	4602      	mov	r2, r0
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	69fa      	ldr	r2, [r7, #28]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d902      	bls.n	800b616 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d13d      	bne.n	800b692 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b624:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b62e:	d111      	bne.n	800b654 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b638:	d004      	beq.n	800b644 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b642:	d107      	bne.n	800b654 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b652:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b65c:	d10f      	bne.n	800b67e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b67c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e017      	b.n	800b6c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689a      	ldr	r2, [r3, #8]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	bf0c      	ite	eq
 800b6b2:	2301      	moveq	r3, #1
 800b6b4:	2300      	movne	r3, #0
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	79fb      	ldrb	r3, [r7, #7]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d19b      	bne.n	800b5f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3720      	adds	r7, #32
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20000038 	.word	0x20000038

0800b6d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af02      	add	r7, sp, #8
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2180      	movs	r1, #128	; 0x80
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f7ff ff6a 	bl	800b5c0 <SPI_WaitFlagStateUntilTimeout>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d007      	beq.n	800b702 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f6:	f043 0220 	orr.w	r2, r3, #32
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e000      	b.n	800b704 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d004      	beq.n	800b728 <HAL_SRAM_Init+0x1c>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	699b      	ldr	r3, [r3, #24]
 800b722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b726:	d101      	bne.n	800b72c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	e038      	b.n	800b79e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b00      	cmp	r3, #0
 800b736:	d106      	bne.n	800b746 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f7fa fab1 	bl	8005ca8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3308      	adds	r3, #8
 800b74e:	4619      	mov	r1, r3
 800b750:	4610      	mov	r0, r2
 800b752:	f000 fe75 	bl	800c440 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	461a      	mov	r2, r3
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	f000 fed7 	bl	800c514 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6858      	ldr	r0, [r3, #4]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	689a      	ldr	r2, [r3, #8]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	f000 ff02 	bl	800c57c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	6892      	ldr	r2, [r2, #8]
 800b780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	6892      	ldr	r2, [r2, #8]
 800b78c:	f041 0101 	orr.w	r1, r1, #1
 800b790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e041      	b.n	800b83c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7fa f98f 	bl	8005af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	f000 fad5 	bl	800bd94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b01      	cmp	r3, #1
 800b856:	d001      	beq.n	800b85c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	e03c      	b.n	800b8d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2202      	movs	r2, #2
 800b860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a1d      	ldr	r2, [pc, #116]	; (800b8e0 <HAL_TIM_Base_Start+0x9c>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d018      	beq.n	800b8a0 <HAL_TIM_Base_Start+0x5c>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a1c      	ldr	r2, [pc, #112]	; (800b8e4 <HAL_TIM_Base_Start+0xa0>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d013      	beq.n	800b8a0 <HAL_TIM_Base_Start+0x5c>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b880:	d00e      	beq.n	800b8a0 <HAL_TIM_Base_Start+0x5c>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a18      	ldr	r2, [pc, #96]	; (800b8e8 <HAL_TIM_Base_Start+0xa4>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d009      	beq.n	800b8a0 <HAL_TIM_Base_Start+0x5c>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a16      	ldr	r2, [pc, #88]	; (800b8ec <HAL_TIM_Base_Start+0xa8>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d004      	beq.n	800b8a0 <HAL_TIM_Base_Start+0x5c>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a15      	ldr	r2, [pc, #84]	; (800b8f0 <HAL_TIM_Base_Start+0xac>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d111      	bne.n	800b8c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f003 0307 	and.w	r3, r3, #7
 800b8aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b06      	cmp	r3, #6
 800b8b0:	d010      	beq.n	800b8d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f042 0201 	orr.w	r2, r2, #1
 800b8c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8c2:	e007      	b.n	800b8d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f042 0201 	orr.w	r2, r2, #1
 800b8d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bc80      	pop	{r7}
 800b8de:	4770      	bx	lr
 800b8e0:	40012c00 	.word	0x40012c00
 800b8e4:	40013400 	.word	0x40013400
 800b8e8:	40000400 	.word	0x40000400
 800b8ec:	40000800 	.word	0x40000800
 800b8f0:	40000c00 	.word	0x40000c00

0800b8f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b01      	cmp	r3, #1
 800b906:	d001      	beq.n	800b90c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	e044      	b.n	800b996 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2202      	movs	r2, #2
 800b910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68da      	ldr	r2, [r3, #12]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f042 0201 	orr.w	r2, r2, #1
 800b922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a1d      	ldr	r2, [pc, #116]	; (800b9a0 <HAL_TIM_Base_Start_IT+0xac>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d018      	beq.n	800b960 <HAL_TIM_Base_Start_IT+0x6c>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a1c      	ldr	r2, [pc, #112]	; (800b9a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d013      	beq.n	800b960 <HAL_TIM_Base_Start_IT+0x6c>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b940:	d00e      	beq.n	800b960 <HAL_TIM_Base_Start_IT+0x6c>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a18      	ldr	r2, [pc, #96]	; (800b9a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d009      	beq.n	800b960 <HAL_TIM_Base_Start_IT+0x6c>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a16      	ldr	r2, [pc, #88]	; (800b9ac <HAL_TIM_Base_Start_IT+0xb8>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d004      	beq.n	800b960 <HAL_TIM_Base_Start_IT+0x6c>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a15      	ldr	r2, [pc, #84]	; (800b9b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d111      	bne.n	800b984 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b06      	cmp	r3, #6
 800b970:	d010      	beq.n	800b994 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f042 0201 	orr.w	r2, r2, #1
 800b980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b982:	e007      	b.n	800b994 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f042 0201 	orr.w	r2, r2, #1
 800b992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bc80      	pop	{r7}
 800b99e:	4770      	bx	lr
 800b9a0:	40012c00 	.word	0x40012c00
 800b9a4:	40013400 	.word	0x40013400
 800b9a8:	40000400 	.word	0x40000400
 800b9ac:	40000800 	.word	0x40000800
 800b9b0:	40000c00 	.word	0x40000c00

0800b9b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	f003 0302 	and.w	r3, r3, #2
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d122      	bne.n	800ba10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	f003 0302 	and.w	r3, r3, #2
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d11b      	bne.n	800ba10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f06f 0202 	mvn.w	r2, #2
 800b9e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d003      	beq.n	800b9fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f9b1 	bl	800bd5e <HAL_TIM_IC_CaptureCallback>
 800b9fc:	e005      	b.n	800ba0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f9a4 	bl	800bd4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f9b3 	bl	800bd70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	691b      	ldr	r3, [r3, #16]
 800ba16:	f003 0304 	and.w	r3, r3, #4
 800ba1a:	2b04      	cmp	r3, #4
 800ba1c:	d122      	bne.n	800ba64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d11b      	bne.n	800ba64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f06f 0204 	mvn.w	r2, #4
 800ba34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2202      	movs	r2, #2
 800ba3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d003      	beq.n	800ba52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f987 	bl	800bd5e <HAL_TIM_IC_CaptureCallback>
 800ba50:	e005      	b.n	800ba5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f97a 	bl	800bd4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f989 	bl	800bd70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	f003 0308 	and.w	r3, r3, #8
 800ba6e:	2b08      	cmp	r3, #8
 800ba70:	d122      	bne.n	800bab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	f003 0308 	and.w	r3, r3, #8
 800ba7c:	2b08      	cmp	r3, #8
 800ba7e:	d11b      	bne.n	800bab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f06f 0208 	mvn.w	r2, #8
 800ba88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2204      	movs	r2, #4
 800ba8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	69db      	ldr	r3, [r3, #28]
 800ba96:	f003 0303 	and.w	r3, r3, #3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f95d 	bl	800bd5e <HAL_TIM_IC_CaptureCallback>
 800baa4:	e005      	b.n	800bab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 f950 	bl	800bd4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 f95f 	bl	800bd70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	f003 0310 	and.w	r3, r3, #16
 800bac2:	2b10      	cmp	r3, #16
 800bac4:	d122      	bne.n	800bb0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	f003 0310 	and.w	r3, r3, #16
 800bad0:	2b10      	cmp	r3, #16
 800bad2:	d11b      	bne.n	800bb0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f06f 0210 	mvn.w	r2, #16
 800badc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2208      	movs	r2, #8
 800bae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d003      	beq.n	800bafa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f933 	bl	800bd5e <HAL_TIM_IC_CaptureCallback>
 800baf8:	e005      	b.n	800bb06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f926 	bl	800bd4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f935 	bl	800bd70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d10e      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	f003 0301 	and.w	r3, r3, #1
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d107      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f06f 0201 	mvn.w	r2, #1
 800bb30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7f8 fc22 	bl	800437c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d10e      	bne.n	800bb64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb50:	2b80      	cmp	r3, #128	; 0x80
 800bb52:	d107      	bne.n	800bb64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fa9d 	bl	800c09e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6e:	2b40      	cmp	r3, #64	; 0x40
 800bb70:	d10e      	bne.n	800bb90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7c:	2b40      	cmp	r3, #64	; 0x40
 800bb7e:	d107      	bne.n	800bb90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f8f9 	bl	800bd82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	f003 0320 	and.w	r3, r3, #32
 800bb9a:	2b20      	cmp	r3, #32
 800bb9c:	d10e      	bne.n	800bbbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f003 0320 	and.w	r3, r3, #32
 800bba8:	2b20      	cmp	r3, #32
 800bbaa:	d107      	bne.n	800bbbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f06f 0220 	mvn.w	r2, #32
 800bbb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fa68 	bl	800c08c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbbc:	bf00      	nop
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d101      	bne.n	800bbdc <HAL_TIM_ConfigClockSource+0x18>
 800bbd8:	2302      	movs	r3, #2
 800bbda:	e0b3      	b.n	800bd44 <HAL_TIM_ConfigClockSource+0x180>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bbfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc14:	d03e      	beq.n	800bc94 <HAL_TIM_ConfigClockSource+0xd0>
 800bc16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc1a:	f200 8087 	bhi.w	800bd2c <HAL_TIM_ConfigClockSource+0x168>
 800bc1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc22:	f000 8085 	beq.w	800bd30 <HAL_TIM_ConfigClockSource+0x16c>
 800bc26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc2a:	d87f      	bhi.n	800bd2c <HAL_TIM_ConfigClockSource+0x168>
 800bc2c:	2b70      	cmp	r3, #112	; 0x70
 800bc2e:	d01a      	beq.n	800bc66 <HAL_TIM_ConfigClockSource+0xa2>
 800bc30:	2b70      	cmp	r3, #112	; 0x70
 800bc32:	d87b      	bhi.n	800bd2c <HAL_TIM_ConfigClockSource+0x168>
 800bc34:	2b60      	cmp	r3, #96	; 0x60
 800bc36:	d050      	beq.n	800bcda <HAL_TIM_ConfigClockSource+0x116>
 800bc38:	2b60      	cmp	r3, #96	; 0x60
 800bc3a:	d877      	bhi.n	800bd2c <HAL_TIM_ConfigClockSource+0x168>
 800bc3c:	2b50      	cmp	r3, #80	; 0x50
 800bc3e:	d03c      	beq.n	800bcba <HAL_TIM_ConfigClockSource+0xf6>
 800bc40:	2b50      	cmp	r3, #80	; 0x50
 800bc42:	d873      	bhi.n	800bd2c <HAL_TIM_ConfigClockSource+0x168>
 800bc44:	2b40      	cmp	r3, #64	; 0x40
 800bc46:	d058      	beq.n	800bcfa <HAL_TIM_ConfigClockSource+0x136>
 800bc48:	2b40      	cmp	r3, #64	; 0x40
 800bc4a:	d86f      	bhi.n	800bd2c <HAL_TIM_ConfigClockSource+0x168>
 800bc4c:	2b30      	cmp	r3, #48	; 0x30
 800bc4e:	d064      	beq.n	800bd1a <HAL_TIM_ConfigClockSource+0x156>
 800bc50:	2b30      	cmp	r3, #48	; 0x30
 800bc52:	d86b      	bhi.n	800bd2c <HAL_TIM_ConfigClockSource+0x168>
 800bc54:	2b20      	cmp	r3, #32
 800bc56:	d060      	beq.n	800bd1a <HAL_TIM_ConfigClockSource+0x156>
 800bc58:	2b20      	cmp	r3, #32
 800bc5a:	d867      	bhi.n	800bd2c <HAL_TIM_ConfigClockSource+0x168>
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d05c      	beq.n	800bd1a <HAL_TIM_ConfigClockSource+0x156>
 800bc60:	2b10      	cmp	r3, #16
 800bc62:	d05a      	beq.n	800bd1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bc64:	e062      	b.n	800bd2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	6899      	ldr	r1, [r3, #8]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	f000 f97e 	bl	800bf76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	609a      	str	r2, [r3, #8]
      break;
 800bc92:	e04e      	b.n	800bd32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6818      	ldr	r0, [r3, #0]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	6899      	ldr	r1, [r3, #8]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	f000 f967 	bl	800bf76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	689a      	ldr	r2, [r3, #8]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcb6:	609a      	str	r2, [r3, #8]
      break;
 800bcb8:	e03b      	b.n	800bd32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	6859      	ldr	r1, [r3, #4]
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f000 f8de 	bl	800be88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2150      	movs	r1, #80	; 0x50
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 f935 	bl	800bf42 <TIM_ITRx_SetConfig>
      break;
 800bcd8:	e02b      	b.n	800bd32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	6859      	ldr	r1, [r3, #4]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	461a      	mov	r2, r3
 800bce8:	f000 f8fc 	bl	800bee4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2160      	movs	r1, #96	; 0x60
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 f925 	bl	800bf42 <TIM_ITRx_SetConfig>
      break;
 800bcf8:	e01b      	b.n	800bd32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6818      	ldr	r0, [r3, #0]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	6859      	ldr	r1, [r3, #4]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	461a      	mov	r2, r3
 800bd08:	f000 f8be 	bl	800be88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2140      	movs	r1, #64	; 0x40
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 f915 	bl	800bf42 <TIM_ITRx_SetConfig>
      break;
 800bd18:	e00b      	b.n	800bd32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4619      	mov	r1, r3
 800bd24:	4610      	mov	r0, r2
 800bd26:	f000 f90c 	bl	800bf42 <TIM_ITRx_SetConfig>
        break;
 800bd2a:	e002      	b.n	800bd32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bd2c:	bf00      	nop
 800bd2e:	e000      	b.n	800bd32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bd30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bc80      	pop	{r7}
 800bd5c:	4770      	bx	lr

0800bd5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd66:	bf00      	nop
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bc80      	pop	{r7}
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bc80      	pop	{r7}
 800bd80:	4770      	bx	lr

0800bd82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd8a:	bf00      	nop
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bc80      	pop	{r7}
 800bd92:	4770      	bx	lr

0800bd94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a33      	ldr	r2, [pc, #204]	; (800be74 <TIM_Base_SetConfig+0xe0>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d013      	beq.n	800bdd4 <TIM_Base_SetConfig+0x40>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a32      	ldr	r2, [pc, #200]	; (800be78 <TIM_Base_SetConfig+0xe4>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00f      	beq.n	800bdd4 <TIM_Base_SetConfig+0x40>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdba:	d00b      	beq.n	800bdd4 <TIM_Base_SetConfig+0x40>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a2f      	ldr	r2, [pc, #188]	; (800be7c <TIM_Base_SetConfig+0xe8>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d007      	beq.n	800bdd4 <TIM_Base_SetConfig+0x40>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a2e      	ldr	r2, [pc, #184]	; (800be80 <TIM_Base_SetConfig+0xec>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d003      	beq.n	800bdd4 <TIM_Base_SetConfig+0x40>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a2d      	ldr	r2, [pc, #180]	; (800be84 <TIM_Base_SetConfig+0xf0>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d108      	bne.n	800bde6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a22      	ldr	r2, [pc, #136]	; (800be74 <TIM_Base_SetConfig+0xe0>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d013      	beq.n	800be16 <TIM_Base_SetConfig+0x82>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a21      	ldr	r2, [pc, #132]	; (800be78 <TIM_Base_SetConfig+0xe4>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d00f      	beq.n	800be16 <TIM_Base_SetConfig+0x82>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdfc:	d00b      	beq.n	800be16 <TIM_Base_SetConfig+0x82>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a1e      	ldr	r2, [pc, #120]	; (800be7c <TIM_Base_SetConfig+0xe8>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d007      	beq.n	800be16 <TIM_Base_SetConfig+0x82>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a1d      	ldr	r2, [pc, #116]	; (800be80 <TIM_Base_SetConfig+0xec>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d003      	beq.n	800be16 <TIM_Base_SetConfig+0x82>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a1c      	ldr	r2, [pc, #112]	; (800be84 <TIM_Base_SetConfig+0xf0>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d108      	bne.n	800be28 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	4313      	orrs	r3, r2
 800be26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	4313      	orrs	r3, r2
 800be34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a09      	ldr	r2, [pc, #36]	; (800be74 <TIM_Base_SetConfig+0xe0>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d003      	beq.n	800be5c <TIM_Base_SetConfig+0xc8>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a08      	ldr	r2, [pc, #32]	; (800be78 <TIM_Base_SetConfig+0xe4>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d103      	bne.n	800be64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	691a      	ldr	r2, [r3, #16]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	615a      	str	r2, [r3, #20]
}
 800be6a:	bf00      	nop
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	bc80      	pop	{r7}
 800be72:	4770      	bx	lr
 800be74:	40012c00 	.word	0x40012c00
 800be78:	40013400 	.word	0x40013400
 800be7c:	40000400 	.word	0x40000400
 800be80:	40000800 	.word	0x40000800
 800be84:	40000c00 	.word	0x40000c00

0800be88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be88:	b480      	push	{r7}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6a1b      	ldr	r3, [r3, #32]
 800be98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	f023 0201 	bic.w	r2, r3, #1
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800beb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	011b      	lsls	r3, r3, #4
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	4313      	orrs	r3, r2
 800bebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	f023 030a 	bic.w	r3, r3, #10
 800bec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	4313      	orrs	r3, r2
 800becc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	621a      	str	r2, [r3, #32]
}
 800beda:	bf00      	nop
 800bedc:	371c      	adds	r7, #28
 800bede:	46bd      	mov	sp, r7
 800bee0:	bc80      	pop	{r7}
 800bee2:	4770      	bx	lr

0800bee4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b087      	sub	sp, #28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6a1b      	ldr	r3, [r3, #32]
 800bef4:	f023 0210 	bic.w	r2, r3, #16
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	699b      	ldr	r3, [r3, #24]
 800bf00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6a1b      	ldr	r3, [r3, #32]
 800bf06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	031b      	lsls	r3, r3, #12
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bf20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	011b      	lsls	r3, r3, #4
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	621a      	str	r2, [r3, #32]
}
 800bf38:	bf00      	nop
 800bf3a:	371c      	adds	r7, #28
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bc80      	pop	{r7}
 800bf40:	4770      	bx	lr

0800bf42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b085      	sub	sp, #20
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	f043 0307 	orr.w	r3, r3, #7
 800bf64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	609a      	str	r2, [r3, #8]
}
 800bf6c:	bf00      	nop
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bc80      	pop	{r7}
 800bf74:	4770      	bx	lr

0800bf76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b087      	sub	sp, #28
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	60b9      	str	r1, [r7, #8]
 800bf80:	607a      	str	r2, [r7, #4]
 800bf82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	021a      	lsls	r2, r3, #8
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	431a      	orrs	r2, r3
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	697a      	ldr	r2, [r7, #20]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	609a      	str	r2, [r3, #8]
}
 800bfaa:	bf00      	nop
 800bfac:	371c      	adds	r7, #28
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bc80      	pop	{r7}
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d101      	bne.n	800bfcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfc8:	2302      	movs	r3, #2
 800bfca:	e050      	b.n	800c06e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a1b      	ldr	r2, [pc, #108]	; (800c078 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d018      	beq.n	800c042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a19      	ldr	r2, [pc, #100]	; (800c07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d013      	beq.n	800c042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c022:	d00e      	beq.n	800c042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a15      	ldr	r2, [pc, #84]	; (800c080 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d009      	beq.n	800c042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a14      	ldr	r2, [pc, #80]	; (800c084 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d004      	beq.n	800c042 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a12      	ldr	r2, [pc, #72]	; (800c088 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d10c      	bne.n	800c05c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	68ba      	ldr	r2, [r7, #8]
 800c050:	4313      	orrs	r3, r2
 800c052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	bc80      	pop	{r7}
 800c076:	4770      	bx	lr
 800c078:	40012c00 	.word	0x40012c00
 800c07c:	40013400 	.word	0x40013400
 800c080:	40000400 	.word	0x40000400
 800c084:	40000800 	.word	0x40000800
 800c088:	40000c00 	.word	0x40000c00

0800c08c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	bc80      	pop	{r7}
 800c09c:	4770      	bx	lr

0800c09e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0a6:	bf00      	nop
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bc80      	pop	{r7}
 800c0ae:	4770      	bx	lr

0800c0b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d101      	bne.n	800c0c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e03f      	b.n	800c142 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7f9 fd56 	bl	8005b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2224      	movs	r2, #36	; 0x24
 800c0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68da      	ldr	r2, [r3, #12]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f915 	bl	800c324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	691a      	ldr	r2, [r3, #16]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	695a      	ldr	r2, [r3, #20]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68da      	ldr	r2, [r3, #12]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2220      	movs	r2, #32
 800c134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2220      	movs	r2, #32
 800c13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b08a      	sub	sp, #40	; 0x28
 800c14e:	af02      	add	r7, sp, #8
 800c150:	60f8      	str	r0, [r7, #12]
 800c152:	60b9      	str	r1, [r7, #8]
 800c154:	603b      	str	r3, [r7, #0]
 800c156:	4613      	mov	r3, r2
 800c158:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c15a:	2300      	movs	r3, #0
 800c15c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b20      	cmp	r3, #32
 800c168:	f040 808c 	bne.w	800c284 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <HAL_UART_Receive+0x2e>
 800c172:	88fb      	ldrh	r3, [r7, #6]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e084      	b.n	800c286 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c182:	2b01      	cmp	r3, #1
 800c184:	d101      	bne.n	800c18a <HAL_UART_Receive+0x40>
 800c186:	2302      	movs	r3, #2
 800c188:	e07d      	b.n	800c286 <HAL_UART_Receive+0x13c>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2201      	movs	r2, #1
 800c18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2222      	movs	r2, #34	; 0x22
 800c19c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c1a6:	f7fa ffeb 	bl	8007180 <HAL_GetTick>
 800c1aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	88fa      	ldrh	r2, [r7, #6]
 800c1b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	88fa      	ldrh	r2, [r7, #6]
 800c1b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1c0:	d108      	bne.n	800c1d4 <HAL_UART_Receive+0x8a>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d104      	bne.n	800c1d4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	61bb      	str	r3, [r7, #24]
 800c1d2:	e003      	b.n	800c1dc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c1e4:	e043      	b.n	800c26e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2120      	movs	r1, #32
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f000 f84c 	bl	800c28e <UART_WaitOnFlagUntilTimeout>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	e042      	b.n	800c286 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d10c      	bne.n	800c220 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c212:	b29a      	uxth	r2, r3
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	3302      	adds	r3, #2
 800c21c:	61bb      	str	r3, [r7, #24]
 800c21e:	e01f      	b.n	800c260 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c228:	d007      	beq.n	800c23a <HAL_UART_Receive+0xf0>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10a      	bne.n	800c248 <HAL_UART_Receive+0xfe>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	b2da      	uxtb	r2, r3
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	701a      	strb	r2, [r3, #0]
 800c246:	e008      	b.n	800c25a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c254:	b2da      	uxtb	r2, r3
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	3301      	adds	r3, #1
 800c25e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c264:	b29b      	uxth	r3, r3
 800c266:	3b01      	subs	r3, #1
 800c268:	b29a      	uxth	r2, r3
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c272:	b29b      	uxth	r3, r3
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1b6      	bne.n	800c1e6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2220      	movs	r2, #32
 800c27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800c280:	2300      	movs	r3, #0
 800c282:	e000      	b.n	800c286 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800c284:	2302      	movs	r3, #2
  }
}
 800c286:	4618      	mov	r0, r3
 800c288:	3720      	adds	r7, #32
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	60f8      	str	r0, [r7, #12]
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	603b      	str	r3, [r7, #0]
 800c29a:	4613      	mov	r3, r2
 800c29c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c29e:	e02c      	b.n	800c2fa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2a6:	d028      	beq.n	800c2fa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d007      	beq.n	800c2be <UART_WaitOnFlagUntilTimeout+0x30>
 800c2ae:	f7fa ff67 	bl	8007180 <HAL_GetTick>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	69ba      	ldr	r2, [r7, #24]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d21d      	bcs.n	800c2fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	68da      	ldr	r2, [r3, #12]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c2cc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	695a      	ldr	r2, [r3, #20]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f022 0201 	bic.w	r2, r2, #1
 800c2dc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	e00f      	b.n	800c31a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	4013      	ands	r3, r2
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	429a      	cmp	r2, r3
 800c308:	bf0c      	ite	eq
 800c30a:	2301      	moveq	r3, #1
 800c30c:	2300      	movne	r3, #0
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	461a      	mov	r2, r3
 800c312:	79fb      	ldrb	r3, [r7, #7]
 800c314:	429a      	cmp	r2, r3
 800c316:	d0c3      	beq.n	800c2a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
	...

0800c324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	691b      	ldr	r3, [r3, #16]
 800c332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68da      	ldr	r2, [r3, #12]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	430a      	orrs	r2, r1
 800c340:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	689a      	ldr	r2, [r3, #8]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	431a      	orrs	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	695b      	ldr	r3, [r3, #20]
 800c350:	4313      	orrs	r3, r2
 800c352:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c35e:	f023 030c 	bic.w	r3, r3, #12
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	6812      	ldr	r2, [r2, #0]
 800c366:	68b9      	ldr	r1, [r7, #8]
 800c368:	430b      	orrs	r3, r1
 800c36a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	695b      	ldr	r3, [r3, #20]
 800c372:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	699a      	ldr	r2, [r3, #24]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	430a      	orrs	r2, r1
 800c380:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a2c      	ldr	r2, [pc, #176]	; (800c438 <UART_SetConfig+0x114>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d103      	bne.n	800c394 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c38c:	f7fd fbec 	bl	8009b68 <HAL_RCC_GetPCLK2Freq>
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	e002      	b.n	800c39a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c394:	f7fd fbd4 	bl	8009b40 <HAL_RCC_GetPCLK1Freq>
 800c398:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	4613      	mov	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	009a      	lsls	r2, r3, #2
 800c3a4:	441a      	add	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b0:	4a22      	ldr	r2, [pc, #136]	; (800c43c <UART_SetConfig+0x118>)
 800c3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3b6:	095b      	lsrs	r3, r3, #5
 800c3b8:	0119      	lsls	r1, r3, #4
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	4413      	add	r3, r2
 800c3c2:	009a      	lsls	r2, r3, #2
 800c3c4:	441a      	add	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3d0:	4b1a      	ldr	r3, [pc, #104]	; (800c43c <UART_SetConfig+0x118>)
 800c3d2:	fba3 0302 	umull	r0, r3, r3, r2
 800c3d6:	095b      	lsrs	r3, r3, #5
 800c3d8:	2064      	movs	r0, #100	; 0x64
 800c3da:	fb00 f303 	mul.w	r3, r0, r3
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	011b      	lsls	r3, r3, #4
 800c3e2:	3332      	adds	r3, #50	; 0x32
 800c3e4:	4a15      	ldr	r2, [pc, #84]	; (800c43c <UART_SetConfig+0x118>)
 800c3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ea:	095b      	lsrs	r3, r3, #5
 800c3ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3f0:	4419      	add	r1, r3
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	4413      	add	r3, r2
 800c3fa:	009a      	lsls	r2, r3, #2
 800c3fc:	441a      	add	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	fbb2 f2f3 	udiv	r2, r2, r3
 800c408:	4b0c      	ldr	r3, [pc, #48]	; (800c43c <UART_SetConfig+0x118>)
 800c40a:	fba3 0302 	umull	r0, r3, r3, r2
 800c40e:	095b      	lsrs	r3, r3, #5
 800c410:	2064      	movs	r0, #100	; 0x64
 800c412:	fb00 f303 	mul.w	r3, r0, r3
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	011b      	lsls	r3, r3, #4
 800c41a:	3332      	adds	r3, #50	; 0x32
 800c41c:	4a07      	ldr	r2, [pc, #28]	; (800c43c <UART_SetConfig+0x118>)
 800c41e:	fba2 2303 	umull	r2, r3, r2, r3
 800c422:	095b      	lsrs	r3, r3, #5
 800c424:	f003 020f 	and.w	r2, r3, #15
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	440a      	add	r2, r1
 800c42e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	40013800 	.word	0x40013800
 800c43c:	51eb851f 	.word	0x51eb851f

0800c440 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800c440:	b480      	push	{r7}
 800c442:	b087      	sub	sp, #28
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	6812      	ldr	r2, [r2, #0]
 800c458:	f023 0101 	bic.w	r1, r3, #1
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	2b08      	cmp	r3, #8
 800c468:	d102      	bne.n	800c470 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c46a:	2340      	movs	r3, #64	; 0x40
 800c46c:	617b      	str	r3, [r7, #20]
 800c46e:	e001      	b.n	800c474 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800c470:	2300      	movs	r3, #0
 800c472:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800c480:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800c486:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800c48c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800c492:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800c498:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800c49e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800c4a4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800c4aa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800c4b0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	693a      	ldr	r2, [r7, #16]
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800c4ce:	4b10      	ldr	r3, [pc, #64]	; (800c510 <FSMC_NORSRAM_Init+0xd0>)
 800c4d0:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c4d8:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800c4e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	43db      	mvns	r3, r3
 800c4f0:	ea02 0103 	and.w	r1, r2, r3
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	4319      	orrs	r1, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	371c      	adds	r7, #28
 800c508:	46bd      	mov	sp, r7
 800c50a:	bc80      	pop	{r7}
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	0008fb7f 	.word	0x0008fb7f

0800c514 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	1c5a      	adds	r2, r3, #1
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c52a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	011b      	lsls	r3, r3, #4
 800c538:	431a      	orrs	r2, r3
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	021b      	lsls	r3, r3, #8
 800c540:	431a      	orrs	r2, r3
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	041b      	lsls	r3, r3, #16
 800c548:	431a      	orrs	r2, r3
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	691b      	ldr	r3, [r3, #16]
 800c54e:	3b01      	subs	r3, #1
 800c550:	051b      	lsls	r3, r3, #20
 800c552:	431a      	orrs	r2, r3
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	3b02      	subs	r3, #2
 800c55a:	061b      	lsls	r3, r3, #24
 800c55c:	431a      	orrs	r2, r3
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	4313      	orrs	r3, r2
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	3201      	adds	r2, #1
 800c568:	4319      	orrs	r1, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	bc80      	pop	{r7}
 800c57a:	4770      	bx	lr

0800c57c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
 800c588:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c590:	d11d      	bne.n	800c5ce <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c59a:	4b13      	ldr	r3, [pc, #76]	; (800c5e8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800c59c:	4013      	ands	r3, r2
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	6811      	ldr	r1, [r2, #0]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	6852      	ldr	r2, [r2, #4]
 800c5a6:	0112      	lsls	r2, r2, #4
 800c5a8:	4311      	orrs	r1, r2
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	6892      	ldr	r2, [r2, #8]
 800c5ae:	0212      	lsls	r2, r2, #8
 800c5b0:	4311      	orrs	r1, r2
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	6992      	ldr	r2, [r2, #24]
 800c5b6:	4311      	orrs	r1, r2
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	68d2      	ldr	r2, [r2, #12]
 800c5bc:	0412      	lsls	r2, r2, #16
 800c5be:	430a      	orrs	r2, r1
 800c5c0:	ea43 0102 	orr.w	r1, r3, r2
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c5cc:	e005      	b.n	800c5da <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c5d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bc80      	pop	{r7}
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	cff00000 	.word	0xcff00000

0800c5ec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	b480      	push	{r7}
 800c5f0:	b085      	sub	sp, #20
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	f107 001c 	add.w	r0, r7, #28
 800c5fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c602:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c604:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c606:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c60a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c60e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c612:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c616:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c626:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	431a      	orrs	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	bc80      	pop	{r7}
 800c63c:	b004      	add	sp, #16
 800c63e:	4770      	bx	lr

0800c640 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c64e:	4618      	mov	r0, r3
 800c650:	370c      	adds	r7, #12
 800c652:	46bd      	mov	sp, r7
 800c654:	bc80      	pop	{r7}
 800c656:	4770      	bx	lr

0800c658 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	bc80      	pop	{r7}
 800c676:	4770      	bx	lr

0800c678 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2203      	movs	r2, #3
 800c684:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c686:	2002      	movs	r0, #2
 800c688:	f7fa fd84 	bl	8007194 <HAL_Delay>
  
  return HAL_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c696:	b480      	push	{r7}
 800c698:	b083      	sub	sp, #12
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 0303 	and.w	r3, r3, #3
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bc80      	pop	{r7}
 800c6ae:	4770      	bx	lr

0800c6b0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6ce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c6d4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c6da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c6ea:	f023 030f 	bic.w	r3, r3, #15
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bc80      	pop	{r7}
 800c700:	4770      	bx	lr

0800c702 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c702:	b480      	push	{r7}
 800c704:	b083      	sub	sp, #12
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	b2db      	uxtb	r3, r3
}
 800c710:	4618      	mov	r0, r3
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	bc80      	pop	{r7}
 800c718:	4770      	bx	lr

0800c71a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b085      	sub	sp, #20
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	3314      	adds	r3, #20
 800c728:	461a      	mov	r2, r3
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	4413      	add	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
}  
 800c734:	4618      	mov	r0, r3
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	bc80      	pop	{r7}
 800c73c:	4770      	bx	lr

0800c73e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c73e:	b480      	push	{r7}
 800c740:	b085      	sub	sp, #20
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	685a      	ldr	r2, [r3, #4]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c764:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c76a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c770:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	4313      	orrs	r3, r2
 800c776:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	431a      	orrs	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c788:	2300      	movs	r3, #0

}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	bc80      	pop	{r7}
 800c792:	4770      	bx	lr

0800c794 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7a6:	2340      	movs	r3, #64	; 0x40
 800c7a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7b4:	f107 0308 	add.w	r3, r7, #8
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f7ff ff78 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c7c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7c4:	2110      	movs	r1, #16
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fa42 	bl	800cc50 <SDMMC_GetCmdResp1>
 800c7cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ce:	69fb      	ldr	r3, [r7, #28]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3720      	adds	r7, #32
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b088      	sub	sp, #32
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c7e6:	2311      	movs	r3, #17
 800c7e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7ea:	2340      	movs	r3, #64	; 0x40
 800c7ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7f8:	f107 0308 	add.w	r3, r7, #8
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff ff56 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c804:	f241 3288 	movw	r2, #5000	; 0x1388
 800c808:	2111      	movs	r1, #17
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fa20 	bl	800cc50 <SDMMC_GetCmdResp1>
 800c810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c812:	69fb      	ldr	r3, [r7, #28]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3720      	adds	r7, #32
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c82a:	2312      	movs	r3, #18
 800c82c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c82e:	2340      	movs	r3, #64	; 0x40
 800c830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c832:	2300      	movs	r3, #0
 800c834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c83a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c83c:	f107 0308 	add.w	r3, r7, #8
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7ff ff34 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c848:	f241 3288 	movw	r2, #5000	; 0x1388
 800c84c:	2112      	movs	r1, #18
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f9fe 	bl	800cc50 <SDMMC_GetCmdResp1>
 800c854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c856:	69fb      	ldr	r3, [r7, #28]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c86e:	2318      	movs	r3, #24
 800c870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c872:	2340      	movs	r3, #64	; 0x40
 800c874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c876:	2300      	movs	r3, #0
 800c878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c87a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c87e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c880:	f107 0308 	add.w	r3, r7, #8
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7ff ff12 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c88c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c890:	2118      	movs	r1, #24
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f9dc 	bl	800cc50 <SDMMC_GetCmdResp1>
 800c898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c89a:	69fb      	ldr	r3, [r7, #28]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3720      	adds	r7, #32
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c8b2:	2319      	movs	r3, #25
 800c8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8b6:	2340      	movs	r3, #64	; 0x40
 800c8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8c4:	f107 0308 	add.w	r3, r7, #8
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff fef0 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c8d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8d4:	2119      	movs	r1, #25
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f9ba 	bl	800cc50 <SDMMC_GetCmdResp1>
 800c8dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8de:	69fb      	ldr	r3, [r7, #28]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3720      	adds	r7, #32
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b088      	sub	sp, #32
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c8f4:	230c      	movs	r3, #12
 800c8f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8f8:	2340      	movs	r3, #64	; 0x40
 800c8fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c904:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c906:	f107 0308 	add.w	r3, r7, #8
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f7ff fecf 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c912:	4a05      	ldr	r2, [pc, #20]	; (800c928 <SDMMC_CmdStopTransfer+0x40>)
 800c914:	210c      	movs	r1, #12
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f99a 	bl	800cc50 <SDMMC_GetCmdResp1>
 800c91c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c91e:	69fb      	ldr	r3, [r7, #28]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3720      	adds	r7, #32
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	05f5e100 	.word	0x05f5e100

0800c92c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08a      	sub	sp, #40	; 0x28
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c93c:	2307      	movs	r3, #7
 800c93e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c940:	2340      	movs	r3, #64	; 0x40
 800c942:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c944:	2300      	movs	r3, #0
 800c946:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c94c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c94e:	f107 0310 	add.w	r3, r7, #16
 800c952:	4619      	mov	r1, r3
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff feab 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c95a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c95e:	2107      	movs	r1, #7
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f000 f975 	bl	800cc50 <SDMMC_GetCmdResp1>
 800c966:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3728      	adds	r7, #40	; 0x28
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b088      	sub	sp, #32
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c97a:	2300      	movs	r3, #0
 800c97c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c97e:	2300      	movs	r3, #0
 800c980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c98a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c98e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c990:	f107 0308 	add.w	r3, r7, #8
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff fe8a 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f92d 	bl	800cbfc <SDMMC_GetCmdError>
 800c9a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9a4:	69fb      	ldr	r3, [r7, #28]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3720      	adds	r7, #32
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b088      	sub	sp, #32
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c9b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c9ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c9bc:	2308      	movs	r3, #8
 800c9be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9c0:	2340      	movs	r3, #64	; 0x40
 800c9c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9ce:	f107 0308 	add.w	r3, r7, #8
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff fe6b 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fb20 	bl	800d020 <SDMMC_GetCmdResp7>
 800c9e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9e2:	69fb      	ldr	r3, [r7, #28]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3720      	adds	r7, #32
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b088      	sub	sp, #32
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c9fa:	2337      	movs	r3, #55	; 0x37
 800c9fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9fe:	2340      	movs	r3, #64	; 0x40
 800ca00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca02:	2300      	movs	r3, #0
 800ca04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca0c:	f107 0308 	add.w	r3, r7, #8
 800ca10:	4619      	mov	r1, r3
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff fe4c 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ca18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca1c:	2137      	movs	r1, #55	; 0x37
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f916 	bl	800cc50 <SDMMC_GetCmdResp1>
 800ca24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca26:	69fb      	ldr	r3, [r7, #28]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3720      	adds	r7, #32
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ca46:	2329      	movs	r3, #41	; 0x29
 800ca48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca4a:	2340      	movs	r3, #64	; 0x40
 800ca4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca58:	f107 0308 	add.w	r3, r7, #8
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7ff fe26 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fa29 	bl	800cebc <SDMMC_GetCmdResp3>
 800ca6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3720      	adds	r7, #32
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b088      	sub	sp, #32
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ca84:	2306      	movs	r3, #6
 800ca86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca88:	2340      	movs	r3, #64	; 0x40
 800ca8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca96:	f107 0308 	add.w	r3, r7, #8
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f7ff fe07 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800caa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800caa6:	2106      	movs	r1, #6
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f8d1 	bl	800cc50 <SDMMC_GetCmdResp1>
 800caae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cab0:	69fb      	ldr	r3, [r7, #28]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3720      	adds	r7, #32
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b088      	sub	sp, #32
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cac2:	2300      	movs	r3, #0
 800cac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cac6:	2333      	movs	r3, #51	; 0x33
 800cac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800caca:	2340      	movs	r3, #64	; 0x40
 800cacc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cace:	2300      	movs	r3, #0
 800cad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cad6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cad8:	f107 0308 	add.w	r3, r7, #8
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff fde6 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800cae4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cae8:	2133      	movs	r1, #51	; 0x33
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 f8b0 	bl	800cc50 <SDMMC_GetCmdResp1>
 800caf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caf2:	69fb      	ldr	r3, [r7, #28]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3720      	adds	r7, #32
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b088      	sub	sp, #32
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cb04:	2300      	movs	r3, #0
 800cb06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cb08:	2302      	movs	r3, #2
 800cb0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cb0c:	23c0      	movs	r3, #192	; 0xc0
 800cb0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb10:	2300      	movs	r3, #0
 800cb12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb1a:	f107 0308 	add.w	r3, r7, #8
 800cb1e:	4619      	mov	r1, r3
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff fdc5 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f980 	bl	800ce2c <SDMMC_GetCmdResp2>
 800cb2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb2e:	69fb      	ldr	r3, [r7, #28]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3720      	adds	r7, #32
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b088      	sub	sp, #32
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cb46:	2309      	movs	r3, #9
 800cb48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cb4a:	23c0      	movs	r3, #192	; 0xc0
 800cb4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb58:	f107 0308 	add.w	r3, r7, #8
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7ff fda6 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f961 	bl	800ce2c <SDMMC_GetCmdResp2>
 800cb6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb6c:	69fb      	ldr	r3, [r7, #28]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3720      	adds	r7, #32
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b088      	sub	sp, #32
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb80:	2300      	movs	r3, #0
 800cb82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cb84:	2303      	movs	r3, #3
 800cb86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb88:	2340      	movs	r3, #64	; 0x40
 800cb8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb96:	f107 0308 	add.w	r3, r7, #8
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7ff fd87 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	2103      	movs	r1, #3
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f9c4 	bl	800cf34 <SDMMC_GetCmdResp6>
 800cbac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbae:	69fb      	ldr	r3, [r7, #28]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3720      	adds	r7, #32
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b088      	sub	sp, #32
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cbc6:	230d      	movs	r3, #13
 800cbc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbca:	2340      	movs	r3, #64	; 0x40
 800cbcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbd8:	f107 0308 	add.w	r3, r7, #8
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff fd66 	bl	800c6b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cbe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbe8:	210d      	movs	r1, #13
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f830 	bl	800cc50 <SDMMC_GetCmdResp1>
 800cbf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbf2:	69fb      	ldr	r3, [r7, #28]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3720      	adds	r7, #32
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc04:	4b10      	ldr	r3, [pc, #64]	; (800cc48 <SDMMC_GetCmdError+0x4c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a10      	ldr	r2, [pc, #64]	; (800cc4c <SDMMC_GetCmdError+0x50>)
 800cc0a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc0e:	0a5b      	lsrs	r3, r3, #9
 800cc10:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc14:	fb02 f303 	mul.w	r3, r2, r3
 800cc18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	1e5a      	subs	r2, r3, #1
 800cc1e:	60fa      	str	r2, [r7, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d102      	bne.n	800cc2a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc28:	e009      	b.n	800cc3e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d0f1      	beq.n	800cc1a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	22c5      	movs	r2, #197	; 0xc5
 800cc3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3714      	adds	r7, #20
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bc80      	pop	{r7}
 800cc46:	4770      	bx	lr
 800cc48:	20000038 	.word	0x20000038
 800cc4c:	10624dd3 	.word	0x10624dd3

0800cc50 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b088      	sub	sp, #32
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	607a      	str	r2, [r7, #4]
 800cc5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cc5e:	4b70      	ldr	r3, [pc, #448]	; (800ce20 <SDMMC_GetCmdResp1+0x1d0>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a70      	ldr	r2, [pc, #448]	; (800ce24 <SDMMC_GetCmdResp1+0x1d4>)
 800cc64:	fba2 2303 	umull	r2, r3, r2, r3
 800cc68:	0a5a      	lsrs	r2, r3, #9
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	fb02 f303 	mul.w	r3, r2, r3
 800cc70:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	1e5a      	subs	r2, r3, #1
 800cc76:	61fa      	str	r2, [r7, #28]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d102      	bne.n	800cc82 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc80:	e0c9      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc86:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0ef      	beq.n	800cc72 <SDMMC_GetCmdResp1+0x22>
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1ea      	bne.n	800cc72 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca0:	f003 0304 	and.w	r3, r3, #4
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d004      	beq.n	800ccb2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2204      	movs	r2, #4
 800ccac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccae:	2304      	movs	r3, #4
 800ccb0:	e0b1      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d004      	beq.n	800ccc8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e0a6      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	22c5      	movs	r2, #197	; 0xc5
 800cccc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f7ff fd17 	bl	800c702 <SDIO_GetCommandResponse>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	7afb      	ldrb	r3, [r7, #11]
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d001      	beq.n	800cce2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccde:	2301      	movs	r3, #1
 800cce0:	e099      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cce2:	2100      	movs	r1, #0
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f7ff fd18 	bl	800c71a <SDIO_GetResponse>
 800ccea:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	4b4e      	ldr	r3, [pc, #312]	; (800ce28 <SDMMC_GetCmdResp1+0x1d8>)
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e08d      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	da02      	bge.n	800cd06 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cd00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd04:	e087      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cd10:	2340      	movs	r3, #64	; 0x40
 800cd12:	e080      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cd1e:	2380      	movs	r3, #128	; 0x80
 800cd20:	e079      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d002      	beq.n	800cd32 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cd2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd30:	e071      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d002      	beq.n	800cd42 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cd3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd40:	e069      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d002      	beq.n	800cd52 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cd4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd50:	e061      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d002      	beq.n	800cd62 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd60:	e059      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd70:	e051      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd80:	e049      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cd90:	e041      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cda0:	e039      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cdac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cdb0:	e031      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cdbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cdc0:	e029      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cdcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cdd0:	e021      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cddc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cde0:	e019      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cdec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cdf0:	e011      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d002      	beq.n	800ce02 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cdfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ce00:	e009      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	f003 0308 	and.w	r3, r3, #8
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d002      	beq.n	800ce12 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ce0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ce10:	e001      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ce12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3720      	adds	r7, #32
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20000038 	.word	0x20000038
 800ce24:	10624dd3 	.word	0x10624dd3
 800ce28:	fdffe008 	.word	0xfdffe008

0800ce2c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce34:	4b1f      	ldr	r3, [pc, #124]	; (800ceb4 <SDMMC_GetCmdResp2+0x88>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a1f      	ldr	r2, [pc, #124]	; (800ceb8 <SDMMC_GetCmdResp2+0x8c>)
 800ce3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce3e:	0a5b      	lsrs	r3, r3, #9
 800ce40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce44:	fb02 f303 	mul.w	r3, r2, r3
 800ce48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	1e5a      	subs	r2, r3, #1
 800ce4e:	60fa      	str	r2, [r7, #12]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d102      	bne.n	800ce5a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce58:	e026      	b.n	800cea8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d0ef      	beq.n	800ce4a <SDMMC_GetCmdResp2+0x1e>
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1ea      	bne.n	800ce4a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce78:	f003 0304 	and.w	r3, r3, #4
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d004      	beq.n	800ce8a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2204      	movs	r2, #4
 800ce84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce86:	2304      	movs	r3, #4
 800ce88:	e00e      	b.n	800cea8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8e:	f003 0301 	and.w	r3, r3, #1
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d004      	beq.n	800cea0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e003      	b.n	800cea8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	22c5      	movs	r2, #197	; 0xc5
 800cea4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3714      	adds	r7, #20
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bc80      	pop	{r7}
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	20000038 	.word	0x20000038
 800ceb8:	10624dd3 	.word	0x10624dd3

0800cebc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cec4:	4b19      	ldr	r3, [pc, #100]	; (800cf2c <SDMMC_GetCmdResp3+0x70>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a19      	ldr	r2, [pc, #100]	; (800cf30 <SDMMC_GetCmdResp3+0x74>)
 800ceca:	fba2 2303 	umull	r2, r3, r2, r3
 800cece:	0a5b      	lsrs	r3, r3, #9
 800ced0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ced4:	fb02 f303 	mul.w	r3, r2, r3
 800ced8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	1e5a      	subs	r2, r3, #1
 800cede:	60fa      	str	r2, [r7, #12]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d102      	bne.n	800ceea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cee4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cee8:	e01b      	b.n	800cf22 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0ef      	beq.n	800ceda <SDMMC_GetCmdResp3+0x1e>
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1ea      	bne.n	800ceda <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf08:	f003 0304 	and.w	r3, r3, #4
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d004      	beq.n	800cf1a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2204      	movs	r2, #4
 800cf14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf16:	2304      	movs	r3, #4
 800cf18:	e003      	b.n	800cf22 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	22c5      	movs	r2, #197	; 0xc5
 800cf1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3714      	adds	r7, #20
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bc80      	pop	{r7}
 800cf2a:	4770      	bx	lr
 800cf2c:	20000038 	.word	0x20000038
 800cf30:	10624dd3 	.word	0x10624dd3

0800cf34 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf42:	4b35      	ldr	r3, [pc, #212]	; (800d018 <SDMMC_GetCmdResp6+0xe4>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a35      	ldr	r2, [pc, #212]	; (800d01c <SDMMC_GetCmdResp6+0xe8>)
 800cf48:	fba2 2303 	umull	r2, r3, r2, r3
 800cf4c:	0a5b      	lsrs	r3, r3, #9
 800cf4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf52:	fb02 f303 	mul.w	r3, r2, r3
 800cf56:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	1e5a      	subs	r2, r3, #1
 800cf5c:	61fa      	str	r2, [r7, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d102      	bne.n	800cf68 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf66:	e052      	b.n	800d00e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf6c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d0ef      	beq.n	800cf58 <SDMMC_GetCmdResp6+0x24>
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1ea      	bne.n	800cf58 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf86:	f003 0304 	and.w	r3, r3, #4
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d004      	beq.n	800cf98 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2204      	movs	r2, #4
 800cf92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf94:	2304      	movs	r3, #4
 800cf96:	e03a      	b.n	800d00e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d004      	beq.n	800cfae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e02f      	b.n	800d00e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f7ff fba7 	bl	800c702 <SDIO_GetCommandResponse>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	7afb      	ldrb	r3, [r7, #11]
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d001      	beq.n	800cfc2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e025      	b.n	800d00e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	22c5      	movs	r2, #197	; 0xc5
 800cfc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cfc8:	2100      	movs	r1, #0
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f7ff fba5 	bl	800c71a <SDIO_GetResponse>
 800cfd0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d106      	bne.n	800cfea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	0c1b      	lsrs	r3, r3, #16
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e011      	b.n	800d00e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cff8:	e009      	b.n	800d00e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d008:	e001      	b.n	800d00e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d00a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3720      	adds	r7, #32
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	20000038 	.word	0x20000038
 800d01c:	10624dd3 	.word	0x10624dd3

0800d020 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d028:	4b22      	ldr	r3, [pc, #136]	; (800d0b4 <SDMMC_GetCmdResp7+0x94>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a22      	ldr	r2, [pc, #136]	; (800d0b8 <SDMMC_GetCmdResp7+0x98>)
 800d02e:	fba2 2303 	umull	r2, r3, r2, r3
 800d032:	0a5b      	lsrs	r3, r3, #9
 800d034:	f241 3288 	movw	r2, #5000	; 0x1388
 800d038:	fb02 f303 	mul.w	r3, r2, r3
 800d03c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	1e5a      	subs	r2, r3, #1
 800d042:	60fa      	str	r2, [r7, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d102      	bne.n	800d04e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d04c:	e02c      	b.n	800d0a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d052:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0ef      	beq.n	800d03e <SDMMC_GetCmdResp7+0x1e>
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1ea      	bne.n	800d03e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d06c:	f003 0304 	and.w	r3, r3, #4
 800d070:	2b00      	cmp	r3, #0
 800d072:	d004      	beq.n	800d07e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2204      	movs	r2, #4
 800d078:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d07a:	2304      	movs	r3, #4
 800d07c:	e014      	b.n	800d0a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d004      	beq.n	800d094 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2201      	movs	r2, #1
 800d08e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d090:	2301      	movs	r3, #1
 800d092:	e009      	b.n	800d0a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2240      	movs	r2, #64	; 0x40
 800d0a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d0a6:	2300      	movs	r3, #0
  
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bc80      	pop	{r7}
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	20000038 	.word	0x20000038
 800d0b8:	10624dd3 	.word	0x10624dd3

0800d0bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d0c0:	4904      	ldr	r1, [pc, #16]	; (800d0d4 <MX_FATFS_Init+0x18>)
 800d0c2:	4805      	ldr	r0, [pc, #20]	; (800d0d8 <MX_FATFS_Init+0x1c>)
 800d0c4:	f003 fd62 	bl	8010b8c <FATFS_LinkDriver>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	4b03      	ldr	r3, [pc, #12]	; (800d0dc <MX_FATFS_Init+0x20>)
 800d0ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d0d0:	bf00      	nop
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	20006228 	.word	0x20006228
 800d0d8:	08014ac0 	.word	0x08014ac0
 800d0dc:	20006224 	.word	0x20006224

0800d0e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d0e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bc80      	pop	{r7}
 800d0ec:	4770      	bx	lr
	...

0800d0f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d0fa:	f000 f86b 	bl	800d1d4 <BSP_SD_IsDetected>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b01      	cmp	r3, #1
 800d102:	d001      	beq.n	800d108 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d104:	2301      	movs	r3, #1
 800d106:	e005      	b.n	800d114 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d108:	4804      	ldr	r0, [pc, #16]	; (800d11c <BSP_SD_Init+0x2c>)
 800d10a:	f7fc fef9 	bl	8009f00 <HAL_SD_Init>
 800d10e:	4603      	mov	r3, r0
 800d110:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d112:	79fb      	ldrb	r3, [r7, #7]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	200025e4 	.word	0x200025e4

0800d120 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af02      	add	r7, sp, #8
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
 800d12c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d12e:	2300      	movs	r3, #0
 800d130:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	68f9      	ldr	r1, [r7, #12]
 800d13c:	4806      	ldr	r0, [pc, #24]	; (800d158 <BSP_SD_ReadBlocks+0x38>)
 800d13e:	f7fc ff8d 	bl	800a05c <HAL_SD_ReadBlocks>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3718      	adds	r7, #24
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	200025e4 	.word	0x200025e4

0800d15c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b088      	sub	sp, #32
 800d160:	af02      	add	r7, sp, #8
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	68f9      	ldr	r1, [r7, #12]
 800d178:	4806      	ldr	r0, [pc, #24]	; (800d194 <BSP_SD_WriteBlocks+0x38>)
 800d17a:	f7fd f94d 	bl	800a418 <HAL_SD_WriteBlocks>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d184:	2301      	movs	r3, #1
 800d186:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d188:	7dfb      	ldrb	r3, [r7, #23]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3718      	adds	r7, #24
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	200025e4 	.word	0x200025e4

0800d198 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d19c:	4805      	ldr	r0, [pc, #20]	; (800d1b4 <BSP_SD_GetCardState+0x1c>)
 800d19e:	f7fd fd2b 	bl	800abf8 <HAL_SD_GetCardState>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b04      	cmp	r3, #4
 800d1a6:	bf14      	ite	ne
 800d1a8:	2301      	movne	r3, #1
 800d1aa:	2300      	moveq	r3, #0
 800d1ac:	b2db      	uxtb	r3, r3
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	200025e4 	.word	0x200025e4

0800d1b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d1c0:	6879      	ldr	r1, [r7, #4]
 800d1c2:	4803      	ldr	r0, [pc, #12]	; (800d1d0 <BSP_SD_GetCardInfo+0x18>)
 800d1c4:	f7fd fc52 	bl	800aa6c <HAL_SD_GetCardInfo>
}
 800d1c8:	bf00      	nop
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	200025e4 	.word	0x200025e4

0800d1d4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d1de:	79fb      	ldrb	r3, [r7, #7]
 800d1e0:	b2db      	uxtb	r3, r3
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bc80      	pop	{r7}
 800d1ea:	4770      	bx	lr

0800d1ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d1f6:	79fb      	ldrb	r3, [r7, #7]
 800d1f8:	4a08      	ldr	r2, [pc, #32]	; (800d21c <disk_status+0x30>)
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4413      	add	r3, r2
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	79fa      	ldrb	r2, [r7, #7]
 800d204:	4905      	ldr	r1, [pc, #20]	; (800d21c <disk_status+0x30>)
 800d206:	440a      	add	r2, r1
 800d208:	7a12      	ldrb	r2, [r2, #8]
 800d20a:	4610      	mov	r0, r2
 800d20c:	4798      	blx	r3
 800d20e:	4603      	mov	r3, r0
 800d210:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d212:	7bfb      	ldrb	r3, [r7, #15]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	2000624c 	.word	0x2000624c

0800d220 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	4603      	mov	r3, r0
 800d228:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	4a0d      	ldr	r2, [pc, #52]	; (800d268 <disk_initialize+0x48>)
 800d232:	5cd3      	ldrb	r3, [r2, r3]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d111      	bne.n	800d25c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800d238:	79fb      	ldrb	r3, [r7, #7]
 800d23a:	4a0b      	ldr	r2, [pc, #44]	; (800d268 <disk_initialize+0x48>)
 800d23c:	2101      	movs	r1, #1
 800d23e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	4a09      	ldr	r2, [pc, #36]	; (800d268 <disk_initialize+0x48>)
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4413      	add	r3, r2
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	79fa      	ldrb	r2, [r7, #7]
 800d24e:	4906      	ldr	r1, [pc, #24]	; (800d268 <disk_initialize+0x48>)
 800d250:	440a      	add	r2, r1
 800d252:	7a12      	ldrb	r2, [r2, #8]
 800d254:	4610      	mov	r0, r2
 800d256:	4798      	blx	r3
 800d258:	4603      	mov	r3, r0
 800d25a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	2000624c 	.word	0x2000624c

0800d26c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d26c:	b590      	push	{r4, r7, lr}
 800d26e:	b087      	sub	sp, #28
 800d270:	af00      	add	r7, sp, #0
 800d272:	60b9      	str	r1, [r7, #8]
 800d274:	607a      	str	r2, [r7, #4]
 800d276:	603b      	str	r3, [r7, #0]
 800d278:	4603      	mov	r3, r0
 800d27a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d27c:	7bfb      	ldrb	r3, [r7, #15]
 800d27e:	4a0a      	ldr	r2, [pc, #40]	; (800d2a8 <disk_read+0x3c>)
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	4413      	add	r3, r2
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	689c      	ldr	r4, [r3, #8]
 800d288:	7bfb      	ldrb	r3, [r7, #15]
 800d28a:	4a07      	ldr	r2, [pc, #28]	; (800d2a8 <disk_read+0x3c>)
 800d28c:	4413      	add	r3, r2
 800d28e:	7a18      	ldrb	r0, [r3, #8]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	68b9      	ldr	r1, [r7, #8]
 800d296:	47a0      	blx	r4
 800d298:	4603      	mov	r3, r0
 800d29a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	371c      	adds	r7, #28
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd90      	pop	{r4, r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	2000624c 	.word	0x2000624c

0800d2ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d2ac:	b590      	push	{r4, r7, lr}
 800d2ae:	b087      	sub	sp, #28
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60b9      	str	r1, [r7, #8]
 800d2b4:	607a      	str	r2, [r7, #4]
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
 800d2be:	4a0a      	ldr	r2, [pc, #40]	; (800d2e8 <disk_write+0x3c>)
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	68dc      	ldr	r4, [r3, #12]
 800d2c8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ca:	4a07      	ldr	r2, [pc, #28]	; (800d2e8 <disk_write+0x3c>)
 800d2cc:	4413      	add	r3, r2
 800d2ce:	7a18      	ldrb	r0, [r3, #8]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	68b9      	ldr	r1, [r7, #8]
 800d2d6:	47a0      	blx	r4
 800d2d8:	4603      	mov	r3, r0
 800d2da:	75fb      	strb	r3, [r7, #23]
  return res;
 800d2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	371c      	adds	r7, #28
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd90      	pop	{r4, r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	2000624c 	.word	0x2000624c

0800d2ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	603a      	str	r2, [r7, #0]
 800d2f6:	71fb      	strb	r3, [r7, #7]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d2fc:	79fb      	ldrb	r3, [r7, #7]
 800d2fe:	4a09      	ldr	r2, [pc, #36]	; (800d324 <disk_ioctl+0x38>)
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	79fa      	ldrb	r2, [r7, #7]
 800d30a:	4906      	ldr	r1, [pc, #24]	; (800d324 <disk_ioctl+0x38>)
 800d30c:	440a      	add	r2, r1
 800d30e:	7a10      	ldrb	r0, [r2, #8]
 800d310:	79b9      	ldrb	r1, [r7, #6]
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	4798      	blx	r3
 800d316:	4603      	mov	r3, r0
 800d318:	73fb      	strb	r3, [r7, #15]
  return res;
 800d31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	2000624c 	.word	0x2000624c

0800d328 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d328:	b480      	push	{r7}
 800d32a:	b087      	sub	sp, #28
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800d33c:	e007      	b.n	800d34e <mem_cpy+0x26>
		*d++ = *s++;
 800d33e:	693a      	ldr	r2, [r7, #16]
 800d340:	1c53      	adds	r3, r2, #1
 800d342:	613b      	str	r3, [r7, #16]
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	1c59      	adds	r1, r3, #1
 800d348:	6179      	str	r1, [r7, #20]
 800d34a:	7812      	ldrb	r2, [r2, #0]
 800d34c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	1e5a      	subs	r2, r3, #1
 800d352:	607a      	str	r2, [r7, #4]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1f2      	bne.n	800d33e <mem_cpy+0x16>
}
 800d358:	bf00      	nop
 800d35a:	bf00      	nop
 800d35c:	371c      	adds	r7, #28
 800d35e:	46bd      	mov	sp, r7
 800d360:	bc80      	pop	{r7}
 800d362:	4770      	bx	lr

0800d364 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d364:	b480      	push	{r7}
 800d366:	b087      	sub	sp, #28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800d374:	e005      	b.n	800d382 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	1c5a      	adds	r2, r3, #1
 800d37a:	617a      	str	r2, [r7, #20]
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	b2d2      	uxtb	r2, r2
 800d380:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	1e5a      	subs	r2, r3, #1
 800d386:	607a      	str	r2, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1f4      	bne.n	800d376 <mem_set+0x12>
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	371c      	adds	r7, #28
 800d392:	46bd      	mov	sp, r7
 800d394:	bc80      	pop	{r7}
 800d396:	4770      	bx	lr

0800d398 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800d398:	b480      	push	{r7}
 800d39a:	b089      	sub	sp, #36	; 0x24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	61fb      	str	r3, [r7, #28]
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800d3b0:	bf00      	nop
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	1e5a      	subs	r2, r3, #1
 800d3b6:	607a      	str	r2, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00d      	beq.n	800d3d8 <mem_cmp+0x40>
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	1c5a      	adds	r2, r3, #1
 800d3c0:	61fa      	str	r2, [r7, #28]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	61ba      	str	r2, [r7, #24]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	1acb      	subs	r3, r1, r3
 800d3d0:	617b      	str	r3, [r7, #20]
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d0ec      	beq.n	800d3b2 <mem_cmp+0x1a>
	return r;
 800d3d8:	697b      	ldr	r3, [r7, #20]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3724      	adds	r7, #36	; 0x24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bc80      	pop	{r7}
 800d3e2:	4770      	bx	lr

0800d3e4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d3ee:	e002      	b.n	800d3f6 <chk_chr+0x12>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	607b      	str	r3, [r7, #4]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d005      	beq.n	800d40a <chk_chr+0x26>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	461a      	mov	r2, r3
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	4293      	cmp	r3, r2
 800d408:	d1f2      	bne.n	800d3f0 <chk_chr+0xc>
	return *str;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	781b      	ldrb	r3, [r3, #0]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	bc80      	pop	{r7}
 800d416:	4770      	bx	lr

0800d418 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d422:	2300      	movs	r3, #0
 800d424:	60bb      	str	r3, [r7, #8]
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	e03b      	b.n	800d4a4 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800d42c:	4931      	ldr	r1, [pc, #196]	; (800d4f4 <chk_lock+0xdc>)
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	4613      	mov	r3, r2
 800d432:	005b      	lsls	r3, r3, #1
 800d434:	4413      	add	r3, r2
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	440b      	add	r3, r1
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d02c      	beq.n	800d49a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d440:	492c      	ldr	r1, [pc, #176]	; (800d4f4 <chk_lock+0xdc>)
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	4613      	mov	r3, r2
 800d446:	005b      	lsls	r3, r3, #1
 800d448:	4413      	add	r3, r2
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	440b      	add	r3, r1
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d120      	bne.n	800d49e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800d45c:	4925      	ldr	r1, [pc, #148]	; (800d4f4 <chk_lock+0xdc>)
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	4613      	mov	r3, r2
 800d462:	005b      	lsls	r3, r3, #1
 800d464:	4413      	add	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	440b      	add	r3, r1
 800d46a:	3304      	adds	r3, #4
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d474:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d476:	429a      	cmp	r2, r3
 800d478:	d111      	bne.n	800d49e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800d47a:	491e      	ldr	r1, [pc, #120]	; (800d4f4 <chk_lock+0xdc>)
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	4613      	mov	r3, r2
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4413      	add	r3, r2
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	440b      	add	r3, r1
 800d488:	3308      	adds	r3, #8
 800d48a:	881a      	ldrh	r2, [r3, #0]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d492:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800d494:	429a      	cmp	r2, r3
 800d496:	d102      	bne.n	800d49e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800d498:	e007      	b.n	800d4aa <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800d49a:	2301      	movs	r3, #1
 800d49c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d9c0      	bls.n	800d42c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d109      	bne.n	800d4c4 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d102      	bne.n	800d4bc <chk_lock+0xa4>
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d101      	bne.n	800d4c0 <chk_lock+0xa8>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e013      	b.n	800d4e8 <chk_lock+0xd0>
 800d4c0:	2312      	movs	r3, #18
 800d4c2:	e011      	b.n	800d4e8 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10b      	bne.n	800d4e2 <chk_lock+0xca>
 800d4ca:	490a      	ldr	r1, [pc, #40]	; (800d4f4 <chk_lock+0xdc>)
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	4413      	add	r3, r2
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	440b      	add	r3, r1
 800d4d8:	330a      	adds	r3, #10
 800d4da:	881b      	ldrh	r3, [r3, #0]
 800d4dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4e0:	d101      	bne.n	800d4e6 <chk_lock+0xce>
 800d4e2:	2310      	movs	r3, #16
 800d4e4:	e000      	b.n	800d4e8 <chk_lock+0xd0>
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3714      	adds	r7, #20
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bc80      	pop	{r7}
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	20006234 	.word	0x20006234

0800d4f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d4fe:	2300      	movs	r3, #0
 800d500:	607b      	str	r3, [r7, #4]
 800d502:	e002      	b.n	800d50a <enq_lock+0x12>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	3301      	adds	r3, #1
 800d508:	607b      	str	r3, [r7, #4]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d809      	bhi.n	800d524 <enq_lock+0x2c>
 800d510:	490a      	ldr	r1, [pc, #40]	; (800d53c <enq_lock+0x44>)
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	4613      	mov	r3, r2
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	4413      	add	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	440b      	add	r3, r1
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1ef      	bne.n	800d504 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b02      	cmp	r3, #2
 800d528:	bf14      	ite	ne
 800d52a:	2301      	movne	r3, #1
 800d52c:	2300      	moveq	r3, #0
 800d52e:	b2db      	uxtb	r3, r3
}
 800d530:	4618      	mov	r0, r3
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	bc80      	pop	{r7}
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	20006234 	.word	0x20006234

0800d540 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d54a:	2300      	movs	r3, #0
 800d54c:	60fb      	str	r3, [r7, #12]
 800d54e:	e02e      	b.n	800d5ae <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800d550:	4958      	ldr	r1, [pc, #352]	; (800d6b4 <inc_lock+0x174>)
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	4613      	mov	r3, r2
 800d556:	005b      	lsls	r3, r3, #1
 800d558:	4413      	add	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	440b      	add	r3, r1
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d11d      	bne.n	800d5a8 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800d56c:	4951      	ldr	r1, [pc, #324]	; (800d6b4 <inc_lock+0x174>)
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	4613      	mov	r3, r2
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	4413      	add	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	440b      	add	r3, r1
 800d57a:	3304      	adds	r3, #4
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d584:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800d586:	429a      	cmp	r2, r3
 800d588:	d10e      	bne.n	800d5a8 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800d58a:	494a      	ldr	r1, [pc, #296]	; (800d6b4 <inc_lock+0x174>)
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	4613      	mov	r3, r2
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	4413      	add	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	440b      	add	r3, r1
 800d598:	3308      	adds	r3, #8
 800d59a:	881a      	ldrh	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5a2:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d006      	beq.n	800d5b6 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d9cd      	bls.n	800d550 <inc_lock+0x10>
 800d5b4:	e000      	b.n	800d5b8 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800d5b6:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d148      	bne.n	800d650 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	60fb      	str	r3, [r7, #12]
 800d5c2:	e002      	b.n	800d5ca <inc_lock+0x8a>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	60fb      	str	r3, [r7, #12]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d809      	bhi.n	800d5e4 <inc_lock+0xa4>
 800d5d0:	4938      	ldr	r1, [pc, #224]	; (800d6b4 <inc_lock+0x174>)
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	4413      	add	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	440b      	add	r3, r1
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d1ef      	bne.n	800d5c4 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b02      	cmp	r3, #2
 800d5e8:	d101      	bne.n	800d5ee <inc_lock+0xae>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	e05d      	b.n	800d6aa <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5f4:	6819      	ldr	r1, [r3, #0]
 800d5f6:	482f      	ldr	r0, [pc, #188]	; (800d6b4 <inc_lock+0x174>)
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	005b      	lsls	r3, r3, #1
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4403      	add	r3, r0
 800d604:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d60c:	6899      	ldr	r1, [r3, #8]
 800d60e:	4829      	ldr	r0, [pc, #164]	; (800d6b4 <inc_lock+0x174>)
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	4613      	mov	r3, r2
 800d614:	005b      	lsls	r3, r3, #1
 800d616:	4413      	add	r3, r2
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	4403      	add	r3, r0
 800d61c:	3304      	adds	r3, #4
 800d61e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d626:	88d8      	ldrh	r0, [r3, #6]
 800d628:	4922      	ldr	r1, [pc, #136]	; (800d6b4 <inc_lock+0x174>)
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	4613      	mov	r3, r2
 800d62e:	005b      	lsls	r3, r3, #1
 800d630:	4413      	add	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	440b      	add	r3, r1
 800d636:	3308      	adds	r3, #8
 800d638:	4602      	mov	r2, r0
 800d63a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800d63c:	491d      	ldr	r1, [pc, #116]	; (800d6b4 <inc_lock+0x174>)
 800d63e:	68fa      	ldr	r2, [r7, #12]
 800d640:	4613      	mov	r3, r2
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	4413      	add	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	440b      	add	r3, r1
 800d64a:	330a      	adds	r3, #10
 800d64c:	2200      	movs	r2, #0
 800d64e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00c      	beq.n	800d670 <inc_lock+0x130>
 800d656:	4917      	ldr	r1, [pc, #92]	; (800d6b4 <inc_lock+0x174>)
 800d658:	68fa      	ldr	r2, [r7, #12]
 800d65a:	4613      	mov	r3, r2
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	4413      	add	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	440b      	add	r3, r1
 800d664:	330a      	adds	r3, #10
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <inc_lock+0x130>
 800d66c:	2300      	movs	r3, #0
 800d66e:	e01c      	b.n	800d6aa <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10b      	bne.n	800d68e <inc_lock+0x14e>
 800d676:	490f      	ldr	r1, [pc, #60]	; (800d6b4 <inc_lock+0x174>)
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	4613      	mov	r3, r2
 800d67c:	005b      	lsls	r3, r3, #1
 800d67e:	4413      	add	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	440b      	add	r3, r1
 800d684:	330a      	adds	r3, #10
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	3301      	adds	r3, #1
 800d68a:	b299      	uxth	r1, r3
 800d68c:	e001      	b.n	800d692 <inc_lock+0x152>
 800d68e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d692:	4808      	ldr	r0, [pc, #32]	; (800d6b4 <inc_lock+0x174>)
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	4613      	mov	r3, r2
 800d698:	005b      	lsls	r3, r3, #1
 800d69a:	4413      	add	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4403      	add	r3, r0
 800d6a0:	330a      	adds	r3, #10
 800d6a2:	460a      	mov	r2, r1
 800d6a4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	3301      	adds	r3, #1
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3714      	adds	r7, #20
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bc80      	pop	{r7}
 800d6b2:	4770      	bx	lr
 800d6b4:	20006234 	.word	0x20006234

0800d6b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	607b      	str	r3, [r7, #4]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d82e      	bhi.n	800d72a <dec_lock+0x72>
		n = Files[i].ctr;
 800d6cc:	491b      	ldr	r1, [pc, #108]	; (800d73c <dec_lock+0x84>)
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	4413      	add	r3, r2
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	440b      	add	r3, r1
 800d6da:	330a      	adds	r3, #10
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d6e0:	89fb      	ldrh	r3, [r7, #14]
 800d6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6e6:	d101      	bne.n	800d6ec <dec_lock+0x34>
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800d6ec:	89fb      	ldrh	r3, [r7, #14]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d002      	beq.n	800d6f8 <dec_lock+0x40>
 800d6f2:	89fb      	ldrh	r3, [r7, #14]
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d6f8:	4910      	ldr	r1, [pc, #64]	; (800d73c <dec_lock+0x84>)
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	4413      	add	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	440b      	add	r3, r1
 800d706:	330a      	adds	r3, #10
 800d708:	89fa      	ldrh	r2, [r7, #14]
 800d70a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d70c:	89fb      	ldrh	r3, [r7, #14]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d108      	bne.n	800d724 <dec_lock+0x6c>
 800d712:	490a      	ldr	r1, [pc, #40]	; (800d73c <dec_lock+0x84>)
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	4613      	mov	r3, r2
 800d718:	005b      	lsls	r3, r3, #1
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	440b      	add	r3, r1
 800d720:	2200      	movs	r2, #0
 800d722:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	737b      	strb	r3, [r7, #13]
 800d728:	e001      	b.n	800d72e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d72a:	2302      	movs	r3, #2
 800d72c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d72e:	7b7b      	ldrb	r3, [r7, #13]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3714      	adds	r7, #20
 800d734:	46bd      	mov	sp, r7
 800d736:	bc80      	pop	{r7}
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	20006234 	.word	0x20006234

0800d740 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d748:	2300      	movs	r3, #0
 800d74a:	60fb      	str	r3, [r7, #12]
 800d74c:	e016      	b.n	800d77c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d74e:	4910      	ldr	r1, [pc, #64]	; (800d790 <clear_lock+0x50>)
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	4613      	mov	r3, r2
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	4413      	add	r3, r2
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	440b      	add	r3, r1
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	429a      	cmp	r2, r3
 800d762:	d108      	bne.n	800d776 <clear_lock+0x36>
 800d764:	490a      	ldr	r1, [pc, #40]	; (800d790 <clear_lock+0x50>)
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	4613      	mov	r3, r2
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	4413      	add	r3, r2
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	440b      	add	r3, r1
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	3301      	adds	r3, #1
 800d77a:	60fb      	str	r3, [r7, #12]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d9e5      	bls.n	800d74e <clear_lock+0xe>
	}
}
 800d782:	bf00      	nop
 800d784:	bf00      	nop
 800d786:	3714      	adds	r7, #20
 800d788:	46bd      	mov	sp, r7
 800d78a:	bc80      	pop	{r7}
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	20006234 	.word	0x20006234

0800d794 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b086      	sub	sp, #24
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7a6:	791b      	ldrb	r3, [r3, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d040      	beq.n	800d82e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7bc:	7858      	ldrb	r0, [r3, #1]
 800d7be:	6879      	ldr	r1, [r7, #4]
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	f7ff fd72 	bl	800d2ac <disk_write>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <sync_window+0x40>
			res = FR_DISK_ERR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	73fb      	strb	r3, [r7, #15]
 800d7d2:	e02c      	b.n	800d82e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7da:	2200      	movs	r2, #0
 800d7dc:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7e4:	6a1b      	ldr	r3, [r3, #32]
 800d7e6:	697a      	ldr	r2, [r7, #20]
 800d7e8:	1ad2      	subs	r2, r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d21b      	bcs.n	800d82e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7fc:	78db      	ldrb	r3, [r3, #3]
 800d7fe:	613b      	str	r3, [r7, #16]
 800d800:	e012      	b.n	800d828 <sync_window+0x94>
					wsect += fs->fsize;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d808:	699b      	ldr	r3, [r3, #24]
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	4413      	add	r3, r2
 800d80e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d816:	7858      	ldrb	r0, [r3, #1]
 800d818:	6879      	ldr	r1, [r7, #4]
 800d81a:	2301      	movs	r3, #1
 800d81c:	697a      	ldr	r2, [r7, #20]
 800d81e:	f7ff fd45 	bl	800d2ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	3b01      	subs	r3, #1
 800d826:	613b      	str	r3, [r7, #16]
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d8e9      	bhi.n	800d802 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d842:	2300      	movs	r3, #0
 800d844:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84e:	683a      	ldr	r2, [r7, #0]
 800d850:	429a      	cmp	r2, r3
 800d852:	d01e      	beq.n	800d892 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff ff9d 	bl	800d794 <sync_window>
 800d85a:	4603      	mov	r3, r0
 800d85c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d116      	bne.n	800d892 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d86a:	7858      	ldrb	r0, [r3, #1]
 800d86c:	6879      	ldr	r1, [r7, #4]
 800d86e:	2301      	movs	r3, #1
 800d870:	683a      	ldr	r2, [r7, #0]
 800d872:	f7ff fcfb 	bl	800d26c <disk_read>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d004      	beq.n	800d886 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d87c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d880:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d882:	2301      	movs	r3, #1
 800d884:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d88c:	461a      	mov	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800d892:	7bfb      	ldrb	r3, [r7, #15]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff ff75 	bl	800d794 <sync_window>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d8ae:	7bfb      	ldrb	r3, [r7, #15]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f040 80ad 	bne.w	800da10 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	f040 8098 	bne.w	800d9f4 <sync_fs+0x158>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ca:	795b      	ldrb	r3, [r3, #5]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	f040 8091 	bne.w	800d9f4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8da:	895b      	ldrh	r3, [r3, #10]
 800d8dc:	461a      	mov	r2, r3
 800d8de:	2100      	movs	r1, #0
 800d8e0:	f7ff fd40 	bl	800d364 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2255      	movs	r2, #85	; 0x55
 800d8e8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	22aa      	movs	r2, #170	; 0xaa
 800d8f0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2252      	movs	r2, #82	; 0x52
 800d8f8:	701a      	strb	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2252      	movs	r2, #82	; 0x52
 800d8fe:	705a      	strb	r2, [r3, #1]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2261      	movs	r2, #97	; 0x61
 800d904:	709a      	strb	r2, [r3, #2]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2241      	movs	r2, #65	; 0x41
 800d90a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2272      	movs	r2, #114	; 0x72
 800d910:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2272      	movs	r2, #114	; 0x72
 800d918:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2241      	movs	r2, #65	; 0x41
 800d920:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2261      	movs	r2, #97	; 0x61
 800d928:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	b2da      	uxtb	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	b29b      	uxth	r3, r3
 800d946:	0a1b      	lsrs	r3, r3, #8
 800d948:	b29b      	uxth	r3, r3
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d958:	691b      	ldr	r3, [r3, #16]
 800d95a:	0c1b      	lsrs	r3, r3, #16
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d96a:	691b      	ldr	r3, [r3, #16]
 800d96c:	0e1b      	lsrs	r3, r3, #24
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	0a1b      	lsrs	r3, r3, #8
 800d992:	b29b      	uxth	r3, r3
 800d994:	b2da      	uxtb	r2, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	0c1b      	lsrs	r3, r3, #16
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	0e1b      	lsrs	r3, r3, #24
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9c6:	69db      	ldr	r3, [r3, #28]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d9d0:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9d8:	7858      	ldrb	r0, [r3, #1]
 800d9da:	6879      	ldr	r1, [r7, #4]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	f7ff fc61 	bl	800d2ac <disk_write>
			fs->fsi_flag = 0;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9fa:	785b      	ldrb	r3, [r3, #1]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	2100      	movs	r1, #0
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff fc73 	bl	800d2ec <disk_ioctl>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d001      	beq.n	800da10 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800da10:	7bfb      	ldrb	r3, [r7, #15]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da1a:	b480      	push	{r7}
 800da1c:	b083      	sub	sp, #12
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	3b02      	subs	r3, #2
 800da28:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da30:	695b      	ldr	r3, [r3, #20]
 800da32:	3b02      	subs	r3, #2
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d301      	bcc.n	800da3e <clust2sect+0x24>
 800da3a:	2300      	movs	r3, #0
 800da3c:	e00c      	b.n	800da58 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da44:	789b      	ldrb	r3, [r3, #2]
 800da46:	461a      	mov	r2, r3
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	fb03 f202 	mul.w	r2, r3, r2
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da56:	4413      	add	r3, r2
}
 800da58:	4618      	mov	r0, r3
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bc80      	pop	{r7}
 800da60:	4770      	bx	lr

0800da62 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800da62:	b580      	push	{r7, lr}
 800da64:	b086      	sub	sp, #24
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
 800da6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d906      	bls.n	800da80 <get_fat+0x1e>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da78:	695b      	ldr	r3, [r3, #20]
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d302      	bcc.n	800da86 <get_fat+0x24>
		val = 1;	/* Internal error */
 800da80:	2301      	movs	r3, #1
 800da82:	617b      	str	r3, [r7, #20]
 800da84:	e0e4      	b.n	800dc50 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800da86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da8a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	2b03      	cmp	r3, #3
 800da96:	f000 8098 	beq.w	800dbca <get_fat+0x168>
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	f300 80ce 	bgt.w	800dc3c <get_fat+0x1da>
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d002      	beq.n	800daaa <get_fat+0x48>
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	d05f      	beq.n	800db68 <get_fat+0x106>
 800daa8:	e0c8      	b.n	800dc3c <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	085b      	lsrs	r3, r3, #1
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	4413      	add	r3, r2
 800dab6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dabe:	6a1a      	ldr	r2, [r3, #32]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dac6:	895b      	ldrh	r3, [r3, #10]
 800dac8:	4619      	mov	r1, r3
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	fbb3 f3f1 	udiv	r3, r3, r1
 800dad0:	4413      	add	r3, r2
 800dad2:	4619      	mov	r1, r3
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff feaf 	bl	800d838 <move_window>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f040 80b0 	bne.w	800dc42 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	1c5a      	adds	r2, r3, #1
 800dae6:	60fa      	str	r2, [r7, #12]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800daee:	8952      	ldrh	r2, [r2, #10]
 800daf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800daf4:	fb01 f202 	mul.w	r2, r1, r2
 800daf8:	1a9b      	subs	r3, r3, r2
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	5cd3      	ldrb	r3, [r2, r3]
 800dafe:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db06:	6a1a      	ldr	r2, [r3, #32]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db0e:	895b      	ldrh	r3, [r3, #10]
 800db10:	4619      	mov	r1, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	fbb3 f3f1 	udiv	r3, r3, r1
 800db18:	4413      	add	r3, r2
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff fe8b 	bl	800d838 <move_window>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	f040 808e 	bne.w	800dc46 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db30:	895b      	ldrh	r3, [r3, #10]
 800db32:	461a      	mov	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	fbb3 f1f2 	udiv	r1, r3, r2
 800db3a:	fb01 f202 	mul.w	r2, r1, r2
 800db3e:	1a9b      	subs	r3, r3, r2
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	5cd3      	ldrb	r3, [r2, r3]
 800db44:	021b      	lsls	r3, r3, #8
 800db46:	461a      	mov	r2, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	f003 0301 	and.w	r3, r3, #1
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <get_fat+0xfc>
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	091b      	lsrs	r3, r3, #4
 800db5c:	e002      	b.n	800db64 <get_fat+0x102>
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db64:	617b      	str	r3, [r7, #20]
			break;
 800db66:	e073      	b.n	800dc50 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db6e:	6a1a      	ldr	r2, [r3, #32]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db76:	895b      	ldrh	r3, [r3, #10]
 800db78:	085b      	lsrs	r3, r3, #1
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	4619      	mov	r1, r3
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	fbb3 f3f1 	udiv	r3, r3, r1
 800db84:	4413      	add	r3, r2
 800db86:	4619      	mov	r1, r3
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7ff fe55 	bl	800d838 <move_window>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d15a      	bne.n	800dc4a <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	005b      	lsls	r3, r3, #1
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800db9e:	8952      	ldrh	r2, [r2, #10]
 800dba0:	fbb3 f1f2 	udiv	r1, r3, r2
 800dba4:	fb01 f202 	mul.w	r2, r1, r2
 800dba8:	1a9b      	subs	r3, r3, r2
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	4413      	add	r3, r2
 800dbae:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	021b      	lsls	r3, r3, #8
 800dbb8:	b21a      	sxth	r2, r3
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	b21b      	sxth	r3, r3
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	b21b      	sxth	r3, r3
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	617b      	str	r3, [r7, #20]
			break;
 800dbc8:	e042      	b.n	800dc50 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd0:	6a1a      	ldr	r2, [r3, #32]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd8:	895b      	ldrh	r3, [r3, #10]
 800dbda:	089b      	lsrs	r3, r3, #2
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	4619      	mov	r1, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbe6:	4413      	add	r3, r2
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7ff fe24 	bl	800d838 <move_window>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d12b      	bne.n	800dc4e <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800dc00:	8952      	ldrh	r2, [r2, #10]
 800dc02:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc06:	fb01 f202 	mul.w	r2, r1, r2
 800dc0a:	1a9b      	subs	r3, r3, r2
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	4413      	add	r3, r2
 800dc10:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	3303      	adds	r3, #3
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	061a      	lsls	r2, r3, #24
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	3302      	adds	r3, #2
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	041b      	lsls	r3, r3, #16
 800dc22:	4313      	orrs	r3, r2
 800dc24:	693a      	ldr	r2, [r7, #16]
 800dc26:	3201      	adds	r2, #1
 800dc28:	7812      	ldrb	r2, [r2, #0]
 800dc2a:	0212      	lsls	r2, r2, #8
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	693a      	ldr	r2, [r7, #16]
 800dc30:	7812      	ldrb	r2, [r2, #0]
 800dc32:	4313      	orrs	r3, r2
 800dc34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dc38:	617b      	str	r3, [r7, #20]
			break;
 800dc3a:	e009      	b.n	800dc50 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	617b      	str	r3, [r7, #20]
 800dc40:	e006      	b.n	800dc50 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc42:	bf00      	nop
 800dc44:	e004      	b.n	800dc50 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc46:	bf00      	nop
 800dc48:	e002      	b.n	800dc50 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc4a:	bf00      	nop
 800dc4c:	e000      	b.n	800dc50 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc4e:	bf00      	nop
		}
	}

	return val;
 800dc50:	697b      	ldr	r3, [r7, #20]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b088      	sub	sp, #32
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	60f8      	str	r0, [r7, #12]
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d906      	bls.n	800dc7a <put_fat+0x20>
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc72:	695b      	ldr	r3, [r3, #20]
 800dc74:	68ba      	ldr	r2, [r7, #8]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d302      	bcc.n	800dc80 <put_fat+0x26>
		res = FR_INT_ERR;
 800dc7a:	2302      	movs	r3, #2
 800dc7c:	77fb      	strb	r3, [r7, #31]
 800dc7e:	e13a      	b.n	800def6 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b03      	cmp	r3, #3
 800dc8a:	f000 80d0 	beq.w	800de2e <put_fat+0x1d4>
 800dc8e:	2b03      	cmp	r3, #3
 800dc90:	f300 8127 	bgt.w	800dee2 <put_fat+0x288>
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d003      	beq.n	800dca0 <put_fat+0x46>
 800dc98:	2b02      	cmp	r3, #2
 800dc9a:	f000 808f 	beq.w	800ddbc <put_fat+0x162>
 800dc9e:	e120      	b.n	800dee2 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	617b      	str	r3, [r7, #20]
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	085b      	lsrs	r3, r3, #1
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	4413      	add	r3, r2
 800dcac:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcb4:	6a1a      	ldr	r2, [r3, #32]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcbc:	895b      	ldrh	r3, [r3, #10]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcc6:	4413      	add	r3, r2
 800dcc8:	4619      	mov	r1, r3
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f7ff fdb4 	bl	800d838 <move_window>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcd4:	7ffb      	ldrb	r3, [r7, #31]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f040 8106 	bne.w	800dee8 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	1c5a      	adds	r2, r3, #1
 800dce0:	617a      	str	r2, [r7, #20]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800dce8:	8952      	ldrh	r2, [r2, #10]
 800dcea:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcee:	fb01 f202 	mul.w	r2, r1, r2
 800dcf2:	1a9b      	subs	r3, r3, r2
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	f003 0301 	and.w	r3, r3, #1
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00d      	beq.n	800dd20 <put_fat+0xc6>
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	b25b      	sxtb	r3, r3
 800dd0a:	f003 030f 	and.w	r3, r3, #15
 800dd0e:	b25a      	sxtb	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	011b      	lsls	r3, r3, #4
 800dd16:	b25b      	sxtb	r3, r3
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	b25b      	sxtb	r3, r3
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	e001      	b.n	800dd24 <put_fat+0xca>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	69ba      	ldr	r2, [r7, #24]
 800dd26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd2e:	2201      	movs	r2, #1
 800dd30:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd38:	6a1a      	ldr	r2, [r3, #32]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd40:	895b      	ldrh	r3, [r3, #10]
 800dd42:	4619      	mov	r1, r3
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd4a:	4413      	add	r3, r2
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	68f8      	ldr	r0, [r7, #12]
 800dd50:	f7ff fd72 	bl	800d838 <move_window>
 800dd54:	4603      	mov	r3, r0
 800dd56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd58:	7ffb      	ldrb	r3, [r7, #31]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f040 80c6 	bne.w	800deec <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd66:	895b      	ldrh	r3, [r3, #10]
 800dd68:	461a      	mov	r2, r3
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd70:	fb01 f202 	mul.w	r2, r1, r2
 800dd74:	1a9b      	subs	r3, r3, r2
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	4413      	add	r3, r2
 800dd7a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d003      	beq.n	800dd8e <put_fat+0x134>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	091b      	lsrs	r3, r3, #4
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	e00e      	b.n	800ddac <put_fat+0x152>
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	b25b      	sxtb	r3, r3
 800dd94:	f023 030f 	bic.w	r3, r3, #15
 800dd98:	b25a      	sxtb	r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	0a1b      	lsrs	r3, r3, #8
 800dd9e:	b25b      	sxtb	r3, r3
 800dda0:	f003 030f 	and.w	r3, r3, #15
 800dda4:	b25b      	sxtb	r3, r3
 800dda6:	4313      	orrs	r3, r2
 800dda8:	b25b      	sxtb	r3, r3
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	69ba      	ldr	r2, [r7, #24]
 800ddae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	711a      	strb	r2, [r3, #4]
			break;
 800ddba:	e09c      	b.n	800def6 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddc2:	6a1a      	ldr	r2, [r3, #32]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddca:	895b      	ldrh	r3, [r3, #10]
 800ddcc:	085b      	lsrs	r3, r3, #1
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddd8:	4413      	add	r3, r2
 800ddda:	4619      	mov	r1, r3
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f7ff fd2b 	bl	800d838 <move_window>
 800dde2:	4603      	mov	r3, r0
 800dde4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dde6:	7ffb      	ldrb	r3, [r7, #31]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f040 8081 	bne.w	800def0 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ddf8:	8952      	ldrh	r2, [r2, #10]
 800ddfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddfe:	fb01 f202 	mul.w	r2, r1, r2
 800de02:	1a9b      	subs	r3, r3, r2
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	4413      	add	r3, r2
 800de08:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	701a      	strb	r2, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	b29b      	uxth	r3, r3
 800de16:	0a1b      	lsrs	r3, r3, #8
 800de18:	b29a      	uxth	r2, r3
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	3301      	adds	r3, #1
 800de1e:	b2d2      	uxtb	r2, r2
 800de20:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de28:	2201      	movs	r2, #1
 800de2a:	711a      	strb	r2, [r3, #4]
			break;
 800de2c:	e063      	b.n	800def6 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de34:	6a1a      	ldr	r2, [r3, #32]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de3c:	895b      	ldrh	r3, [r3, #10]
 800de3e:	089b      	lsrs	r3, r3, #2
 800de40:	b29b      	uxth	r3, r3
 800de42:	4619      	mov	r1, r3
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	fbb3 f3f1 	udiv	r3, r3, r1
 800de4a:	4413      	add	r3, r2
 800de4c:	4619      	mov	r1, r3
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f7ff fcf2 	bl	800d838 <move_window>
 800de54:	4603      	mov	r3, r0
 800de56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de58:	7ffb      	ldrb	r3, [r7, #31]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d14a      	bne.n	800def4 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800de68:	8952      	ldrh	r2, [r2, #10]
 800de6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800de6e:	fb01 f202 	mul.w	r2, r1, r2
 800de72:	1a9b      	subs	r3, r3, r2
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	4413      	add	r3, r2
 800de78:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	3303      	adds	r3, #3
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	061a      	lsls	r2, r3, #24
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	3302      	adds	r3, #2
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	041b      	lsls	r3, r3, #16
 800de8a:	4313      	orrs	r3, r2
 800de8c:	69ba      	ldr	r2, [r7, #24]
 800de8e:	3201      	adds	r2, #1
 800de90:	7812      	ldrb	r2, [r2, #0]
 800de92:	0212      	lsls	r2, r2, #8
 800de94:	4313      	orrs	r3, r2
 800de96:	69ba      	ldr	r2, [r7, #24]
 800de98:	7812      	ldrb	r2, [r2, #0]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	701a      	strb	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	0a1b      	lsrs	r3, r3, #8
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	3301      	adds	r3, #1
 800deba:	b2d2      	uxtb	r2, r2
 800debc:	701a      	strb	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	0c1a      	lsrs	r2, r3, #16
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	3302      	adds	r3, #2
 800dec6:	b2d2      	uxtb	r2, r2
 800dec8:	701a      	strb	r2, [r3, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	0e1a      	lsrs	r2, r3, #24
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	3303      	adds	r3, #3
 800ded2:	b2d2      	uxtb	r2, r2
 800ded4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dedc:	2201      	movs	r2, #1
 800dede:	711a      	strb	r2, [r3, #4]
			break;
 800dee0:	e009      	b.n	800def6 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800dee2:	2302      	movs	r3, #2
 800dee4:	77fb      	strb	r3, [r7, #31]
 800dee6:	e006      	b.n	800def6 <put_fat+0x29c>
			if (res != FR_OK) break;
 800dee8:	bf00      	nop
 800deea:	e004      	b.n	800def6 <put_fat+0x29c>
			if (res != FR_OK) break;
 800deec:	bf00      	nop
 800deee:	e002      	b.n	800def6 <put_fat+0x29c>
			if (res != FR_OK) break;
 800def0:	bf00      	nop
 800def2:	e000      	b.n	800def6 <put_fat+0x29c>
			if (res != FR_OK) break;
 800def4:	bf00      	nop
		}
	}

	return res;
 800def6:	7ffb      	ldrb	r3, [r7, #31]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3720      	adds	r7, #32
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d906      	bls.n	800df1e <remove_chain+0x1e>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d302      	bcc.n	800df24 <remove_chain+0x24>
		res = FR_INT_ERR;
 800df1e:	2302      	movs	r3, #2
 800df20:	73fb      	strb	r3, [r7, #15]
 800df22:	e049      	b.n	800dfb8 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800df24:	2300      	movs	r3, #0
 800df26:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800df28:	e03b      	b.n	800dfa2 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800df2a:	6839      	ldr	r1, [r7, #0]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7ff fd98 	bl	800da62 <get_fat>
 800df32:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d03b      	beq.n	800dfb2 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d102      	bne.n	800df46 <remove_chain+0x46>
 800df40:	2302      	movs	r3, #2
 800df42:	73fb      	strb	r3, [r7, #15]
 800df44:	e038      	b.n	800dfb8 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df4c:	d102      	bne.n	800df54 <remove_chain+0x54>
 800df4e:	2301      	movs	r3, #1
 800df50:	73fb      	strb	r3, [r7, #15]
 800df52:	e031      	b.n	800dfb8 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800df54:	2200      	movs	r2, #0
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7ff fe7e 	bl	800dc5a <put_fat>
 800df5e:	4603      	mov	r3, r0
 800df60:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800df62:	7bfb      	ldrb	r3, [r7, #15]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d126      	bne.n	800dfb6 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df74:	d013      	beq.n	800df9e <remove_chain+0x9e>
				fs->free_clust++;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df7c:	691b      	ldr	r3, [r3, #16]
 800df7e:	3301      	adds	r3, #1
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800df86:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df8e:	795b      	ldrb	r3, [r3, #5]
 800df90:	f043 0301 	orr.w	r3, r3, #1
 800df94:	b2da      	uxtb	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df9c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfa8:	695b      	ldr	r3, [r3, #20]
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d3bc      	bcc.n	800df2a <remove_chain+0x2a>
 800dfb0:	e002      	b.n	800dfb8 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800dfb2:	bf00      	nop
 800dfb4:	e000      	b.n	800dfb8 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800dfb6:	bf00      	nop
		}
	}

	return res;
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b086      	sub	sp, #24
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
 800dfca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d111      	bne.n	800dff6 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d006      	beq.n	800dff0 <create_chain+0x2e>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfe8:	695b      	ldr	r3, [r3, #20]
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d31d      	bcc.n	800e02c <create_chain+0x6a>
 800dff0:	2301      	movs	r3, #1
 800dff2:	613b      	str	r3, [r7, #16]
 800dff4:	e01a      	b.n	800e02c <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800dff6:	6839      	ldr	r1, [r7, #0]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff fd32 	bl	800da62 <get_fat>
 800dffe:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	2b01      	cmp	r3, #1
 800e004:	d801      	bhi.n	800e00a <create_chain+0x48>
 800e006:	2301      	movs	r3, #1
 800e008:	e07f      	b.n	800e10a <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e010:	d101      	bne.n	800e016 <create_chain+0x54>
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	e079      	b.n	800e10a <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	429a      	cmp	r2, r3
 800e022:	d201      	bcs.n	800e028 <create_chain+0x66>
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	e070      	b.n	800e10a <create_chain+0x148>
		scl = clst;
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	3301      	adds	r3, #1
 800e034:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e03c:	695b      	ldr	r3, [r3, #20]
 800e03e:	697a      	ldr	r2, [r7, #20]
 800e040:	429a      	cmp	r2, r3
 800e042:	d307      	bcc.n	800e054 <create_chain+0x92>
			ncl = 2;
 800e044:	2302      	movs	r3, #2
 800e046:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800e048:	697a      	ldr	r2, [r7, #20]
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d901      	bls.n	800e054 <create_chain+0x92>
 800e050:	2300      	movs	r3, #0
 800e052:	e05a      	b.n	800e10a <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800e054:	6979      	ldr	r1, [r7, #20]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff fd03 	bl	800da62 <get_fat>
 800e05c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00e      	beq.n	800e082 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e06a:	d002      	beq.n	800e072 <create_chain+0xb0>
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d101      	bne.n	800e076 <create_chain+0xb4>
			return cs;
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	e049      	b.n	800e10a <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d1d8      	bne.n	800e030 <create_chain+0x6e>
 800e07e:	2300      	movs	r3, #0
 800e080:	e043      	b.n	800e10a <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800e082:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800e084:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800e088:	6979      	ldr	r1, [r7, #20]
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7ff fde5 	bl	800dc5a <put_fat>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800e094:	7bfb      	ldrb	r3, [r7, #15]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d109      	bne.n	800e0ae <create_chain+0xec>
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d006      	beq.n	800e0ae <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff fdd8 	bl	800dc5a <put_fat>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800e0ae:	7bfb      	ldrb	r3, [r7, #15]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d121      	bne.n	800e0f8 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0c6:	691b      	ldr	r3, [r3, #16]
 800e0c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0cc:	d01c      	beq.n	800e108 <create_chain+0x146>
			fs->free_clust--;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0d4:	691b      	ldr	r3, [r3, #16]
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e0de:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e6:	795b      	ldrb	r3, [r3, #5]
 800e0e8:	f043 0301 	orr.w	r3, r3, #1
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f4:	715a      	strb	r2, [r3, #5]
 800e0f6:	e007      	b.n	800e108 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d102      	bne.n	800e104 <create_chain+0x142>
 800e0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e102:	e000      	b.n	800e106 <create_chain+0x144>
 800e104:	2301      	movs	r3, #1
 800e106:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800e108:	697b      	ldr	r3, [r7, #20]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3718      	adds	r7, #24
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800e112:	b480      	push	{r7}
 800e114:	b087      	sub	sp, #28
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e124:	3304      	adds	r3, #4
 800e126:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e134:	895b      	ldrh	r3, [r3, #10]
 800e136:	461a      	mov	r2, r3
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e144:	6812      	ldr	r2, [r2, #0]
 800e146:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e14a:	7892      	ldrb	r2, [r2, #2]
 800e14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e150:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	1d1a      	adds	r2, r3, #4
 800e156:	613a      	str	r2, [r7, #16]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <clmt_clust+0x54>
 800e162:	2300      	movs	r3, #0
 800e164:	e010      	b.n	800e188 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d307      	bcc.n	800e17e <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800e16e:	697a      	ldr	r2, [r7, #20]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	1ad3      	subs	r3, r2, r3
 800e174:	617b      	str	r3, [r7, #20]
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	3304      	adds	r3, #4
 800e17a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e17c:	e7e9      	b.n	800e152 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800e17e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	4413      	add	r3, r2
}
 800e188:	4618      	mov	r0, r3
 800e18a:	371c      	adds	r7, #28
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bc80      	pop	{r7}
 800e190:	4770      	bx	lr

0800e192 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b086      	sub	sp, #24
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
 800e19a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1a6:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d009      	beq.n	800e1cc <dir_sdi+0x3a>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1c4:	695b      	ldr	r3, [r3, #20]
 800e1c6:	697a      	ldr	r2, [r7, #20]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d301      	bcc.n	800e1d0 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800e1cc:	2302      	movs	r3, #2
 800e1ce:	e0aa      	b.n	800e326 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d110      	bne.n	800e1f8 <dir_sdi+0x66>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	d107      	bne.n	800e1f8 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f6:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d115      	bne.n	800e22a <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e20a:	891b      	ldrh	r3, [r3, #8]
 800e20c:	461a      	mov	r2, r3
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	4293      	cmp	r3, r2
 800e212:	d301      	bcc.n	800e218 <dir_sdi+0x86>
			return FR_INT_ERR;
 800e214:	2302      	movs	r3, #2
 800e216:	e086      	b.n	800e326 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e226:	613b      	str	r3, [r7, #16]
 800e228:	e043      	b.n	800e2b2 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e236:	895b      	ldrh	r3, [r3, #10]
 800e238:	095b      	lsrs	r3, r3, #5
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	461a      	mov	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24a:	789b      	ldrb	r3, [r3, #2]
 800e24c:	fb02 f303 	mul.w	r3, r2, r3
 800e250:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800e252:	e021      	b.n	800e298 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	6979      	ldr	r1, [r7, #20]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7ff fbff 	bl	800da62 <get_fat>
 800e264:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e26c:	d101      	bne.n	800e272 <dir_sdi+0xe0>
 800e26e:	2301      	movs	r3, #1
 800e270:	e059      	b.n	800e326 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d909      	bls.n	800e28c <dir_sdi+0xfa>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	697a      	ldr	r2, [r7, #20]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d301      	bcc.n	800e290 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800e28c:	2302      	movs	r3, #2
 800e28e:	e04a      	b.n	800e326 <dir_sdi+0x194>
			idx -= ic;
 800e290:	683a      	ldr	r2, [r7, #0]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d2d9      	bcs.n	800e254 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6979      	ldr	r1, [r7, #20]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7ff fbb5 	bl	800da1a <clust2sect>
 800e2b0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d101      	bne.n	800e2c8 <dir_sdi+0x136>
 800e2c4:	2302      	movs	r3, #2
 800e2c6:	e02e      	b.n	800e326 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2d4:	895b      	ldrh	r3, [r3, #10]
 800e2d6:	095b      	lsrs	r3, r3, #5
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	461a      	mov	r2, r3
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e2ec:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e304:	895b      	ldrh	r3, [r3, #10]
 800e306:	095b      	lsrs	r3, r3, #5
 800e308:	b29b      	uxth	r3, r3
 800e30a:	461a      	mov	r2, r3
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e312:	fb01 f202 	mul.w	r2, r1, r2
 800e316:	1a9b      	subs	r3, r3, r2
 800e318:	015b      	lsls	r3, r3, #5
 800e31a:	4403      	add	r3, r0
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e322:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3718      	adds	r7, #24
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e32e:	b590      	push	{r4, r7, lr}
 800e330:	b087      	sub	sp, #28
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e33e:	88db      	ldrh	r3, [r3, #6]
 800e340:	3301      	adds	r3, #1
 800e342:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	b29b      	uxth	r3, r3
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d005      	beq.n	800e358 <dir_next+0x2a>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d101      	bne.n	800e35c <dir_next+0x2e>
		return FR_NO_FILE;
 800e358:	2304      	movs	r3, #4
 800e35a:	e12e      	b.n	800e5ba <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e368:	895b      	ldrh	r3, [r3, #10]
 800e36a:	095b      	lsrs	r3, r3, #5
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	461a      	mov	r2, r3
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	fbb3 f1f2 	udiv	r1, r3, r2
 800e376:	fb01 f202 	mul.w	r2, r1, r2
 800e37a:	1a9b      	subs	r3, r3, r2
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f040 80fa 	bne.w	800e576 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	3301      	adds	r3, #1
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e392:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d10d      	bne.n	800e3bc <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3ac:	891b      	ldrh	r3, [r3, #8]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	f0c0 80df 	bcc.w	800e576 <dir_next+0x248>
				return FR_NO_FILE;
 800e3b8:	2304      	movs	r3, #4
 800e3ba:	e0fe      	b.n	800e5ba <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c8:	895b      	ldrh	r3, [r3, #10]
 800e3ca:	095b      	lsrs	r3, r3, #5
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e3dc:	6812      	ldr	r2, [r2, #0]
 800e3de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e3e2:	7892      	ldrb	r2, [r2, #2]
 800e3e4:	3a01      	subs	r2, #1
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	f040 80c4 	bne.w	800e576 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	4619      	mov	r1, r3
 800e400:	4610      	mov	r0, r2
 800e402:	f7ff fb2e 	bl	800da62 <get_fat>
 800e406:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d801      	bhi.n	800e412 <dir_next+0xe4>
 800e40e:	2302      	movs	r3, #2
 800e410:	e0d3      	b.n	800e5ba <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e418:	d101      	bne.n	800e41e <dir_next+0xf0>
 800e41a:	2301      	movs	r3, #1
 800e41c:	e0cd      	b.n	800e5ba <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e42a:	695b      	ldr	r3, [r3, #20]
 800e42c:	697a      	ldr	r2, [r7, #20]
 800e42e:	429a      	cmp	r2, r3
 800e430:	f0c0 808e 	bcc.w	800e550 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d101      	bne.n	800e43e <dir_next+0x110>
 800e43a:	2304      	movs	r3, #4
 800e43c:	e0bd      	b.n	800e5ba <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	4619      	mov	r1, r3
 800e450:	4610      	mov	r0, r2
 800e452:	f7ff fdb6 	bl	800dfc2 <create_chain>
 800e456:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <dir_next+0x134>
 800e45e:	2307      	movs	r3, #7
 800e460:	e0ab      	b.n	800e5ba <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d101      	bne.n	800e46c <dir_next+0x13e>
 800e468:	2302      	movs	r3, #2
 800e46a:	e0a6      	b.n	800e5ba <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e472:	d101      	bne.n	800e478 <dir_next+0x14a>
 800e474:	2301      	movs	r3, #1
 800e476:	e0a0      	b.n	800e5ba <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4618      	mov	r0, r3
 800e482:	f7ff f987 	bl	800d794 <sync_window>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <dir_next+0x162>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e094      	b.n	800e5ba <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4618      	mov	r0, r3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a6:	895b      	ldrh	r3, [r3, #10]
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	f7fe ff5a 	bl	800d364 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4be:	681c      	ldr	r4, [r3, #0]
 800e4c0:	6979      	ldr	r1, [r7, #20]
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	f7ff faa9 	bl	800da1a <clust2sect>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800e4ce:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	613b      	str	r3, [r7, #16]
 800e4d4:	e021      	b.n	800e51a <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7ff f950 	bl	800d794 <sync_window>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <dir_next+0x1d0>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e05d      	b.n	800e5ba <dir_next+0x28c>
						dp->fs->winsect++;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800e50a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e50c:	3201      	adds	r2, #1
 800e50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e512:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	3301      	adds	r3, #1
 800e518:	613b      	str	r3, [r7, #16]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e526:	789b      	ldrb	r3, [r3, #2]
 800e528:	461a      	mov	r2, r3
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d3d2      	bcc.n	800e4d6 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e53c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	1acb      	subs	r3, r1, r3
 800e54a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e54e:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e556:	461a      	mov	r2, r3
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6979      	ldr	r1, [r7, #20]
 800e566:	4618      	mov	r0, r3
 800e568:	f7ff fa57 	bl	800da1a <clust2sect>
 800e56c:	4602      	mov	r2, r0
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e574:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	b29a      	uxth	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e580:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4618      	mov	r0, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e598:	895b      	ldrh	r3, [r3, #10]
 800e59a:	095b      	lsrs	r3, r3, #5
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	461a      	mov	r2, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5a6:	fb01 f202 	mul.w	r2, r1, r2
 800e5aa:	1a9b      	subs	r3, r3, r2
 800e5ac:	015b      	lsls	r3, r3, #5
 800e5ae:	4403      	add	r3, r0
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800e5b6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	371c      	adds	r7, #28
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd90      	pop	{r4, r7, pc}

0800e5c2 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7ff fddf 	bl	800e192 <dir_sdi>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e5d8:	7bfb      	ldrb	r3, [r7, #15]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d135      	bne.n	800e64a <dir_alloc+0x88>
		n = 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	f7ff f91f 	bl	800d838 <move_window>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800e5fe:	7bfb      	ldrb	r3, [r7, #15]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d121      	bne.n	800e648 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e60a:	695b      	ldr	r3, [r3, #20]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2be5      	cmp	r3, #229	; 0xe5
 800e610:	d006      	beq.n	800e620 <dir_alloc+0x5e>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e618:	695b      	ldr	r3, [r3, #20]
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d107      	bne.n	800e630 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	3301      	adds	r3, #1
 800e624:	60bb      	str	r3, [r7, #8]
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d102      	bne.n	800e634 <dir_alloc+0x72>
 800e62e:	e00c      	b.n	800e64a <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e630:	2300      	movs	r3, #0
 800e632:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800e634:	2101      	movs	r1, #1
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7ff fe79 	bl	800e32e <dir_next>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800e640:	7bfb      	ldrb	r3, [r7, #15]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d0cd      	beq.n	800e5e2 <dir_alloc+0x20>
 800e646:	e000      	b.n	800e64a <dir_alloc+0x88>
			if (res != FR_OK) break;
 800e648:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
 800e64c:	2b04      	cmp	r3, #4
 800e64e:	d101      	bne.n	800e654 <dir_alloc+0x92>
 800e650:	2307      	movs	r3, #7
 800e652:	73fb      	strb	r3, [r7, #15]
	return res;
 800e654:	7bfb      	ldrb	r3, [r7, #15]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800e65e:	b480      	push	{r7}
 800e660:	b085      	sub	sp, #20
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
 800e666:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	331b      	adds	r3, #27
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	021b      	lsls	r3, r3, #8
 800e670:	b21a      	sxth	r2, r3
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	331a      	adds	r3, #26
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	b21b      	sxth	r3, r3
 800e67a:	4313      	orrs	r3, r2
 800e67c:	b21b      	sxth	r3, r3
 800e67e:	b29b      	uxth	r3, r3
 800e680:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	2b03      	cmp	r3, #3
 800e68c:	d10f      	bne.n	800e6ae <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	3315      	adds	r3, #21
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	021b      	lsls	r3, r3, #8
 800e696:	b21a      	sxth	r2, r3
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	3314      	adds	r3, #20
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	b21b      	sxth	r3, r3
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	b21b      	sxth	r3, r3
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	041b      	lsls	r3, r3, #16
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	60fb      	str	r3, [r7, #12]

	return cl;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3714      	adds	r7, #20
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bc80      	pop	{r7}
 800e6b8:	4770      	bx	lr

0800e6ba <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800e6ba:	b480      	push	{r7}
 800e6bc:	b083      	sub	sp, #12
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	331a      	adds	r3, #26
 800e6c8:	683a      	ldr	r2, [r7, #0]
 800e6ca:	b2d2      	uxtb	r2, r2
 800e6cc:	701a      	strb	r2, [r3, #0]
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	0a1b      	lsrs	r3, r3, #8
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	331b      	adds	r3, #27
 800e6da:	b2d2      	uxtb	r2, r2
 800e6dc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	0c1a      	lsrs	r2, r3, #16
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	3314      	adds	r3, #20
 800e6e6:	b2d2      	uxtb	r2, r2
 800e6e8:	701a      	strb	r2, [r3, #0]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	0c1b      	lsrs	r3, r3, #16
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	0a1b      	lsrs	r3, r3, #8
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	3315      	adds	r3, #21
 800e6f8:	b2d2      	uxtb	r2, r2
 800e6fa:	701a      	strb	r2, [r3, #0]
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	bc80      	pop	{r7}
 800e704:	4770      	bx	lr

0800e706 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800e706:	b580      	push	{r7, lr}
 800e708:	b086      	sub	sp, #24
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e70e:	2100      	movs	r1, #0
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7ff fd3e 	bl	800e192 <dir_sdi>
 800e716:	4603      	mov	r3, r0
 800e718:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e71a:	7dfb      	ldrb	r3, [r7, #23]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <dir_find+0x1e>
 800e720:	7dfb      	ldrb	r3, [r7, #23]
 800e722:	e03f      	b.n	800e7a4 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	4619      	mov	r1, r3
 800e736:	4610      	mov	r0, r2
 800e738:	f7ff f87e 	bl	800d838 <move_window>
 800e73c:	4603      	mov	r3, r0
 800e73e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e740:	7dfb      	ldrb	r3, [r7, #23]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d12a      	bne.n	800e79c <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e756:	7bfb      	ldrb	r3, [r7, #15]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d102      	bne.n	800e762 <dir_find+0x5c>
 800e75c:	2304      	movs	r3, #4
 800e75e:	75fb      	strb	r3, [r7, #23]
 800e760:	e01f      	b.n	800e7a2 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	330b      	adds	r3, #11
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	f003 0308 	and.w	r3, r3, #8
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d10b      	bne.n	800e788 <dir_find+0x82>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e776:	699b      	ldr	r3, [r3, #24]
 800e778:	220b      	movs	r2, #11
 800e77a:	4619      	mov	r1, r3
 800e77c:	6938      	ldr	r0, [r7, #16]
 800e77e:	f7fe fe0b 	bl	800d398 <mem_cmp>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00b      	beq.n	800e7a0 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800e788:	2100      	movs	r1, #0
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7ff fdcf 	bl	800e32e <dir_next>
 800e790:	4603      	mov	r3, r0
 800e792:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e794:	7dfb      	ldrb	r3, [r7, #23]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d0c4      	beq.n	800e724 <dir_find+0x1e>
 800e79a:	e002      	b.n	800e7a2 <dir_find+0x9c>
		if (res != FR_OK) break;
 800e79c:	bf00      	nop
 800e79e:	e000      	b.n	800e7a2 <dir_find+0x9c>
			break;
 800e7a0:	bf00      	nop

	return res;
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3718      	adds	r7, #24
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff ff03 	bl	800e5c2 <dir_alloc>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800e7c0:	7bfb      	ldrb	r3, [r7, #15]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d12d      	bne.n	800e822 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7d4:	691b      	ldr	r3, [r3, #16]
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	4610      	mov	r0, r2
 800e7da:	f7ff f82d 	bl	800d838 <move_window>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e7e2:	7bfb      	ldrb	r3, [r7, #15]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d11c      	bne.n	800e822 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7ee:	695b      	ldr	r3, [r3, #20]
 800e7f0:	2220      	movs	r2, #32
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fe fdb5 	bl	800d364 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e800:	6958      	ldr	r0, [r3, #20]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e808:	699b      	ldr	r3, [r3, #24]
 800e80a:	220b      	movs	r2, #11
 800e80c:	4619      	mov	r1, r3
 800e80e:	f7fe fd8b 	bl	800d328 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e81e:	2201      	movs	r2, #1
 800e820:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800e822:	7bfb      	ldrb	r3, [r7, #15]
}
 800e824:	4618      	mov	r0, r3
 800e826:	3710      	adds	r7, #16
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	60fb      	str	r3, [r7, #12]
 800e83c:	e002      	b.n	800e844 <create_name+0x18>
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3301      	adds	r3, #1
 800e842:	60fb      	str	r3, [r7, #12]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b2f      	cmp	r3, #47	; 0x2f
 800e84a:	d0f8      	beq.n	800e83e <create_name+0x12>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	2b5c      	cmp	r3, #92	; 0x5c
 800e852:	d0f4      	beq.n	800e83e <create_name+0x12>
	sfn = dp->fn;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e85a:	699b      	ldr	r3, [r3, #24]
 800e85c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e85e:	220b      	movs	r2, #11
 800e860:	2120      	movs	r1, #32
 800e862:	68b8      	ldr	r0, [r7, #8]
 800e864:	f7fe fd7e 	bl	800d364 <mem_set>
	si = i = b = 0; ni = 8;
 800e868:	2300      	movs	r3, #0
 800e86a:	77fb      	strb	r3, [r7, #31]
 800e86c:	2300      	movs	r3, #0
 800e86e:	613b      	str	r3, [r7, #16]
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	617b      	str	r3, [r7, #20]
 800e874:	2308      	movs	r3, #8
 800e876:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	1c5a      	adds	r2, r3, #1
 800e87c:	617a      	str	r2, [r7, #20]
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	4413      	add	r3, r2
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800e886:	7fbb      	ldrb	r3, [r7, #30]
 800e888:	2b20      	cmp	r3, #32
 800e88a:	d953      	bls.n	800e934 <create_name+0x108>
 800e88c:	7fbb      	ldrb	r3, [r7, #30]
 800e88e:	2b2f      	cmp	r3, #47	; 0x2f
 800e890:	d050      	beq.n	800e934 <create_name+0x108>
 800e892:	7fbb      	ldrb	r3, [r7, #30]
 800e894:	2b5c      	cmp	r3, #92	; 0x5c
 800e896:	d04d      	beq.n	800e934 <create_name+0x108>
		if (c == '.' || i >= ni) {
 800e898:	7fbb      	ldrb	r3, [r7, #30]
 800e89a:	2b2e      	cmp	r3, #46	; 0x2e
 800e89c:	d003      	beq.n	800e8a6 <create_name+0x7a>
 800e89e:	693a      	ldr	r2, [r7, #16]
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d30f      	bcc.n	800e8c6 <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	2b08      	cmp	r3, #8
 800e8aa:	d102      	bne.n	800e8b2 <create_name+0x86>
 800e8ac:	7fbb      	ldrb	r3, [r7, #30]
 800e8ae:	2b2e      	cmp	r3, #46	; 0x2e
 800e8b0:	d001      	beq.n	800e8b6 <create_name+0x8a>
 800e8b2:	2306      	movs	r3, #6
 800e8b4:	e073      	b.n	800e99e <create_name+0x172>
			i = 8; ni = 11;
 800e8b6:	2308      	movs	r3, #8
 800e8b8:	613b      	str	r3, [r7, #16]
 800e8ba:	230b      	movs	r3, #11
 800e8bc:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800e8be:	7ffb      	ldrb	r3, [r7, #31]
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	77fb      	strb	r3, [r7, #31]
 800e8c4:	e035      	b.n	800e932 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e8c6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	da08      	bge.n	800e8e0 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 800e8ce:	7ffb      	ldrb	r3, [r7, #31]
 800e8d0:	f043 0303 	orr.w	r3, r3, #3
 800e8d4:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e8d6:	7fbb      	ldrb	r3, [r7, #30]
 800e8d8:	3b80      	subs	r3, #128	; 0x80
 800e8da:	4a33      	ldr	r2, [pc, #204]	; (800e9a8 <create_name+0x17c>)
 800e8dc:	5cd3      	ldrb	r3, [r2, r3]
 800e8de:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800e8e0:	7fbb      	ldrb	r3, [r7, #30]
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	4831      	ldr	r0, [pc, #196]	; (800e9ac <create_name+0x180>)
 800e8e6:	f7fe fd7d 	bl	800d3e4 <chk_chr>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d001      	beq.n	800e8f4 <create_name+0xc8>
				return FR_INVALID_NAME;
 800e8f0:	2306      	movs	r3, #6
 800e8f2:	e054      	b.n	800e99e <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800e8f4:	7fbb      	ldrb	r3, [r7, #30]
 800e8f6:	2b40      	cmp	r3, #64	; 0x40
 800e8f8:	d907      	bls.n	800e90a <create_name+0xde>
 800e8fa:	7fbb      	ldrb	r3, [r7, #30]
 800e8fc:	2b5a      	cmp	r3, #90	; 0x5a
 800e8fe:	d804      	bhi.n	800e90a <create_name+0xde>
				b |= 2;
 800e900:	7ffb      	ldrb	r3, [r7, #31]
 800e902:	f043 0302 	orr.w	r3, r3, #2
 800e906:	77fb      	strb	r3, [r7, #31]
 800e908:	e00c      	b.n	800e924 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800e90a:	7fbb      	ldrb	r3, [r7, #30]
 800e90c:	2b60      	cmp	r3, #96	; 0x60
 800e90e:	d909      	bls.n	800e924 <create_name+0xf8>
 800e910:	7fbb      	ldrb	r3, [r7, #30]
 800e912:	2b7a      	cmp	r3, #122	; 0x7a
 800e914:	d806      	bhi.n	800e924 <create_name+0xf8>
					b |= 1; c -= 0x20;
 800e916:	7ffb      	ldrb	r3, [r7, #31]
 800e918:	f043 0301 	orr.w	r3, r3, #1
 800e91c:	77fb      	strb	r3, [r7, #31]
 800e91e:	7fbb      	ldrb	r3, [r7, #30]
 800e920:	3b20      	subs	r3, #32
 800e922:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	1c5a      	adds	r2, r3, #1
 800e928:	613a      	str	r2, [r7, #16]
 800e92a:	68ba      	ldr	r2, [r7, #8]
 800e92c:	4413      	add	r3, r2
 800e92e:	7fba      	ldrb	r2, [r7, #30]
 800e930:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e932:	e7a1      	b.n	800e878 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	441a      	add	r2, r3
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800e93e:	7fbb      	ldrb	r3, [r7, #30]
 800e940:	2b20      	cmp	r3, #32
 800e942:	d801      	bhi.n	800e948 <create_name+0x11c>
 800e944:	2304      	movs	r3, #4
 800e946:	e000      	b.n	800e94a <create_name+0x11e>
 800e948:	2300      	movs	r3, #0
 800e94a:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d101      	bne.n	800e956 <create_name+0x12a>
 800e952:	2306      	movs	r3, #6
 800e954:	e023      	b.n	800e99e <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	2be5      	cmp	r3, #229	; 0xe5
 800e95c:	d102      	bne.n	800e964 <create_name+0x138>
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	2205      	movs	r2, #5
 800e962:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	2b08      	cmp	r3, #8
 800e968:	d102      	bne.n	800e970 <create_name+0x144>
 800e96a:	7ffb      	ldrb	r3, [r7, #31]
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800e970:	7ffb      	ldrb	r3, [r7, #31]
 800e972:	f003 0303 	and.w	r3, r3, #3
 800e976:	2b01      	cmp	r3, #1
 800e978:	d103      	bne.n	800e982 <create_name+0x156>
 800e97a:	7fbb      	ldrb	r3, [r7, #30]
 800e97c:	f043 0310 	orr.w	r3, r3, #16
 800e980:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800e982:	7ffb      	ldrb	r3, [r7, #31]
 800e984:	f003 030c 	and.w	r3, r3, #12
 800e988:	2b04      	cmp	r3, #4
 800e98a:	d103      	bne.n	800e994 <create_name+0x168>
 800e98c:	7fbb      	ldrb	r3, [r7, #30]
 800e98e:	f043 0308 	orr.w	r3, r3, #8
 800e992:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	330b      	adds	r3, #11
 800e998:	7fba      	ldrb	r2, [r7, #30]
 800e99a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e99c:	2300      	movs	r3, #0
#endif
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3720      	adds	r7, #32
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	08014a40 	.word	0x08014a40
 800e9ac:	08014230 	.word	0x08014230

0800e9b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	2b2f      	cmp	r3, #47	; 0x2f
 800e9c0:	d003      	beq.n	800e9ca <follow_path+0x1a>
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	2b5c      	cmp	r3, #92	; 0x5c
 800e9c8:	d102      	bne.n	800e9d0 <follow_path+0x20>
		path++;
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	2300      	movs	r3, #0
 800e9da:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	2b1f      	cmp	r3, #31
 800e9e2:	d80c      	bhi.n	800e9fe <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7ff fbd3 	bl	800e192 <dir_sdi>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	6153      	str	r3, [r2, #20]
 800e9fc:	e049      	b.n	800ea92 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e9fe:	463b      	mov	r3, r7
 800ea00:	4619      	mov	r1, r3
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7ff ff12 	bl	800e82c <create_name>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ea0c:	7bfb      	ldrb	r3, [r7, #15]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d13a      	bne.n	800ea88 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f7ff fe77 	bl	800e706 <dir_find>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	7adb      	ldrb	r3, [r3, #11]
 800ea26:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d00a      	beq.n	800ea44 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ea2e:	7bfb      	ldrb	r3, [r7, #15]
 800ea30:	2b04      	cmp	r3, #4
 800ea32:	d12b      	bne.n	800ea8c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ea34:	7bbb      	ldrb	r3, [r7, #14]
 800ea36:	f003 0304 	and.w	r3, r3, #4
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d126      	bne.n	800ea8c <follow_path+0xdc>
 800ea3e:	2305      	movs	r3, #5
 800ea40:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800ea42:	e023      	b.n	800ea8c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea44:	7bbb      	ldrb	r3, [r7, #14]
 800ea46:	f003 0304 	and.w	r3, r3, #4
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d120      	bne.n	800ea90 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea54:	695b      	ldr	r3, [r3, #20]
 800ea56:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	330b      	adds	r3, #11
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	f003 0310 	and.w	r3, r3, #16
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d102      	bne.n	800ea6c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800ea66:	2305      	movs	r3, #5
 800ea68:	73fb      	strb	r3, [r7, #15]
 800ea6a:	e012      	b.n	800ea92 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68b9      	ldr	r1, [r7, #8]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7ff fdf1 	bl	800e65e <ld_clust>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea84:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea86:	e7ba      	b.n	800e9fe <follow_path+0x4e>
			if (res != FR_OK) break;
 800ea88:	bf00      	nop
 800ea8a:	e002      	b.n	800ea92 <follow_path+0xe2>
				break;
 800ea8c:	bf00      	nop
 800ea8e:	e000      	b.n	800ea92 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea90:	bf00      	nop
		}
	}

	return res;
 800ea92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b087      	sub	sp, #28
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eaa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaa8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d031      	beq.n	800eb16 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	617b      	str	r3, [r7, #20]
 800eab8:	e002      	b.n	800eac0 <get_ldnumber+0x24>
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	3301      	adds	r3, #1
 800eabe:	617b      	str	r3, [r7, #20]
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b20      	cmp	r3, #32
 800eac6:	d903      	bls.n	800ead0 <get_ldnumber+0x34>
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2b3a      	cmp	r3, #58	; 0x3a
 800eace:	d1f4      	bne.n	800eaba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	2b3a      	cmp	r3, #58	; 0x3a
 800ead6:	d11c      	bne.n	800eb12 <get_ldnumber+0x76>
			tp = *path;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	1c5a      	adds	r2, r3, #1
 800eae2:	60fa      	str	r2, [r7, #12]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	3b30      	subs	r3, #48	; 0x30
 800eae8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	2b09      	cmp	r3, #9
 800eaee:	d80e      	bhi.n	800eb0e <get_ldnumber+0x72>
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d10a      	bne.n	800eb0e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d107      	bne.n	800eb0e <get_ldnumber+0x72>
					vol = (int)i;
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	3301      	adds	r3, #1
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	697a      	ldr	r2, [r7, #20]
 800eb0c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	e002      	b.n	800eb18 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800eb12:	2300      	movs	r3, #0
 800eb14:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800eb16:	693b      	ldr	r3, [r7, #16]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	371c      	adds	r7, #28
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bc80      	pop	{r7}
 800eb20:	4770      	bx	lr
	...

0800eb24 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb34:	2200      	movs	r2, #0
 800eb36:	711a      	strb	r2, [r3, #4]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb3e:	461a      	mov	r2, r3
 800eb40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb44:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800eb46:	6839      	ldr	r1, [r7, #0]
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f7fe fe75 	bl	800d838 <move_window>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <check_fs+0x34>
		return 3;
 800eb54:	2303      	movs	r3, #3
 800eb56:	e04a      	b.n	800ebee <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb5e:	3301      	adds	r3, #1
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	021b      	lsls	r3, r3, #8
 800eb64:	b21a      	sxth	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800eb6c:	b21b      	sxth	r3, r3
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	b21b      	sxth	r3, r3
 800eb72:	4a21      	ldr	r2, [pc, #132]	; (800ebf8 <check_fs+0xd4>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d001      	beq.n	800eb7c <check_fs+0x58>
		return 2;
 800eb78:	2302      	movs	r3, #2
 800eb7a:	e038      	b.n	800ebee <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3336      	adds	r3, #54	; 0x36
 800eb80:	3303      	adds	r3, #3
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	061a      	lsls	r2, r3, #24
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	3336      	adds	r3, #54	; 0x36
 800eb8a:	3302      	adds	r3, #2
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	041b      	lsls	r3, r3, #16
 800eb90:	4313      	orrs	r3, r2
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	3236      	adds	r2, #54	; 0x36
 800eb96:	3201      	adds	r2, #1
 800eb98:	7812      	ldrb	r2, [r2, #0]
 800eb9a:	0212      	lsls	r2, r2, #8
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800eba4:	4313      	orrs	r3, r2
 800eba6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ebaa:	4a14      	ldr	r2, [pc, #80]	; (800ebfc <check_fs+0xd8>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d101      	bne.n	800ebb4 <check_fs+0x90>
		return 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	e01c      	b.n	800ebee <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	3352      	adds	r3, #82	; 0x52
 800ebb8:	3303      	adds	r3, #3
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	061a      	lsls	r2, r3, #24
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	3352      	adds	r3, #82	; 0x52
 800ebc2:	3302      	adds	r3, #2
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	041b      	lsls	r3, r3, #16
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	3252      	adds	r2, #82	; 0x52
 800ebce:	3201      	adds	r2, #1
 800ebd0:	7812      	ldrb	r2, [r2, #0]
 800ebd2:	0212      	lsls	r2, r2, #8
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ebe2:	4a06      	ldr	r2, [pc, #24]	; (800ebfc <check_fs+0xd8>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d101      	bne.n	800ebec <check_fs+0xc8>
		return 0;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e000      	b.n	800ebee <check_fs+0xca>

	return 1;
 800ebec:	2301      	movs	r3, #1
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	ffffaa55 	.word	0xffffaa55
 800ebfc:	00544146 	.word	0x00544146

0800ec00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b096      	sub	sp, #88	; 0x58
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2200      	movs	r2, #0
 800ec12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ec14:	68b8      	ldr	r0, [r7, #8]
 800ec16:	f7ff ff41 	bl	800ea9c <get_ldnumber>
 800ec1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	da01      	bge.n	800ec26 <find_volume+0x26>
 800ec22:	230b      	movs	r3, #11
 800ec24:	e311      	b.n	800f24a <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ec26:	4a98      	ldr	r2, [pc, #608]	; (800ee88 <find_volume+0x288>)
 800ec28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ec30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d101      	bne.n	800ec3a <find_volume+0x3a>
 800ec36:	230c      	movs	r3, #12
 800ec38:	e307      	b.n	800f24a <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec3e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800ec40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d01c      	beq.n	800ec86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ec4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec52:	785b      	ldrb	r3, [r3, #1]
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fe fac9 	bl	800d1ec <disk_status>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ec60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec64:	f003 0301 	and.w	r3, r3, #1
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d10c      	bne.n	800ec86 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800ec6c:	79fb      	ldrb	r3, [r7, #7]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d007      	beq.n	800ec82 <find_volume+0x82>
 800ec72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec76:	f003 0304 	and.w	r3, r3, #4
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d001      	beq.n	800ec82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ec7e:	230a      	movs	r3, #10
 800ec80:	e2e3      	b.n	800f24a <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800ec82:	2300      	movs	r3, #0
 800ec84:	e2e1      	b.n	800f24a <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ec86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ec90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec92:	b2da      	uxtb	r2, r3
 800ec94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ec9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eca2:	785b      	ldrb	r3, [r3, #1]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7fe fabb 	bl	800d220 <disk_initialize>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800ecb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecb4:	f003 0301 	and.w	r3, r3, #1
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d001      	beq.n	800ecc0 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e2c4      	b.n	800f24a <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800ecc0:	79fb      	ldrb	r3, [r7, #7]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d007      	beq.n	800ecd6 <find_volume+0xd6>
 800ecc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecca:	f003 0304 	and.w	r3, r3, #4
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800ecd2:	230a      	movs	r3, #10
 800ecd4:	e2b9      	b.n	800f24a <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecdc:	7858      	ldrb	r0, [r3, #1]
 800ecde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ece4:	330a      	adds	r3, #10
 800ece6:	461a      	mov	r2, r3
 800ece8:	2102      	movs	r1, #2
 800ecea:	f7fe faff 	bl	800d2ec <disk_ioctl>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10d      	bne.n	800ed10 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecfa:	895b      	ldrh	r3, [r3, #10]
 800ecfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed00:	d306      	bcc.n	800ed10 <find_volume+0x110>
 800ed02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed08:	895b      	ldrh	r3, [r3, #10]
 800ed0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed0e:	d901      	bls.n	800ed14 <find_volume+0x114>
 800ed10:	2301      	movs	r3, #1
 800ed12:	e29a      	b.n	800f24a <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800ed14:	2300      	movs	r3, #0
 800ed16:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800ed18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed1c:	f7ff ff02 	bl	800eb24 <check_fs>
 800ed20:	4603      	mov	r3, r0
 800ed22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800ed26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d153      	bne.n	800edd6 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ed2e:	2300      	movs	r3, #0
 800ed30:	643b      	str	r3, [r7, #64]	; 0x40
 800ed32:	e028      	b.n	800ed86 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800ed34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed38:	011b      	lsls	r3, r3, #4
 800ed3a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ed3e:	4413      	add	r3, r2
 800ed40:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed44:	3304      	adds	r3, #4
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d012      	beq.n	800ed72 <find_volume+0x172>
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	330b      	adds	r3, #11
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	061a      	lsls	r2, r3, #24
 800ed54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed56:	330a      	adds	r3, #10
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	041b      	lsls	r3, r3, #16
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed60:	3209      	adds	r2, #9
 800ed62:	7812      	ldrb	r2, [r2, #0]
 800ed64:	0212      	lsls	r2, r2, #8
 800ed66:	4313      	orrs	r3, r2
 800ed68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed6a:	3208      	adds	r2, #8
 800ed6c:	7812      	ldrb	r2, [r2, #0]
 800ed6e:	431a      	orrs	r2, r3
 800ed70:	e000      	b.n	800ed74 <find_volume+0x174>
 800ed72:	2200      	movs	r2, #0
 800ed74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	3358      	adds	r3, #88	; 0x58
 800ed7a:	443b      	add	r3, r7
 800ed7c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ed80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed82:	3301      	adds	r3, #1
 800ed84:	643b      	str	r3, [r7, #64]	; 0x40
 800ed86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed88:	2b03      	cmp	r3, #3
 800ed8a:	d9d3      	bls.n	800ed34 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ed90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d002      	beq.n	800ed9c <find_volume+0x19c>
 800ed96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800ed9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	3358      	adds	r3, #88	; 0x58
 800eda2:	443b      	add	r3, r7
 800eda4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800eda8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800edaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edac:	2b00      	cmp	r3, #0
 800edae:	d005      	beq.n	800edbc <find_volume+0x1bc>
 800edb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800edb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edb4:	f7ff feb6 	bl	800eb24 <check_fs>
 800edb8:	4603      	mov	r3, r0
 800edba:	e000      	b.n	800edbe <find_volume+0x1be>
 800edbc:	2302      	movs	r3, #2
 800edbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800edc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d005      	beq.n	800edd6 <find_volume+0x1d6>
 800edca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edcc:	3301      	adds	r3, #1
 800edce:	643b      	str	r3, [r7, #64]	; 0x40
 800edd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edd2:	2b03      	cmp	r3, #3
 800edd4:	d9e2      	bls.n	800ed9c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800edd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edda:	2b03      	cmp	r3, #3
 800eddc:	d101      	bne.n	800ede2 <find_volume+0x1e2>
 800edde:	2301      	movs	r3, #1
 800ede0:	e233      	b.n	800f24a <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800ede2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d001      	beq.n	800edee <find_volume+0x1ee>
 800edea:	230d      	movs	r3, #13
 800edec:	e22d      	b.n	800f24a <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800edee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf0:	7b1b      	ldrb	r3, [r3, #12]
 800edf2:	021b      	lsls	r3, r3, #8
 800edf4:	b21a      	sxth	r2, r3
 800edf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf8:	7adb      	ldrb	r3, [r3, #11]
 800edfa:	b21b      	sxth	r3, r3
 800edfc:	4313      	orrs	r3, r2
 800edfe:	b21a      	sxth	r2, r3
 800ee00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee06:	895b      	ldrh	r3, [r3, #10]
 800ee08:	b21b      	sxth	r3, r3
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d001      	beq.n	800ee12 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800ee0e:	230d      	movs	r3, #13
 800ee10:	e21b      	b.n	800f24a <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ee12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee14:	7ddb      	ldrb	r3, [r3, #23]
 800ee16:	021b      	lsls	r3, r3, #8
 800ee18:	b21a      	sxth	r2, r3
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1c:	7d9b      	ldrb	r3, [r3, #22]
 800ee1e:	b21b      	sxth	r3, r3
 800ee20:	4313      	orrs	r3, r2
 800ee22:	b21b      	sxth	r3, r3
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800ee28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d112      	bne.n	800ee54 <find_volume+0x254>
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee30:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ee34:	061a      	lsls	r2, r3, #24
 800ee36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee38:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ee3c:	041b      	lsls	r3, r3, #16
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee42:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ee46:	0212      	lsls	r2, r2, #8
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee4c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ee50:	4313      	orrs	r3, r2
 800ee52:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800ee54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee5e:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800ee60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee62:	7c1a      	ldrb	r2, [r3, #16]
 800ee64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee6a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800ee6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee72:	78db      	ldrb	r3, [r3, #3]
 800ee74:	2b01      	cmp	r3, #1
 800ee76:	d009      	beq.n	800ee8c <find_volume+0x28c>
 800ee78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee7e:	78db      	ldrb	r3, [r3, #3]
 800ee80:	2b02      	cmp	r3, #2
 800ee82:	d003      	beq.n	800ee8c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800ee84:	230d      	movs	r3, #13
 800ee86:	e1e0      	b.n	800f24a <find_volume+0x64a>
 800ee88:	2000622c 	.word	0x2000622c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee92:	78db      	ldrb	r3, [r3, #3]
 800ee94:	461a      	mov	r2, r3
 800ee96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee98:	fb02 f303 	mul.w	r3, r2, r3
 800ee9c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea0:	7b5a      	ldrb	r2, [r3, #13]
 800eea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eea8:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800eeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eeb0:	789b      	ldrb	r3, [r3, #2]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00c      	beq.n	800eed0 <find_volume+0x2d0>
 800eeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eebc:	789b      	ldrb	r3, [r3, #2]
 800eebe:	461a      	mov	r2, r3
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eec6:	789b      	ldrb	r3, [r3, #2]
 800eec8:	3b01      	subs	r3, #1
 800eeca:	4013      	ands	r3, r2
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d001      	beq.n	800eed4 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800eed0:	230d      	movs	r3, #13
 800eed2:	e1ba      	b.n	800f24a <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	7c9b      	ldrb	r3, [r3, #18]
 800eed8:	021b      	lsls	r3, r3, #8
 800eeda:	b21a      	sxth	r2, r3
 800eedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eede:	7c5b      	ldrb	r3, [r3, #17]
 800eee0:	b21b      	sxth	r3, r3
 800eee2:	4313      	orrs	r3, r2
 800eee4:	b21b      	sxth	r3, r3
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eeee:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800eef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eef6:	891b      	ldrh	r3, [r3, #8]
 800eef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eefa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eefe:	8952      	ldrh	r2, [r2, #10]
 800ef00:	0952      	lsrs	r2, r2, #5
 800ef02:	b292      	uxth	r2, r2
 800ef04:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef08:	fb01 f202 	mul.w	r2, r1, r2
 800ef0c:	1a9b      	subs	r3, r3, r2
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800ef14:	230d      	movs	r3, #13
 800ef16:	e198      	b.n	800f24a <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800ef18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1a:	7d1b      	ldrb	r3, [r3, #20]
 800ef1c:	021b      	lsls	r3, r3, #8
 800ef1e:	b21a      	sxth	r2, r3
 800ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef22:	7cdb      	ldrb	r3, [r3, #19]
 800ef24:	b21b      	sxth	r3, r3
 800ef26:	4313      	orrs	r3, r2
 800ef28:	b21b      	sxth	r3, r3
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800ef2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d112      	bne.n	800ef5a <find_volume+0x35a>
 800ef34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef36:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ef3a:	061a      	lsls	r2, r3, #24
 800ef3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ef42:	041b      	lsls	r3, r3, #16
 800ef44:	4313      	orrs	r3, r2
 800ef46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef48:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ef4c:	0212      	lsls	r2, r2, #8
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef52:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ef56:	4313      	orrs	r3, r2
 800ef58:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800ef5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5c:	7bdb      	ldrb	r3, [r3, #15]
 800ef5e:	021b      	lsls	r3, r3, #8
 800ef60:	b21a      	sxth	r2, r3
 800ef62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef64:	7b9b      	ldrb	r3, [r3, #14]
 800ef66:	b21b      	sxth	r3, r3
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	b21b      	sxth	r3, r3
 800ef6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800ef6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d101      	bne.n	800ef78 <find_volume+0x378>
 800ef74:	230d      	movs	r3, #13
 800ef76:	e168      	b.n	800f24a <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800ef78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef7c:	4413      	add	r3, r2
 800ef7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ef84:	8911      	ldrh	r1, [r2, #8]
 800ef86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ef8c:	8952      	ldrh	r2, [r2, #10]
 800ef8e:	0952      	lsrs	r2, r2, #5
 800ef90:	b292      	uxth	r2, r2
 800ef92:	fbb1 f2f2 	udiv	r2, r1, r2
 800ef96:	b292      	uxth	r2, r2
 800ef98:	4413      	add	r3, r2
 800ef9a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d201      	bcs.n	800efa8 <find_volume+0x3a8>
 800efa4:	230d      	movs	r3, #13
 800efa6:	e150      	b.n	800f24a <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800efa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800efb4:	7892      	ldrb	r2, [r2, #2]
 800efb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800efba:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d101      	bne.n	800efc6 <find_volume+0x3c6>
 800efc2:	230d      	movs	r3, #13
 800efc4:	e141      	b.n	800f24a <find_volume+0x64a>
	fmt = FS_FAT12;
 800efc6:	2301      	movs	r3, #1
 800efc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	f640 72f5 	movw	r2, #4085	; 0xff5
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d902      	bls.n	800efdc <find_volume+0x3dc>
 800efd6:	2302      	movs	r3, #2
 800efd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800efdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efde:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d902      	bls.n	800efec <find_volume+0x3ec>
 800efe6:	2303      	movs	r3, #3
 800efe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efee:	3302      	adds	r3, #2
 800eff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eff6:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800eff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800effe:	461a      	mov	r2, r3
 800f000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f002:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800f004:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f008:	4413      	add	r3, r2
 800f00a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f00c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f010:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800f012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f016:	4413      	add	r3, r2
 800f018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f01a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f01e:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800f020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f024:	2b03      	cmp	r3, #3
 800f026:	d124      	bne.n	800f072 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800f028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f02e:	891b      	ldrh	r3, [r3, #8]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d001      	beq.n	800f038 <find_volume+0x438>
 800f034:	230d      	movs	r3, #13
 800f036:	e108      	b.n	800f24a <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800f038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f03e:	061a      	lsls	r2, r3, #24
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800f046:	041b      	lsls	r3, r3, #16
 800f048:	4313      	orrs	r3, r2
 800f04a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f04c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800f050:	0212      	lsls	r2, r2, #8
 800f052:	4313      	orrs	r3, r2
 800f054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f056:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800f05a:	4313      	orrs	r3, r2
 800f05c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f05e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f062:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800f064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f06a:	695b      	ldr	r3, [r3, #20]
 800f06c:	009b      	lsls	r3, r3, #2
 800f06e:	647b      	str	r3, [r7, #68]	; 0x44
 800f070:	e02b      	b.n	800f0ca <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800f072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f078:	891b      	ldrh	r3, [r3, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <find_volume+0x482>
 800f07e:	230d      	movs	r3, #13
 800f080:	e0e3      	b.n	800f24a <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800f082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f088:	6a1a      	ldr	r2, [r3, #32]
 800f08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f08c:	4413      	add	r3, r2
 800f08e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f090:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f094:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f096:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f09a:	2b02      	cmp	r3, #2
 800f09c:	d105      	bne.n	800f0aa <find_volume+0x4aa>
 800f09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	005b      	lsls	r3, r3, #1
 800f0a8:	e00e      	b.n	800f0c8 <find_volume+0x4c8>
 800f0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0b0:	695a      	ldr	r2, [r3, #20]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	4413      	add	r3, r2
 800f0b8:	085a      	lsrs	r2, r3, #1
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0c0:	695b      	ldr	r3, [r3, #20]
 800f0c2:	f003 0301 	and.w	r3, r3, #1
 800f0c6:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800f0c8:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0d0:	699a      	ldr	r2, [r3, #24]
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0d8:	895b      	ldrh	r3, [r3, #10]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0de:	440b      	add	r3, r1
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0e4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800f0e8:	8949      	ldrh	r1, [r1, #10]
 800f0ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d201      	bcs.n	800f0f6 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800f0f2:	230d      	movs	r3, #13
 800f0f4:	e0a9      	b.n	800f24a <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f102:	6113      	str	r3, [r2, #16]
 800f104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f10a:	691b      	ldr	r3, [r3, #16]
 800f10c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f10e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f112:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800f114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f11a:	2280      	movs	r2, #128	; 0x80
 800f11c:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800f11e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f122:	2b03      	cmp	r3, #3
 800f124:	d17a      	bne.n	800f21c <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800f126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f128:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f12c:	021b      	lsls	r3, r3, #8
 800f12e:	b21a      	sxth	r2, r3
 800f130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f136:	b21b      	sxth	r3, r3
 800f138:	4313      	orrs	r3, r2
 800f13a:	b21b      	sxth	r3, r3
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d16d      	bne.n	800f21c <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800f140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f142:	3301      	adds	r3, #1
 800f144:	4619      	mov	r1, r3
 800f146:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f148:	f7fe fb76 	bl	800d838 <move_window>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d164      	bne.n	800f21c <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800f152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f158:	2200      	movs	r2, #0
 800f15a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800f162:	021b      	lsls	r3, r3, #8
 800f164:	b21a      	sxth	r2, r3
 800f166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f168:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800f16c:	b21b      	sxth	r3, r3
 800f16e:	4313      	orrs	r3, r2
 800f170:	b21b      	sxth	r3, r3
 800f172:	4a38      	ldr	r2, [pc, #224]	; (800f254 <find_volume+0x654>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d151      	bne.n	800f21c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17a:	78db      	ldrb	r3, [r3, #3]
 800f17c:	061a      	lsls	r2, r3, #24
 800f17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f180:	789b      	ldrb	r3, [r3, #2]
 800f182:	041b      	lsls	r3, r3, #16
 800f184:	4313      	orrs	r3, r2
 800f186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f188:	7852      	ldrb	r2, [r2, #1]
 800f18a:	0212      	lsls	r2, r2, #8
 800f18c:	4313      	orrs	r3, r2
 800f18e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f190:	7812      	ldrb	r2, [r2, #0]
 800f192:	4313      	orrs	r3, r2
 800f194:	4a30      	ldr	r2, [pc, #192]	; (800f258 <find_volume+0x658>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d140      	bne.n	800f21c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800f19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800f1a0:	061a      	lsls	r2, r3, #24
 800f1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800f1a8:	041b      	lsls	r3, r3, #16
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1ae:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800f1b2:	0212      	lsls	r2, r2, #8
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1b8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	4a27      	ldr	r2, [pc, #156]	; (800f25c <find_volume+0x65c>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d12b      	bne.n	800f21c <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c6:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800f1ca:	061a      	lsls	r2, r3, #24
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800f1d2:	041b      	lsls	r3, r3, #16
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1d8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800f1dc:	0212      	lsls	r2, r2, #8
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1e2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f1ee:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800f1f6:	061a      	lsls	r2, r3, #24
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fa:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800f1fe:	041b      	lsls	r3, r3, #16
 800f200:	4313      	orrs	r3, r2
 800f202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f204:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800f208:	0212      	lsls	r2, r2, #8
 800f20a:	4313      	orrs	r3, r2
 800f20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f20e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800f212:	4313      	orrs	r3, r2
 800f214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f216:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f21a:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f222:	461a      	mov	r2, r3
 800f224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f228:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800f22a:	4b0d      	ldr	r3, [pc, #52]	; (800f260 <find_volume+0x660>)
 800f22c:	881b      	ldrh	r3, [r3, #0]
 800f22e:	3301      	adds	r3, #1
 800f230:	b29a      	uxth	r2, r3
 800f232:	4b0b      	ldr	r3, [pc, #44]	; (800f260 <find_volume+0x660>)
 800f234:	801a      	strh	r2, [r3, #0]
 800f236:	4b0a      	ldr	r3, [pc, #40]	; (800f260 <find_volume+0x660>)
 800f238:	881a      	ldrh	r2, [r3, #0]
 800f23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f240:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800f242:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f244:	f7fe fa7c 	bl	800d740 <clear_lock>
#endif

	return FR_OK;
 800f248:	2300      	movs	r3, #0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3758      	adds	r7, #88	; 0x58
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	ffffaa55 	.word	0xffffaa55
 800f258:	41615252 	.word	0x41615252
 800f25c:	61417272 	.word	0x61417272
 800f260:	20006230 	.word	0x20006230

0800f264 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d02a      	beq.n	800f2cc <validate+0x68>
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d024      	beq.n	800f2cc <validate+0x68>
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d01b      	beq.n	800f2cc <validate+0x68>
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2a0:	88da      	ldrh	r2, [r3, #6]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2a8:	889b      	ldrh	r3, [r3, #4]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d10e      	bne.n	800f2cc <validate+0x68>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2ba:	785b      	ldrb	r3, [r3, #1]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fd ff95 	bl	800d1ec <disk_status>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	f003 0301 	and.w	r3, r3, #1
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d001      	beq.n	800f2d0 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800f2cc:	2309      	movs	r3, #9
 800f2ce:	e000      	b.n	800f2d2 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800f2d0:	2300      	movs	r3, #0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
	...

0800f2dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b088      	sub	sp, #32
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800f2ee:	f107 0310 	add.w	r3, r7, #16
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7ff fbd2 	bl	800ea9c <get_ldnumber>
 800f2f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	da01      	bge.n	800f304 <f_mount+0x28>
 800f300:	230b      	movs	r3, #11
 800f302:	e02f      	b.n	800f364 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f304:	4a19      	ldr	r2, [pc, #100]	; (800f36c <f_mount+0x90>)
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f30c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d007      	beq.n	800f324 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800f314:	69b8      	ldr	r0, [r7, #24]
 800f316:	f7fe fa13 	bl	800d740 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f320:	2200      	movs	r2, #0
 800f322:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d004      	beq.n	800f334 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f330:	2200      	movs	r2, #0
 800f332:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	490d      	ldr	r1, [pc, #52]	; (800f36c <f_mount+0x90>)
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d002      	beq.n	800f34a <f_mount+0x6e>
 800f344:	79fb      	ldrb	r3, [r7, #7]
 800f346:	2b01      	cmp	r3, #1
 800f348:	d001      	beq.n	800f34e <f_mount+0x72>
 800f34a:	2300      	movs	r3, #0
 800f34c:	e00a      	b.n	800f364 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800f34e:	f107 0108 	add.w	r1, r7, #8
 800f352:	f107 030c 	add.w	r3, r7, #12
 800f356:	2200      	movs	r2, #0
 800f358:	4618      	mov	r0, r3
 800f35a:	f7ff fc51 	bl	800ec00 <find_volume>
 800f35e:	4603      	mov	r3, r0
 800f360:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f362:	7dfb      	ldrb	r3, [r7, #23]
}
 800f364:	4618      	mov	r0, r3
 800f366:	3720      	adds	r7, #32
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	2000622c 	.word	0x2000622c

0800f370 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f37e:	f843 0c44 	str.w	r0, [r3, #-68]
 800f382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f386:	f843 1c48 	str.w	r1, [r3, #-72]
 800f38a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f38e:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800f392:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f396:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d101      	bne.n	800f3a2 <f_open+0x32>
 800f39e:	2309      	movs	r3, #9
 800f3a0:	e2e6      	b.n	800f970 <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 800f3a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f3a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f3aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800f3b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f3be:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f3c2:	f003 031f 	and.w	r3, r3, #31
 800f3c6:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800f3ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f3ce:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f3d2:	f023 0301 	bic.w	r3, r3, #1
 800f3d6:	b2da      	uxtb	r2, r3
 800f3d8:	f107 0110 	add.w	r1, r7, #16
 800f3dc:	3908      	subs	r1, #8
 800f3de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f3e2:	3b10      	subs	r3, #16
 800f3e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7ff fc09 	bl	800ec00 <find_volume>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f3f4:	f102 020f 	add.w	r2, r2, #15
 800f3f8:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800f3fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f3fe:	f103 030f 	add.w	r3, r3, #15
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	f040 82ae 	bne.w	800f966 <f_open+0x5f6>
		INIT_BUF(dj);
 800f40a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f40e:	461a      	mov	r2, r3
 800f410:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f414:	3b1c      	subs	r3, #28
 800f416:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800f41a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f41e:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800f422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f426:	3b10      	subs	r3, #16
 800f428:	4611      	mov	r1, r2
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7ff fac0 	bl	800e9b0 <follow_path>
 800f430:	4603      	mov	r3, r0
 800f432:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f436:	f102 020f 	add.w	r2, r2, #15
 800f43a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800f43c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f440:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 800f444:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f448:	f102 0208 	add.w	r2, r2, #8
 800f44c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f44e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f452:	f103 030f 	add.w	r3, r3, #15
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d126      	bne.n	800f4aa <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 800f45c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f460:	f103 0308 	add.w	r3, r3, #8
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d106      	bne.n	800f478 <f_open+0x108>
				res = FR_INVALID_NAME;
 800f46a:	2306      	movs	r3, #6
 800f46c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f470:	f102 020f 	add.w	r2, r2, #15
 800f474:	7013      	strb	r3, [r2, #0]
 800f476:	e018      	b.n	800f4aa <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f478:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f47c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f480:	f023 0301 	bic.w	r3, r3, #1
 800f484:	2b00      	cmp	r3, #0
 800f486:	bf14      	ite	ne
 800f488:	2301      	movne	r3, #1
 800f48a:	2300      	moveq	r3, #0
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	461a      	mov	r2, r3
 800f490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f494:	3b10      	subs	r3, #16
 800f496:	4611      	mov	r1, r2
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fd ffbd 	bl	800d418 <chk_lock>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f4a4:	f102 020f 	add.w	r2, r2, #15
 800f4a8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f4aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f4ae:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f4b2:	f003 031c 	and.w	r3, r3, #28
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	f000 8134 	beq.w	800f724 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 800f4bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f4c0:	f103 030f 	add.w	r3, r3, #15
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d02e      	beq.n	800f528 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800f4ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f4ce:	f103 030f 	add.w	r3, r3, #15
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	2b04      	cmp	r3, #4
 800f4d6:	d112      	bne.n	800f4fe <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f4d8:	f7fe f80e 	bl	800d4f8 <enq_lock>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d007      	beq.n	800f4f2 <f_open+0x182>
 800f4e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f4e6:	3b10      	subs	r3, #16
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7ff f95f 	bl	800e7ac <dir_register>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	e000      	b.n	800f4f4 <f_open+0x184>
 800f4f2:	2312      	movs	r3, #18
 800f4f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f4f8:	f102 020f 	add.w	r2, r2, #15
 800f4fc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f4fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f502:	461a      	mov	r2, r3
 800f504:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f508:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f50c:	f043 0308 	orr.w	r3, r3, #8
 800f510:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 800f514:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f518:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 800f51c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f520:	f102 0208 	add.w	r2, r2, #8
 800f524:	6013      	str	r3, [r2, #0]
 800f526:	e01f      	b.n	800f568 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f528:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f52c:	f103 0308 	add.w	r3, r3, #8
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	330b      	adds	r3, #11
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	f003 0311 	and.w	r3, r3, #17
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d006      	beq.n	800f54c <f_open+0x1dc>
					res = FR_DENIED;
 800f53e:	2307      	movs	r3, #7
 800f540:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f544:	f102 020f 	add.w	r2, r2, #15
 800f548:	7013      	strb	r3, [r2, #0]
 800f54a:	e00d      	b.n	800f568 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800f54c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f550:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f554:	f003 0304 	and.w	r3, r3, #4
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d005      	beq.n	800f568 <f_open+0x1f8>
						res = FR_EXIST;
 800f55c:	2308      	movs	r3, #8
 800f55e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f562:	f102 020f 	add.w	r2, r2, #15
 800f566:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f568:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f56c:	f103 030f 	add.w	r3, r3, #15
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	f040 8108 	bne.w	800f788 <f_open+0x418>
 800f578:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f57c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f580:	f003 0308 	and.w	r3, r3, #8
 800f584:	2b00      	cmp	r3, #0
 800f586:	f000 80ff 	beq.w	800f788 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 800f58a:	f7fd fda9 	bl	800d0e0 <get_fattime>
 800f58e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f592:	f103 0304 	add.w	r3, r3, #4
 800f596:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800f598:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f59c:	f103 0308 	add.w	r3, r3, #8
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	330e      	adds	r3, #14
 800f5a4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f5a8:	f102 0204 	add.w	r2, r2, #4
 800f5ac:	6812      	ldr	r2, [r2, #0]
 800f5ae:	b2d2      	uxtb	r2, r2
 800f5b0:	701a      	strb	r2, [r3, #0]
 800f5b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f5b6:	f103 0304 	add.w	r3, r3, #4
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	0a1b      	lsrs	r3, r3, #8
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f5c6:	f103 0308 	add.w	r3, r3, #8
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	330f      	adds	r3, #15
 800f5ce:	b2d2      	uxtb	r2, r2
 800f5d0:	701a      	strb	r2, [r3, #0]
 800f5d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f5d6:	f103 0304 	add.w	r3, r3, #4
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	0c1a      	lsrs	r2, r3, #16
 800f5de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f5e2:	f103 0308 	add.w	r3, r3, #8
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3310      	adds	r3, #16
 800f5ea:	b2d2      	uxtb	r2, r2
 800f5ec:	701a      	strb	r2, [r3, #0]
 800f5ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f5f2:	f103 0304 	add.w	r3, r3, #4
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	0e1a      	lsrs	r2, r3, #24
 800f5fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f5fe:	f103 0308 	add.w	r3, r3, #8
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	3311      	adds	r3, #17
 800f606:	b2d2      	uxtb	r2, r2
 800f608:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800f60a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f60e:	f103 0308 	add.w	r3, r3, #8
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	330b      	adds	r3, #11
 800f616:	2200      	movs	r2, #0
 800f618:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800f61a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f61e:	f103 0308 	add.w	r3, r3, #8
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	331c      	adds	r3, #28
 800f626:	2200      	movs	r2, #0
 800f628:	701a      	strb	r2, [r3, #0]
 800f62a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f62e:	f103 0308 	add.w	r3, r3, #8
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	331d      	adds	r3, #29
 800f636:	2200      	movs	r2, #0
 800f638:	701a      	strb	r2, [r3, #0]
 800f63a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f63e:	f103 0308 	add.w	r3, r3, #8
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	331e      	adds	r3, #30
 800f646:	2200      	movs	r2, #0
 800f648:	701a      	strb	r2, [r3, #0]
 800f64a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f64e:	f103 0308 	add.w	r3, r3, #8
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	331f      	adds	r3, #31
 800f656:	2200      	movs	r2, #0
 800f658:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800f65a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f65e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800f662:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f666:	f102 0208 	add.w	r2, r2, #8
 800f66a:	6811      	ldr	r1, [r2, #0]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fe fff6 	bl	800e65e <ld_clust>
 800f672:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f676:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800f678:	2100      	movs	r1, #0
 800f67a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f67e:	f103 0308 	add.w	r3, r3, #8
 800f682:	6818      	ldr	r0, [r3, #0]
 800f684:	f7ff f819 	bl	800e6ba <st_clust>
				dj.fs->wflag = 1;
 800f688:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f68c:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800f690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f694:	2201      	movs	r2, #1
 800f696:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800f698:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d072      	beq.n	800f788 <f_open+0x418>
					dw = dj.fs->winsect;
 800f6a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f6a6:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800f6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f6b4:	f102 0204 	add.w	r2, r2, #4
 800f6b8:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800f6ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f6be:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800f6c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f6c6:	6811      	ldr	r1, [r2, #0]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fe fc19 	bl	800df00 <remove_chain>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f6d4:	f102 020f 	add.w	r2, r2, #15
 800f6d8:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800f6da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f6de:	f103 030f 	add.w	r3, r3, #15
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d14f      	bne.n	800f788 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800f6e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f6ec:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 800f6f0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	3b01      	subs	r3, #1
 800f6f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f6fc:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800f6fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f702:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800f706:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f70a:	f102 0204 	add.w	r2, r2, #4
 800f70e:	6811      	ldr	r1, [r2, #0]
 800f710:	4618      	mov	r0, r3
 800f712:	f7fe f891 	bl	800d838 <move_window>
 800f716:	4603      	mov	r3, r0
 800f718:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f71c:	f102 020f 	add.w	r2, r2, #15
 800f720:	7013      	strb	r3, [r2, #0]
 800f722:	e031      	b.n	800f788 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800f724:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f728:	f103 030f 	add.w	r3, r3, #15
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d12a      	bne.n	800f788 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800f732:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f736:	f103 0308 	add.w	r3, r3, #8
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	330b      	adds	r3, #11
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	f003 0310 	and.w	r3, r3, #16
 800f744:	2b00      	cmp	r3, #0
 800f746:	d006      	beq.n	800f756 <f_open+0x3e6>
					res = FR_NO_FILE;
 800f748:	2304      	movs	r3, #4
 800f74a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f74e:	f102 020f 	add.w	r2, r2, #15
 800f752:	7013      	strb	r3, [r2, #0]
 800f754:	e018      	b.n	800f788 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800f756:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f75a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f75e:	f003 0302 	and.w	r3, r3, #2
 800f762:	2b00      	cmp	r3, #0
 800f764:	d010      	beq.n	800f788 <f_open+0x418>
 800f766:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f76a:	f103 0308 	add.w	r3, r3, #8
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	330b      	adds	r3, #11
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	f003 0301 	and.w	r3, r3, #1
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d005      	beq.n	800f788 <f_open+0x418>
						res = FR_DENIED;
 800f77c:	2307      	movs	r3, #7
 800f77e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f782:	f102 020f 	add.w	r2, r2, #15
 800f786:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800f788:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f78c:	f103 030f 	add.w	r3, r3, #15
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d157      	bne.n	800f846 <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f796:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f79a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f79e:	f003 0308 	and.w	r3, r3, #8
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00a      	beq.n	800f7bc <f_open+0x44c>
				mode |= FA__WRITTEN;
 800f7a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f7b0:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f7b4:	f043 0320 	orr.w	r3, r3, #32
 800f7b8:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800f7bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f7c0:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800f7c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f7ce:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800f7d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f7d6:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800f7d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f7dc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f7ea:	f103 0308 	add.w	r3, r3, #8
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f7f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f7f6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f7fa:	f023 0301 	bic.w	r3, r3, #1
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	bf14      	ite	ne
 800f802:	2301      	movne	r3, #1
 800f804:	2300      	moveq	r3, #0
 800f806:	b2db      	uxtb	r3, r3
 800f808:	461a      	mov	r2, r3
 800f80a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f80e:	3b10      	subs	r3, #16
 800f810:	4611      	mov	r1, r2
 800f812:	4618      	mov	r0, r3
 800f814:	f7fd fe94 	bl	800d540 <inc_lock>
 800f818:	4602      	mov	r2, r0
 800f81a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f81e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f826:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800f828:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f82c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f836:	2b00      	cmp	r3, #0
 800f838:	d105      	bne.n	800f846 <f_open+0x4d6>
 800f83a:	2302      	movs	r3, #2
 800f83c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f840:	f102 020f 	add.w	r2, r2, #15
 800f844:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800f846:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f84a:	f103 030f 	add.w	r3, r3, #15
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	f040 8088 	bne.w	800f966 <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 800f856:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f85a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f85e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f862:	461a      	mov	r2, r3
 800f864:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f868:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800f86c:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800f86e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f872:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f87a:	2200      	movs	r2, #0
 800f87c:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800f87e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f882:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800f886:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f88a:	f102 0208 	add.w	r2, r2, #8
 800f88e:	6811      	ldr	r1, [r2, #0]
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe fee4 	bl	800e65e <ld_clust>
 800f896:	4602      	mov	r2, r0
 800f898:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f89c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8a4:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800f8a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f8aa:	f103 0308 	add.w	r3, r3, #8
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	331f      	adds	r3, #31
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	061a      	lsls	r2, r3, #24
 800f8b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f8ba:	f103 0308 	add.w	r3, r3, #8
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	331e      	adds	r3, #30
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	041b      	lsls	r3, r3, #16
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f8cc:	f102 0208 	add.w	r2, r2, #8
 800f8d0:	6812      	ldr	r2, [r2, #0]
 800f8d2:	321d      	adds	r2, #29
 800f8d4:	7812      	ldrb	r2, [r2, #0]
 800f8d6:	0212      	lsls	r2, r2, #8
 800f8d8:	4313      	orrs	r3, r2
 800f8da:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800f8de:	f102 0208 	add.w	r2, r2, #8
 800f8e2:	6812      	ldr	r2, [r2, #0]
 800f8e4:	321c      	adds	r2, #28
 800f8e6:	7812      	ldrb	r2, [r2, #0]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f8ee:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800f8f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f8f6:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800f8f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f8fc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f904:	461a      	mov	r2, r3
 800f906:	2300      	movs	r3, #0
 800f908:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800f90a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f90e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f916:	461a      	mov	r2, r3
 800f918:	2300      	movs	r3, #0
 800f91a:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800f91c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f920:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f928:	461a      	mov	r2, r3
 800f92a:	2300      	movs	r3, #0
 800f92c:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800f92e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f932:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800f936:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f93a:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800f93e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f942:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800f944:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f948:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f94c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f956:	88da      	ldrh	r2, [r3, #6]
 800f958:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f95c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f964:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800f966:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f96a:	f103 030f 	add.w	r3, r3, #15
 800f96e:	781b      	ldrb	r3, [r3, #0]
}
 800f970:	4618      	mov	r0, r3
 800f972:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800f976:	3710      	adds	r7, #16
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b08c      	sub	sp, #48	; 0x30
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	2200      	movs	r2, #0
 800f992:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f7ff fc65 	bl	800f264 <validate>
 800f99a:	4603      	mov	r3, r0
 800f99c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800f99e:	7ffb      	ldrb	r3, [r7, #31]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d001      	beq.n	800f9a8 <f_read+0x2c>
 800f9a4:	7ffb      	ldrb	r3, [r7, #31]
 800f9a6:	e1cd      	b.n	800fd44 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9ae:	79db      	ldrb	r3, [r3, #7]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d004      	beq.n	800f9be <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9ba:	79db      	ldrb	r3, [r3, #7]
 800f9bc:	e1c2      	b.n	800fd44 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9c4:	799b      	ldrb	r3, [r3, #6]
 800f9c6:	f003 0301 	and.w	r3, r3, #1
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d101      	bne.n	800f9d2 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800f9ce:	2307      	movs	r3, #7
 800f9d0:	e1b8      	b.n	800fd44 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9d8:	68da      	ldr	r2, [r3, #12]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	1ad3      	subs	r3, r2, r3
 800f9e4:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	69bb      	ldr	r3, [r7, #24]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	f240 81a5 	bls.w	800fd3a <f_read+0x3be>
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f9f4:	e1a1      	b.n	800fd3a <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9fc:	689b      	ldr	r3, [r3, #8]
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa04:	6812      	ldr	r2, [r2, #0]
 800fa06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa0a:	8952      	ldrh	r2, [r2, #10]
 800fa0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa10:	fb01 f202 	mul.w	r2, r1, r2
 800fa14:	1a9b      	subs	r3, r3, r2
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f040 8140 	bne.w	800fc9c <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa22:	689b      	ldr	r3, [r3, #8]
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa2a:	6812      	ldr	r2, [r2, #0]
 800fa2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa30:	8952      	ldrh	r2, [r2, #10]
 800fa32:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa36:	b2da      	uxtb	r2, r3
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa44:	789b      	ldrb	r3, [r3, #2]
 800fa46:	3b01      	subs	r3, #1
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	4013      	ands	r3, r2
 800fa4c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800fa4e:	7dfb      	ldrb	r3, [r7, #23]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d143      	bne.n	800fadc <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa5a:	689b      	ldr	r3, [r3, #8]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d105      	bne.n	800fa6c <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa66:	691b      	ldr	r3, [r3, #16]
 800fa68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa6a:	e01c      	b.n	800faa6 <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d009      	beq.n	800fa8c <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	4619      	mov	r1, r3
 800fa82:	68f8      	ldr	r0, [r7, #12]
 800fa84:	f7fe fb45 	bl	800e112 <clmt_clust>
 800fa88:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fa8a:	e00c      	b.n	800faa6 <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa92:	681a      	ldr	r2, [r3, #0]
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa9a:	695b      	ldr	r3, [r3, #20]
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	4610      	mov	r0, r2
 800faa0:	f7fd ffdf 	bl	800da62 <get_fat>
 800faa4:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800faa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d806      	bhi.n	800faba <f_read+0x13e>
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fab2:	2202      	movs	r2, #2
 800fab4:	71da      	strb	r2, [r3, #7]
 800fab6:	2302      	movs	r3, #2
 800fab8:	e144      	b.n	800fd44 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800faba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fac0:	d106      	bne.n	800fad0 <f_read+0x154>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fac8:	2201      	movs	r2, #1
 800faca:	71da      	strb	r2, [r3, #7]
 800facc:	2301      	movs	r3, #1
 800face:	e139      	b.n	800fd44 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fad6:	461a      	mov	r2, r3
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800faea:	695b      	ldr	r3, [r3, #20]
 800faec:	4619      	mov	r1, r3
 800faee:	4610      	mov	r0, r2
 800faf0:	f7fd ff93 	bl	800da1a <clust2sect>
 800faf4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d106      	bne.n	800fb0a <f_read+0x18e>
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb02:	2202      	movs	r2, #2
 800fb04:	71da      	strb	r2, [r3, #7]
 800fb06:	2302      	movs	r3, #2
 800fb08:	e11c      	b.n	800fd44 <f_read+0x3c8>
			sect += csect;
 800fb0a:	7dfb      	ldrb	r3, [r7, #23]
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	4413      	add	r3, r2
 800fb10:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb1e:	895b      	ldrh	r3, [r3, #10]
 800fb20:	461a      	mov	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb28:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d066      	beq.n	800fbfe <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800fb30:	7dfa      	ldrb	r2, [r7, #23]
 800fb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb34:	4413      	add	r3, r2
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fb3c:	6812      	ldr	r2, [r2, #0]
 800fb3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fb42:	7892      	ldrb	r2, [r2, #2]
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d90a      	bls.n	800fb5e <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb54:	789b      	ldrb	r3, [r3, #2]
 800fb56:	461a      	mov	r2, r3
 800fb58:	7dfb      	ldrb	r3, [r7, #23]
 800fb5a:	1ad3      	subs	r3, r2, r3
 800fb5c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb6a:	7858      	ldrb	r0, [r3, #1]
 800fb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6e:	693a      	ldr	r2, [r7, #16]
 800fb70:	6a39      	ldr	r1, [r7, #32]
 800fb72:	f7fd fb7b 	bl	800d26c <disk_read>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d006      	beq.n	800fb8a <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb82:	2201      	movs	r2, #1
 800fb84:	71da      	strb	r2, [r3, #7]
 800fb86:	2301      	movs	r3, #1
 800fb88:	e0dc      	b.n	800fd44 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb90:	799b      	ldrb	r3, [r3, #6]
 800fb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d024      	beq.n	800fbe4 <f_read+0x268>
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fba0:	699a      	ldr	r2, [r3, #24]
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d91b      	bls.n	800fbe4 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbb2:	699a      	ldr	r2, [r3, #24]
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fbbe:	6812      	ldr	r2, [r2, #0]
 800fbc0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fbc4:	8952      	ldrh	r2, [r2, #10]
 800fbc6:	fb02 f303 	mul.w	r3, r2, r3
 800fbca:	6a3a      	ldr	r2, [r7, #32]
 800fbcc:	18d0      	adds	r0, r2, r3
 800fbce:	68f9      	ldr	r1, [r7, #12]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbdc:	895b      	ldrh	r3, [r3, #10]
 800fbde:	461a      	mov	r2, r3
 800fbe0:	f7fd fba2 	bl	800d328 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbf0:	895b      	ldrh	r3, [r3, #10]
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf6:	fb02 f303 	mul.w	r3, r2, r3
 800fbfa:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800fbfc:	e085      	b.n	800fd0a <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc04:	699b      	ldr	r3, [r3, #24]
 800fc06:	693a      	ldr	r2, [r7, #16]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d041      	beq.n	800fc90 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc12:	799b      	ldrb	r3, [r3, #6]
 800fc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d023      	beq.n	800fc64 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc28:	7858      	ldrb	r0, [r3, #1]
 800fc2a:	68f9      	ldr	r1, [r7, #12]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc32:	699a      	ldr	r2, [r3, #24]
 800fc34:	2301      	movs	r3, #1
 800fc36:	f7fd fb39 	bl	800d2ac <disk_write>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d006      	beq.n	800fc4e <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc46:	2201      	movs	r2, #1
 800fc48:	71da      	strb	r2, [r3, #7]
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e07a      	b.n	800fd44 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc54:	799b      	ldrb	r3, [r3, #6]
 800fc56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc62:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc70:	7858      	ldrb	r0, [r3, #1]
 800fc72:	68f9      	ldr	r1, [r7, #12]
 800fc74:	2301      	movs	r3, #1
 800fc76:	693a      	ldr	r2, [r7, #16]
 800fc78:	f7fd faf8 	bl	800d26c <disk_read>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d006      	beq.n	800fc90 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc88:	2201      	movs	r2, #1
 800fc8a:	71da      	strb	r2, [r3, #7]
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e059      	b.n	800fd44 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc96:	461a      	mov	r2, r3
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fca8:	895b      	ldrh	r3, [r3, #10]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fcba:	6812      	ldr	r2, [r2, #0]
 800fcbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fcc0:	8952      	ldrh	r2, [r2, #10]
 800fcc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcc6:	fb01 f202 	mul.w	r2, r1, r2
 800fcca:	1a9b      	subs	r3, r3, r2
 800fccc:	1ac3      	subs	r3, r0, r3
 800fcce:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800fcd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d901      	bls.n	800fcdc <f_read+0x360>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fce2:	689b      	ldr	r3, [r3, #8]
 800fce4:	68fa      	ldr	r2, [r7, #12]
 800fce6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fcea:	6812      	ldr	r2, [r2, #0]
 800fcec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fcf0:	8952      	ldrh	r2, [r2, #10]
 800fcf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcf6:	fb01 f202 	mul.w	r2, r1, r2
 800fcfa:	1a9b      	subs	r3, r3, r2
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	4413      	add	r3, r2
 800fd00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd02:	4619      	mov	r1, r3
 800fd04:	6a38      	ldr	r0, [r7, #32]
 800fd06:	f7fd fb0f 	bl	800d328 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fd0a:	6a3a      	ldr	r2, [r7, #32]
 800fd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0e:	4413      	add	r3, r2
 800fd10:	623b      	str	r3, [r7, #32]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd18:	689a      	ldr	r2, [r3, #8]
 800fd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd1c:	4413      	add	r3, r2
 800fd1e:	68fa      	ldr	r2, [r7, #12]
 800fd20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fd24:	6093      	str	r3, [r2, #8]
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2c:	441a      	add	r2, r3
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	601a      	str	r2, [r3, #0]
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd36:	1ad3      	subs	r3, r2, r3
 800fd38:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	f47f ae5a 	bne.w	800f9f6 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800fd42:	2300      	movs	r3, #0
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3730      	adds	r7, #48	; 0x30
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b08a      	sub	sp, #40	; 0x28
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	607a      	str	r2, [r7, #4]
 800fd58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	2200      	movs	r2, #0
 800fd62:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f7ff fa7d 	bl	800f264 <validate>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800fd6e:	7dfb      	ldrb	r3, [r7, #23]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d001      	beq.n	800fd78 <f_write+0x2c>
 800fd74:	7dfb      	ldrb	r3, [r7, #23]
 800fd76:	e21e      	b.n	80101b6 <f_write+0x46a>
	if (fp->err)							/* Check error */
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd7e:	79db      	ldrb	r3, [r3, #7]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d004      	beq.n	800fd8e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd8a:	79db      	ldrb	r3, [r3, #7]
 800fd8c:	e213      	b.n	80101b6 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd94:	799b      	ldrb	r3, [r3, #6]
 800fd96:	f003 0302 	and.w	r3, r3, #2
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d101      	bne.n	800fda2 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800fd9e:	2307      	movs	r3, #7
 800fda0:	e209      	b.n	80101b6 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fda8:	689a      	ldr	r2, [r3, #8]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	441a      	add	r2, r3
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	f080 81d9 	bcs.w	801016e <f_write+0x422>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800fdc0:	e1d5      	b.n	801016e <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	68fa      	ldr	r2, [r7, #12]
 800fdcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fdd0:	6812      	ldr	r2, [r2, #0]
 800fdd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fdd6:	8952      	ldrh	r2, [r2, #10]
 800fdd8:	fbb3 f1f2 	udiv	r1, r3, r2
 800fddc:	fb01 f202 	mul.w	r2, r1, r2
 800fde0:	1a9b      	subs	r3, r3, r2
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f040 8169 	bne.w	80100ba <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fdf6:	6812      	ldr	r2, [r2, #0]
 800fdf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fdfc:	8952      	ldrh	r2, [r2, #10]
 800fdfe:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe02:	b2da      	uxtb	r2, r3
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe10:	789b      	ldrb	r3, [r3, #2]
 800fe12:	3b01      	subs	r3, #1
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	4013      	ands	r3, r2
 800fe18:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800fe1a:	7dbb      	ldrb	r3, [r7, #22]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d15f      	bne.n	800fee0 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d111      	bne.n	800fe50 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe32:	691b      	ldr	r3, [r3, #16]
 800fe34:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800fe36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d126      	bne.n	800fe8a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2100      	movs	r1, #0
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fe f8bb 	bl	800dfc2 <create_chain>
 800fe4c:	6278      	str	r0, [r7, #36]	; 0x24
 800fe4e:	e01c      	b.n	800fe8a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d009      	beq.n	800fe70 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	4619      	mov	r1, r3
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f7fe f953 	bl	800e112 <clmt_clust>
 800fe6c:	6278      	str	r0, [r7, #36]	; 0x24
 800fe6e:	e00c      	b.n	800fe8a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe7e:	695b      	ldr	r3, [r3, #20]
 800fe80:	4619      	mov	r1, r3
 800fe82:	4610      	mov	r0, r2
 800fe84:	f7fe f89d 	bl	800dfc2 <create_chain>
 800fe88:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fe8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f000 8173 	beq.w	8010178 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800fe92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d106      	bne.n	800fea6 <f_write+0x15a>
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe9e:	2202      	movs	r2, #2
 800fea0:	71da      	strb	r2, [r3, #7]
 800fea2:	2302      	movs	r3, #2
 800fea4:	e187      	b.n	80101b6 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800fea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800feac:	d106      	bne.n	800febc <f_write+0x170>
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800feb4:	2201      	movs	r2, #1
 800feb6:	71da      	strb	r2, [r3, #7]
 800feb8:	2301      	movs	r3, #1
 800feba:	e17c      	b.n	80101b6 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fec2:	461a      	mov	r2, r3
 800fec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec6:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fece:	691b      	ldr	r3, [r3, #16]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d105      	bne.n	800fee0 <f_write+0x194>
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800feda:	461a      	mov	r2, r3
 800fedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fede:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fee6:	799b      	ldrb	r3, [r3, #6]
 800fee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feec:	2b00      	cmp	r3, #0
 800feee:	d023      	beq.n	800ff38 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fefc:	7858      	ldrb	r0, [r3, #1]
 800fefe:	68f9      	ldr	r1, [r7, #12]
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff06:	699a      	ldr	r2, [r3, #24]
 800ff08:	2301      	movs	r3, #1
 800ff0a:	f7fd f9cf 	bl	800d2ac <disk_write>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d006      	beq.n	800ff22 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	71da      	strb	r2, [r3, #7]
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e149      	b.n	80101b6 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff28:	799b      	ldrb	r3, [r3, #6]
 800ff2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff2e:	b2da      	uxtb	r2, r3
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff36:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff46:	695b      	ldr	r3, [r3, #20]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	f7fd fd65 	bl	800da1a <clust2sect>
 800ff50:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d106      	bne.n	800ff66 <f_write+0x21a>
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff5e:	2202      	movs	r2, #2
 800ff60:	71da      	strb	r2, [r3, #7]
 800ff62:	2302      	movs	r3, #2
 800ff64:	e127      	b.n	80101b6 <f_write+0x46a>
			sect += csect;
 800ff66:	7dbb      	ldrb	r3, [r7, #22]
 800ff68:	693a      	ldr	r2, [r7, #16]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff7a:	895b      	ldrh	r3, [r3, #10]
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff84:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d069      	beq.n	8010060 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800ff8c:	7dba      	ldrb	r2, [r7, #22]
 800ff8e:	69fb      	ldr	r3, [r7, #28]
 800ff90:	4413      	add	r3, r2
 800ff92:	68fa      	ldr	r2, [r7, #12]
 800ff94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ff98:	6812      	ldr	r2, [r2, #0]
 800ff9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ff9e:	7892      	ldrb	r2, [r2, #2]
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d90a      	bls.n	800ffba <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffb0:	789b      	ldrb	r3, [r3, #2]
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	7dbb      	ldrb	r3, [r7, #22]
 800ffb6:	1ad3      	subs	r3, r2, r3
 800ffb8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffc6:	7858      	ldrb	r0, [r3, #1]
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	693a      	ldr	r2, [r7, #16]
 800ffcc:	69b9      	ldr	r1, [r7, #24]
 800ffce:	f7fd f96d 	bl	800d2ac <disk_write>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d006      	beq.n	800ffe6 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffde:	2201      	movs	r2, #1
 800ffe0:	71da      	strb	r2, [r3, #7]
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e0e7      	b.n	80101b6 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffec:	699a      	ldr	r2, [r3, #24]
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	69fa      	ldr	r2, [r7, #28]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d926      	bls.n	8010046 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800fff8:	68f8      	ldr	r0, [r7, #12]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010000:	699a      	ldr	r2, [r3, #24]
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	68fa      	ldr	r2, [r7, #12]
 8010008:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801000c:	6812      	ldr	r2, [r2, #0]
 801000e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010012:	8952      	ldrh	r2, [r2, #10]
 8010014:	fb02 f303 	mul.w	r3, r2, r3
 8010018:	69ba      	ldr	r2, [r7, #24]
 801001a:	18d1      	adds	r1, r2, r3
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010028:	895b      	ldrh	r3, [r3, #10]
 801002a:	461a      	mov	r2, r3
 801002c:	f7fd f97c 	bl	800d328 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010036:	799b      	ldrb	r3, [r3, #6]
 8010038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801003c:	b2da      	uxtb	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010044:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010052:	895b      	ldrh	r3, [r3, #10]
 8010054:	461a      	mov	r2, r3
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	fb02 f303 	mul.w	r3, r2, r3
 801005c:	623b      	str	r3, [r7, #32]
				continue;
 801005e:	e06e      	b.n	801013e <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010066:	699b      	ldr	r3, [r3, #24]
 8010068:	693a      	ldr	r2, [r7, #16]
 801006a:	429a      	cmp	r2, r3
 801006c:	d01f      	beq.n	80100ae <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010074:	689a      	ldr	r2, [r3, #8]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	429a      	cmp	r2, r3
 8010080:	d215      	bcs.n	80100ae <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801008e:	7858      	ldrb	r0, [r3, #1]
 8010090:	68f9      	ldr	r1, [r7, #12]
 8010092:	2301      	movs	r3, #1
 8010094:	693a      	ldr	r2, [r7, #16]
 8010096:	f7fd f8e9 	bl	800d26c <disk_read>
 801009a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 801009c:	2b00      	cmp	r3, #0
 801009e:	d006      	beq.n	80100ae <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100a6:	2201      	movs	r2, #1
 80100a8:	71da      	strb	r2, [r3, #7]
 80100aa:	2301      	movs	r3, #1
 80100ac:	e083      	b.n	80101b6 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100b4:	461a      	mov	r2, r3
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100c6:	895b      	ldrh	r3, [r3, #10]
 80100c8:	4618      	mov	r0, r3
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100d0:	689b      	ldr	r3, [r3, #8]
 80100d2:	68fa      	ldr	r2, [r7, #12]
 80100d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80100d8:	6812      	ldr	r2, [r2, #0]
 80100da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80100de:	8952      	ldrh	r2, [r2, #10]
 80100e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80100e4:	fb01 f202 	mul.w	r2, r1, r2
 80100e8:	1a9b      	subs	r3, r3, r2
 80100ea:	1ac3      	subs	r3, r0, r3
 80100ec:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80100ee:	6a3a      	ldr	r2, [r7, #32]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d901      	bls.n	80100fa <f_write+0x3ae>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	68fa      	ldr	r2, [r7, #12]
 8010104:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010108:	6812      	ldr	r2, [r2, #0]
 801010a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801010e:	8952      	ldrh	r2, [r2, #10]
 8010110:	fbb3 f1f2 	udiv	r1, r3, r2
 8010114:	fb01 f202 	mul.w	r2, r1, r2
 8010118:	1a9b      	subs	r3, r3, r2
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	4413      	add	r3, r2
 801011e:	6a3a      	ldr	r2, [r7, #32]
 8010120:	69b9      	ldr	r1, [r7, #24]
 8010122:	4618      	mov	r0, r3
 8010124:	f7fd f900 	bl	800d328 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801012e:	799b      	ldrb	r3, [r3, #6]
 8010130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010134:	b2da      	uxtb	r2, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801013c:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 801013e:	69ba      	ldr	r2, [r7, #24]
 8010140:	6a3b      	ldr	r3, [r7, #32]
 8010142:	4413      	add	r3, r2
 8010144:	61bb      	str	r3, [r7, #24]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801014c:	689a      	ldr	r2, [r3, #8]
 801014e:	6a3b      	ldr	r3, [r7, #32]
 8010150:	4413      	add	r3, r2
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010158:	6093      	str	r3, [r2, #8]
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	681a      	ldr	r2, [r3, #0]
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	441a      	add	r2, r3
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	601a      	str	r2, [r3, #0]
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	6a3b      	ldr	r3, [r7, #32]
 801016a:	1ad3      	subs	r3, r2, r3
 801016c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	f47f ae26 	bne.w	800fdc2 <f_write+0x76>
 8010176:	e000      	b.n	801017a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010178:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010180:	689a      	ldr	r2, [r3, #8]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	429a      	cmp	r2, r3
 801018c:	d907      	bls.n	801019e <f_write+0x452>
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010194:	689b      	ldr	r3, [r3, #8]
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801019c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101a4:	799b      	ldrb	r3, [r3, #6]
 80101a6:	f043 0320 	orr.w	r3, r3, #32
 80101aa:	b2da      	uxtb	r2, r3
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101b2:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80101b4:	2300      	movs	r3, #0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3728      	adds	r7, #40	; 0x28
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b086      	sub	sp, #24
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f7ff f84c 	bl	800f264 <validate>
 80101cc:	4603      	mov	r3, r0
 80101ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80101d0:	7dfb      	ldrb	r3, [r7, #23]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	f040 80bc 	bne.w	8010350 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101de:	799b      	ldrb	r3, [r3, #6]
 80101e0:	f003 0320 	and.w	r3, r3, #32
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	f000 80b3 	beq.w	8010350 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101f0:	799b      	ldrb	r3, [r3, #6]
 80101f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d01e      	beq.n	8010238 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010206:	7858      	ldrb	r0, [r3, #1]
 8010208:	6879      	ldr	r1, [r7, #4]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010210:	699a      	ldr	r2, [r3, #24]
 8010212:	2301      	movs	r3, #1
 8010214:	f7fd f84a 	bl	800d2ac <disk_write>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d001      	beq.n	8010222 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 801021e:	2301      	movs	r3, #1
 8010220:	e097      	b.n	8010352 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010228:	799b      	ldrb	r3, [r3, #6]
 801022a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801022e:	b2da      	uxtb	r2, r3
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010236:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010246:	69db      	ldr	r3, [r3, #28]
 8010248:	4619      	mov	r1, r3
 801024a:	4610      	mov	r0, r2
 801024c:	f7fd faf4 	bl	800d838 <move_window>
 8010250:	4603      	mov	r3, r0
 8010252:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8010254:	7dfb      	ldrb	r3, [r7, #23]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d17a      	bne.n	8010350 <f_sync+0x192>
				dir = fp->dir_ptr;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010260:	6a1b      	ldr	r3, [r3, #32]
 8010262:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	330b      	adds	r3, #11
 8010268:	781a      	ldrb	r2, [r3, #0]
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	330b      	adds	r3, #11
 801026e:	f042 0220 	orr.w	r2, r2, #32
 8010272:	b2d2      	uxtb	r2, r2
 8010274:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801027c:	68da      	ldr	r2, [r3, #12]
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	331c      	adds	r3, #28
 8010282:	b2d2      	uxtb	r2, r2
 8010284:	701a      	strb	r2, [r3, #0]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	b29b      	uxth	r3, r3
 8010290:	0a1b      	lsrs	r3, r3, #8
 8010292:	b29a      	uxth	r2, r3
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	331d      	adds	r3, #29
 8010298:	b2d2      	uxtb	r2, r2
 801029a:	701a      	strb	r2, [r3, #0]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	0c1a      	lsrs	r2, r3, #16
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	331e      	adds	r3, #30
 80102aa:	b2d2      	uxtb	r2, r2
 80102ac:	701a      	strb	r2, [r3, #0]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102b4:	68db      	ldr	r3, [r3, #12]
 80102b6:	0e1a      	lsrs	r2, r3, #24
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	331f      	adds	r3, #31
 80102bc:	b2d2      	uxtb	r2, r2
 80102be:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	4619      	mov	r1, r3
 80102ca:	6938      	ldr	r0, [r7, #16]
 80102cc:	f7fe f9f5 	bl	800e6ba <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80102d0:	f7fc ff06 	bl	800d0e0 <get_fattime>
 80102d4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	3316      	adds	r3, #22
 80102da:	68fa      	ldr	r2, [r7, #12]
 80102dc:	b2d2      	uxtb	r2, r2
 80102de:	701a      	strb	r2, [r3, #0]
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	0a1b      	lsrs	r3, r3, #8
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	3317      	adds	r3, #23
 80102ec:	b2d2      	uxtb	r2, r2
 80102ee:	701a      	strb	r2, [r3, #0]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	0c1a      	lsrs	r2, r3, #16
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	3318      	adds	r3, #24
 80102f8:	b2d2      	uxtb	r2, r2
 80102fa:	701a      	strb	r2, [r3, #0]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	0e1a      	lsrs	r2, r3, #24
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	3319      	adds	r3, #25
 8010304:	b2d2      	uxtb	r2, r2
 8010306:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	3312      	adds	r3, #18
 801030c:	2200      	movs	r2, #0
 801030e:	701a      	strb	r2, [r3, #0]
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	3313      	adds	r3, #19
 8010314:	2200      	movs	r2, #0
 8010316:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801031e:	799b      	ldrb	r3, [r3, #6]
 8010320:	f023 0320 	bic.w	r3, r3, #32
 8010324:	b2da      	uxtb	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801032c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801033a:	2201      	movs	r2, #1
 801033c:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4618      	mov	r0, r3
 8010348:	f7fd faa8 	bl	800d89c <sync_fs>
 801034c:	4603      	mov	r3, r0
 801034e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8010350:	7dfb      	ldrb	r3, [r7, #23]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3718      	adds	r7, #24
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b084      	sub	sp, #16
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f7ff ff2b 	bl	80101be <f_sync>
 8010368:	4603      	mov	r3, r0
 801036a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801036c:	7bfb      	ldrb	r3, [r7, #15]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d119      	bne.n	80103a6 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7fe ff76 	bl	800f264 <validate>
 8010378:	4603      	mov	r3, r0
 801037a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801037c:	7bfb      	ldrb	r3, [r7, #15]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d111      	bne.n	80103a6 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801038a:	4618      	mov	r0, r3
 801038c:	f7fd f994 	bl	800d6b8 <dec_lock>
 8010390:	4603      	mov	r3, r0
 8010392:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010394:	7bfb      	ldrb	r3, [r7, #15]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d105      	bne.n	80103a6 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103a0:	461a      	mov	r2, r3
 80103a2:	2300      	movs	r3, #0
 80103a4:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80103a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3710      	adds	r7, #16
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b090      	sub	sp, #64	; 0x40
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7fe ff52 	bl	800f264 <validate>
 80103c0:	4603      	mov	r3, r0
 80103c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80103c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d002      	beq.n	80103d4 <f_lseek+0x24>
 80103ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103d2:	e2da      	b.n	801098a <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103da:	79db      	ldrb	r3, [r3, #7]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d004      	beq.n	80103ea <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103e6:	79db      	ldrb	r3, [r3, #7]
 80103e8:	e2cf      	b.n	801098a <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	f000 8124 	beq.w	8010640 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103fe:	d16c      	bne.n	80104da <f_lseek+0x12a>
			tbl = fp->cltbl;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010408:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040c:	1d1a      	adds	r2, r3, #4
 801040e:	627a      	str	r2, [r7, #36]	; 0x24
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	617b      	str	r3, [r7, #20]
 8010414:	2302      	movs	r3, #2
 8010416:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801041e:	691b      	ldr	r3, [r3, #16]
 8010420:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010424:	2b00      	cmp	r3, #0
 8010426:	d046      	beq.n	80104b6 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042a:	613b      	str	r3, [r7, #16]
 801042c:	2300      	movs	r3, #0
 801042e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010432:	3302      	adds	r3, #2
 8010434:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010438:	60fb      	str	r3, [r7, #12]
 801043a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043c:	3301      	adds	r3, #1
 801043e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801044a:	4618      	mov	r0, r3
 801044c:	f7fd fb09 	bl	800da62 <get_fat>
 8010450:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8010452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010454:	2b01      	cmp	r3, #1
 8010456:	d806      	bhi.n	8010466 <f_lseek+0xb6>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801045e:	2202      	movs	r2, #2
 8010460:	71da      	strb	r2, [r3, #7]
 8010462:	2302      	movs	r3, #2
 8010464:	e291      	b.n	801098a <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8010466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801046c:	d106      	bne.n	801047c <f_lseek+0xcc>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010474:	2201      	movs	r2, #1
 8010476:	71da      	strb	r2, [r3, #7]
 8010478:	2301      	movs	r3, #1
 801047a:	e286      	b.n	801098a <f_lseek+0x5da>
					} while (cl == pcl + 1);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	3301      	adds	r3, #1
 8010480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010482:	429a      	cmp	r2, r3
 8010484:	d0d7      	beq.n	8010436 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	429a      	cmp	r2, r3
 801048c:	d809      	bhi.n	80104a2 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 801048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010490:	1d1a      	adds	r2, r3, #4
 8010492:	627a      	str	r2, [r7, #36]	; 0x24
 8010494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010496:	601a      	str	r2, [r3, #0]
 8010498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049a:	1d1a      	adds	r2, r3, #4
 801049c:	627a      	str	r2, [r7, #36]	; 0x24
 801049e:	693a      	ldr	r2, [r7, #16]
 80104a0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104ae:	695b      	ldr	r3, [r3, #20]
 80104b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d3b8      	bcc.n	8010428 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104c0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80104c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d803      	bhi.n	80104d2 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 80104ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104cc:	2200      	movs	r2, #0
 80104ce:	601a      	str	r2, [r3, #0]
 80104d0:	e259      	b.n	8010986 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80104d2:	2311      	movs	r3, #17
 80104d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80104d8:	e255      	b.n	8010986 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d904      	bls.n	80104f2 <f_lseek+0x142>
				ofs = fp->fsize;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104f8:	461a      	mov	r2, r3
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	6093      	str	r3, [r2, #8]
			if (ofs) {
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f000 8240 	beq.w	8010986 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	3b01      	subs	r3, #1
 801050a:	4619      	mov	r1, r3
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7fd fe00 	bl	800e112 <clmt_clust>
 8010512:	4602      	mov	r2, r0
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801051a:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801052a:	695b      	ldr	r3, [r3, #20]
 801052c:	4619      	mov	r1, r3
 801052e:	4610      	mov	r0, r2
 8010530:	f7fd fa73 	bl	800da1a <clust2sect>
 8010534:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d106      	bne.n	801054a <f_lseek+0x19a>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010542:	2202      	movs	r2, #2
 8010544:	71da      	strb	r2, [r3, #7]
 8010546:	2302      	movs	r3, #2
 8010548:	e21f      	b.n	801098a <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	3b01      	subs	r3, #1
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010554:	6812      	ldr	r2, [r2, #0]
 8010556:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801055a:	8952      	ldrh	r2, [r2, #10]
 801055c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010566:	6812      	ldr	r2, [r2, #0]
 8010568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801056c:	7892      	ldrb	r2, [r2, #2]
 801056e:	3a01      	subs	r2, #1
 8010570:	4013      	ands	r3, r2
 8010572:	69ba      	ldr	r2, [r7, #24]
 8010574:	4413      	add	r3, r2
 8010576:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010586:	6812      	ldr	r2, [r2, #0]
 8010588:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801058c:	8952      	ldrh	r2, [r2, #10]
 801058e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010592:	fb01 f202 	mul.w	r2, r1, r2
 8010596:	1a9b      	subs	r3, r3, r2
 8010598:	2b00      	cmp	r3, #0
 801059a:	f000 81f4 	beq.w	8010986 <f_lseek+0x5d6>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105a4:	699b      	ldr	r3, [r3, #24]
 80105a6:	69ba      	ldr	r2, [r7, #24]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	f000 81ec 	beq.w	8010986 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105b4:	799b      	ldrb	r3, [r3, #6]
 80105b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d023      	beq.n	8010606 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105ca:	7858      	ldrb	r0, [r3, #1]
 80105cc:	6879      	ldr	r1, [r7, #4]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105d4:	699a      	ldr	r2, [r3, #24]
 80105d6:	2301      	movs	r3, #1
 80105d8:	f7fc fe68 	bl	800d2ac <disk_write>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d006      	beq.n	80105f0 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105e8:	2201      	movs	r2, #1
 80105ea:	71da      	strb	r2, [r3, #7]
 80105ec:	2301      	movs	r3, #1
 80105ee:	e1cc      	b.n	801098a <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105f6:	799b      	ldrb	r3, [r3, #6]
 80105f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105fc:	b2da      	uxtb	r2, r3
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010604:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010612:	7858      	ldrb	r0, [r3, #1]
 8010614:	6879      	ldr	r1, [r7, #4]
 8010616:	2301      	movs	r3, #1
 8010618:	69ba      	ldr	r2, [r7, #24]
 801061a:	f7fc fe27 	bl	800d26c <disk_read>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d006      	beq.n	8010632 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801062a:	2201      	movs	r2, #1
 801062c:	71da      	strb	r2, [r3, #7]
 801062e:	2301      	movs	r3, #1
 8010630:	e1ab      	b.n	801098a <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010638:	461a      	mov	r2, r3
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	6193      	str	r3, [r2, #24]
 801063e:	e1a2      	b.n	8010986 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	683a      	ldr	r2, [r7, #0]
 801064a:	429a      	cmp	r2, r3
 801064c:	d90c      	bls.n	8010668 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010654:	799b      	ldrb	r3, [r3, #6]
 8010656:	f003 0302 	and.w	r3, r3, #2
 801065a:	2b00      	cmp	r3, #0
 801065c:	d104      	bne.n	8010668 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010672:	2300      	movs	r3, #0
 8010674:	637b      	str	r3, [r7, #52]	; 0x34
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801067c:	461a      	mov	r2, r3
 801067e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010680:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	f000 8100 	beq.w	801088a <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010696:	789b      	ldrb	r3, [r3, #2]
 8010698:	461a      	mov	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106a6:	895b      	ldrh	r3, [r3, #10]
 80106a8:	fb02 f303 	mul.w	r3, r2, r3
 80106ac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80106ae:	6a3b      	ldr	r3, [r7, #32]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d021      	beq.n	80106f8 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	1e5a      	subs	r2, r3, #1
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80106be:	6a3b      	ldr	r3, [r7, #32]
 80106c0:	1e59      	subs	r1, r3, #1
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d315      	bcc.n	80106f8 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80106cc:	6a3b      	ldr	r3, [r7, #32]
 80106ce:	1e5a      	subs	r2, r3, #1
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	425b      	negs	r3, r3
 80106d4:	4013      	ands	r3, r2
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80106dc:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106e4:	689b      	ldr	r3, [r3, #8]
 80106e6:	683a      	ldr	r2, [r7, #0]
 80106e8:	1ad3      	subs	r3, r2, r3
 80106ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106f2:	695b      	ldr	r3, [r3, #20]
 80106f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80106f6:	e031      	b.n	801075c <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106fe:	691b      	ldr	r3, [r3, #16]
 8010700:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010704:	2b00      	cmp	r3, #0
 8010706:	d123      	bne.n	8010750 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2100      	movs	r1, #0
 8010712:	4618      	mov	r0, r3
 8010714:	f7fd fc55 	bl	800dfc2 <create_chain>
 8010718:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801071a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071c:	2b01      	cmp	r3, #1
 801071e:	d106      	bne.n	801072e <f_lseek+0x37e>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010726:	2202      	movs	r2, #2
 8010728:	71da      	strb	r2, [r3, #7]
 801072a:	2302      	movs	r3, #2
 801072c:	e12d      	b.n	801098a <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801072e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010734:	d106      	bne.n	8010744 <f_lseek+0x394>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801073c:	2201      	movs	r2, #1
 801073e:	71da      	strb	r2, [r3, #7]
 8010740:	2301      	movs	r3, #1
 8010742:	e122      	b.n	801098a <f_lseek+0x5da>
					fp->sclust = clst;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801074a:	461a      	mov	r2, r3
 801074c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074e:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010756:	461a      	mov	r2, r3
 8010758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075a:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 801075c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075e:	2b00      	cmp	r3, #0
 8010760:	f000 8093 	beq.w	801088a <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8010764:	e052      	b.n	801080c <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801076c:	799b      	ldrb	r3, [r3, #6]
 801076e:	f003 0302 	and.w	r3, r3, #2
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00e      	beq.n	8010794 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010780:	4618      	mov	r0, r3
 8010782:	f7fd fc1e 	bl	800dfc2 <create_chain>
 8010786:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8010788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078a:	2b00      	cmp	r3, #0
 801078c:	d10b      	bne.n	80107a6 <f_lseek+0x3f6>
							ofs = bcs; break;
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	603b      	str	r3, [r7, #0]
 8010792:	e03f      	b.n	8010814 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fd f95f 	bl	800da62 <get_fat>
 80107a4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80107a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107ac:	d106      	bne.n	80107bc <f_lseek+0x40c>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107b4:	2201      	movs	r2, #1
 80107b6:	71da      	strb	r2, [r3, #7]
 80107b8:	2301      	movs	r3, #1
 80107ba:	e0e6      	b.n	801098a <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80107bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d909      	bls.n	80107d6 <f_lseek+0x426>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107ce:	695b      	ldr	r3, [r3, #20]
 80107d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d306      	bcc.n	80107e4 <f_lseek+0x434>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107dc:	2202      	movs	r2, #2
 80107de:	71da      	strb	r2, [r3, #7]
 80107e0:	2302      	movs	r3, #2
 80107e2:	e0d2      	b.n	801098a <f_lseek+0x5da>
					fp->clust = clst;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107ea:	461a      	mov	r2, r3
 80107ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ee:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107f6:	689a      	ldr	r2, [r3, #8]
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	4413      	add	r3, r2
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010802:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8010804:	683a      	ldr	r2, [r7, #0]
 8010806:	69fb      	ldr	r3, [r7, #28]
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 801080c:	683a      	ldr	r2, [r7, #0]
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	429a      	cmp	r2, r3
 8010812:	d8a8      	bhi.n	8010766 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801081a:	689a      	ldr	r2, [r3, #8]
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	4413      	add	r3, r2
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010826:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010834:	895b      	ldrh	r3, [r3, #10]
 8010836:	461a      	mov	r2, r3
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	fbb3 f1f2 	udiv	r1, r3, r2
 801083e:	fb01 f202 	mul.w	r2, r1, r2
 8010842:	1a9b      	subs	r3, r3, r2
 8010844:	2b00      	cmp	r3, #0
 8010846:	d020      	beq.n	801088a <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010852:	4618      	mov	r0, r3
 8010854:	f7fd f8e1 	bl	800da1a <clust2sect>
 8010858:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 801085a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801085c:	2b00      	cmp	r3, #0
 801085e:	d106      	bne.n	801086e <f_lseek+0x4be>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010866:	2202      	movs	r2, #2
 8010868:	71da      	strb	r2, [r3, #7]
 801086a:	2302      	movs	r3, #2
 801086c:	e08d      	b.n	801098a <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801087a:	895b      	ldrh	r3, [r3, #10]
 801087c:	461a      	mov	r2, r3
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	fbb3 f3f2 	udiv	r3, r3, r2
 8010884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010886:	4413      	add	r3, r2
 8010888:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010890:	689b      	ldr	r3, [r3, #8]
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010898:	6812      	ldr	r2, [r2, #0]
 801089a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801089e:	8952      	ldrh	r2, [r2, #10]
 80108a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80108a4:	fb01 f202 	mul.w	r2, r1, r2
 80108a8:	1a9b      	subs	r3, r3, r2
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d04e      	beq.n	801094c <f_lseek+0x59c>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108b4:	699b      	ldr	r3, [r3, #24]
 80108b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d047      	beq.n	801094c <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108c2:	799b      	ldrb	r3, [r3, #6]
 80108c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d023      	beq.n	8010914 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108d8:	7858      	ldrb	r0, [r3, #1]
 80108da:	6879      	ldr	r1, [r7, #4]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108e2:	699a      	ldr	r2, [r3, #24]
 80108e4:	2301      	movs	r3, #1
 80108e6:	f7fc fce1 	bl	800d2ac <disk_write>
 80108ea:	4603      	mov	r3, r0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d006      	beq.n	80108fe <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108f6:	2201      	movs	r2, #1
 80108f8:	71da      	strb	r2, [r3, #7]
 80108fa:	2301      	movs	r3, #1
 80108fc:	e045      	b.n	801098a <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010904:	799b      	ldrb	r3, [r3, #6]
 8010906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801090a:	b2da      	uxtb	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010912:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010920:	7858      	ldrb	r0, [r3, #1]
 8010922:	6879      	ldr	r1, [r7, #4]
 8010924:	2301      	movs	r3, #1
 8010926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010928:	f7fc fca0 	bl	800d26c <disk_read>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d006      	beq.n	8010940 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010938:	2201      	movs	r2, #1
 801093a:	71da      	strb	r2, [r3, #7]
 801093c:	2301      	movs	r3, #1
 801093e:	e024      	b.n	801098a <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010946:	461a      	mov	r2, r3
 8010948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801094a:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010952:	689a      	ldr	r2, [r3, #8]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	429a      	cmp	r2, r3
 801095e:	d912      	bls.n	8010986 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010966:	689b      	ldr	r3, [r3, #8]
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801096e:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010976:	799b      	ldrb	r3, [r3, #6]
 8010978:	f043 0320 	orr.w	r3, r3, #32
 801097c:	b2da      	uxtb	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010984:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8010986:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801098a:	4618      	mov	r0, r3
 801098c:	3740      	adds	r7, #64	; 0x40
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}

08010992 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010992:	b580      	push	{r7, lr}
 8010994:	b088      	sub	sp, #32
 8010996:	af00      	add	r7, sp, #0
 8010998:	60f8      	str	r0, [r7, #12]
 801099a:	60b9      	str	r1, [r7, #8]
 801099c:	607a      	str	r2, [r7, #4]
	int n = 0;
 801099e:	2300      	movs	r3, #0
 80109a0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80109a6:	e01b      	b.n	80109e0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80109a8:	f107 0310 	add.w	r3, r7, #16
 80109ac:	f107 0114 	add.w	r1, r7, #20
 80109b0:	2201      	movs	r2, #1
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7fe ffe2 	bl	800f97c <f_read>
		if (rc != 1) break;
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d116      	bne.n	80109ec <f_gets+0x5a>
		c = s[0];
 80109be:	7d3b      	ldrb	r3, [r7, #20]
 80109c0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80109c2:	7dfb      	ldrb	r3, [r7, #23]
 80109c4:	2b0d      	cmp	r3, #13
 80109c6:	d100      	bne.n	80109ca <f_gets+0x38>
 80109c8:	e00a      	b.n	80109e0 <f_gets+0x4e>
		*p++ = c;
 80109ca:	69bb      	ldr	r3, [r7, #24]
 80109cc:	1c5a      	adds	r2, r3, #1
 80109ce:	61ba      	str	r2, [r7, #24]
 80109d0:	7dfa      	ldrb	r2, [r7, #23]
 80109d2:	701a      	strb	r2, [r3, #0]
		n++;
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	3301      	adds	r3, #1
 80109d8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80109da:	7dfb      	ldrb	r3, [r7, #23]
 80109dc:	2b0a      	cmp	r3, #10
 80109de:	d007      	beq.n	80109f0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	3b01      	subs	r3, #1
 80109e4:	69fa      	ldr	r2, [r7, #28]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	dbde      	blt.n	80109a8 <f_gets+0x16>
 80109ea:	e002      	b.n	80109f2 <f_gets+0x60>
		if (rc != 1) break;
 80109ec:	bf00      	nop
 80109ee:	e000      	b.n	80109f2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80109f0:	bf00      	nop
	}
	*p = 0;
 80109f2:	69bb      	ldr	r3, [r7, #24]
 80109f4:	2200      	movs	r2, #0
 80109f6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d001      	beq.n	8010a02 <f_gets+0x70>
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	e000      	b.n	8010a04 <f_gets+0x72>
 8010a02:	2300      	movs	r3, #0
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3720      	adds	r7, #32
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	460b      	mov	r3, r1
 8010a16:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8010a18:	78fb      	ldrb	r3, [r7, #3]
 8010a1a:	2b0a      	cmp	r3, #10
 8010a1c:	d103      	bne.n	8010a26 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010a1e:	210d      	movs	r1, #13
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff fff3 	bl	8010a0c <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	db25      	blt.n	8010a7e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	1c5a      	adds	r2, r3, #1
 8010a36:	60fa      	str	r2, [r7, #12]
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	78fa      	ldrb	r2, [r7, #3]
 8010a3e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2b3c      	cmp	r3, #60	; 0x3c
 8010a44:	dd12      	ble.n	8010a6c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6818      	ldr	r0, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f103 010c 	add.w	r1, r3, #12
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	f107 0308 	add.w	r3, r7, #8
 8010a56:	f7ff f979 	bl	800fd4c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d101      	bne.n	8010a66 <putc_bfd+0x5a>
 8010a62:	2300      	movs	r3, #0
 8010a64:	e001      	b.n	8010a6a <putc_bfd+0x5e>
 8010a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a6a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	68fa      	ldr	r2, [r7, #12]
 8010a70:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	689b      	ldr	r3, [r3, #8]
 8010a76:	1c5a      	adds	r2, r3, #1
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	609a      	str	r2, [r3, #8]
 8010a7c:	e000      	b.n	8010a80 <putc_bfd+0x74>
	if (i < 0) return;
 8010a7e:	bf00      	nop
}
 8010a80:	3710      	adds	r7, #16
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8010a86:	b590      	push	{r4, r7, lr}
 8010a88:	b097      	sub	sp, #92	; 0x5c
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8010a94:	2300      	movs	r3, #0
 8010a96:	613b      	str	r3, [r7, #16]
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8010a9c:	e009      	b.n	8010ab2 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	1c5a      	adds	r2, r3, #1
 8010aa2:	607a      	str	r2, [r7, #4]
 8010aa4:	781a      	ldrb	r2, [r3, #0]
 8010aa6:	f107 030c 	add.w	r3, r7, #12
 8010aaa:	4611      	mov	r1, r2
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff ffad 	bl	8010a0c <putc_bfd>
	while (*str)			/* Put the string */
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d1f1      	bne.n	8010a9e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	db15      	blt.n	8010aec <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	461c      	mov	r4, r3
 8010ac6:	f107 0208 	add.w	r2, r7, #8
 8010aca:	f107 030c 	add.w	r3, r7, #12
 8010ace:	f103 010c 	add.w	r1, r3, #12
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	4622      	mov	r2, r4
 8010ad6:	f7ff f939 	bl	800fd4c <f_write>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d105      	bne.n	8010aec <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	68ba      	ldr	r2, [r7, #8]
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d101      	bne.n	8010aec <f_puts+0x66>
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	e001      	b.n	8010af0 <f_puts+0x6a>
	return EOF;
 8010aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	375c      	adds	r7, #92	; 0x5c
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd90      	pop	{r4, r7, pc}

08010af8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b087      	sub	sp, #28
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	4613      	mov	r3, r2
 8010b04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010b06:	2301      	movs	r3, #1
 8010b08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8010b0e:	4b1e      	ldr	r3, [pc, #120]	; (8010b88 <FATFS_LinkDriverEx+0x90>)
 8010b10:	7a5b      	ldrb	r3, [r3, #9]
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d831      	bhi.n	8010b7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010b18:	4b1b      	ldr	r3, [pc, #108]	; (8010b88 <FATFS_LinkDriverEx+0x90>)
 8010b1a:	7a5b      	ldrb	r3, [r3, #9]
 8010b1c:	b2db      	uxtb	r3, r3
 8010b1e:	461a      	mov	r2, r3
 8010b20:	4b19      	ldr	r3, [pc, #100]	; (8010b88 <FATFS_LinkDriverEx+0x90>)
 8010b22:	2100      	movs	r1, #0
 8010b24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8010b26:	4b18      	ldr	r3, [pc, #96]	; (8010b88 <FATFS_LinkDriverEx+0x90>)
 8010b28:	7a5b      	ldrb	r3, [r3, #9]
 8010b2a:	b2db      	uxtb	r3, r3
 8010b2c:	4a16      	ldr	r2, [pc, #88]	; (8010b88 <FATFS_LinkDriverEx+0x90>)
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4413      	add	r3, r2
 8010b32:	68fa      	ldr	r2, [r7, #12]
 8010b34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8010b36:	4b14      	ldr	r3, [pc, #80]	; (8010b88 <FATFS_LinkDriverEx+0x90>)
 8010b38:	7a5b      	ldrb	r3, [r3, #9]
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	4b12      	ldr	r3, [pc, #72]	; (8010b88 <FATFS_LinkDriverEx+0x90>)
 8010b40:	4413      	add	r3, r2
 8010b42:	79fa      	ldrb	r2, [r7, #7]
 8010b44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010b46:	4b10      	ldr	r3, [pc, #64]	; (8010b88 <FATFS_LinkDriverEx+0x90>)
 8010b48:	7a5b      	ldrb	r3, [r3, #9]
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	1c5a      	adds	r2, r3, #1
 8010b4e:	b2d1      	uxtb	r1, r2
 8010b50:	4a0d      	ldr	r2, [pc, #52]	; (8010b88 <FATFS_LinkDriverEx+0x90>)
 8010b52:	7251      	strb	r1, [r2, #9]
 8010b54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010b56:	7dbb      	ldrb	r3, [r7, #22]
 8010b58:	3330      	adds	r3, #48	; 0x30
 8010b5a:	b2da      	uxtb	r2, r3
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	3301      	adds	r3, #1
 8010b64:	223a      	movs	r2, #58	; 0x3a
 8010b66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	3302      	adds	r3, #2
 8010b6c:	222f      	movs	r2, #47	; 0x2f
 8010b6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	3303      	adds	r3, #3
 8010b74:	2200      	movs	r2, #0
 8010b76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8010b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	371c      	adds	r7, #28
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bc80      	pop	{r7}
 8010b86:	4770      	bx	lr
 8010b88:	2000624c 	.word	0x2000624c

08010b8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010b96:	2200      	movs	r2, #0
 8010b98:	6839      	ldr	r1, [r7, #0]
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f7ff ffac 	bl	8010af8 <FATFS_LinkDriverEx>
 8010ba0:	4603      	mov	r3, r0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
	...

08010bac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010bb6:	4b0b      	ldr	r3, [pc, #44]	; (8010be4 <SD_initialize+0x38>)
 8010bb8:	2201      	movs	r2, #1
 8010bba:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8010bbc:	f7fc fa98 	bl	800d0f0 <BSP_SD_Init>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d107      	bne.n	8010bd6 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010bc6:	4b07      	ldr	r3, [pc, #28]	; (8010be4 <SD_initialize+0x38>)
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	f023 0301 	bic.w	r3, r3, #1
 8010bd0:	b2da      	uxtb	r2, r3
 8010bd2:	4b04      	ldr	r3, [pc, #16]	; (8010be4 <SD_initialize+0x38>)
 8010bd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010bd6:	4b03      	ldr	r3, [pc, #12]	; (8010be4 <SD_initialize+0x38>)
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	b2db      	uxtb	r3, r3
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3708      	adds	r7, #8
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	20000075 	.word	0x20000075

08010be8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	4603      	mov	r3, r0
 8010bf0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010bf2:	4b0b      	ldr	r3, [pc, #44]	; (8010c20 <SD_status+0x38>)
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010bf8:	f7fc face 	bl	800d198 <BSP_SD_GetCardState>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d107      	bne.n	8010c12 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010c02:	4b07      	ldr	r3, [pc, #28]	; (8010c20 <SD_status+0x38>)
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	f023 0301 	bic.w	r3, r3, #1
 8010c0c:	b2da      	uxtb	r2, r3
 8010c0e:	4b04      	ldr	r3, [pc, #16]	; (8010c20 <SD_status+0x38>)
 8010c10:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8010c12:	4b03      	ldr	r3, [pc, #12]	; (8010c20 <SD_status+0x38>)
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	b2db      	uxtb	r3, r3
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3708      	adds	r7, #8
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	20000075 	.word	0x20000075

08010c24 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b086      	sub	sp, #24
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	60b9      	str	r1, [r7, #8]
 8010c2c:	607a      	str	r2, [r7, #4]
 8010c2e:	603b      	str	r3, [r7, #0]
 8010c30:	4603      	mov	r3, r0
 8010c32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010c34:	2301      	movs	r3, #1
 8010c36:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010c38:	4b0f      	ldr	r3, [pc, #60]	; (8010c78 <SD_read+0x54>)
 8010c3a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8010c3c:	4b0f      	ldr	r3, [pc, #60]	; (8010c7c <SD_read+0x58>)
 8010c3e:	683a      	ldr	r2, [r7, #0]
 8010c40:	6879      	ldr	r1, [r7, #4]
 8010c42:	68b8      	ldr	r0, [r7, #8]
 8010c44:	f7fc fa6c 	bl	800d120 <BSP_SD_ReadBlocks>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10e      	bne.n	8010c6c <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010c4e:	e006      	b.n	8010c5e <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	1e5a      	subs	r2, r3, #1
 8010c54:	613a      	str	r2, [r7, #16]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d101      	bne.n	8010c5e <SD_read+0x3a>
      {
        return RES_ERROR;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	e007      	b.n	8010c6e <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010c5e:	f7fc fa9b 	bl	800d198 <BSP_SD_GetCardState>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1f3      	bne.n	8010c50 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3718      	adds	r7, #24
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	000186a0 	.word	0x000186a0
 8010c7c:	05f5e100 	.word	0x05f5e100

08010c80 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b086      	sub	sp, #24
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	60b9      	str	r1, [r7, #8]
 8010c88:	607a      	str	r2, [r7, #4]
 8010c8a:	603b      	str	r3, [r7, #0]
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010c90:	2301      	movs	r3, #1
 8010c92:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010c94:	4b0f      	ldr	r3, [pc, #60]	; (8010cd4 <SD_write+0x54>)
 8010c96:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8010c98:	4b0f      	ldr	r3, [pc, #60]	; (8010cd8 <SD_write+0x58>)
 8010c9a:	683a      	ldr	r2, [r7, #0]
 8010c9c:	6879      	ldr	r1, [r7, #4]
 8010c9e:	68b8      	ldr	r0, [r7, #8]
 8010ca0:	f7fc fa5c 	bl	800d15c <BSP_SD_WriteBlocks>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d10e      	bne.n	8010cc8 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010caa:	e006      	b.n	8010cba <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	1e5a      	subs	r2, r3, #1
 8010cb0:	613a      	str	r2, [r7, #16]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d101      	bne.n	8010cba <SD_write+0x3a>
      {
        return RES_ERROR;
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	e007      	b.n	8010cca <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010cba:	f7fc fa6d 	bl	800d198 <BSP_SD_GetCardState>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1f3      	bne.n	8010cac <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3718      	adds	r7, #24
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	000186a0 	.word	0x000186a0
 8010cd8:	05f5e100 	.word	0x05f5e100

08010cdc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b08c      	sub	sp, #48	; 0x30
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	603a      	str	r2, [r7, #0]
 8010ce6:	71fb      	strb	r3, [r7, #7]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010cec:	2301      	movs	r3, #1
 8010cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010cf2:	4b24      	ldr	r3, [pc, #144]	; (8010d84 <SD_ioctl+0xa8>)
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	b2db      	uxtb	r3, r3
 8010cf8:	f003 0301 	and.w	r3, r3, #1
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d001      	beq.n	8010d04 <SD_ioctl+0x28>
 8010d00:	2303      	movs	r3, #3
 8010d02:	e03b      	b.n	8010d7c <SD_ioctl+0xa0>
  
  switch (cmd)
 8010d04:	79bb      	ldrb	r3, [r7, #6]
 8010d06:	2b03      	cmp	r3, #3
 8010d08:	d833      	bhi.n	8010d72 <SD_ioctl+0x96>
 8010d0a:	a201      	add	r2, pc, #4	; (adr r2, 8010d10 <SD_ioctl+0x34>)
 8010d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d10:	08010d21 	.word	0x08010d21
 8010d14:	08010d29 	.word	0x08010d29
 8010d18:	08010d41 	.word	0x08010d41
 8010d1c:	08010d5b 	.word	0x08010d5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010d20:	2300      	movs	r3, #0
 8010d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010d26:	e027      	b.n	8010d78 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d28:	f107 030c 	add.w	r3, r7, #12
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7fc fa43 	bl	800d1b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010d3e:	e01b      	b.n	8010d78 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d40:	f107 030c 	add.w	r3, r7, #12
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7fc fa37 	bl	800d1b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010d52:	2300      	movs	r3, #0
 8010d54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010d58:	e00e      	b.n	8010d78 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d5a:	f107 030c 	add.w	r3, r7, #12
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fc fa2a 	bl	800d1b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8010d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010d70:	e002      	b.n	8010d78 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8010d72:	2304      	movs	r3, #4
 8010d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8010d78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3730      	adds	r7, #48	; 0x30
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	20000075 	.word	0x20000075

08010d88 <__errno>:
 8010d88:	4b01      	ldr	r3, [pc, #4]	; (8010d90 <__errno+0x8>)
 8010d8a:	6818      	ldr	r0, [r3, #0]
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	20000078 	.word	0x20000078

08010d94 <__libc_init_array>:
 8010d94:	b570      	push	{r4, r5, r6, lr}
 8010d96:	2600      	movs	r6, #0
 8010d98:	4d0c      	ldr	r5, [pc, #48]	; (8010dcc <__libc_init_array+0x38>)
 8010d9a:	4c0d      	ldr	r4, [pc, #52]	; (8010dd0 <__libc_init_array+0x3c>)
 8010d9c:	1b64      	subs	r4, r4, r5
 8010d9e:	10a4      	asrs	r4, r4, #2
 8010da0:	42a6      	cmp	r6, r4
 8010da2:	d109      	bne.n	8010db8 <__libc_init_array+0x24>
 8010da4:	f002 ffac 	bl	8013d00 <_init>
 8010da8:	2600      	movs	r6, #0
 8010daa:	4d0a      	ldr	r5, [pc, #40]	; (8010dd4 <__libc_init_array+0x40>)
 8010dac:	4c0a      	ldr	r4, [pc, #40]	; (8010dd8 <__libc_init_array+0x44>)
 8010dae:	1b64      	subs	r4, r4, r5
 8010db0:	10a4      	asrs	r4, r4, #2
 8010db2:	42a6      	cmp	r6, r4
 8010db4:	d105      	bne.n	8010dc2 <__libc_init_array+0x2e>
 8010db6:	bd70      	pop	{r4, r5, r6, pc}
 8010db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dbc:	4798      	blx	r3
 8010dbe:	3601      	adds	r6, #1
 8010dc0:	e7ee      	b.n	8010da0 <__libc_init_array+0xc>
 8010dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dc6:	4798      	blx	r3
 8010dc8:	3601      	adds	r6, #1
 8010dca:	e7f2      	b.n	8010db2 <__libc_init_array+0x1e>
 8010dcc:	08014f0c 	.word	0x08014f0c
 8010dd0:	08014f0c 	.word	0x08014f0c
 8010dd4:	08014f0c 	.word	0x08014f0c
 8010dd8:	08014f10 	.word	0x08014f10

08010ddc <malloc>:
 8010ddc:	4b02      	ldr	r3, [pc, #8]	; (8010de8 <malloc+0xc>)
 8010dde:	4601      	mov	r1, r0
 8010de0:	6818      	ldr	r0, [r3, #0]
 8010de2:	f000 b87b 	b.w	8010edc <_malloc_r>
 8010de6:	bf00      	nop
 8010de8:	20000078 	.word	0x20000078

08010dec <free>:
 8010dec:	4b02      	ldr	r3, [pc, #8]	; (8010df8 <free+0xc>)
 8010dee:	4601      	mov	r1, r0
 8010df0:	6818      	ldr	r0, [r3, #0]
 8010df2:	f000 b80b 	b.w	8010e0c <_free_r>
 8010df6:	bf00      	nop
 8010df8:	20000078 	.word	0x20000078

08010dfc <memset>:
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	4402      	add	r2, r0
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d100      	bne.n	8010e06 <memset+0xa>
 8010e04:	4770      	bx	lr
 8010e06:	f803 1b01 	strb.w	r1, [r3], #1
 8010e0a:	e7f9      	b.n	8010e00 <memset+0x4>

08010e0c <_free_r>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	4605      	mov	r5, r0
 8010e10:	2900      	cmp	r1, #0
 8010e12:	d040      	beq.n	8010e96 <_free_r+0x8a>
 8010e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e18:	1f0c      	subs	r4, r1, #4
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	bfb8      	it	lt
 8010e1e:	18e4      	addlt	r4, r4, r3
 8010e20:	f001 fccc 	bl	80127bc <__malloc_lock>
 8010e24:	4a1c      	ldr	r2, [pc, #112]	; (8010e98 <_free_r+0x8c>)
 8010e26:	6813      	ldr	r3, [r2, #0]
 8010e28:	b933      	cbnz	r3, 8010e38 <_free_r+0x2c>
 8010e2a:	6063      	str	r3, [r4, #4]
 8010e2c:	6014      	str	r4, [r2, #0]
 8010e2e:	4628      	mov	r0, r5
 8010e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e34:	f001 bcc8 	b.w	80127c8 <__malloc_unlock>
 8010e38:	42a3      	cmp	r3, r4
 8010e3a:	d908      	bls.n	8010e4e <_free_r+0x42>
 8010e3c:	6820      	ldr	r0, [r4, #0]
 8010e3e:	1821      	adds	r1, r4, r0
 8010e40:	428b      	cmp	r3, r1
 8010e42:	bf01      	itttt	eq
 8010e44:	6819      	ldreq	r1, [r3, #0]
 8010e46:	685b      	ldreq	r3, [r3, #4]
 8010e48:	1809      	addeq	r1, r1, r0
 8010e4a:	6021      	streq	r1, [r4, #0]
 8010e4c:	e7ed      	b.n	8010e2a <_free_r+0x1e>
 8010e4e:	461a      	mov	r2, r3
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	b10b      	cbz	r3, 8010e58 <_free_r+0x4c>
 8010e54:	42a3      	cmp	r3, r4
 8010e56:	d9fa      	bls.n	8010e4e <_free_r+0x42>
 8010e58:	6811      	ldr	r1, [r2, #0]
 8010e5a:	1850      	adds	r0, r2, r1
 8010e5c:	42a0      	cmp	r0, r4
 8010e5e:	d10b      	bne.n	8010e78 <_free_r+0x6c>
 8010e60:	6820      	ldr	r0, [r4, #0]
 8010e62:	4401      	add	r1, r0
 8010e64:	1850      	adds	r0, r2, r1
 8010e66:	4283      	cmp	r3, r0
 8010e68:	6011      	str	r1, [r2, #0]
 8010e6a:	d1e0      	bne.n	8010e2e <_free_r+0x22>
 8010e6c:	6818      	ldr	r0, [r3, #0]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	4401      	add	r1, r0
 8010e72:	6011      	str	r1, [r2, #0]
 8010e74:	6053      	str	r3, [r2, #4]
 8010e76:	e7da      	b.n	8010e2e <_free_r+0x22>
 8010e78:	d902      	bls.n	8010e80 <_free_r+0x74>
 8010e7a:	230c      	movs	r3, #12
 8010e7c:	602b      	str	r3, [r5, #0]
 8010e7e:	e7d6      	b.n	8010e2e <_free_r+0x22>
 8010e80:	6820      	ldr	r0, [r4, #0]
 8010e82:	1821      	adds	r1, r4, r0
 8010e84:	428b      	cmp	r3, r1
 8010e86:	bf01      	itttt	eq
 8010e88:	6819      	ldreq	r1, [r3, #0]
 8010e8a:	685b      	ldreq	r3, [r3, #4]
 8010e8c:	1809      	addeq	r1, r1, r0
 8010e8e:	6021      	streq	r1, [r4, #0]
 8010e90:	6063      	str	r3, [r4, #4]
 8010e92:	6054      	str	r4, [r2, #4]
 8010e94:	e7cb      	b.n	8010e2e <_free_r+0x22>
 8010e96:	bd38      	pop	{r3, r4, r5, pc}
 8010e98:	20006258 	.word	0x20006258

08010e9c <sbrk_aligned>:
 8010e9c:	b570      	push	{r4, r5, r6, lr}
 8010e9e:	4e0e      	ldr	r6, [pc, #56]	; (8010ed8 <sbrk_aligned+0x3c>)
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	6831      	ldr	r1, [r6, #0]
 8010ea4:	4605      	mov	r5, r0
 8010ea6:	b911      	cbnz	r1, 8010eae <sbrk_aligned+0x12>
 8010ea8:	f000 fd58 	bl	801195c <_sbrk_r>
 8010eac:	6030      	str	r0, [r6, #0]
 8010eae:	4621      	mov	r1, r4
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	f000 fd53 	bl	801195c <_sbrk_r>
 8010eb6:	1c43      	adds	r3, r0, #1
 8010eb8:	d00a      	beq.n	8010ed0 <sbrk_aligned+0x34>
 8010eba:	1cc4      	adds	r4, r0, #3
 8010ebc:	f024 0403 	bic.w	r4, r4, #3
 8010ec0:	42a0      	cmp	r0, r4
 8010ec2:	d007      	beq.n	8010ed4 <sbrk_aligned+0x38>
 8010ec4:	1a21      	subs	r1, r4, r0
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	f000 fd48 	bl	801195c <_sbrk_r>
 8010ecc:	3001      	adds	r0, #1
 8010ece:	d101      	bne.n	8010ed4 <sbrk_aligned+0x38>
 8010ed0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	bd70      	pop	{r4, r5, r6, pc}
 8010ed8:	2000625c 	.word	0x2000625c

08010edc <_malloc_r>:
 8010edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee0:	1ccd      	adds	r5, r1, #3
 8010ee2:	f025 0503 	bic.w	r5, r5, #3
 8010ee6:	3508      	adds	r5, #8
 8010ee8:	2d0c      	cmp	r5, #12
 8010eea:	bf38      	it	cc
 8010eec:	250c      	movcc	r5, #12
 8010eee:	2d00      	cmp	r5, #0
 8010ef0:	4607      	mov	r7, r0
 8010ef2:	db01      	blt.n	8010ef8 <_malloc_r+0x1c>
 8010ef4:	42a9      	cmp	r1, r5
 8010ef6:	d905      	bls.n	8010f04 <_malloc_r+0x28>
 8010ef8:	230c      	movs	r3, #12
 8010efa:	2600      	movs	r6, #0
 8010efc:	603b      	str	r3, [r7, #0]
 8010efe:	4630      	mov	r0, r6
 8010f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f04:	4e2e      	ldr	r6, [pc, #184]	; (8010fc0 <_malloc_r+0xe4>)
 8010f06:	f001 fc59 	bl	80127bc <__malloc_lock>
 8010f0a:	6833      	ldr	r3, [r6, #0]
 8010f0c:	461c      	mov	r4, r3
 8010f0e:	bb34      	cbnz	r4, 8010f5e <_malloc_r+0x82>
 8010f10:	4629      	mov	r1, r5
 8010f12:	4638      	mov	r0, r7
 8010f14:	f7ff ffc2 	bl	8010e9c <sbrk_aligned>
 8010f18:	1c43      	adds	r3, r0, #1
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	d14d      	bne.n	8010fba <_malloc_r+0xde>
 8010f1e:	6834      	ldr	r4, [r6, #0]
 8010f20:	4626      	mov	r6, r4
 8010f22:	2e00      	cmp	r6, #0
 8010f24:	d140      	bne.n	8010fa8 <_malloc_r+0xcc>
 8010f26:	6823      	ldr	r3, [r4, #0]
 8010f28:	4631      	mov	r1, r6
 8010f2a:	4638      	mov	r0, r7
 8010f2c:	eb04 0803 	add.w	r8, r4, r3
 8010f30:	f000 fd14 	bl	801195c <_sbrk_r>
 8010f34:	4580      	cmp	r8, r0
 8010f36:	d13a      	bne.n	8010fae <_malloc_r+0xd2>
 8010f38:	6821      	ldr	r1, [r4, #0]
 8010f3a:	3503      	adds	r5, #3
 8010f3c:	1a6d      	subs	r5, r5, r1
 8010f3e:	f025 0503 	bic.w	r5, r5, #3
 8010f42:	3508      	adds	r5, #8
 8010f44:	2d0c      	cmp	r5, #12
 8010f46:	bf38      	it	cc
 8010f48:	250c      	movcc	r5, #12
 8010f4a:	4638      	mov	r0, r7
 8010f4c:	4629      	mov	r1, r5
 8010f4e:	f7ff ffa5 	bl	8010e9c <sbrk_aligned>
 8010f52:	3001      	adds	r0, #1
 8010f54:	d02b      	beq.n	8010fae <_malloc_r+0xd2>
 8010f56:	6823      	ldr	r3, [r4, #0]
 8010f58:	442b      	add	r3, r5
 8010f5a:	6023      	str	r3, [r4, #0]
 8010f5c:	e00e      	b.n	8010f7c <_malloc_r+0xa0>
 8010f5e:	6822      	ldr	r2, [r4, #0]
 8010f60:	1b52      	subs	r2, r2, r5
 8010f62:	d41e      	bmi.n	8010fa2 <_malloc_r+0xc6>
 8010f64:	2a0b      	cmp	r2, #11
 8010f66:	d916      	bls.n	8010f96 <_malloc_r+0xba>
 8010f68:	1961      	adds	r1, r4, r5
 8010f6a:	42a3      	cmp	r3, r4
 8010f6c:	6025      	str	r5, [r4, #0]
 8010f6e:	bf18      	it	ne
 8010f70:	6059      	strne	r1, [r3, #4]
 8010f72:	6863      	ldr	r3, [r4, #4]
 8010f74:	bf08      	it	eq
 8010f76:	6031      	streq	r1, [r6, #0]
 8010f78:	5162      	str	r2, [r4, r5]
 8010f7a:	604b      	str	r3, [r1, #4]
 8010f7c:	4638      	mov	r0, r7
 8010f7e:	f104 060b 	add.w	r6, r4, #11
 8010f82:	f001 fc21 	bl	80127c8 <__malloc_unlock>
 8010f86:	f026 0607 	bic.w	r6, r6, #7
 8010f8a:	1d23      	adds	r3, r4, #4
 8010f8c:	1af2      	subs	r2, r6, r3
 8010f8e:	d0b6      	beq.n	8010efe <_malloc_r+0x22>
 8010f90:	1b9b      	subs	r3, r3, r6
 8010f92:	50a3      	str	r3, [r4, r2]
 8010f94:	e7b3      	b.n	8010efe <_malloc_r+0x22>
 8010f96:	6862      	ldr	r2, [r4, #4]
 8010f98:	42a3      	cmp	r3, r4
 8010f9a:	bf0c      	ite	eq
 8010f9c:	6032      	streq	r2, [r6, #0]
 8010f9e:	605a      	strne	r2, [r3, #4]
 8010fa0:	e7ec      	b.n	8010f7c <_malloc_r+0xa0>
 8010fa2:	4623      	mov	r3, r4
 8010fa4:	6864      	ldr	r4, [r4, #4]
 8010fa6:	e7b2      	b.n	8010f0e <_malloc_r+0x32>
 8010fa8:	4634      	mov	r4, r6
 8010faa:	6876      	ldr	r6, [r6, #4]
 8010fac:	e7b9      	b.n	8010f22 <_malloc_r+0x46>
 8010fae:	230c      	movs	r3, #12
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	603b      	str	r3, [r7, #0]
 8010fb4:	f001 fc08 	bl	80127c8 <__malloc_unlock>
 8010fb8:	e7a1      	b.n	8010efe <_malloc_r+0x22>
 8010fba:	6025      	str	r5, [r4, #0]
 8010fbc:	e7de      	b.n	8010f7c <_malloc_r+0xa0>
 8010fbe:	bf00      	nop
 8010fc0:	20006258 	.word	0x20006258

08010fc4 <__cvt>:
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fca:	461f      	mov	r7, r3
 8010fcc:	bfbb      	ittet	lt
 8010fce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010fd2:	461f      	movlt	r7, r3
 8010fd4:	2300      	movge	r3, #0
 8010fd6:	232d      	movlt	r3, #45	; 0x2d
 8010fd8:	b088      	sub	sp, #32
 8010fda:	4614      	mov	r4, r2
 8010fdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010fde:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010fe0:	7013      	strb	r3, [r2, #0]
 8010fe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010fe4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8010fe8:	f023 0820 	bic.w	r8, r3, #32
 8010fec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010ff0:	d005      	beq.n	8010ffe <__cvt+0x3a>
 8010ff2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010ff6:	d100      	bne.n	8010ffa <__cvt+0x36>
 8010ff8:	3501      	adds	r5, #1
 8010ffa:	2302      	movs	r3, #2
 8010ffc:	e000      	b.n	8011000 <__cvt+0x3c>
 8010ffe:	2303      	movs	r3, #3
 8011000:	aa07      	add	r2, sp, #28
 8011002:	9204      	str	r2, [sp, #16]
 8011004:	aa06      	add	r2, sp, #24
 8011006:	e9cd a202 	strd	sl, r2, [sp, #8]
 801100a:	e9cd 3500 	strd	r3, r5, [sp]
 801100e:	4622      	mov	r2, r4
 8011010:	463b      	mov	r3, r7
 8011012:	f000 fda1 	bl	8011b58 <_dtoa_r>
 8011016:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801101a:	4606      	mov	r6, r0
 801101c:	d102      	bne.n	8011024 <__cvt+0x60>
 801101e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011020:	07db      	lsls	r3, r3, #31
 8011022:	d522      	bpl.n	801106a <__cvt+0xa6>
 8011024:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011028:	eb06 0905 	add.w	r9, r6, r5
 801102c:	d110      	bne.n	8011050 <__cvt+0x8c>
 801102e:	7833      	ldrb	r3, [r6, #0]
 8011030:	2b30      	cmp	r3, #48	; 0x30
 8011032:	d10a      	bne.n	801104a <__cvt+0x86>
 8011034:	2200      	movs	r2, #0
 8011036:	2300      	movs	r3, #0
 8011038:	4620      	mov	r0, r4
 801103a:	4639      	mov	r1, r7
 801103c:	f7ef fd20 	bl	8000a80 <__aeabi_dcmpeq>
 8011040:	b918      	cbnz	r0, 801104a <__cvt+0x86>
 8011042:	f1c5 0501 	rsb	r5, r5, #1
 8011046:	f8ca 5000 	str.w	r5, [sl]
 801104a:	f8da 3000 	ldr.w	r3, [sl]
 801104e:	4499      	add	r9, r3
 8011050:	2200      	movs	r2, #0
 8011052:	2300      	movs	r3, #0
 8011054:	4620      	mov	r0, r4
 8011056:	4639      	mov	r1, r7
 8011058:	f7ef fd12 	bl	8000a80 <__aeabi_dcmpeq>
 801105c:	b108      	cbz	r0, 8011062 <__cvt+0x9e>
 801105e:	f8cd 901c 	str.w	r9, [sp, #28]
 8011062:	2230      	movs	r2, #48	; 0x30
 8011064:	9b07      	ldr	r3, [sp, #28]
 8011066:	454b      	cmp	r3, r9
 8011068:	d307      	bcc.n	801107a <__cvt+0xb6>
 801106a:	4630      	mov	r0, r6
 801106c:	9b07      	ldr	r3, [sp, #28]
 801106e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011070:	1b9b      	subs	r3, r3, r6
 8011072:	6013      	str	r3, [r2, #0]
 8011074:	b008      	add	sp, #32
 8011076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801107a:	1c59      	adds	r1, r3, #1
 801107c:	9107      	str	r1, [sp, #28]
 801107e:	701a      	strb	r2, [r3, #0]
 8011080:	e7f0      	b.n	8011064 <__cvt+0xa0>

08011082 <__exponent>:
 8011082:	4603      	mov	r3, r0
 8011084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011086:	2900      	cmp	r1, #0
 8011088:	f803 2b02 	strb.w	r2, [r3], #2
 801108c:	bfb6      	itet	lt
 801108e:	222d      	movlt	r2, #45	; 0x2d
 8011090:	222b      	movge	r2, #43	; 0x2b
 8011092:	4249      	neglt	r1, r1
 8011094:	2909      	cmp	r1, #9
 8011096:	7042      	strb	r2, [r0, #1]
 8011098:	dd2b      	ble.n	80110f2 <__exponent+0x70>
 801109a:	f10d 0407 	add.w	r4, sp, #7
 801109e:	46a4      	mov	ip, r4
 80110a0:	270a      	movs	r7, #10
 80110a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80110a6:	460a      	mov	r2, r1
 80110a8:	46a6      	mov	lr, r4
 80110aa:	fb07 1516 	mls	r5, r7, r6, r1
 80110ae:	2a63      	cmp	r2, #99	; 0x63
 80110b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80110b4:	4631      	mov	r1, r6
 80110b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80110ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80110be:	dcf0      	bgt.n	80110a2 <__exponent+0x20>
 80110c0:	3130      	adds	r1, #48	; 0x30
 80110c2:	f1ae 0502 	sub.w	r5, lr, #2
 80110c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80110ca:	4629      	mov	r1, r5
 80110cc:	1c44      	adds	r4, r0, #1
 80110ce:	4561      	cmp	r1, ip
 80110d0:	d30a      	bcc.n	80110e8 <__exponent+0x66>
 80110d2:	f10d 0209 	add.w	r2, sp, #9
 80110d6:	eba2 020e 	sub.w	r2, r2, lr
 80110da:	4565      	cmp	r5, ip
 80110dc:	bf88      	it	hi
 80110de:	2200      	movhi	r2, #0
 80110e0:	4413      	add	r3, r2
 80110e2:	1a18      	subs	r0, r3, r0
 80110e4:	b003      	add	sp, #12
 80110e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 80110f0:	e7ed      	b.n	80110ce <__exponent+0x4c>
 80110f2:	2330      	movs	r3, #48	; 0x30
 80110f4:	3130      	adds	r1, #48	; 0x30
 80110f6:	7083      	strb	r3, [r0, #2]
 80110f8:	70c1      	strb	r1, [r0, #3]
 80110fa:	1d03      	adds	r3, r0, #4
 80110fc:	e7f1      	b.n	80110e2 <__exponent+0x60>
	...

08011100 <_printf_float>:
 8011100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011104:	b091      	sub	sp, #68	; 0x44
 8011106:	460c      	mov	r4, r1
 8011108:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801110c:	4616      	mov	r6, r2
 801110e:	461f      	mov	r7, r3
 8011110:	4605      	mov	r5, r0
 8011112:	f001 fb33 	bl	801277c <_localeconv_r>
 8011116:	6803      	ldr	r3, [r0, #0]
 8011118:	4618      	mov	r0, r3
 801111a:	9309      	str	r3, [sp, #36]	; 0x24
 801111c:	f7ef f884 	bl	8000228 <strlen>
 8011120:	2300      	movs	r3, #0
 8011122:	930e      	str	r3, [sp, #56]	; 0x38
 8011124:	f8d8 3000 	ldr.w	r3, [r8]
 8011128:	900a      	str	r0, [sp, #40]	; 0x28
 801112a:	3307      	adds	r3, #7
 801112c:	f023 0307 	bic.w	r3, r3, #7
 8011130:	f103 0208 	add.w	r2, r3, #8
 8011134:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011138:	f8d4 b000 	ldr.w	fp, [r4]
 801113c:	f8c8 2000 	str.w	r2, [r8]
 8011140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011144:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011148:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 801114c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011150:	930b      	str	r3, [sp, #44]	; 0x2c
 8011152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011156:	4640      	mov	r0, r8
 8011158:	4b9c      	ldr	r3, [pc, #624]	; (80113cc <_printf_float+0x2cc>)
 801115a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801115c:	f7ef fcc2 	bl	8000ae4 <__aeabi_dcmpun>
 8011160:	bb70      	cbnz	r0, 80111c0 <_printf_float+0xc0>
 8011162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011166:	4640      	mov	r0, r8
 8011168:	4b98      	ldr	r3, [pc, #608]	; (80113cc <_printf_float+0x2cc>)
 801116a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801116c:	f7ef fc9c 	bl	8000aa8 <__aeabi_dcmple>
 8011170:	bb30      	cbnz	r0, 80111c0 <_printf_float+0xc0>
 8011172:	2200      	movs	r2, #0
 8011174:	2300      	movs	r3, #0
 8011176:	4640      	mov	r0, r8
 8011178:	4651      	mov	r1, sl
 801117a:	f7ef fc8b 	bl	8000a94 <__aeabi_dcmplt>
 801117e:	b110      	cbz	r0, 8011186 <_printf_float+0x86>
 8011180:	232d      	movs	r3, #45	; 0x2d
 8011182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011186:	4b92      	ldr	r3, [pc, #584]	; (80113d0 <_printf_float+0x2d0>)
 8011188:	4892      	ldr	r0, [pc, #584]	; (80113d4 <_printf_float+0x2d4>)
 801118a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801118e:	bf94      	ite	ls
 8011190:	4698      	movls	r8, r3
 8011192:	4680      	movhi	r8, r0
 8011194:	2303      	movs	r3, #3
 8011196:	f04f 0a00 	mov.w	sl, #0
 801119a:	6123      	str	r3, [r4, #16]
 801119c:	f02b 0304 	bic.w	r3, fp, #4
 80111a0:	6023      	str	r3, [r4, #0]
 80111a2:	4633      	mov	r3, r6
 80111a4:	4621      	mov	r1, r4
 80111a6:	4628      	mov	r0, r5
 80111a8:	9700      	str	r7, [sp, #0]
 80111aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80111ac:	f000 f9d4 	bl	8011558 <_printf_common>
 80111b0:	3001      	adds	r0, #1
 80111b2:	f040 8090 	bne.w	80112d6 <_printf_float+0x1d6>
 80111b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111ba:	b011      	add	sp, #68	; 0x44
 80111bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c0:	4642      	mov	r2, r8
 80111c2:	4653      	mov	r3, sl
 80111c4:	4640      	mov	r0, r8
 80111c6:	4651      	mov	r1, sl
 80111c8:	f7ef fc8c 	bl	8000ae4 <__aeabi_dcmpun>
 80111cc:	b148      	cbz	r0, 80111e2 <_printf_float+0xe2>
 80111ce:	f1ba 0f00 	cmp.w	sl, #0
 80111d2:	bfb8      	it	lt
 80111d4:	232d      	movlt	r3, #45	; 0x2d
 80111d6:	4880      	ldr	r0, [pc, #512]	; (80113d8 <_printf_float+0x2d8>)
 80111d8:	bfb8      	it	lt
 80111da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80111de:	4b7f      	ldr	r3, [pc, #508]	; (80113dc <_printf_float+0x2dc>)
 80111e0:	e7d3      	b.n	801118a <_printf_float+0x8a>
 80111e2:	6863      	ldr	r3, [r4, #4]
 80111e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80111e8:	1c5a      	adds	r2, r3, #1
 80111ea:	d142      	bne.n	8011272 <_printf_float+0x172>
 80111ec:	2306      	movs	r3, #6
 80111ee:	6063      	str	r3, [r4, #4]
 80111f0:	2200      	movs	r2, #0
 80111f2:	9206      	str	r2, [sp, #24]
 80111f4:	aa0e      	add	r2, sp, #56	; 0x38
 80111f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80111fa:	aa0d      	add	r2, sp, #52	; 0x34
 80111fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011200:	9203      	str	r2, [sp, #12]
 8011202:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011206:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801120a:	6023      	str	r3, [r4, #0]
 801120c:	6863      	ldr	r3, [r4, #4]
 801120e:	4642      	mov	r2, r8
 8011210:	9300      	str	r3, [sp, #0]
 8011212:	4628      	mov	r0, r5
 8011214:	4653      	mov	r3, sl
 8011216:	910b      	str	r1, [sp, #44]	; 0x2c
 8011218:	f7ff fed4 	bl	8010fc4 <__cvt>
 801121c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801121e:	4680      	mov	r8, r0
 8011220:	2947      	cmp	r1, #71	; 0x47
 8011222:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011224:	d108      	bne.n	8011238 <_printf_float+0x138>
 8011226:	1cc8      	adds	r0, r1, #3
 8011228:	db02      	blt.n	8011230 <_printf_float+0x130>
 801122a:	6863      	ldr	r3, [r4, #4]
 801122c:	4299      	cmp	r1, r3
 801122e:	dd40      	ble.n	80112b2 <_printf_float+0x1b2>
 8011230:	f1a9 0902 	sub.w	r9, r9, #2
 8011234:	fa5f f989 	uxtb.w	r9, r9
 8011238:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801123c:	d81f      	bhi.n	801127e <_printf_float+0x17e>
 801123e:	464a      	mov	r2, r9
 8011240:	3901      	subs	r1, #1
 8011242:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011246:	910d      	str	r1, [sp, #52]	; 0x34
 8011248:	f7ff ff1b 	bl	8011082 <__exponent>
 801124c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801124e:	4682      	mov	sl, r0
 8011250:	1813      	adds	r3, r2, r0
 8011252:	2a01      	cmp	r2, #1
 8011254:	6123      	str	r3, [r4, #16]
 8011256:	dc02      	bgt.n	801125e <_printf_float+0x15e>
 8011258:	6822      	ldr	r2, [r4, #0]
 801125a:	07d2      	lsls	r2, r2, #31
 801125c:	d501      	bpl.n	8011262 <_printf_float+0x162>
 801125e:	3301      	adds	r3, #1
 8011260:	6123      	str	r3, [r4, #16]
 8011262:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011266:	2b00      	cmp	r3, #0
 8011268:	d09b      	beq.n	80111a2 <_printf_float+0xa2>
 801126a:	232d      	movs	r3, #45	; 0x2d
 801126c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011270:	e797      	b.n	80111a2 <_printf_float+0xa2>
 8011272:	2947      	cmp	r1, #71	; 0x47
 8011274:	d1bc      	bne.n	80111f0 <_printf_float+0xf0>
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1ba      	bne.n	80111f0 <_printf_float+0xf0>
 801127a:	2301      	movs	r3, #1
 801127c:	e7b7      	b.n	80111ee <_printf_float+0xee>
 801127e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011282:	d118      	bne.n	80112b6 <_printf_float+0x1b6>
 8011284:	2900      	cmp	r1, #0
 8011286:	6863      	ldr	r3, [r4, #4]
 8011288:	dd0b      	ble.n	80112a2 <_printf_float+0x1a2>
 801128a:	6121      	str	r1, [r4, #16]
 801128c:	b913      	cbnz	r3, 8011294 <_printf_float+0x194>
 801128e:	6822      	ldr	r2, [r4, #0]
 8011290:	07d0      	lsls	r0, r2, #31
 8011292:	d502      	bpl.n	801129a <_printf_float+0x19a>
 8011294:	3301      	adds	r3, #1
 8011296:	440b      	add	r3, r1
 8011298:	6123      	str	r3, [r4, #16]
 801129a:	f04f 0a00 	mov.w	sl, #0
 801129e:	65a1      	str	r1, [r4, #88]	; 0x58
 80112a0:	e7df      	b.n	8011262 <_printf_float+0x162>
 80112a2:	b913      	cbnz	r3, 80112aa <_printf_float+0x1aa>
 80112a4:	6822      	ldr	r2, [r4, #0]
 80112a6:	07d2      	lsls	r2, r2, #31
 80112a8:	d501      	bpl.n	80112ae <_printf_float+0x1ae>
 80112aa:	3302      	adds	r3, #2
 80112ac:	e7f4      	b.n	8011298 <_printf_float+0x198>
 80112ae:	2301      	movs	r3, #1
 80112b0:	e7f2      	b.n	8011298 <_printf_float+0x198>
 80112b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80112b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112b8:	4299      	cmp	r1, r3
 80112ba:	db05      	blt.n	80112c8 <_printf_float+0x1c8>
 80112bc:	6823      	ldr	r3, [r4, #0]
 80112be:	6121      	str	r1, [r4, #16]
 80112c0:	07d8      	lsls	r0, r3, #31
 80112c2:	d5ea      	bpl.n	801129a <_printf_float+0x19a>
 80112c4:	1c4b      	adds	r3, r1, #1
 80112c6:	e7e7      	b.n	8011298 <_printf_float+0x198>
 80112c8:	2900      	cmp	r1, #0
 80112ca:	bfcc      	ite	gt
 80112cc:	2201      	movgt	r2, #1
 80112ce:	f1c1 0202 	rsble	r2, r1, #2
 80112d2:	4413      	add	r3, r2
 80112d4:	e7e0      	b.n	8011298 <_printf_float+0x198>
 80112d6:	6823      	ldr	r3, [r4, #0]
 80112d8:	055a      	lsls	r2, r3, #21
 80112da:	d407      	bmi.n	80112ec <_printf_float+0x1ec>
 80112dc:	6923      	ldr	r3, [r4, #16]
 80112de:	4642      	mov	r2, r8
 80112e0:	4631      	mov	r1, r6
 80112e2:	4628      	mov	r0, r5
 80112e4:	47b8      	blx	r7
 80112e6:	3001      	adds	r0, #1
 80112e8:	d12b      	bne.n	8011342 <_printf_float+0x242>
 80112ea:	e764      	b.n	80111b6 <_printf_float+0xb6>
 80112ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80112f0:	f240 80dd 	bls.w	80114ae <_printf_float+0x3ae>
 80112f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80112f8:	2200      	movs	r2, #0
 80112fa:	2300      	movs	r3, #0
 80112fc:	f7ef fbc0 	bl	8000a80 <__aeabi_dcmpeq>
 8011300:	2800      	cmp	r0, #0
 8011302:	d033      	beq.n	801136c <_printf_float+0x26c>
 8011304:	2301      	movs	r3, #1
 8011306:	4631      	mov	r1, r6
 8011308:	4628      	mov	r0, r5
 801130a:	4a35      	ldr	r2, [pc, #212]	; (80113e0 <_printf_float+0x2e0>)
 801130c:	47b8      	blx	r7
 801130e:	3001      	adds	r0, #1
 8011310:	f43f af51 	beq.w	80111b6 <_printf_float+0xb6>
 8011314:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011318:	429a      	cmp	r2, r3
 801131a:	db02      	blt.n	8011322 <_printf_float+0x222>
 801131c:	6823      	ldr	r3, [r4, #0]
 801131e:	07d8      	lsls	r0, r3, #31
 8011320:	d50f      	bpl.n	8011342 <_printf_float+0x242>
 8011322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011326:	4631      	mov	r1, r6
 8011328:	4628      	mov	r0, r5
 801132a:	47b8      	blx	r7
 801132c:	3001      	adds	r0, #1
 801132e:	f43f af42 	beq.w	80111b6 <_printf_float+0xb6>
 8011332:	f04f 0800 	mov.w	r8, #0
 8011336:	f104 091a 	add.w	r9, r4, #26
 801133a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801133c:	3b01      	subs	r3, #1
 801133e:	4543      	cmp	r3, r8
 8011340:	dc09      	bgt.n	8011356 <_printf_float+0x256>
 8011342:	6823      	ldr	r3, [r4, #0]
 8011344:	079b      	lsls	r3, r3, #30
 8011346:	f100 8102 	bmi.w	801154e <_printf_float+0x44e>
 801134a:	68e0      	ldr	r0, [r4, #12]
 801134c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801134e:	4298      	cmp	r0, r3
 8011350:	bfb8      	it	lt
 8011352:	4618      	movlt	r0, r3
 8011354:	e731      	b.n	80111ba <_printf_float+0xba>
 8011356:	2301      	movs	r3, #1
 8011358:	464a      	mov	r2, r9
 801135a:	4631      	mov	r1, r6
 801135c:	4628      	mov	r0, r5
 801135e:	47b8      	blx	r7
 8011360:	3001      	adds	r0, #1
 8011362:	f43f af28 	beq.w	80111b6 <_printf_float+0xb6>
 8011366:	f108 0801 	add.w	r8, r8, #1
 801136a:	e7e6      	b.n	801133a <_printf_float+0x23a>
 801136c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801136e:	2b00      	cmp	r3, #0
 8011370:	dc38      	bgt.n	80113e4 <_printf_float+0x2e4>
 8011372:	2301      	movs	r3, #1
 8011374:	4631      	mov	r1, r6
 8011376:	4628      	mov	r0, r5
 8011378:	4a19      	ldr	r2, [pc, #100]	; (80113e0 <_printf_float+0x2e0>)
 801137a:	47b8      	blx	r7
 801137c:	3001      	adds	r0, #1
 801137e:	f43f af1a 	beq.w	80111b6 <_printf_float+0xb6>
 8011382:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011386:	4313      	orrs	r3, r2
 8011388:	d102      	bne.n	8011390 <_printf_float+0x290>
 801138a:	6823      	ldr	r3, [r4, #0]
 801138c:	07d9      	lsls	r1, r3, #31
 801138e:	d5d8      	bpl.n	8011342 <_printf_float+0x242>
 8011390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011394:	4631      	mov	r1, r6
 8011396:	4628      	mov	r0, r5
 8011398:	47b8      	blx	r7
 801139a:	3001      	adds	r0, #1
 801139c:	f43f af0b 	beq.w	80111b6 <_printf_float+0xb6>
 80113a0:	f04f 0900 	mov.w	r9, #0
 80113a4:	f104 0a1a 	add.w	sl, r4, #26
 80113a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113aa:	425b      	negs	r3, r3
 80113ac:	454b      	cmp	r3, r9
 80113ae:	dc01      	bgt.n	80113b4 <_printf_float+0x2b4>
 80113b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113b2:	e794      	b.n	80112de <_printf_float+0x1de>
 80113b4:	2301      	movs	r3, #1
 80113b6:	4652      	mov	r2, sl
 80113b8:	4631      	mov	r1, r6
 80113ba:	4628      	mov	r0, r5
 80113bc:	47b8      	blx	r7
 80113be:	3001      	adds	r0, #1
 80113c0:	f43f aef9 	beq.w	80111b6 <_printf_float+0xb6>
 80113c4:	f109 0901 	add.w	r9, r9, #1
 80113c8:	e7ee      	b.n	80113a8 <_printf_float+0x2a8>
 80113ca:	bf00      	nop
 80113cc:	7fefffff 	.word	0x7fefffff
 80113d0:	08014ad8 	.word	0x08014ad8
 80113d4:	08014adc 	.word	0x08014adc
 80113d8:	08014ae4 	.word	0x08014ae4
 80113dc:	08014ae0 	.word	0x08014ae0
 80113e0:	08014ae8 	.word	0x08014ae8
 80113e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80113e8:	429a      	cmp	r2, r3
 80113ea:	bfa8      	it	ge
 80113ec:	461a      	movge	r2, r3
 80113ee:	2a00      	cmp	r2, #0
 80113f0:	4691      	mov	r9, r2
 80113f2:	dc37      	bgt.n	8011464 <_printf_float+0x364>
 80113f4:	f04f 0b00 	mov.w	fp, #0
 80113f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113fc:	f104 021a 	add.w	r2, r4, #26
 8011400:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011404:	ebaa 0309 	sub.w	r3, sl, r9
 8011408:	455b      	cmp	r3, fp
 801140a:	dc33      	bgt.n	8011474 <_printf_float+0x374>
 801140c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011410:	429a      	cmp	r2, r3
 8011412:	db3b      	blt.n	801148c <_printf_float+0x38c>
 8011414:	6823      	ldr	r3, [r4, #0]
 8011416:	07da      	lsls	r2, r3, #31
 8011418:	d438      	bmi.n	801148c <_printf_float+0x38c>
 801141a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801141c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801141e:	eba3 020a 	sub.w	r2, r3, sl
 8011422:	eba3 0901 	sub.w	r9, r3, r1
 8011426:	4591      	cmp	r9, r2
 8011428:	bfa8      	it	ge
 801142a:	4691      	movge	r9, r2
 801142c:	f1b9 0f00 	cmp.w	r9, #0
 8011430:	dc34      	bgt.n	801149c <_printf_float+0x39c>
 8011432:	f04f 0800 	mov.w	r8, #0
 8011436:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801143a:	f104 0a1a 	add.w	sl, r4, #26
 801143e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011442:	1a9b      	subs	r3, r3, r2
 8011444:	eba3 0309 	sub.w	r3, r3, r9
 8011448:	4543      	cmp	r3, r8
 801144a:	f77f af7a 	ble.w	8011342 <_printf_float+0x242>
 801144e:	2301      	movs	r3, #1
 8011450:	4652      	mov	r2, sl
 8011452:	4631      	mov	r1, r6
 8011454:	4628      	mov	r0, r5
 8011456:	47b8      	blx	r7
 8011458:	3001      	adds	r0, #1
 801145a:	f43f aeac 	beq.w	80111b6 <_printf_float+0xb6>
 801145e:	f108 0801 	add.w	r8, r8, #1
 8011462:	e7ec      	b.n	801143e <_printf_float+0x33e>
 8011464:	4613      	mov	r3, r2
 8011466:	4631      	mov	r1, r6
 8011468:	4642      	mov	r2, r8
 801146a:	4628      	mov	r0, r5
 801146c:	47b8      	blx	r7
 801146e:	3001      	adds	r0, #1
 8011470:	d1c0      	bne.n	80113f4 <_printf_float+0x2f4>
 8011472:	e6a0      	b.n	80111b6 <_printf_float+0xb6>
 8011474:	2301      	movs	r3, #1
 8011476:	4631      	mov	r1, r6
 8011478:	4628      	mov	r0, r5
 801147a:	920b      	str	r2, [sp, #44]	; 0x2c
 801147c:	47b8      	blx	r7
 801147e:	3001      	adds	r0, #1
 8011480:	f43f ae99 	beq.w	80111b6 <_printf_float+0xb6>
 8011484:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011486:	f10b 0b01 	add.w	fp, fp, #1
 801148a:	e7b9      	b.n	8011400 <_printf_float+0x300>
 801148c:	4631      	mov	r1, r6
 801148e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011492:	4628      	mov	r0, r5
 8011494:	47b8      	blx	r7
 8011496:	3001      	adds	r0, #1
 8011498:	d1bf      	bne.n	801141a <_printf_float+0x31a>
 801149a:	e68c      	b.n	80111b6 <_printf_float+0xb6>
 801149c:	464b      	mov	r3, r9
 801149e:	4631      	mov	r1, r6
 80114a0:	4628      	mov	r0, r5
 80114a2:	eb08 020a 	add.w	r2, r8, sl
 80114a6:	47b8      	blx	r7
 80114a8:	3001      	adds	r0, #1
 80114aa:	d1c2      	bne.n	8011432 <_printf_float+0x332>
 80114ac:	e683      	b.n	80111b6 <_printf_float+0xb6>
 80114ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114b0:	2a01      	cmp	r2, #1
 80114b2:	dc01      	bgt.n	80114b8 <_printf_float+0x3b8>
 80114b4:	07db      	lsls	r3, r3, #31
 80114b6:	d537      	bpl.n	8011528 <_printf_float+0x428>
 80114b8:	2301      	movs	r3, #1
 80114ba:	4642      	mov	r2, r8
 80114bc:	4631      	mov	r1, r6
 80114be:	4628      	mov	r0, r5
 80114c0:	47b8      	blx	r7
 80114c2:	3001      	adds	r0, #1
 80114c4:	f43f ae77 	beq.w	80111b6 <_printf_float+0xb6>
 80114c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80114cc:	4631      	mov	r1, r6
 80114ce:	4628      	mov	r0, r5
 80114d0:	47b8      	blx	r7
 80114d2:	3001      	adds	r0, #1
 80114d4:	f43f ae6f 	beq.w	80111b6 <_printf_float+0xb6>
 80114d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80114dc:	2200      	movs	r2, #0
 80114de:	2300      	movs	r3, #0
 80114e0:	f7ef face 	bl	8000a80 <__aeabi_dcmpeq>
 80114e4:	b9d8      	cbnz	r0, 801151e <_printf_float+0x41e>
 80114e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114e8:	f108 0201 	add.w	r2, r8, #1
 80114ec:	3b01      	subs	r3, #1
 80114ee:	4631      	mov	r1, r6
 80114f0:	4628      	mov	r0, r5
 80114f2:	47b8      	blx	r7
 80114f4:	3001      	adds	r0, #1
 80114f6:	d10e      	bne.n	8011516 <_printf_float+0x416>
 80114f8:	e65d      	b.n	80111b6 <_printf_float+0xb6>
 80114fa:	2301      	movs	r3, #1
 80114fc:	464a      	mov	r2, r9
 80114fe:	4631      	mov	r1, r6
 8011500:	4628      	mov	r0, r5
 8011502:	47b8      	blx	r7
 8011504:	3001      	adds	r0, #1
 8011506:	f43f ae56 	beq.w	80111b6 <_printf_float+0xb6>
 801150a:	f108 0801 	add.w	r8, r8, #1
 801150e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011510:	3b01      	subs	r3, #1
 8011512:	4543      	cmp	r3, r8
 8011514:	dcf1      	bgt.n	80114fa <_printf_float+0x3fa>
 8011516:	4653      	mov	r3, sl
 8011518:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801151c:	e6e0      	b.n	80112e0 <_printf_float+0x1e0>
 801151e:	f04f 0800 	mov.w	r8, #0
 8011522:	f104 091a 	add.w	r9, r4, #26
 8011526:	e7f2      	b.n	801150e <_printf_float+0x40e>
 8011528:	2301      	movs	r3, #1
 801152a:	4642      	mov	r2, r8
 801152c:	e7df      	b.n	80114ee <_printf_float+0x3ee>
 801152e:	2301      	movs	r3, #1
 8011530:	464a      	mov	r2, r9
 8011532:	4631      	mov	r1, r6
 8011534:	4628      	mov	r0, r5
 8011536:	47b8      	blx	r7
 8011538:	3001      	adds	r0, #1
 801153a:	f43f ae3c 	beq.w	80111b6 <_printf_float+0xb6>
 801153e:	f108 0801 	add.w	r8, r8, #1
 8011542:	68e3      	ldr	r3, [r4, #12]
 8011544:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011546:	1a5b      	subs	r3, r3, r1
 8011548:	4543      	cmp	r3, r8
 801154a:	dcf0      	bgt.n	801152e <_printf_float+0x42e>
 801154c:	e6fd      	b.n	801134a <_printf_float+0x24a>
 801154e:	f04f 0800 	mov.w	r8, #0
 8011552:	f104 0919 	add.w	r9, r4, #25
 8011556:	e7f4      	b.n	8011542 <_printf_float+0x442>

08011558 <_printf_common>:
 8011558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801155c:	4616      	mov	r6, r2
 801155e:	4699      	mov	r9, r3
 8011560:	688a      	ldr	r2, [r1, #8]
 8011562:	690b      	ldr	r3, [r1, #16]
 8011564:	4607      	mov	r7, r0
 8011566:	4293      	cmp	r3, r2
 8011568:	bfb8      	it	lt
 801156a:	4613      	movlt	r3, r2
 801156c:	6033      	str	r3, [r6, #0]
 801156e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011572:	460c      	mov	r4, r1
 8011574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011578:	b10a      	cbz	r2, 801157e <_printf_common+0x26>
 801157a:	3301      	adds	r3, #1
 801157c:	6033      	str	r3, [r6, #0]
 801157e:	6823      	ldr	r3, [r4, #0]
 8011580:	0699      	lsls	r1, r3, #26
 8011582:	bf42      	ittt	mi
 8011584:	6833      	ldrmi	r3, [r6, #0]
 8011586:	3302      	addmi	r3, #2
 8011588:	6033      	strmi	r3, [r6, #0]
 801158a:	6825      	ldr	r5, [r4, #0]
 801158c:	f015 0506 	ands.w	r5, r5, #6
 8011590:	d106      	bne.n	80115a0 <_printf_common+0x48>
 8011592:	f104 0a19 	add.w	sl, r4, #25
 8011596:	68e3      	ldr	r3, [r4, #12]
 8011598:	6832      	ldr	r2, [r6, #0]
 801159a:	1a9b      	subs	r3, r3, r2
 801159c:	42ab      	cmp	r3, r5
 801159e:	dc28      	bgt.n	80115f2 <_printf_common+0x9a>
 80115a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80115a4:	1e13      	subs	r3, r2, #0
 80115a6:	6822      	ldr	r2, [r4, #0]
 80115a8:	bf18      	it	ne
 80115aa:	2301      	movne	r3, #1
 80115ac:	0692      	lsls	r2, r2, #26
 80115ae:	d42d      	bmi.n	801160c <_printf_common+0xb4>
 80115b0:	4649      	mov	r1, r9
 80115b2:	4638      	mov	r0, r7
 80115b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80115b8:	47c0      	blx	r8
 80115ba:	3001      	adds	r0, #1
 80115bc:	d020      	beq.n	8011600 <_printf_common+0xa8>
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	68e5      	ldr	r5, [r4, #12]
 80115c2:	f003 0306 	and.w	r3, r3, #6
 80115c6:	2b04      	cmp	r3, #4
 80115c8:	bf18      	it	ne
 80115ca:	2500      	movne	r5, #0
 80115cc:	6832      	ldr	r2, [r6, #0]
 80115ce:	f04f 0600 	mov.w	r6, #0
 80115d2:	68a3      	ldr	r3, [r4, #8]
 80115d4:	bf08      	it	eq
 80115d6:	1aad      	subeq	r5, r5, r2
 80115d8:	6922      	ldr	r2, [r4, #16]
 80115da:	bf08      	it	eq
 80115dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115e0:	4293      	cmp	r3, r2
 80115e2:	bfc4      	itt	gt
 80115e4:	1a9b      	subgt	r3, r3, r2
 80115e6:	18ed      	addgt	r5, r5, r3
 80115e8:	341a      	adds	r4, #26
 80115ea:	42b5      	cmp	r5, r6
 80115ec:	d11a      	bne.n	8011624 <_printf_common+0xcc>
 80115ee:	2000      	movs	r0, #0
 80115f0:	e008      	b.n	8011604 <_printf_common+0xac>
 80115f2:	2301      	movs	r3, #1
 80115f4:	4652      	mov	r2, sl
 80115f6:	4649      	mov	r1, r9
 80115f8:	4638      	mov	r0, r7
 80115fa:	47c0      	blx	r8
 80115fc:	3001      	adds	r0, #1
 80115fe:	d103      	bne.n	8011608 <_printf_common+0xb0>
 8011600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011608:	3501      	adds	r5, #1
 801160a:	e7c4      	b.n	8011596 <_printf_common+0x3e>
 801160c:	2030      	movs	r0, #48	; 0x30
 801160e:	18e1      	adds	r1, r4, r3
 8011610:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011614:	1c5a      	adds	r2, r3, #1
 8011616:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801161a:	4422      	add	r2, r4
 801161c:	3302      	adds	r3, #2
 801161e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011622:	e7c5      	b.n	80115b0 <_printf_common+0x58>
 8011624:	2301      	movs	r3, #1
 8011626:	4622      	mov	r2, r4
 8011628:	4649      	mov	r1, r9
 801162a:	4638      	mov	r0, r7
 801162c:	47c0      	blx	r8
 801162e:	3001      	adds	r0, #1
 8011630:	d0e6      	beq.n	8011600 <_printf_common+0xa8>
 8011632:	3601      	adds	r6, #1
 8011634:	e7d9      	b.n	80115ea <_printf_common+0x92>
	...

08011638 <_printf_i>:
 8011638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801163c:	7e0f      	ldrb	r7, [r1, #24]
 801163e:	4691      	mov	r9, r2
 8011640:	2f78      	cmp	r7, #120	; 0x78
 8011642:	4680      	mov	r8, r0
 8011644:	460c      	mov	r4, r1
 8011646:	469a      	mov	sl, r3
 8011648:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801164a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801164e:	d807      	bhi.n	8011660 <_printf_i+0x28>
 8011650:	2f62      	cmp	r7, #98	; 0x62
 8011652:	d80a      	bhi.n	801166a <_printf_i+0x32>
 8011654:	2f00      	cmp	r7, #0
 8011656:	f000 80d9 	beq.w	801180c <_printf_i+0x1d4>
 801165a:	2f58      	cmp	r7, #88	; 0x58
 801165c:	f000 80a4 	beq.w	80117a8 <_printf_i+0x170>
 8011660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011668:	e03a      	b.n	80116e0 <_printf_i+0xa8>
 801166a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801166e:	2b15      	cmp	r3, #21
 8011670:	d8f6      	bhi.n	8011660 <_printf_i+0x28>
 8011672:	a101      	add	r1, pc, #4	; (adr r1, 8011678 <_printf_i+0x40>)
 8011674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011678:	080116d1 	.word	0x080116d1
 801167c:	080116e5 	.word	0x080116e5
 8011680:	08011661 	.word	0x08011661
 8011684:	08011661 	.word	0x08011661
 8011688:	08011661 	.word	0x08011661
 801168c:	08011661 	.word	0x08011661
 8011690:	080116e5 	.word	0x080116e5
 8011694:	08011661 	.word	0x08011661
 8011698:	08011661 	.word	0x08011661
 801169c:	08011661 	.word	0x08011661
 80116a0:	08011661 	.word	0x08011661
 80116a4:	080117f3 	.word	0x080117f3
 80116a8:	08011715 	.word	0x08011715
 80116ac:	080117d5 	.word	0x080117d5
 80116b0:	08011661 	.word	0x08011661
 80116b4:	08011661 	.word	0x08011661
 80116b8:	08011815 	.word	0x08011815
 80116bc:	08011661 	.word	0x08011661
 80116c0:	08011715 	.word	0x08011715
 80116c4:	08011661 	.word	0x08011661
 80116c8:	08011661 	.word	0x08011661
 80116cc:	080117dd 	.word	0x080117dd
 80116d0:	682b      	ldr	r3, [r5, #0]
 80116d2:	1d1a      	adds	r2, r3, #4
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	602a      	str	r2, [r5, #0]
 80116d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80116dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80116e0:	2301      	movs	r3, #1
 80116e2:	e0a4      	b.n	801182e <_printf_i+0x1f6>
 80116e4:	6820      	ldr	r0, [r4, #0]
 80116e6:	6829      	ldr	r1, [r5, #0]
 80116e8:	0606      	lsls	r6, r0, #24
 80116ea:	f101 0304 	add.w	r3, r1, #4
 80116ee:	d50a      	bpl.n	8011706 <_printf_i+0xce>
 80116f0:	680e      	ldr	r6, [r1, #0]
 80116f2:	602b      	str	r3, [r5, #0]
 80116f4:	2e00      	cmp	r6, #0
 80116f6:	da03      	bge.n	8011700 <_printf_i+0xc8>
 80116f8:	232d      	movs	r3, #45	; 0x2d
 80116fa:	4276      	negs	r6, r6
 80116fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011700:	230a      	movs	r3, #10
 8011702:	485e      	ldr	r0, [pc, #376]	; (801187c <_printf_i+0x244>)
 8011704:	e019      	b.n	801173a <_printf_i+0x102>
 8011706:	680e      	ldr	r6, [r1, #0]
 8011708:	f010 0f40 	tst.w	r0, #64	; 0x40
 801170c:	602b      	str	r3, [r5, #0]
 801170e:	bf18      	it	ne
 8011710:	b236      	sxthne	r6, r6
 8011712:	e7ef      	b.n	80116f4 <_printf_i+0xbc>
 8011714:	682b      	ldr	r3, [r5, #0]
 8011716:	6820      	ldr	r0, [r4, #0]
 8011718:	1d19      	adds	r1, r3, #4
 801171a:	6029      	str	r1, [r5, #0]
 801171c:	0601      	lsls	r1, r0, #24
 801171e:	d501      	bpl.n	8011724 <_printf_i+0xec>
 8011720:	681e      	ldr	r6, [r3, #0]
 8011722:	e002      	b.n	801172a <_printf_i+0xf2>
 8011724:	0646      	lsls	r6, r0, #25
 8011726:	d5fb      	bpl.n	8011720 <_printf_i+0xe8>
 8011728:	881e      	ldrh	r6, [r3, #0]
 801172a:	2f6f      	cmp	r7, #111	; 0x6f
 801172c:	bf0c      	ite	eq
 801172e:	2308      	moveq	r3, #8
 8011730:	230a      	movne	r3, #10
 8011732:	4852      	ldr	r0, [pc, #328]	; (801187c <_printf_i+0x244>)
 8011734:	2100      	movs	r1, #0
 8011736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801173a:	6865      	ldr	r5, [r4, #4]
 801173c:	2d00      	cmp	r5, #0
 801173e:	bfa8      	it	ge
 8011740:	6821      	ldrge	r1, [r4, #0]
 8011742:	60a5      	str	r5, [r4, #8]
 8011744:	bfa4      	itt	ge
 8011746:	f021 0104 	bicge.w	r1, r1, #4
 801174a:	6021      	strge	r1, [r4, #0]
 801174c:	b90e      	cbnz	r6, 8011752 <_printf_i+0x11a>
 801174e:	2d00      	cmp	r5, #0
 8011750:	d04d      	beq.n	80117ee <_printf_i+0x1b6>
 8011752:	4615      	mov	r5, r2
 8011754:	fbb6 f1f3 	udiv	r1, r6, r3
 8011758:	fb03 6711 	mls	r7, r3, r1, r6
 801175c:	5dc7      	ldrb	r7, [r0, r7]
 801175e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011762:	4637      	mov	r7, r6
 8011764:	42bb      	cmp	r3, r7
 8011766:	460e      	mov	r6, r1
 8011768:	d9f4      	bls.n	8011754 <_printf_i+0x11c>
 801176a:	2b08      	cmp	r3, #8
 801176c:	d10b      	bne.n	8011786 <_printf_i+0x14e>
 801176e:	6823      	ldr	r3, [r4, #0]
 8011770:	07de      	lsls	r6, r3, #31
 8011772:	d508      	bpl.n	8011786 <_printf_i+0x14e>
 8011774:	6923      	ldr	r3, [r4, #16]
 8011776:	6861      	ldr	r1, [r4, #4]
 8011778:	4299      	cmp	r1, r3
 801177a:	bfde      	ittt	le
 801177c:	2330      	movle	r3, #48	; 0x30
 801177e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011782:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011786:	1b52      	subs	r2, r2, r5
 8011788:	6122      	str	r2, [r4, #16]
 801178a:	464b      	mov	r3, r9
 801178c:	4621      	mov	r1, r4
 801178e:	4640      	mov	r0, r8
 8011790:	f8cd a000 	str.w	sl, [sp]
 8011794:	aa03      	add	r2, sp, #12
 8011796:	f7ff fedf 	bl	8011558 <_printf_common>
 801179a:	3001      	adds	r0, #1
 801179c:	d14c      	bne.n	8011838 <_printf_i+0x200>
 801179e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117a2:	b004      	add	sp, #16
 80117a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a8:	4834      	ldr	r0, [pc, #208]	; (801187c <_printf_i+0x244>)
 80117aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80117ae:	6829      	ldr	r1, [r5, #0]
 80117b0:	6823      	ldr	r3, [r4, #0]
 80117b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80117b6:	6029      	str	r1, [r5, #0]
 80117b8:	061d      	lsls	r5, r3, #24
 80117ba:	d514      	bpl.n	80117e6 <_printf_i+0x1ae>
 80117bc:	07df      	lsls	r7, r3, #31
 80117be:	bf44      	itt	mi
 80117c0:	f043 0320 	orrmi.w	r3, r3, #32
 80117c4:	6023      	strmi	r3, [r4, #0]
 80117c6:	b91e      	cbnz	r6, 80117d0 <_printf_i+0x198>
 80117c8:	6823      	ldr	r3, [r4, #0]
 80117ca:	f023 0320 	bic.w	r3, r3, #32
 80117ce:	6023      	str	r3, [r4, #0]
 80117d0:	2310      	movs	r3, #16
 80117d2:	e7af      	b.n	8011734 <_printf_i+0xfc>
 80117d4:	6823      	ldr	r3, [r4, #0]
 80117d6:	f043 0320 	orr.w	r3, r3, #32
 80117da:	6023      	str	r3, [r4, #0]
 80117dc:	2378      	movs	r3, #120	; 0x78
 80117de:	4828      	ldr	r0, [pc, #160]	; (8011880 <_printf_i+0x248>)
 80117e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117e4:	e7e3      	b.n	80117ae <_printf_i+0x176>
 80117e6:	0659      	lsls	r1, r3, #25
 80117e8:	bf48      	it	mi
 80117ea:	b2b6      	uxthmi	r6, r6
 80117ec:	e7e6      	b.n	80117bc <_printf_i+0x184>
 80117ee:	4615      	mov	r5, r2
 80117f0:	e7bb      	b.n	801176a <_printf_i+0x132>
 80117f2:	682b      	ldr	r3, [r5, #0]
 80117f4:	6826      	ldr	r6, [r4, #0]
 80117f6:	1d18      	adds	r0, r3, #4
 80117f8:	6961      	ldr	r1, [r4, #20]
 80117fa:	6028      	str	r0, [r5, #0]
 80117fc:	0635      	lsls	r5, r6, #24
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	d501      	bpl.n	8011806 <_printf_i+0x1ce>
 8011802:	6019      	str	r1, [r3, #0]
 8011804:	e002      	b.n	801180c <_printf_i+0x1d4>
 8011806:	0670      	lsls	r0, r6, #25
 8011808:	d5fb      	bpl.n	8011802 <_printf_i+0x1ca>
 801180a:	8019      	strh	r1, [r3, #0]
 801180c:	2300      	movs	r3, #0
 801180e:	4615      	mov	r5, r2
 8011810:	6123      	str	r3, [r4, #16]
 8011812:	e7ba      	b.n	801178a <_printf_i+0x152>
 8011814:	682b      	ldr	r3, [r5, #0]
 8011816:	2100      	movs	r1, #0
 8011818:	1d1a      	adds	r2, r3, #4
 801181a:	602a      	str	r2, [r5, #0]
 801181c:	681d      	ldr	r5, [r3, #0]
 801181e:	6862      	ldr	r2, [r4, #4]
 8011820:	4628      	mov	r0, r5
 8011822:	f000 ffaf 	bl	8012784 <memchr>
 8011826:	b108      	cbz	r0, 801182c <_printf_i+0x1f4>
 8011828:	1b40      	subs	r0, r0, r5
 801182a:	6060      	str	r0, [r4, #4]
 801182c:	6863      	ldr	r3, [r4, #4]
 801182e:	6123      	str	r3, [r4, #16]
 8011830:	2300      	movs	r3, #0
 8011832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011836:	e7a8      	b.n	801178a <_printf_i+0x152>
 8011838:	462a      	mov	r2, r5
 801183a:	4649      	mov	r1, r9
 801183c:	4640      	mov	r0, r8
 801183e:	6923      	ldr	r3, [r4, #16]
 8011840:	47d0      	blx	sl
 8011842:	3001      	adds	r0, #1
 8011844:	d0ab      	beq.n	801179e <_printf_i+0x166>
 8011846:	6823      	ldr	r3, [r4, #0]
 8011848:	079b      	lsls	r3, r3, #30
 801184a:	d413      	bmi.n	8011874 <_printf_i+0x23c>
 801184c:	68e0      	ldr	r0, [r4, #12]
 801184e:	9b03      	ldr	r3, [sp, #12]
 8011850:	4298      	cmp	r0, r3
 8011852:	bfb8      	it	lt
 8011854:	4618      	movlt	r0, r3
 8011856:	e7a4      	b.n	80117a2 <_printf_i+0x16a>
 8011858:	2301      	movs	r3, #1
 801185a:	4632      	mov	r2, r6
 801185c:	4649      	mov	r1, r9
 801185e:	4640      	mov	r0, r8
 8011860:	47d0      	blx	sl
 8011862:	3001      	adds	r0, #1
 8011864:	d09b      	beq.n	801179e <_printf_i+0x166>
 8011866:	3501      	adds	r5, #1
 8011868:	68e3      	ldr	r3, [r4, #12]
 801186a:	9903      	ldr	r1, [sp, #12]
 801186c:	1a5b      	subs	r3, r3, r1
 801186e:	42ab      	cmp	r3, r5
 8011870:	dcf2      	bgt.n	8011858 <_printf_i+0x220>
 8011872:	e7eb      	b.n	801184c <_printf_i+0x214>
 8011874:	2500      	movs	r5, #0
 8011876:	f104 0619 	add.w	r6, r4, #25
 801187a:	e7f5      	b.n	8011868 <_printf_i+0x230>
 801187c:	08014aea 	.word	0x08014aea
 8011880:	08014afb 	.word	0x08014afb

08011884 <srand>:
 8011884:	b538      	push	{r3, r4, r5, lr}
 8011886:	4b10      	ldr	r3, [pc, #64]	; (80118c8 <srand+0x44>)
 8011888:	4604      	mov	r4, r0
 801188a:	681d      	ldr	r5, [r3, #0]
 801188c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801188e:	b9b3      	cbnz	r3, 80118be <srand+0x3a>
 8011890:	2018      	movs	r0, #24
 8011892:	f7ff faa3 	bl	8010ddc <malloc>
 8011896:	4602      	mov	r2, r0
 8011898:	63a8      	str	r0, [r5, #56]	; 0x38
 801189a:	b920      	cbnz	r0, 80118a6 <srand+0x22>
 801189c:	2142      	movs	r1, #66	; 0x42
 801189e:	4b0b      	ldr	r3, [pc, #44]	; (80118cc <srand+0x48>)
 80118a0:	480b      	ldr	r0, [pc, #44]	; (80118d0 <srand+0x4c>)
 80118a2:	f000 f8ad 	bl	8011a00 <__assert_func>
 80118a6:	490b      	ldr	r1, [pc, #44]	; (80118d4 <srand+0x50>)
 80118a8:	4b0b      	ldr	r3, [pc, #44]	; (80118d8 <srand+0x54>)
 80118aa:	e9c0 1300 	strd	r1, r3, [r0]
 80118ae:	4b0b      	ldr	r3, [pc, #44]	; (80118dc <srand+0x58>)
 80118b0:	2100      	movs	r1, #0
 80118b2:	6083      	str	r3, [r0, #8]
 80118b4:	230b      	movs	r3, #11
 80118b6:	8183      	strh	r3, [r0, #12]
 80118b8:	2001      	movs	r0, #1
 80118ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80118be:	2200      	movs	r2, #0
 80118c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80118c2:	611c      	str	r4, [r3, #16]
 80118c4:	615a      	str	r2, [r3, #20]
 80118c6:	bd38      	pop	{r3, r4, r5, pc}
 80118c8:	20000078 	.word	0x20000078
 80118cc:	08014b0c 	.word	0x08014b0c
 80118d0:	08014b23 	.word	0x08014b23
 80118d4:	abcd330e 	.word	0xabcd330e
 80118d8:	e66d1234 	.word	0xe66d1234
 80118dc:	0005deec 	.word	0x0005deec

080118e0 <rand>:
 80118e0:	4b16      	ldr	r3, [pc, #88]	; (801193c <rand+0x5c>)
 80118e2:	b510      	push	{r4, lr}
 80118e4:	681c      	ldr	r4, [r3, #0]
 80118e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80118e8:	b9b3      	cbnz	r3, 8011918 <rand+0x38>
 80118ea:	2018      	movs	r0, #24
 80118ec:	f7ff fa76 	bl	8010ddc <malloc>
 80118f0:	4602      	mov	r2, r0
 80118f2:	63a0      	str	r0, [r4, #56]	; 0x38
 80118f4:	b920      	cbnz	r0, 8011900 <rand+0x20>
 80118f6:	214e      	movs	r1, #78	; 0x4e
 80118f8:	4b11      	ldr	r3, [pc, #68]	; (8011940 <rand+0x60>)
 80118fa:	4812      	ldr	r0, [pc, #72]	; (8011944 <rand+0x64>)
 80118fc:	f000 f880 	bl	8011a00 <__assert_func>
 8011900:	4911      	ldr	r1, [pc, #68]	; (8011948 <rand+0x68>)
 8011902:	4b12      	ldr	r3, [pc, #72]	; (801194c <rand+0x6c>)
 8011904:	e9c0 1300 	strd	r1, r3, [r0]
 8011908:	4b11      	ldr	r3, [pc, #68]	; (8011950 <rand+0x70>)
 801190a:	2100      	movs	r1, #0
 801190c:	6083      	str	r3, [r0, #8]
 801190e:	230b      	movs	r3, #11
 8011910:	8183      	strh	r3, [r0, #12]
 8011912:	2001      	movs	r0, #1
 8011914:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011918:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801191a:	4a0e      	ldr	r2, [pc, #56]	; (8011954 <rand+0x74>)
 801191c:	6920      	ldr	r0, [r4, #16]
 801191e:	6963      	ldr	r3, [r4, #20]
 8011920:	4342      	muls	r2, r0
 8011922:	490d      	ldr	r1, [pc, #52]	; (8011958 <rand+0x78>)
 8011924:	fb01 2203 	mla	r2, r1, r3, r2
 8011928:	fba0 0101 	umull	r0, r1, r0, r1
 801192c:	1c43      	adds	r3, r0, #1
 801192e:	eb42 0001 	adc.w	r0, r2, r1
 8011932:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8011936:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801193a:	bd10      	pop	{r4, pc}
 801193c:	20000078 	.word	0x20000078
 8011940:	08014b0c 	.word	0x08014b0c
 8011944:	08014b23 	.word	0x08014b23
 8011948:	abcd330e 	.word	0xabcd330e
 801194c:	e66d1234 	.word	0xe66d1234
 8011950:	0005deec 	.word	0x0005deec
 8011954:	5851f42d 	.word	0x5851f42d
 8011958:	4c957f2d 	.word	0x4c957f2d

0801195c <_sbrk_r>:
 801195c:	b538      	push	{r3, r4, r5, lr}
 801195e:	2300      	movs	r3, #0
 8011960:	4d05      	ldr	r5, [pc, #20]	; (8011978 <_sbrk_r+0x1c>)
 8011962:	4604      	mov	r4, r0
 8011964:	4608      	mov	r0, r1
 8011966:	602b      	str	r3, [r5, #0]
 8011968:	f7f4 fab6 	bl	8005ed8 <_sbrk>
 801196c:	1c43      	adds	r3, r0, #1
 801196e:	d102      	bne.n	8011976 <_sbrk_r+0x1a>
 8011970:	682b      	ldr	r3, [r5, #0]
 8011972:	b103      	cbz	r3, 8011976 <_sbrk_r+0x1a>
 8011974:	6023      	str	r3, [r4, #0]
 8011976:	bd38      	pop	{r3, r4, r5, pc}
 8011978:	20006260 	.word	0x20006260

0801197c <siprintf>:
 801197c:	b40e      	push	{r1, r2, r3}
 801197e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011982:	b500      	push	{lr}
 8011984:	b09c      	sub	sp, #112	; 0x70
 8011986:	ab1d      	add	r3, sp, #116	; 0x74
 8011988:	9002      	str	r0, [sp, #8]
 801198a:	9006      	str	r0, [sp, #24]
 801198c:	9107      	str	r1, [sp, #28]
 801198e:	9104      	str	r1, [sp, #16]
 8011990:	4808      	ldr	r0, [pc, #32]	; (80119b4 <siprintf+0x38>)
 8011992:	4909      	ldr	r1, [pc, #36]	; (80119b8 <siprintf+0x3c>)
 8011994:	f853 2b04 	ldr.w	r2, [r3], #4
 8011998:	9105      	str	r1, [sp, #20]
 801199a:	6800      	ldr	r0, [r0, #0]
 801199c:	a902      	add	r1, sp, #8
 801199e:	9301      	str	r3, [sp, #4]
 80119a0:	f001 fb0a 	bl	8012fb8 <_svfiprintf_r>
 80119a4:	2200      	movs	r2, #0
 80119a6:	9b02      	ldr	r3, [sp, #8]
 80119a8:	701a      	strb	r2, [r3, #0]
 80119aa:	b01c      	add	sp, #112	; 0x70
 80119ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80119b0:	b003      	add	sp, #12
 80119b2:	4770      	bx	lr
 80119b4:	20000078 	.word	0x20000078
 80119b8:	ffff0208 	.word	0xffff0208

080119bc <strncmp>:
 80119bc:	4603      	mov	r3, r0
 80119be:	b510      	push	{r4, lr}
 80119c0:	b172      	cbz	r2, 80119e0 <strncmp+0x24>
 80119c2:	3901      	subs	r1, #1
 80119c4:	1884      	adds	r4, r0, r2
 80119c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80119ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80119ce:	4290      	cmp	r0, r2
 80119d0:	d101      	bne.n	80119d6 <strncmp+0x1a>
 80119d2:	42a3      	cmp	r3, r4
 80119d4:	d101      	bne.n	80119da <strncmp+0x1e>
 80119d6:	1a80      	subs	r0, r0, r2
 80119d8:	bd10      	pop	{r4, pc}
 80119da:	2800      	cmp	r0, #0
 80119dc:	d1f3      	bne.n	80119c6 <strncmp+0xa>
 80119de:	e7fa      	b.n	80119d6 <strncmp+0x1a>
 80119e0:	4610      	mov	r0, r2
 80119e2:	e7f9      	b.n	80119d8 <strncmp+0x1c>

080119e4 <getpid>:
 80119e4:	4b01      	ldr	r3, [pc, #4]	; (80119ec <getpid+0x8>)
 80119e6:	6818      	ldr	r0, [r3, #0]
 80119e8:	f001 bd50 	b.w	801348c <_getpid_r>
 80119ec:	20000078 	.word	0x20000078

080119f0 <gettimeofday>:
 80119f0:	4b02      	ldr	r3, [pc, #8]	; (80119fc <gettimeofday+0xc>)
 80119f2:	460a      	mov	r2, r1
 80119f4:	4601      	mov	r1, r0
 80119f6:	6818      	ldr	r0, [r3, #0]
 80119f8:	f000 beae 	b.w	8012758 <_gettimeofday_r>
 80119fc:	20000078 	.word	0x20000078

08011a00 <__assert_func>:
 8011a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a02:	4614      	mov	r4, r2
 8011a04:	461a      	mov	r2, r3
 8011a06:	4b09      	ldr	r3, [pc, #36]	; (8011a2c <__assert_func+0x2c>)
 8011a08:	4605      	mov	r5, r0
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	68d8      	ldr	r0, [r3, #12]
 8011a0e:	b14c      	cbz	r4, 8011a24 <__assert_func+0x24>
 8011a10:	4b07      	ldr	r3, [pc, #28]	; (8011a30 <__assert_func+0x30>)
 8011a12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a16:	9100      	str	r1, [sp, #0]
 8011a18:	462b      	mov	r3, r5
 8011a1a:	4906      	ldr	r1, [pc, #24]	; (8011a34 <__assert_func+0x34>)
 8011a1c:	f000 fe8a 	bl	8012734 <fiprintf>
 8011a20:	f001 fdf6 	bl	8013610 <abort>
 8011a24:	4b04      	ldr	r3, [pc, #16]	; (8011a38 <__assert_func+0x38>)
 8011a26:	461c      	mov	r4, r3
 8011a28:	e7f3      	b.n	8011a12 <__assert_func+0x12>
 8011a2a:	bf00      	nop
 8011a2c:	20000078 	.word	0x20000078
 8011a30:	08014b7e 	.word	0x08014b7e
 8011a34:	08014b8b 	.word	0x08014b8b
 8011a38:	08014bb9 	.word	0x08014bb9

08011a3c <quorem>:
 8011a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a40:	6903      	ldr	r3, [r0, #16]
 8011a42:	690c      	ldr	r4, [r1, #16]
 8011a44:	4607      	mov	r7, r0
 8011a46:	42a3      	cmp	r3, r4
 8011a48:	f2c0 8082 	blt.w	8011b50 <quorem+0x114>
 8011a4c:	3c01      	subs	r4, #1
 8011a4e:	f100 0514 	add.w	r5, r0, #20
 8011a52:	f101 0814 	add.w	r8, r1, #20
 8011a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a5a:	9301      	str	r3, [sp, #4]
 8011a5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a64:	3301      	adds	r3, #1
 8011a66:	429a      	cmp	r2, r3
 8011a68:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a74:	d331      	bcc.n	8011ada <quorem+0x9e>
 8011a76:	f04f 0e00 	mov.w	lr, #0
 8011a7a:	4640      	mov	r0, r8
 8011a7c:	46ac      	mov	ip, r5
 8011a7e:	46f2      	mov	sl, lr
 8011a80:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a84:	b293      	uxth	r3, r2
 8011a86:	fb06 e303 	mla	r3, r6, r3, lr
 8011a8a:	0c12      	lsrs	r2, r2, #16
 8011a8c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	fb06 e202 	mla	r2, r6, r2, lr
 8011a96:	ebaa 0303 	sub.w	r3, sl, r3
 8011a9a:	f8dc a000 	ldr.w	sl, [ip]
 8011a9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011aa2:	fa1f fa8a 	uxth.w	sl, sl
 8011aa6:	4453      	add	r3, sl
 8011aa8:	f8dc a000 	ldr.w	sl, [ip]
 8011aac:	b292      	uxth	r2, r2
 8011aae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011ab2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011abc:	4581      	cmp	r9, r0
 8011abe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011ac2:	f84c 3b04 	str.w	r3, [ip], #4
 8011ac6:	d2db      	bcs.n	8011a80 <quorem+0x44>
 8011ac8:	f855 300b 	ldr.w	r3, [r5, fp]
 8011acc:	b92b      	cbnz	r3, 8011ada <quorem+0x9e>
 8011ace:	9b01      	ldr	r3, [sp, #4]
 8011ad0:	3b04      	subs	r3, #4
 8011ad2:	429d      	cmp	r5, r3
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	d32f      	bcc.n	8011b38 <quorem+0xfc>
 8011ad8:	613c      	str	r4, [r7, #16]
 8011ada:	4638      	mov	r0, r7
 8011adc:	f001 f8f8 	bl	8012cd0 <__mcmp>
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	db25      	blt.n	8011b30 <quorem+0xf4>
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	f04f 0c00 	mov.w	ip, #0
 8011aea:	3601      	adds	r6, #1
 8011aec:	f858 1b04 	ldr.w	r1, [r8], #4
 8011af0:	f8d0 e000 	ldr.w	lr, [r0]
 8011af4:	b28b      	uxth	r3, r1
 8011af6:	ebac 0303 	sub.w	r3, ip, r3
 8011afa:	fa1f f28e 	uxth.w	r2, lr
 8011afe:	4413      	add	r3, r2
 8011b00:	0c0a      	lsrs	r2, r1, #16
 8011b02:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011b06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b10:	45c1      	cmp	r9, r8
 8011b12:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011b16:	f840 3b04 	str.w	r3, [r0], #4
 8011b1a:	d2e7      	bcs.n	8011aec <quorem+0xb0>
 8011b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b24:	b922      	cbnz	r2, 8011b30 <quorem+0xf4>
 8011b26:	3b04      	subs	r3, #4
 8011b28:	429d      	cmp	r5, r3
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	d30a      	bcc.n	8011b44 <quorem+0x108>
 8011b2e:	613c      	str	r4, [r7, #16]
 8011b30:	4630      	mov	r0, r6
 8011b32:	b003      	add	sp, #12
 8011b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b38:	6812      	ldr	r2, [r2, #0]
 8011b3a:	3b04      	subs	r3, #4
 8011b3c:	2a00      	cmp	r2, #0
 8011b3e:	d1cb      	bne.n	8011ad8 <quorem+0x9c>
 8011b40:	3c01      	subs	r4, #1
 8011b42:	e7c6      	b.n	8011ad2 <quorem+0x96>
 8011b44:	6812      	ldr	r2, [r2, #0]
 8011b46:	3b04      	subs	r3, #4
 8011b48:	2a00      	cmp	r2, #0
 8011b4a:	d1f0      	bne.n	8011b2e <quorem+0xf2>
 8011b4c:	3c01      	subs	r4, #1
 8011b4e:	e7eb      	b.n	8011b28 <quorem+0xec>
 8011b50:	2000      	movs	r0, #0
 8011b52:	e7ee      	b.n	8011b32 <quorem+0xf6>
 8011b54:	0000      	movs	r0, r0
	...

08011b58 <_dtoa_r>:
 8011b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b5c:	4616      	mov	r6, r2
 8011b5e:	461f      	mov	r7, r3
 8011b60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011b62:	b099      	sub	sp, #100	; 0x64
 8011b64:	4605      	mov	r5, r0
 8011b66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011b6a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8011b6e:	b974      	cbnz	r4, 8011b8e <_dtoa_r+0x36>
 8011b70:	2010      	movs	r0, #16
 8011b72:	f7ff f933 	bl	8010ddc <malloc>
 8011b76:	4602      	mov	r2, r0
 8011b78:	6268      	str	r0, [r5, #36]	; 0x24
 8011b7a:	b920      	cbnz	r0, 8011b86 <_dtoa_r+0x2e>
 8011b7c:	21ea      	movs	r1, #234	; 0xea
 8011b7e:	4ba8      	ldr	r3, [pc, #672]	; (8011e20 <_dtoa_r+0x2c8>)
 8011b80:	48a8      	ldr	r0, [pc, #672]	; (8011e24 <_dtoa_r+0x2cc>)
 8011b82:	f7ff ff3d 	bl	8011a00 <__assert_func>
 8011b86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b8a:	6004      	str	r4, [r0, #0]
 8011b8c:	60c4      	str	r4, [r0, #12]
 8011b8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011b90:	6819      	ldr	r1, [r3, #0]
 8011b92:	b151      	cbz	r1, 8011baa <_dtoa_r+0x52>
 8011b94:	685a      	ldr	r2, [r3, #4]
 8011b96:	2301      	movs	r3, #1
 8011b98:	4093      	lsls	r3, r2
 8011b9a:	604a      	str	r2, [r1, #4]
 8011b9c:	608b      	str	r3, [r1, #8]
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	f000 fe58 	bl	8012854 <_Bfree>
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011ba8:	601a      	str	r2, [r3, #0]
 8011baa:	1e3b      	subs	r3, r7, #0
 8011bac:	bfaf      	iteee	ge
 8011bae:	2300      	movge	r3, #0
 8011bb0:	2201      	movlt	r2, #1
 8011bb2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011bb6:	9305      	strlt	r3, [sp, #20]
 8011bb8:	bfa8      	it	ge
 8011bba:	f8c8 3000 	strge.w	r3, [r8]
 8011bbe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011bc2:	4b99      	ldr	r3, [pc, #612]	; (8011e28 <_dtoa_r+0x2d0>)
 8011bc4:	bfb8      	it	lt
 8011bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8011bca:	ea33 0309 	bics.w	r3, r3, r9
 8011bce:	d119      	bne.n	8011c04 <_dtoa_r+0xac>
 8011bd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8011bd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011bd6:	6013      	str	r3, [r2, #0]
 8011bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011bdc:	4333      	orrs	r3, r6
 8011bde:	f000 857f 	beq.w	80126e0 <_dtoa_r+0xb88>
 8011be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011be4:	b953      	cbnz	r3, 8011bfc <_dtoa_r+0xa4>
 8011be6:	4b91      	ldr	r3, [pc, #580]	; (8011e2c <_dtoa_r+0x2d4>)
 8011be8:	e022      	b.n	8011c30 <_dtoa_r+0xd8>
 8011bea:	4b91      	ldr	r3, [pc, #580]	; (8011e30 <_dtoa_r+0x2d8>)
 8011bec:	9303      	str	r3, [sp, #12]
 8011bee:	3308      	adds	r3, #8
 8011bf0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011bf2:	6013      	str	r3, [r2, #0]
 8011bf4:	9803      	ldr	r0, [sp, #12]
 8011bf6:	b019      	add	sp, #100	; 0x64
 8011bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bfc:	4b8b      	ldr	r3, [pc, #556]	; (8011e2c <_dtoa_r+0x2d4>)
 8011bfe:	9303      	str	r3, [sp, #12]
 8011c00:	3303      	adds	r3, #3
 8011c02:	e7f5      	b.n	8011bf0 <_dtoa_r+0x98>
 8011c04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011c08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8011c0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c10:	2200      	movs	r2, #0
 8011c12:	2300      	movs	r3, #0
 8011c14:	f7ee ff34 	bl	8000a80 <__aeabi_dcmpeq>
 8011c18:	4680      	mov	r8, r0
 8011c1a:	b158      	cbz	r0, 8011c34 <_dtoa_r+0xdc>
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011c20:	6013      	str	r3, [r2, #0]
 8011c22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	f000 8558 	beq.w	80126da <_dtoa_r+0xb82>
 8011c2a:	4882      	ldr	r0, [pc, #520]	; (8011e34 <_dtoa_r+0x2dc>)
 8011c2c:	6018      	str	r0, [r3, #0]
 8011c2e:	1e43      	subs	r3, r0, #1
 8011c30:	9303      	str	r3, [sp, #12]
 8011c32:	e7df      	b.n	8011bf4 <_dtoa_r+0x9c>
 8011c34:	ab16      	add	r3, sp, #88	; 0x58
 8011c36:	9301      	str	r3, [sp, #4]
 8011c38:	ab17      	add	r3, sp, #92	; 0x5c
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011c42:	f001 f8ed 	bl	8012e20 <__d2b>
 8011c46:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011c4a:	4683      	mov	fp, r0
 8011c4c:	2c00      	cmp	r4, #0
 8011c4e:	d07f      	beq.n	8011d50 <_dtoa_r+0x1f8>
 8011c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c56:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8011c5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c5e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8011c62:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011c66:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	4b72      	ldr	r3, [pc, #456]	; (8011e38 <_dtoa_r+0x2e0>)
 8011c6e:	f7ee fae7 	bl	8000240 <__aeabi_dsub>
 8011c72:	a365      	add	r3, pc, #404	; (adr r3, 8011e08 <_dtoa_r+0x2b0>)
 8011c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c78:	f7ee fc9a 	bl	80005b0 <__aeabi_dmul>
 8011c7c:	a364      	add	r3, pc, #400	; (adr r3, 8011e10 <_dtoa_r+0x2b8>)
 8011c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c82:	f7ee fadf 	bl	8000244 <__adddf3>
 8011c86:	4606      	mov	r6, r0
 8011c88:	4620      	mov	r0, r4
 8011c8a:	460f      	mov	r7, r1
 8011c8c:	f7ee fc26 	bl	80004dc <__aeabi_i2d>
 8011c90:	a361      	add	r3, pc, #388	; (adr r3, 8011e18 <_dtoa_r+0x2c0>)
 8011c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c96:	f7ee fc8b 	bl	80005b0 <__aeabi_dmul>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	4630      	mov	r0, r6
 8011ca0:	4639      	mov	r1, r7
 8011ca2:	f7ee facf 	bl	8000244 <__adddf3>
 8011ca6:	4606      	mov	r6, r0
 8011ca8:	460f      	mov	r7, r1
 8011caa:	f7ee ff31 	bl	8000b10 <__aeabi_d2iz>
 8011cae:	2200      	movs	r2, #0
 8011cb0:	4682      	mov	sl, r0
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	4630      	mov	r0, r6
 8011cb6:	4639      	mov	r1, r7
 8011cb8:	f7ee feec 	bl	8000a94 <__aeabi_dcmplt>
 8011cbc:	b148      	cbz	r0, 8011cd2 <_dtoa_r+0x17a>
 8011cbe:	4650      	mov	r0, sl
 8011cc0:	f7ee fc0c 	bl	80004dc <__aeabi_i2d>
 8011cc4:	4632      	mov	r2, r6
 8011cc6:	463b      	mov	r3, r7
 8011cc8:	f7ee feda 	bl	8000a80 <__aeabi_dcmpeq>
 8011ccc:	b908      	cbnz	r0, 8011cd2 <_dtoa_r+0x17a>
 8011cce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011cd2:	f1ba 0f16 	cmp.w	sl, #22
 8011cd6:	d858      	bhi.n	8011d8a <_dtoa_r+0x232>
 8011cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011cdc:	4b57      	ldr	r3, [pc, #348]	; (8011e3c <_dtoa_r+0x2e4>)
 8011cde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce6:	f7ee fed5 	bl	8000a94 <__aeabi_dcmplt>
 8011cea:	2800      	cmp	r0, #0
 8011cec:	d04f      	beq.n	8011d8e <_dtoa_r+0x236>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011cf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8011cf6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011cf8:	1b1c      	subs	r4, r3, r4
 8011cfa:	1e63      	subs	r3, r4, #1
 8011cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8011cfe:	bf49      	itett	mi
 8011d00:	f1c4 0301 	rsbmi	r3, r4, #1
 8011d04:	2300      	movpl	r3, #0
 8011d06:	9306      	strmi	r3, [sp, #24]
 8011d08:	2300      	movmi	r3, #0
 8011d0a:	bf54      	ite	pl
 8011d0c:	9306      	strpl	r3, [sp, #24]
 8011d0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8011d10:	f1ba 0f00 	cmp.w	sl, #0
 8011d14:	db3d      	blt.n	8011d92 <_dtoa_r+0x23a>
 8011d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d18:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011d1c:	4453      	add	r3, sl
 8011d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d20:	2300      	movs	r3, #0
 8011d22:	930a      	str	r3, [sp, #40]	; 0x28
 8011d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011d26:	2b09      	cmp	r3, #9
 8011d28:	f200 808c 	bhi.w	8011e44 <_dtoa_r+0x2ec>
 8011d2c:	2b05      	cmp	r3, #5
 8011d2e:	bfc4      	itt	gt
 8011d30:	3b04      	subgt	r3, #4
 8011d32:	9322      	strgt	r3, [sp, #136]	; 0x88
 8011d34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011d36:	bfc8      	it	gt
 8011d38:	2400      	movgt	r4, #0
 8011d3a:	f1a3 0302 	sub.w	r3, r3, #2
 8011d3e:	bfd8      	it	le
 8011d40:	2401      	movle	r4, #1
 8011d42:	2b03      	cmp	r3, #3
 8011d44:	f200 808a 	bhi.w	8011e5c <_dtoa_r+0x304>
 8011d48:	e8df f003 	tbb	[pc, r3]
 8011d4c:	5b4d4f2d 	.word	0x5b4d4f2d
 8011d50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8011d54:	441c      	add	r4, r3
 8011d56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8011d5a:	2b20      	cmp	r3, #32
 8011d5c:	bfc3      	ittte	gt
 8011d5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011d62:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8011d66:	fa09 f303 	lslgt.w	r3, r9, r3
 8011d6a:	f1c3 0320 	rsble	r3, r3, #32
 8011d6e:	bfc6      	itte	gt
 8011d70:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011d74:	4318      	orrgt	r0, r3
 8011d76:	fa06 f003 	lslle.w	r0, r6, r3
 8011d7a:	f7ee fb9f 	bl	80004bc <__aeabi_ui2d>
 8011d7e:	2301      	movs	r3, #1
 8011d80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011d84:	3c01      	subs	r4, #1
 8011d86:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d88:	e76f      	b.n	8011c6a <_dtoa_r+0x112>
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	e7b2      	b.n	8011cf4 <_dtoa_r+0x19c>
 8011d8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8011d90:	e7b1      	b.n	8011cf6 <_dtoa_r+0x19e>
 8011d92:	9b06      	ldr	r3, [sp, #24]
 8011d94:	eba3 030a 	sub.w	r3, r3, sl
 8011d98:	9306      	str	r3, [sp, #24]
 8011d9a:	f1ca 0300 	rsb	r3, sl, #0
 8011d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8011da0:	2300      	movs	r3, #0
 8011da2:	930e      	str	r3, [sp, #56]	; 0x38
 8011da4:	e7be      	b.n	8011d24 <_dtoa_r+0x1cc>
 8011da6:	2300      	movs	r3, #0
 8011da8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011daa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	dc58      	bgt.n	8011e62 <_dtoa_r+0x30a>
 8011db0:	f04f 0901 	mov.w	r9, #1
 8011db4:	464b      	mov	r3, r9
 8011db6:	f8cd 9020 	str.w	r9, [sp, #32]
 8011dba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011dc2:	6042      	str	r2, [r0, #4]
 8011dc4:	2204      	movs	r2, #4
 8011dc6:	f102 0614 	add.w	r6, r2, #20
 8011dca:	429e      	cmp	r6, r3
 8011dcc:	6841      	ldr	r1, [r0, #4]
 8011dce:	d94e      	bls.n	8011e6e <_dtoa_r+0x316>
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	f000 fcff 	bl	80127d4 <_Balloc>
 8011dd6:	9003      	str	r0, [sp, #12]
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	d14c      	bne.n	8011e76 <_dtoa_r+0x31e>
 8011ddc:	4602      	mov	r2, r0
 8011dde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011de2:	4b17      	ldr	r3, [pc, #92]	; (8011e40 <_dtoa_r+0x2e8>)
 8011de4:	e6cc      	b.n	8011b80 <_dtoa_r+0x28>
 8011de6:	2301      	movs	r3, #1
 8011de8:	e7de      	b.n	8011da8 <_dtoa_r+0x250>
 8011dea:	2300      	movs	r3, #0
 8011dec:	930b      	str	r3, [sp, #44]	; 0x2c
 8011dee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011df0:	eb0a 0903 	add.w	r9, sl, r3
 8011df4:	f109 0301 	add.w	r3, r9, #1
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	9308      	str	r3, [sp, #32]
 8011dfc:	bfb8      	it	lt
 8011dfe:	2301      	movlt	r3, #1
 8011e00:	e7dd      	b.n	8011dbe <_dtoa_r+0x266>
 8011e02:	2301      	movs	r3, #1
 8011e04:	e7f2      	b.n	8011dec <_dtoa_r+0x294>
 8011e06:	bf00      	nop
 8011e08:	636f4361 	.word	0x636f4361
 8011e0c:	3fd287a7 	.word	0x3fd287a7
 8011e10:	8b60c8b3 	.word	0x8b60c8b3
 8011e14:	3fc68a28 	.word	0x3fc68a28
 8011e18:	509f79fb 	.word	0x509f79fb
 8011e1c:	3fd34413 	.word	0x3fd34413
 8011e20:	08014b0c 	.word	0x08014b0c
 8011e24:	08014bc7 	.word	0x08014bc7
 8011e28:	7ff00000 	.word	0x7ff00000
 8011e2c:	08014bc3 	.word	0x08014bc3
 8011e30:	08014bba 	.word	0x08014bba
 8011e34:	08014ae9 	.word	0x08014ae9
 8011e38:	3ff80000 	.word	0x3ff80000
 8011e3c:	08014cb8 	.word	0x08014cb8
 8011e40:	08014c22 	.word	0x08014c22
 8011e44:	2401      	movs	r4, #1
 8011e46:	2300      	movs	r3, #0
 8011e48:	940b      	str	r4, [sp, #44]	; 0x2c
 8011e4a:	9322      	str	r3, [sp, #136]	; 0x88
 8011e4c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8011e50:	2200      	movs	r2, #0
 8011e52:	2312      	movs	r3, #18
 8011e54:	f8cd 9020 	str.w	r9, [sp, #32]
 8011e58:	9223      	str	r2, [sp, #140]	; 0x8c
 8011e5a:	e7b0      	b.n	8011dbe <_dtoa_r+0x266>
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e60:	e7f4      	b.n	8011e4c <_dtoa_r+0x2f4>
 8011e62:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8011e66:	464b      	mov	r3, r9
 8011e68:	f8cd 9020 	str.w	r9, [sp, #32]
 8011e6c:	e7a7      	b.n	8011dbe <_dtoa_r+0x266>
 8011e6e:	3101      	adds	r1, #1
 8011e70:	6041      	str	r1, [r0, #4]
 8011e72:	0052      	lsls	r2, r2, #1
 8011e74:	e7a7      	b.n	8011dc6 <_dtoa_r+0x26e>
 8011e76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e78:	9a03      	ldr	r2, [sp, #12]
 8011e7a:	601a      	str	r2, [r3, #0]
 8011e7c:	9b08      	ldr	r3, [sp, #32]
 8011e7e:	2b0e      	cmp	r3, #14
 8011e80:	f200 80a8 	bhi.w	8011fd4 <_dtoa_r+0x47c>
 8011e84:	2c00      	cmp	r4, #0
 8011e86:	f000 80a5 	beq.w	8011fd4 <_dtoa_r+0x47c>
 8011e8a:	f1ba 0f00 	cmp.w	sl, #0
 8011e8e:	dd34      	ble.n	8011efa <_dtoa_r+0x3a2>
 8011e90:	4a9a      	ldr	r2, [pc, #616]	; (80120fc <_dtoa_r+0x5a4>)
 8011e92:	f00a 030f 	and.w	r3, sl, #15
 8011e96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e9a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011e9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011ea2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011ea6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8011eaa:	d016      	beq.n	8011eda <_dtoa_r+0x382>
 8011eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011eb0:	4b93      	ldr	r3, [pc, #588]	; (8012100 <_dtoa_r+0x5a8>)
 8011eb2:	2703      	movs	r7, #3
 8011eb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011eb8:	f7ee fca4 	bl	8000804 <__aeabi_ddiv>
 8011ebc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ec0:	f004 040f 	and.w	r4, r4, #15
 8011ec4:	4e8e      	ldr	r6, [pc, #568]	; (8012100 <_dtoa_r+0x5a8>)
 8011ec6:	b954      	cbnz	r4, 8011ede <_dtoa_r+0x386>
 8011ec8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ed0:	f7ee fc98 	bl	8000804 <__aeabi_ddiv>
 8011ed4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ed8:	e029      	b.n	8011f2e <_dtoa_r+0x3d6>
 8011eda:	2702      	movs	r7, #2
 8011edc:	e7f2      	b.n	8011ec4 <_dtoa_r+0x36c>
 8011ede:	07e1      	lsls	r1, r4, #31
 8011ee0:	d508      	bpl.n	8011ef4 <_dtoa_r+0x39c>
 8011ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011ee6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011eea:	f7ee fb61 	bl	80005b0 <__aeabi_dmul>
 8011eee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011ef2:	3701      	adds	r7, #1
 8011ef4:	1064      	asrs	r4, r4, #1
 8011ef6:	3608      	adds	r6, #8
 8011ef8:	e7e5      	b.n	8011ec6 <_dtoa_r+0x36e>
 8011efa:	f000 80a5 	beq.w	8012048 <_dtoa_r+0x4f0>
 8011efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011f02:	f1ca 0400 	rsb	r4, sl, #0
 8011f06:	4b7d      	ldr	r3, [pc, #500]	; (80120fc <_dtoa_r+0x5a4>)
 8011f08:	f004 020f 	and.w	r2, r4, #15
 8011f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f14:	f7ee fb4c 	bl	80005b0 <__aeabi_dmul>
 8011f18:	2702      	movs	r7, #2
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f20:	4e77      	ldr	r6, [pc, #476]	; (8012100 <_dtoa_r+0x5a8>)
 8011f22:	1124      	asrs	r4, r4, #4
 8011f24:	2c00      	cmp	r4, #0
 8011f26:	f040 8084 	bne.w	8012032 <_dtoa_r+0x4da>
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d1d2      	bne.n	8011ed4 <_dtoa_r+0x37c>
 8011f2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	f000 808b 	beq.w	801204c <_dtoa_r+0x4f4>
 8011f36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011f3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011f3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011f42:	2200      	movs	r2, #0
 8011f44:	4b6f      	ldr	r3, [pc, #444]	; (8012104 <_dtoa_r+0x5ac>)
 8011f46:	f7ee fda5 	bl	8000a94 <__aeabi_dcmplt>
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	d07e      	beq.n	801204c <_dtoa_r+0x4f4>
 8011f4e:	9b08      	ldr	r3, [sp, #32]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d07b      	beq.n	801204c <_dtoa_r+0x4f4>
 8011f54:	f1b9 0f00 	cmp.w	r9, #0
 8011f58:	dd38      	ble.n	8011fcc <_dtoa_r+0x474>
 8011f5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011f5e:	2200      	movs	r2, #0
 8011f60:	4b69      	ldr	r3, [pc, #420]	; (8012108 <_dtoa_r+0x5b0>)
 8011f62:	f7ee fb25 	bl	80005b0 <__aeabi_dmul>
 8011f66:	464c      	mov	r4, r9
 8011f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f6c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8011f70:	3701      	adds	r7, #1
 8011f72:	4638      	mov	r0, r7
 8011f74:	f7ee fab2 	bl	80004dc <__aeabi_i2d>
 8011f78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f7c:	f7ee fb18 	bl	80005b0 <__aeabi_dmul>
 8011f80:	2200      	movs	r2, #0
 8011f82:	4b62      	ldr	r3, [pc, #392]	; (801210c <_dtoa_r+0x5b4>)
 8011f84:	f7ee f95e 	bl	8000244 <__adddf3>
 8011f88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011f8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011f90:	9611      	str	r6, [sp, #68]	; 0x44
 8011f92:	2c00      	cmp	r4, #0
 8011f94:	d15d      	bne.n	8012052 <_dtoa_r+0x4fa>
 8011f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	4b5c      	ldr	r3, [pc, #368]	; (8012110 <_dtoa_r+0x5b8>)
 8011f9e:	f7ee f94f 	bl	8000240 <__aeabi_dsub>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011faa:	4633      	mov	r3, r6
 8011fac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011fae:	f7ee fd8f 	bl	8000ad0 <__aeabi_dcmpgt>
 8011fb2:	2800      	cmp	r0, #0
 8011fb4:	f040 829c 	bne.w	80124f0 <_dtoa_r+0x998>
 8011fb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011fbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011fbe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011fc2:	f7ee fd67 	bl	8000a94 <__aeabi_dcmplt>
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	f040 8290 	bne.w	80124ec <_dtoa_r+0x994>
 8011fcc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8011fd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	f2c0 8152 	blt.w	8012280 <_dtoa_r+0x728>
 8011fdc:	f1ba 0f0e 	cmp.w	sl, #14
 8011fe0:	f300 814e 	bgt.w	8012280 <_dtoa_r+0x728>
 8011fe4:	4b45      	ldr	r3, [pc, #276]	; (80120fc <_dtoa_r+0x5a4>)
 8011fe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011fea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011fee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8011ff2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	f280 80db 	bge.w	80121b0 <_dtoa_r+0x658>
 8011ffa:	9b08      	ldr	r3, [sp, #32]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	f300 80d7 	bgt.w	80121b0 <_dtoa_r+0x658>
 8012002:	f040 8272 	bne.w	80124ea <_dtoa_r+0x992>
 8012006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801200a:	2200      	movs	r2, #0
 801200c:	4b40      	ldr	r3, [pc, #256]	; (8012110 <_dtoa_r+0x5b8>)
 801200e:	f7ee facf 	bl	80005b0 <__aeabi_dmul>
 8012012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012016:	f7ee fd51 	bl	8000abc <__aeabi_dcmpge>
 801201a:	9c08      	ldr	r4, [sp, #32]
 801201c:	4626      	mov	r6, r4
 801201e:	2800      	cmp	r0, #0
 8012020:	f040 8248 	bne.w	80124b4 <_dtoa_r+0x95c>
 8012024:	2331      	movs	r3, #49	; 0x31
 8012026:	9f03      	ldr	r7, [sp, #12]
 8012028:	f10a 0a01 	add.w	sl, sl, #1
 801202c:	f807 3b01 	strb.w	r3, [r7], #1
 8012030:	e244      	b.n	80124bc <_dtoa_r+0x964>
 8012032:	07e2      	lsls	r2, r4, #31
 8012034:	d505      	bpl.n	8012042 <_dtoa_r+0x4ea>
 8012036:	e9d6 2300 	ldrd	r2, r3, [r6]
 801203a:	f7ee fab9 	bl	80005b0 <__aeabi_dmul>
 801203e:	2301      	movs	r3, #1
 8012040:	3701      	adds	r7, #1
 8012042:	1064      	asrs	r4, r4, #1
 8012044:	3608      	adds	r6, #8
 8012046:	e76d      	b.n	8011f24 <_dtoa_r+0x3cc>
 8012048:	2702      	movs	r7, #2
 801204a:	e770      	b.n	8011f2e <_dtoa_r+0x3d6>
 801204c:	46d0      	mov	r8, sl
 801204e:	9c08      	ldr	r4, [sp, #32]
 8012050:	e78f      	b.n	8011f72 <_dtoa_r+0x41a>
 8012052:	9903      	ldr	r1, [sp, #12]
 8012054:	4b29      	ldr	r3, [pc, #164]	; (80120fc <_dtoa_r+0x5a4>)
 8012056:	4421      	add	r1, r4
 8012058:	9112      	str	r1, [sp, #72]	; 0x48
 801205a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801205c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012060:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012064:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012068:	2900      	cmp	r1, #0
 801206a:	d055      	beq.n	8012118 <_dtoa_r+0x5c0>
 801206c:	2000      	movs	r0, #0
 801206e:	4929      	ldr	r1, [pc, #164]	; (8012114 <_dtoa_r+0x5bc>)
 8012070:	f7ee fbc8 	bl	8000804 <__aeabi_ddiv>
 8012074:	463b      	mov	r3, r7
 8012076:	4632      	mov	r2, r6
 8012078:	f7ee f8e2 	bl	8000240 <__aeabi_dsub>
 801207c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012080:	9f03      	ldr	r7, [sp, #12]
 8012082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012086:	f7ee fd43 	bl	8000b10 <__aeabi_d2iz>
 801208a:	4604      	mov	r4, r0
 801208c:	f7ee fa26 	bl	80004dc <__aeabi_i2d>
 8012090:	4602      	mov	r2, r0
 8012092:	460b      	mov	r3, r1
 8012094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012098:	f7ee f8d2 	bl	8000240 <__aeabi_dsub>
 801209c:	4602      	mov	r2, r0
 801209e:	460b      	mov	r3, r1
 80120a0:	3430      	adds	r4, #48	; 0x30
 80120a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80120a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80120aa:	f807 4b01 	strb.w	r4, [r7], #1
 80120ae:	f7ee fcf1 	bl	8000a94 <__aeabi_dcmplt>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d174      	bne.n	80121a0 <_dtoa_r+0x648>
 80120b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120ba:	2000      	movs	r0, #0
 80120bc:	4911      	ldr	r1, [pc, #68]	; (8012104 <_dtoa_r+0x5ac>)
 80120be:	f7ee f8bf 	bl	8000240 <__aeabi_dsub>
 80120c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80120c6:	f7ee fce5 	bl	8000a94 <__aeabi_dcmplt>
 80120ca:	2800      	cmp	r0, #0
 80120cc:	f040 80b7 	bne.w	801223e <_dtoa_r+0x6e6>
 80120d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120d2:	429f      	cmp	r7, r3
 80120d4:	f43f af7a 	beq.w	8011fcc <_dtoa_r+0x474>
 80120d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80120dc:	2200      	movs	r2, #0
 80120de:	4b0a      	ldr	r3, [pc, #40]	; (8012108 <_dtoa_r+0x5b0>)
 80120e0:	f7ee fa66 	bl	80005b0 <__aeabi_dmul>
 80120e4:	2200      	movs	r2, #0
 80120e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80120ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120ee:	4b06      	ldr	r3, [pc, #24]	; (8012108 <_dtoa_r+0x5b0>)
 80120f0:	f7ee fa5e 	bl	80005b0 <__aeabi_dmul>
 80120f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80120f8:	e7c3      	b.n	8012082 <_dtoa_r+0x52a>
 80120fa:	bf00      	nop
 80120fc:	08014cb8 	.word	0x08014cb8
 8012100:	08014c90 	.word	0x08014c90
 8012104:	3ff00000 	.word	0x3ff00000
 8012108:	40240000 	.word	0x40240000
 801210c:	401c0000 	.word	0x401c0000
 8012110:	40140000 	.word	0x40140000
 8012114:	3fe00000 	.word	0x3fe00000
 8012118:	4630      	mov	r0, r6
 801211a:	4639      	mov	r1, r7
 801211c:	f7ee fa48 	bl	80005b0 <__aeabi_dmul>
 8012120:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012122:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012126:	9c03      	ldr	r4, [sp, #12]
 8012128:	9314      	str	r3, [sp, #80]	; 0x50
 801212a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801212e:	f7ee fcef 	bl	8000b10 <__aeabi_d2iz>
 8012132:	9015      	str	r0, [sp, #84]	; 0x54
 8012134:	f7ee f9d2 	bl	80004dc <__aeabi_i2d>
 8012138:	4602      	mov	r2, r0
 801213a:	460b      	mov	r3, r1
 801213c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012140:	f7ee f87e 	bl	8000240 <__aeabi_dsub>
 8012144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012146:	4606      	mov	r6, r0
 8012148:	3330      	adds	r3, #48	; 0x30
 801214a:	f804 3b01 	strb.w	r3, [r4], #1
 801214e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012150:	460f      	mov	r7, r1
 8012152:	429c      	cmp	r4, r3
 8012154:	f04f 0200 	mov.w	r2, #0
 8012158:	d124      	bne.n	80121a4 <_dtoa_r+0x64c>
 801215a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801215e:	4bb0      	ldr	r3, [pc, #704]	; (8012420 <_dtoa_r+0x8c8>)
 8012160:	f7ee f870 	bl	8000244 <__adddf3>
 8012164:	4602      	mov	r2, r0
 8012166:	460b      	mov	r3, r1
 8012168:	4630      	mov	r0, r6
 801216a:	4639      	mov	r1, r7
 801216c:	f7ee fcb0 	bl	8000ad0 <__aeabi_dcmpgt>
 8012170:	2800      	cmp	r0, #0
 8012172:	d163      	bne.n	801223c <_dtoa_r+0x6e4>
 8012174:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012178:	2000      	movs	r0, #0
 801217a:	49a9      	ldr	r1, [pc, #676]	; (8012420 <_dtoa_r+0x8c8>)
 801217c:	f7ee f860 	bl	8000240 <__aeabi_dsub>
 8012180:	4602      	mov	r2, r0
 8012182:	460b      	mov	r3, r1
 8012184:	4630      	mov	r0, r6
 8012186:	4639      	mov	r1, r7
 8012188:	f7ee fc84 	bl	8000a94 <__aeabi_dcmplt>
 801218c:	2800      	cmp	r0, #0
 801218e:	f43f af1d 	beq.w	8011fcc <_dtoa_r+0x474>
 8012192:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012194:	1e7b      	subs	r3, r7, #1
 8012196:	9314      	str	r3, [sp, #80]	; 0x50
 8012198:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801219c:	2b30      	cmp	r3, #48	; 0x30
 801219e:	d0f8      	beq.n	8012192 <_dtoa_r+0x63a>
 80121a0:	46c2      	mov	sl, r8
 80121a2:	e03b      	b.n	801221c <_dtoa_r+0x6c4>
 80121a4:	4b9f      	ldr	r3, [pc, #636]	; (8012424 <_dtoa_r+0x8cc>)
 80121a6:	f7ee fa03 	bl	80005b0 <__aeabi_dmul>
 80121aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80121ae:	e7bc      	b.n	801212a <_dtoa_r+0x5d2>
 80121b0:	9f03      	ldr	r7, [sp, #12]
 80121b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80121b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121ba:	4640      	mov	r0, r8
 80121bc:	4649      	mov	r1, r9
 80121be:	f7ee fb21 	bl	8000804 <__aeabi_ddiv>
 80121c2:	f7ee fca5 	bl	8000b10 <__aeabi_d2iz>
 80121c6:	4604      	mov	r4, r0
 80121c8:	f7ee f988 	bl	80004dc <__aeabi_i2d>
 80121cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121d0:	f7ee f9ee 	bl	80005b0 <__aeabi_dmul>
 80121d4:	4602      	mov	r2, r0
 80121d6:	460b      	mov	r3, r1
 80121d8:	4640      	mov	r0, r8
 80121da:	4649      	mov	r1, r9
 80121dc:	f7ee f830 	bl	8000240 <__aeabi_dsub>
 80121e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80121e4:	f807 6b01 	strb.w	r6, [r7], #1
 80121e8:	9e03      	ldr	r6, [sp, #12]
 80121ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80121ee:	1bbe      	subs	r6, r7, r6
 80121f0:	45b4      	cmp	ip, r6
 80121f2:	4602      	mov	r2, r0
 80121f4:	460b      	mov	r3, r1
 80121f6:	d136      	bne.n	8012266 <_dtoa_r+0x70e>
 80121f8:	f7ee f824 	bl	8000244 <__adddf3>
 80121fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012200:	4680      	mov	r8, r0
 8012202:	4689      	mov	r9, r1
 8012204:	f7ee fc64 	bl	8000ad0 <__aeabi_dcmpgt>
 8012208:	bb58      	cbnz	r0, 8012262 <_dtoa_r+0x70a>
 801220a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801220e:	4640      	mov	r0, r8
 8012210:	4649      	mov	r1, r9
 8012212:	f7ee fc35 	bl	8000a80 <__aeabi_dcmpeq>
 8012216:	b108      	cbz	r0, 801221c <_dtoa_r+0x6c4>
 8012218:	07e1      	lsls	r1, r4, #31
 801221a:	d422      	bmi.n	8012262 <_dtoa_r+0x70a>
 801221c:	4628      	mov	r0, r5
 801221e:	4659      	mov	r1, fp
 8012220:	f000 fb18 	bl	8012854 <_Bfree>
 8012224:	2300      	movs	r3, #0
 8012226:	703b      	strb	r3, [r7, #0]
 8012228:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801222a:	f10a 0001 	add.w	r0, sl, #1
 801222e:	6018      	str	r0, [r3, #0]
 8012230:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012232:	2b00      	cmp	r3, #0
 8012234:	f43f acde 	beq.w	8011bf4 <_dtoa_r+0x9c>
 8012238:	601f      	str	r7, [r3, #0]
 801223a:	e4db      	b.n	8011bf4 <_dtoa_r+0x9c>
 801223c:	4627      	mov	r7, r4
 801223e:	463b      	mov	r3, r7
 8012240:	461f      	mov	r7, r3
 8012242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012246:	2a39      	cmp	r2, #57	; 0x39
 8012248:	d107      	bne.n	801225a <_dtoa_r+0x702>
 801224a:	9a03      	ldr	r2, [sp, #12]
 801224c:	429a      	cmp	r2, r3
 801224e:	d1f7      	bne.n	8012240 <_dtoa_r+0x6e8>
 8012250:	2230      	movs	r2, #48	; 0x30
 8012252:	9903      	ldr	r1, [sp, #12]
 8012254:	f108 0801 	add.w	r8, r8, #1
 8012258:	700a      	strb	r2, [r1, #0]
 801225a:	781a      	ldrb	r2, [r3, #0]
 801225c:	3201      	adds	r2, #1
 801225e:	701a      	strb	r2, [r3, #0]
 8012260:	e79e      	b.n	80121a0 <_dtoa_r+0x648>
 8012262:	46d0      	mov	r8, sl
 8012264:	e7eb      	b.n	801223e <_dtoa_r+0x6e6>
 8012266:	2200      	movs	r2, #0
 8012268:	4b6e      	ldr	r3, [pc, #440]	; (8012424 <_dtoa_r+0x8cc>)
 801226a:	f7ee f9a1 	bl	80005b0 <__aeabi_dmul>
 801226e:	2200      	movs	r2, #0
 8012270:	2300      	movs	r3, #0
 8012272:	4680      	mov	r8, r0
 8012274:	4689      	mov	r9, r1
 8012276:	f7ee fc03 	bl	8000a80 <__aeabi_dcmpeq>
 801227a:	2800      	cmp	r0, #0
 801227c:	d09b      	beq.n	80121b6 <_dtoa_r+0x65e>
 801227e:	e7cd      	b.n	801221c <_dtoa_r+0x6c4>
 8012280:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012282:	2a00      	cmp	r2, #0
 8012284:	f000 80d0 	beq.w	8012428 <_dtoa_r+0x8d0>
 8012288:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801228a:	2a01      	cmp	r2, #1
 801228c:	f300 80ae 	bgt.w	80123ec <_dtoa_r+0x894>
 8012290:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012292:	2a00      	cmp	r2, #0
 8012294:	f000 80a6 	beq.w	80123e4 <_dtoa_r+0x88c>
 8012298:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801229c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801229e:	9f06      	ldr	r7, [sp, #24]
 80122a0:	9a06      	ldr	r2, [sp, #24]
 80122a2:	2101      	movs	r1, #1
 80122a4:	441a      	add	r2, r3
 80122a6:	9206      	str	r2, [sp, #24]
 80122a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122aa:	4628      	mov	r0, r5
 80122ac:	441a      	add	r2, r3
 80122ae:	9209      	str	r2, [sp, #36]	; 0x24
 80122b0:	f000 fb86 	bl	80129c0 <__i2b>
 80122b4:	4606      	mov	r6, r0
 80122b6:	2f00      	cmp	r7, #0
 80122b8:	dd0c      	ble.n	80122d4 <_dtoa_r+0x77c>
 80122ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122bc:	2b00      	cmp	r3, #0
 80122be:	dd09      	ble.n	80122d4 <_dtoa_r+0x77c>
 80122c0:	42bb      	cmp	r3, r7
 80122c2:	bfa8      	it	ge
 80122c4:	463b      	movge	r3, r7
 80122c6:	9a06      	ldr	r2, [sp, #24]
 80122c8:	1aff      	subs	r7, r7, r3
 80122ca:	1ad2      	subs	r2, r2, r3
 80122cc:	9206      	str	r2, [sp, #24]
 80122ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	9309      	str	r3, [sp, #36]	; 0x24
 80122d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122d6:	b1f3      	cbz	r3, 8012316 <_dtoa_r+0x7be>
 80122d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122da:	2b00      	cmp	r3, #0
 80122dc:	f000 80a8 	beq.w	8012430 <_dtoa_r+0x8d8>
 80122e0:	2c00      	cmp	r4, #0
 80122e2:	dd10      	ble.n	8012306 <_dtoa_r+0x7ae>
 80122e4:	4631      	mov	r1, r6
 80122e6:	4622      	mov	r2, r4
 80122e8:	4628      	mov	r0, r5
 80122ea:	f000 fc27 	bl	8012b3c <__pow5mult>
 80122ee:	465a      	mov	r2, fp
 80122f0:	4601      	mov	r1, r0
 80122f2:	4606      	mov	r6, r0
 80122f4:	4628      	mov	r0, r5
 80122f6:	f000 fb79 	bl	80129ec <__multiply>
 80122fa:	4680      	mov	r8, r0
 80122fc:	4659      	mov	r1, fp
 80122fe:	4628      	mov	r0, r5
 8012300:	f000 faa8 	bl	8012854 <_Bfree>
 8012304:	46c3      	mov	fp, r8
 8012306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012308:	1b1a      	subs	r2, r3, r4
 801230a:	d004      	beq.n	8012316 <_dtoa_r+0x7be>
 801230c:	4659      	mov	r1, fp
 801230e:	4628      	mov	r0, r5
 8012310:	f000 fc14 	bl	8012b3c <__pow5mult>
 8012314:	4683      	mov	fp, r0
 8012316:	2101      	movs	r1, #1
 8012318:	4628      	mov	r0, r5
 801231a:	f000 fb51 	bl	80129c0 <__i2b>
 801231e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012320:	4604      	mov	r4, r0
 8012322:	2b00      	cmp	r3, #0
 8012324:	f340 8086 	ble.w	8012434 <_dtoa_r+0x8dc>
 8012328:	461a      	mov	r2, r3
 801232a:	4601      	mov	r1, r0
 801232c:	4628      	mov	r0, r5
 801232e:	f000 fc05 	bl	8012b3c <__pow5mult>
 8012332:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012334:	4604      	mov	r4, r0
 8012336:	2b01      	cmp	r3, #1
 8012338:	dd7f      	ble.n	801243a <_dtoa_r+0x8e2>
 801233a:	f04f 0800 	mov.w	r8, #0
 801233e:	6923      	ldr	r3, [r4, #16]
 8012340:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012344:	6918      	ldr	r0, [r3, #16]
 8012346:	f000 faed 	bl	8012924 <__hi0bits>
 801234a:	f1c0 0020 	rsb	r0, r0, #32
 801234e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012350:	4418      	add	r0, r3
 8012352:	f010 001f 	ands.w	r0, r0, #31
 8012356:	f000 8092 	beq.w	801247e <_dtoa_r+0x926>
 801235a:	f1c0 0320 	rsb	r3, r0, #32
 801235e:	2b04      	cmp	r3, #4
 8012360:	f340 808a 	ble.w	8012478 <_dtoa_r+0x920>
 8012364:	f1c0 001c 	rsb	r0, r0, #28
 8012368:	9b06      	ldr	r3, [sp, #24]
 801236a:	4407      	add	r7, r0
 801236c:	4403      	add	r3, r0
 801236e:	9306      	str	r3, [sp, #24]
 8012370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012372:	4403      	add	r3, r0
 8012374:	9309      	str	r3, [sp, #36]	; 0x24
 8012376:	9b06      	ldr	r3, [sp, #24]
 8012378:	2b00      	cmp	r3, #0
 801237a:	dd05      	ble.n	8012388 <_dtoa_r+0x830>
 801237c:	4659      	mov	r1, fp
 801237e:	461a      	mov	r2, r3
 8012380:	4628      	mov	r0, r5
 8012382:	f000 fc35 	bl	8012bf0 <__lshift>
 8012386:	4683      	mov	fp, r0
 8012388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801238a:	2b00      	cmp	r3, #0
 801238c:	dd05      	ble.n	801239a <_dtoa_r+0x842>
 801238e:	4621      	mov	r1, r4
 8012390:	461a      	mov	r2, r3
 8012392:	4628      	mov	r0, r5
 8012394:	f000 fc2c 	bl	8012bf0 <__lshift>
 8012398:	4604      	mov	r4, r0
 801239a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801239c:	2b00      	cmp	r3, #0
 801239e:	d070      	beq.n	8012482 <_dtoa_r+0x92a>
 80123a0:	4621      	mov	r1, r4
 80123a2:	4658      	mov	r0, fp
 80123a4:	f000 fc94 	bl	8012cd0 <__mcmp>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	da6a      	bge.n	8012482 <_dtoa_r+0x92a>
 80123ac:	2300      	movs	r3, #0
 80123ae:	4659      	mov	r1, fp
 80123b0:	220a      	movs	r2, #10
 80123b2:	4628      	mov	r0, r5
 80123b4:	f000 fa70 	bl	8012898 <__multadd>
 80123b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123ba:	4683      	mov	fp, r0
 80123bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	f000 8194 	beq.w	80126ee <_dtoa_r+0xb96>
 80123c6:	4631      	mov	r1, r6
 80123c8:	2300      	movs	r3, #0
 80123ca:	220a      	movs	r2, #10
 80123cc:	4628      	mov	r0, r5
 80123ce:	f000 fa63 	bl	8012898 <__multadd>
 80123d2:	f1b9 0f00 	cmp.w	r9, #0
 80123d6:	4606      	mov	r6, r0
 80123d8:	f300 8093 	bgt.w	8012502 <_dtoa_r+0x9aa>
 80123dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80123de:	2b02      	cmp	r3, #2
 80123e0:	dc57      	bgt.n	8012492 <_dtoa_r+0x93a>
 80123e2:	e08e      	b.n	8012502 <_dtoa_r+0x9aa>
 80123e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80123e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80123ea:	e757      	b.n	801229c <_dtoa_r+0x744>
 80123ec:	9b08      	ldr	r3, [sp, #32]
 80123ee:	1e5c      	subs	r4, r3, #1
 80123f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123f2:	42a3      	cmp	r3, r4
 80123f4:	bfb7      	itett	lt
 80123f6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80123f8:	1b1c      	subge	r4, r3, r4
 80123fa:	1ae2      	sublt	r2, r4, r3
 80123fc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80123fe:	bfbe      	ittt	lt
 8012400:	940a      	strlt	r4, [sp, #40]	; 0x28
 8012402:	189b      	addlt	r3, r3, r2
 8012404:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012406:	9b08      	ldr	r3, [sp, #32]
 8012408:	bfb8      	it	lt
 801240a:	2400      	movlt	r4, #0
 801240c:	2b00      	cmp	r3, #0
 801240e:	bfbb      	ittet	lt
 8012410:	9b06      	ldrlt	r3, [sp, #24]
 8012412:	9a08      	ldrlt	r2, [sp, #32]
 8012414:	9f06      	ldrge	r7, [sp, #24]
 8012416:	1a9f      	sublt	r7, r3, r2
 8012418:	bfac      	ite	ge
 801241a:	9b08      	ldrge	r3, [sp, #32]
 801241c:	2300      	movlt	r3, #0
 801241e:	e73f      	b.n	80122a0 <_dtoa_r+0x748>
 8012420:	3fe00000 	.word	0x3fe00000
 8012424:	40240000 	.word	0x40240000
 8012428:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801242a:	9f06      	ldr	r7, [sp, #24]
 801242c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801242e:	e742      	b.n	80122b6 <_dtoa_r+0x75e>
 8012430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012432:	e76b      	b.n	801230c <_dtoa_r+0x7b4>
 8012434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012436:	2b01      	cmp	r3, #1
 8012438:	dc19      	bgt.n	801246e <_dtoa_r+0x916>
 801243a:	9b04      	ldr	r3, [sp, #16]
 801243c:	b9bb      	cbnz	r3, 801246e <_dtoa_r+0x916>
 801243e:	9b05      	ldr	r3, [sp, #20]
 8012440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012444:	b99b      	cbnz	r3, 801246e <_dtoa_r+0x916>
 8012446:	9b05      	ldr	r3, [sp, #20]
 8012448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801244c:	0d1b      	lsrs	r3, r3, #20
 801244e:	051b      	lsls	r3, r3, #20
 8012450:	b183      	cbz	r3, 8012474 <_dtoa_r+0x91c>
 8012452:	f04f 0801 	mov.w	r8, #1
 8012456:	9b06      	ldr	r3, [sp, #24]
 8012458:	3301      	adds	r3, #1
 801245a:	9306      	str	r3, [sp, #24]
 801245c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801245e:	3301      	adds	r3, #1
 8012460:	9309      	str	r3, [sp, #36]	; 0x24
 8012462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012464:	2b00      	cmp	r3, #0
 8012466:	f47f af6a 	bne.w	801233e <_dtoa_r+0x7e6>
 801246a:	2001      	movs	r0, #1
 801246c:	e76f      	b.n	801234e <_dtoa_r+0x7f6>
 801246e:	f04f 0800 	mov.w	r8, #0
 8012472:	e7f6      	b.n	8012462 <_dtoa_r+0x90a>
 8012474:	4698      	mov	r8, r3
 8012476:	e7f4      	b.n	8012462 <_dtoa_r+0x90a>
 8012478:	f43f af7d 	beq.w	8012376 <_dtoa_r+0x81e>
 801247c:	4618      	mov	r0, r3
 801247e:	301c      	adds	r0, #28
 8012480:	e772      	b.n	8012368 <_dtoa_r+0x810>
 8012482:	9b08      	ldr	r3, [sp, #32]
 8012484:	2b00      	cmp	r3, #0
 8012486:	dc36      	bgt.n	80124f6 <_dtoa_r+0x99e>
 8012488:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801248a:	2b02      	cmp	r3, #2
 801248c:	dd33      	ble.n	80124f6 <_dtoa_r+0x99e>
 801248e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012492:	f1b9 0f00 	cmp.w	r9, #0
 8012496:	d10d      	bne.n	80124b4 <_dtoa_r+0x95c>
 8012498:	4621      	mov	r1, r4
 801249a:	464b      	mov	r3, r9
 801249c:	2205      	movs	r2, #5
 801249e:	4628      	mov	r0, r5
 80124a0:	f000 f9fa 	bl	8012898 <__multadd>
 80124a4:	4601      	mov	r1, r0
 80124a6:	4604      	mov	r4, r0
 80124a8:	4658      	mov	r0, fp
 80124aa:	f000 fc11 	bl	8012cd0 <__mcmp>
 80124ae:	2800      	cmp	r0, #0
 80124b0:	f73f adb8 	bgt.w	8012024 <_dtoa_r+0x4cc>
 80124b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80124b6:	9f03      	ldr	r7, [sp, #12]
 80124b8:	ea6f 0a03 	mvn.w	sl, r3
 80124bc:	f04f 0800 	mov.w	r8, #0
 80124c0:	4621      	mov	r1, r4
 80124c2:	4628      	mov	r0, r5
 80124c4:	f000 f9c6 	bl	8012854 <_Bfree>
 80124c8:	2e00      	cmp	r6, #0
 80124ca:	f43f aea7 	beq.w	801221c <_dtoa_r+0x6c4>
 80124ce:	f1b8 0f00 	cmp.w	r8, #0
 80124d2:	d005      	beq.n	80124e0 <_dtoa_r+0x988>
 80124d4:	45b0      	cmp	r8, r6
 80124d6:	d003      	beq.n	80124e0 <_dtoa_r+0x988>
 80124d8:	4641      	mov	r1, r8
 80124da:	4628      	mov	r0, r5
 80124dc:	f000 f9ba 	bl	8012854 <_Bfree>
 80124e0:	4631      	mov	r1, r6
 80124e2:	4628      	mov	r0, r5
 80124e4:	f000 f9b6 	bl	8012854 <_Bfree>
 80124e8:	e698      	b.n	801221c <_dtoa_r+0x6c4>
 80124ea:	2400      	movs	r4, #0
 80124ec:	4626      	mov	r6, r4
 80124ee:	e7e1      	b.n	80124b4 <_dtoa_r+0x95c>
 80124f0:	46c2      	mov	sl, r8
 80124f2:	4626      	mov	r6, r4
 80124f4:	e596      	b.n	8012024 <_dtoa_r+0x4cc>
 80124f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	f000 80fd 	beq.w	80126fc <_dtoa_r+0xba4>
 8012502:	2f00      	cmp	r7, #0
 8012504:	dd05      	ble.n	8012512 <_dtoa_r+0x9ba>
 8012506:	4631      	mov	r1, r6
 8012508:	463a      	mov	r2, r7
 801250a:	4628      	mov	r0, r5
 801250c:	f000 fb70 	bl	8012bf0 <__lshift>
 8012510:	4606      	mov	r6, r0
 8012512:	f1b8 0f00 	cmp.w	r8, #0
 8012516:	d05c      	beq.n	80125d2 <_dtoa_r+0xa7a>
 8012518:	4628      	mov	r0, r5
 801251a:	6871      	ldr	r1, [r6, #4]
 801251c:	f000 f95a 	bl	80127d4 <_Balloc>
 8012520:	4607      	mov	r7, r0
 8012522:	b928      	cbnz	r0, 8012530 <_dtoa_r+0x9d8>
 8012524:	4602      	mov	r2, r0
 8012526:	f240 21ea 	movw	r1, #746	; 0x2ea
 801252a:	4b7f      	ldr	r3, [pc, #508]	; (8012728 <_dtoa_r+0xbd0>)
 801252c:	f7ff bb28 	b.w	8011b80 <_dtoa_r+0x28>
 8012530:	6932      	ldr	r2, [r6, #16]
 8012532:	f106 010c 	add.w	r1, r6, #12
 8012536:	3202      	adds	r2, #2
 8012538:	0092      	lsls	r2, r2, #2
 801253a:	300c      	adds	r0, #12
 801253c:	f000 f930 	bl	80127a0 <memcpy>
 8012540:	2201      	movs	r2, #1
 8012542:	4639      	mov	r1, r7
 8012544:	4628      	mov	r0, r5
 8012546:	f000 fb53 	bl	8012bf0 <__lshift>
 801254a:	46b0      	mov	r8, r6
 801254c:	4606      	mov	r6, r0
 801254e:	9b03      	ldr	r3, [sp, #12]
 8012550:	3301      	adds	r3, #1
 8012552:	9308      	str	r3, [sp, #32]
 8012554:	9b03      	ldr	r3, [sp, #12]
 8012556:	444b      	add	r3, r9
 8012558:	930a      	str	r3, [sp, #40]	; 0x28
 801255a:	9b04      	ldr	r3, [sp, #16]
 801255c:	f003 0301 	and.w	r3, r3, #1
 8012560:	9309      	str	r3, [sp, #36]	; 0x24
 8012562:	9b08      	ldr	r3, [sp, #32]
 8012564:	4621      	mov	r1, r4
 8012566:	3b01      	subs	r3, #1
 8012568:	4658      	mov	r0, fp
 801256a:	9304      	str	r3, [sp, #16]
 801256c:	f7ff fa66 	bl	8011a3c <quorem>
 8012570:	4603      	mov	r3, r0
 8012572:	4641      	mov	r1, r8
 8012574:	3330      	adds	r3, #48	; 0x30
 8012576:	9006      	str	r0, [sp, #24]
 8012578:	4658      	mov	r0, fp
 801257a:	930b      	str	r3, [sp, #44]	; 0x2c
 801257c:	f000 fba8 	bl	8012cd0 <__mcmp>
 8012580:	4632      	mov	r2, r6
 8012582:	4681      	mov	r9, r0
 8012584:	4621      	mov	r1, r4
 8012586:	4628      	mov	r0, r5
 8012588:	f000 fbbe 	bl	8012d08 <__mdiff>
 801258c:	68c2      	ldr	r2, [r0, #12]
 801258e:	4607      	mov	r7, r0
 8012590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012592:	bb02      	cbnz	r2, 80125d6 <_dtoa_r+0xa7e>
 8012594:	4601      	mov	r1, r0
 8012596:	4658      	mov	r0, fp
 8012598:	f000 fb9a 	bl	8012cd0 <__mcmp>
 801259c:	4602      	mov	r2, r0
 801259e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125a0:	4639      	mov	r1, r7
 80125a2:	4628      	mov	r0, r5
 80125a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80125a8:	f000 f954 	bl	8012854 <_Bfree>
 80125ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80125ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125b0:	9f08      	ldr	r7, [sp, #32]
 80125b2:	ea43 0102 	orr.w	r1, r3, r2
 80125b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b8:	430b      	orrs	r3, r1
 80125ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125bc:	d10d      	bne.n	80125da <_dtoa_r+0xa82>
 80125be:	2b39      	cmp	r3, #57	; 0x39
 80125c0:	d029      	beq.n	8012616 <_dtoa_r+0xabe>
 80125c2:	f1b9 0f00 	cmp.w	r9, #0
 80125c6:	dd01      	ble.n	80125cc <_dtoa_r+0xa74>
 80125c8:	9b06      	ldr	r3, [sp, #24]
 80125ca:	3331      	adds	r3, #49	; 0x31
 80125cc:	9a04      	ldr	r2, [sp, #16]
 80125ce:	7013      	strb	r3, [r2, #0]
 80125d0:	e776      	b.n	80124c0 <_dtoa_r+0x968>
 80125d2:	4630      	mov	r0, r6
 80125d4:	e7b9      	b.n	801254a <_dtoa_r+0x9f2>
 80125d6:	2201      	movs	r2, #1
 80125d8:	e7e2      	b.n	80125a0 <_dtoa_r+0xa48>
 80125da:	f1b9 0f00 	cmp.w	r9, #0
 80125de:	db06      	blt.n	80125ee <_dtoa_r+0xa96>
 80125e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80125e2:	ea41 0909 	orr.w	r9, r1, r9
 80125e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125e8:	ea59 0101 	orrs.w	r1, r9, r1
 80125ec:	d120      	bne.n	8012630 <_dtoa_r+0xad8>
 80125ee:	2a00      	cmp	r2, #0
 80125f0:	ddec      	ble.n	80125cc <_dtoa_r+0xa74>
 80125f2:	4659      	mov	r1, fp
 80125f4:	2201      	movs	r2, #1
 80125f6:	4628      	mov	r0, r5
 80125f8:	9308      	str	r3, [sp, #32]
 80125fa:	f000 faf9 	bl	8012bf0 <__lshift>
 80125fe:	4621      	mov	r1, r4
 8012600:	4683      	mov	fp, r0
 8012602:	f000 fb65 	bl	8012cd0 <__mcmp>
 8012606:	2800      	cmp	r0, #0
 8012608:	9b08      	ldr	r3, [sp, #32]
 801260a:	dc02      	bgt.n	8012612 <_dtoa_r+0xaba>
 801260c:	d1de      	bne.n	80125cc <_dtoa_r+0xa74>
 801260e:	07da      	lsls	r2, r3, #31
 8012610:	d5dc      	bpl.n	80125cc <_dtoa_r+0xa74>
 8012612:	2b39      	cmp	r3, #57	; 0x39
 8012614:	d1d8      	bne.n	80125c8 <_dtoa_r+0xa70>
 8012616:	2339      	movs	r3, #57	; 0x39
 8012618:	9a04      	ldr	r2, [sp, #16]
 801261a:	7013      	strb	r3, [r2, #0]
 801261c:	463b      	mov	r3, r7
 801261e:	461f      	mov	r7, r3
 8012620:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8012624:	3b01      	subs	r3, #1
 8012626:	2a39      	cmp	r2, #57	; 0x39
 8012628:	d050      	beq.n	80126cc <_dtoa_r+0xb74>
 801262a:	3201      	adds	r2, #1
 801262c:	701a      	strb	r2, [r3, #0]
 801262e:	e747      	b.n	80124c0 <_dtoa_r+0x968>
 8012630:	2a00      	cmp	r2, #0
 8012632:	dd03      	ble.n	801263c <_dtoa_r+0xae4>
 8012634:	2b39      	cmp	r3, #57	; 0x39
 8012636:	d0ee      	beq.n	8012616 <_dtoa_r+0xabe>
 8012638:	3301      	adds	r3, #1
 801263a:	e7c7      	b.n	80125cc <_dtoa_r+0xa74>
 801263c:	9a08      	ldr	r2, [sp, #32]
 801263e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012640:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012644:	428a      	cmp	r2, r1
 8012646:	d02a      	beq.n	801269e <_dtoa_r+0xb46>
 8012648:	4659      	mov	r1, fp
 801264a:	2300      	movs	r3, #0
 801264c:	220a      	movs	r2, #10
 801264e:	4628      	mov	r0, r5
 8012650:	f000 f922 	bl	8012898 <__multadd>
 8012654:	45b0      	cmp	r8, r6
 8012656:	4683      	mov	fp, r0
 8012658:	f04f 0300 	mov.w	r3, #0
 801265c:	f04f 020a 	mov.w	r2, #10
 8012660:	4641      	mov	r1, r8
 8012662:	4628      	mov	r0, r5
 8012664:	d107      	bne.n	8012676 <_dtoa_r+0xb1e>
 8012666:	f000 f917 	bl	8012898 <__multadd>
 801266a:	4680      	mov	r8, r0
 801266c:	4606      	mov	r6, r0
 801266e:	9b08      	ldr	r3, [sp, #32]
 8012670:	3301      	adds	r3, #1
 8012672:	9308      	str	r3, [sp, #32]
 8012674:	e775      	b.n	8012562 <_dtoa_r+0xa0a>
 8012676:	f000 f90f 	bl	8012898 <__multadd>
 801267a:	4631      	mov	r1, r6
 801267c:	4680      	mov	r8, r0
 801267e:	2300      	movs	r3, #0
 8012680:	220a      	movs	r2, #10
 8012682:	4628      	mov	r0, r5
 8012684:	f000 f908 	bl	8012898 <__multadd>
 8012688:	4606      	mov	r6, r0
 801268a:	e7f0      	b.n	801266e <_dtoa_r+0xb16>
 801268c:	f1b9 0f00 	cmp.w	r9, #0
 8012690:	bfcc      	ite	gt
 8012692:	464f      	movgt	r7, r9
 8012694:	2701      	movle	r7, #1
 8012696:	f04f 0800 	mov.w	r8, #0
 801269a:	9a03      	ldr	r2, [sp, #12]
 801269c:	4417      	add	r7, r2
 801269e:	4659      	mov	r1, fp
 80126a0:	2201      	movs	r2, #1
 80126a2:	4628      	mov	r0, r5
 80126a4:	9308      	str	r3, [sp, #32]
 80126a6:	f000 faa3 	bl	8012bf0 <__lshift>
 80126aa:	4621      	mov	r1, r4
 80126ac:	4683      	mov	fp, r0
 80126ae:	f000 fb0f 	bl	8012cd0 <__mcmp>
 80126b2:	2800      	cmp	r0, #0
 80126b4:	dcb2      	bgt.n	801261c <_dtoa_r+0xac4>
 80126b6:	d102      	bne.n	80126be <_dtoa_r+0xb66>
 80126b8:	9b08      	ldr	r3, [sp, #32]
 80126ba:	07db      	lsls	r3, r3, #31
 80126bc:	d4ae      	bmi.n	801261c <_dtoa_r+0xac4>
 80126be:	463b      	mov	r3, r7
 80126c0:	461f      	mov	r7, r3
 80126c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126c6:	2a30      	cmp	r2, #48	; 0x30
 80126c8:	d0fa      	beq.n	80126c0 <_dtoa_r+0xb68>
 80126ca:	e6f9      	b.n	80124c0 <_dtoa_r+0x968>
 80126cc:	9a03      	ldr	r2, [sp, #12]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d1a5      	bne.n	801261e <_dtoa_r+0xac6>
 80126d2:	2331      	movs	r3, #49	; 0x31
 80126d4:	f10a 0a01 	add.w	sl, sl, #1
 80126d8:	e779      	b.n	80125ce <_dtoa_r+0xa76>
 80126da:	4b14      	ldr	r3, [pc, #80]	; (801272c <_dtoa_r+0xbd4>)
 80126dc:	f7ff baa8 	b.w	8011c30 <_dtoa_r+0xd8>
 80126e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f47f aa81 	bne.w	8011bea <_dtoa_r+0x92>
 80126e8:	4b11      	ldr	r3, [pc, #68]	; (8012730 <_dtoa_r+0xbd8>)
 80126ea:	f7ff baa1 	b.w	8011c30 <_dtoa_r+0xd8>
 80126ee:	f1b9 0f00 	cmp.w	r9, #0
 80126f2:	dc03      	bgt.n	80126fc <_dtoa_r+0xba4>
 80126f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80126f6:	2b02      	cmp	r3, #2
 80126f8:	f73f aecb 	bgt.w	8012492 <_dtoa_r+0x93a>
 80126fc:	9f03      	ldr	r7, [sp, #12]
 80126fe:	4621      	mov	r1, r4
 8012700:	4658      	mov	r0, fp
 8012702:	f7ff f99b 	bl	8011a3c <quorem>
 8012706:	9a03      	ldr	r2, [sp, #12]
 8012708:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801270c:	f807 3b01 	strb.w	r3, [r7], #1
 8012710:	1aba      	subs	r2, r7, r2
 8012712:	4591      	cmp	r9, r2
 8012714:	ddba      	ble.n	801268c <_dtoa_r+0xb34>
 8012716:	4659      	mov	r1, fp
 8012718:	2300      	movs	r3, #0
 801271a:	220a      	movs	r2, #10
 801271c:	4628      	mov	r0, r5
 801271e:	f000 f8bb 	bl	8012898 <__multadd>
 8012722:	4683      	mov	fp, r0
 8012724:	e7eb      	b.n	80126fe <_dtoa_r+0xba6>
 8012726:	bf00      	nop
 8012728:	08014c22 	.word	0x08014c22
 801272c:	08014ae8 	.word	0x08014ae8
 8012730:	08014bba 	.word	0x08014bba

08012734 <fiprintf>:
 8012734:	b40e      	push	{r1, r2, r3}
 8012736:	b503      	push	{r0, r1, lr}
 8012738:	4601      	mov	r1, r0
 801273a:	ab03      	add	r3, sp, #12
 801273c:	4805      	ldr	r0, [pc, #20]	; (8012754 <fiprintf+0x20>)
 801273e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012742:	6800      	ldr	r0, [r0, #0]
 8012744:	9301      	str	r3, [sp, #4]
 8012746:	f000 fd5f 	bl	8013208 <_vfiprintf_r>
 801274a:	b002      	add	sp, #8
 801274c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012750:	b003      	add	sp, #12
 8012752:	4770      	bx	lr
 8012754:	20000078 	.word	0x20000078

08012758 <_gettimeofday_r>:
 8012758:	b538      	push	{r3, r4, r5, lr}
 801275a:	2300      	movs	r3, #0
 801275c:	4d06      	ldr	r5, [pc, #24]	; (8012778 <_gettimeofday_r+0x20>)
 801275e:	4604      	mov	r4, r0
 8012760:	4608      	mov	r0, r1
 8012762:	4611      	mov	r1, r2
 8012764:	602b      	str	r3, [r5, #0]
 8012766:	f001 fac3 	bl	8013cf0 <_gettimeofday>
 801276a:	1c43      	adds	r3, r0, #1
 801276c:	d102      	bne.n	8012774 <_gettimeofday_r+0x1c>
 801276e:	682b      	ldr	r3, [r5, #0]
 8012770:	b103      	cbz	r3, 8012774 <_gettimeofday_r+0x1c>
 8012772:	6023      	str	r3, [r4, #0]
 8012774:	bd38      	pop	{r3, r4, r5, pc}
 8012776:	bf00      	nop
 8012778:	20006260 	.word	0x20006260

0801277c <_localeconv_r>:
 801277c:	4800      	ldr	r0, [pc, #0]	; (8012780 <_localeconv_r+0x4>)
 801277e:	4770      	bx	lr
 8012780:	200001cc 	.word	0x200001cc

08012784 <memchr>:
 8012784:	4603      	mov	r3, r0
 8012786:	b510      	push	{r4, lr}
 8012788:	b2c9      	uxtb	r1, r1
 801278a:	4402      	add	r2, r0
 801278c:	4293      	cmp	r3, r2
 801278e:	4618      	mov	r0, r3
 8012790:	d101      	bne.n	8012796 <memchr+0x12>
 8012792:	2000      	movs	r0, #0
 8012794:	e003      	b.n	801279e <memchr+0x1a>
 8012796:	7804      	ldrb	r4, [r0, #0]
 8012798:	3301      	adds	r3, #1
 801279a:	428c      	cmp	r4, r1
 801279c:	d1f6      	bne.n	801278c <memchr+0x8>
 801279e:	bd10      	pop	{r4, pc}

080127a0 <memcpy>:
 80127a0:	440a      	add	r2, r1
 80127a2:	4291      	cmp	r1, r2
 80127a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80127a8:	d100      	bne.n	80127ac <memcpy+0xc>
 80127aa:	4770      	bx	lr
 80127ac:	b510      	push	{r4, lr}
 80127ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127b2:	4291      	cmp	r1, r2
 80127b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127b8:	d1f9      	bne.n	80127ae <memcpy+0xe>
 80127ba:	bd10      	pop	{r4, pc}

080127bc <__malloc_lock>:
 80127bc:	4801      	ldr	r0, [pc, #4]	; (80127c4 <__malloc_lock+0x8>)
 80127be:	f001 b8e3 	b.w	8013988 <__retarget_lock_acquire_recursive>
 80127c2:	bf00      	nop
 80127c4:	20006264 	.word	0x20006264

080127c8 <__malloc_unlock>:
 80127c8:	4801      	ldr	r0, [pc, #4]	; (80127d0 <__malloc_unlock+0x8>)
 80127ca:	f001 b8de 	b.w	801398a <__retarget_lock_release_recursive>
 80127ce:	bf00      	nop
 80127d0:	20006264 	.word	0x20006264

080127d4 <_Balloc>:
 80127d4:	b570      	push	{r4, r5, r6, lr}
 80127d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80127d8:	4604      	mov	r4, r0
 80127da:	460d      	mov	r5, r1
 80127dc:	b976      	cbnz	r6, 80127fc <_Balloc+0x28>
 80127de:	2010      	movs	r0, #16
 80127e0:	f7fe fafc 	bl	8010ddc <malloc>
 80127e4:	4602      	mov	r2, r0
 80127e6:	6260      	str	r0, [r4, #36]	; 0x24
 80127e8:	b920      	cbnz	r0, 80127f4 <_Balloc+0x20>
 80127ea:	2166      	movs	r1, #102	; 0x66
 80127ec:	4b17      	ldr	r3, [pc, #92]	; (801284c <_Balloc+0x78>)
 80127ee:	4818      	ldr	r0, [pc, #96]	; (8012850 <_Balloc+0x7c>)
 80127f0:	f7ff f906 	bl	8011a00 <__assert_func>
 80127f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127f8:	6006      	str	r6, [r0, #0]
 80127fa:	60c6      	str	r6, [r0, #12]
 80127fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80127fe:	68f3      	ldr	r3, [r6, #12]
 8012800:	b183      	cbz	r3, 8012824 <_Balloc+0x50>
 8012802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012804:	68db      	ldr	r3, [r3, #12]
 8012806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801280a:	b9b8      	cbnz	r0, 801283c <_Balloc+0x68>
 801280c:	2101      	movs	r1, #1
 801280e:	fa01 f605 	lsl.w	r6, r1, r5
 8012812:	1d72      	adds	r2, r6, #5
 8012814:	4620      	mov	r0, r4
 8012816:	0092      	lsls	r2, r2, #2
 8012818:	f000 fb5e 	bl	8012ed8 <_calloc_r>
 801281c:	b160      	cbz	r0, 8012838 <_Balloc+0x64>
 801281e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012822:	e00e      	b.n	8012842 <_Balloc+0x6e>
 8012824:	2221      	movs	r2, #33	; 0x21
 8012826:	2104      	movs	r1, #4
 8012828:	4620      	mov	r0, r4
 801282a:	f000 fb55 	bl	8012ed8 <_calloc_r>
 801282e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012830:	60f0      	str	r0, [r6, #12]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d1e4      	bne.n	8012802 <_Balloc+0x2e>
 8012838:	2000      	movs	r0, #0
 801283a:	bd70      	pop	{r4, r5, r6, pc}
 801283c:	6802      	ldr	r2, [r0, #0]
 801283e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012842:	2300      	movs	r3, #0
 8012844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012848:	e7f7      	b.n	801283a <_Balloc+0x66>
 801284a:	bf00      	nop
 801284c:	08014b0c 	.word	0x08014b0c
 8012850:	08014c33 	.word	0x08014c33

08012854 <_Bfree>:
 8012854:	b570      	push	{r4, r5, r6, lr}
 8012856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012858:	4605      	mov	r5, r0
 801285a:	460c      	mov	r4, r1
 801285c:	b976      	cbnz	r6, 801287c <_Bfree+0x28>
 801285e:	2010      	movs	r0, #16
 8012860:	f7fe fabc 	bl	8010ddc <malloc>
 8012864:	4602      	mov	r2, r0
 8012866:	6268      	str	r0, [r5, #36]	; 0x24
 8012868:	b920      	cbnz	r0, 8012874 <_Bfree+0x20>
 801286a:	218a      	movs	r1, #138	; 0x8a
 801286c:	4b08      	ldr	r3, [pc, #32]	; (8012890 <_Bfree+0x3c>)
 801286e:	4809      	ldr	r0, [pc, #36]	; (8012894 <_Bfree+0x40>)
 8012870:	f7ff f8c6 	bl	8011a00 <__assert_func>
 8012874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012878:	6006      	str	r6, [r0, #0]
 801287a:	60c6      	str	r6, [r0, #12]
 801287c:	b13c      	cbz	r4, 801288e <_Bfree+0x3a>
 801287e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012880:	6862      	ldr	r2, [r4, #4]
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012888:	6021      	str	r1, [r4, #0]
 801288a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801288e:	bd70      	pop	{r4, r5, r6, pc}
 8012890:	08014b0c 	.word	0x08014b0c
 8012894:	08014c33 	.word	0x08014c33

08012898 <__multadd>:
 8012898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801289c:	4607      	mov	r7, r0
 801289e:	460c      	mov	r4, r1
 80128a0:	461e      	mov	r6, r3
 80128a2:	2000      	movs	r0, #0
 80128a4:	690d      	ldr	r5, [r1, #16]
 80128a6:	f101 0c14 	add.w	ip, r1, #20
 80128aa:	f8dc 3000 	ldr.w	r3, [ip]
 80128ae:	3001      	adds	r0, #1
 80128b0:	b299      	uxth	r1, r3
 80128b2:	fb02 6101 	mla	r1, r2, r1, r6
 80128b6:	0c1e      	lsrs	r6, r3, #16
 80128b8:	0c0b      	lsrs	r3, r1, #16
 80128ba:	fb02 3306 	mla	r3, r2, r6, r3
 80128be:	b289      	uxth	r1, r1
 80128c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80128c4:	4285      	cmp	r5, r0
 80128c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80128ca:	f84c 1b04 	str.w	r1, [ip], #4
 80128ce:	dcec      	bgt.n	80128aa <__multadd+0x12>
 80128d0:	b30e      	cbz	r6, 8012916 <__multadd+0x7e>
 80128d2:	68a3      	ldr	r3, [r4, #8]
 80128d4:	42ab      	cmp	r3, r5
 80128d6:	dc19      	bgt.n	801290c <__multadd+0x74>
 80128d8:	6861      	ldr	r1, [r4, #4]
 80128da:	4638      	mov	r0, r7
 80128dc:	3101      	adds	r1, #1
 80128de:	f7ff ff79 	bl	80127d4 <_Balloc>
 80128e2:	4680      	mov	r8, r0
 80128e4:	b928      	cbnz	r0, 80128f2 <__multadd+0x5a>
 80128e6:	4602      	mov	r2, r0
 80128e8:	21b5      	movs	r1, #181	; 0xb5
 80128ea:	4b0c      	ldr	r3, [pc, #48]	; (801291c <__multadd+0x84>)
 80128ec:	480c      	ldr	r0, [pc, #48]	; (8012920 <__multadd+0x88>)
 80128ee:	f7ff f887 	bl	8011a00 <__assert_func>
 80128f2:	6922      	ldr	r2, [r4, #16]
 80128f4:	f104 010c 	add.w	r1, r4, #12
 80128f8:	3202      	adds	r2, #2
 80128fa:	0092      	lsls	r2, r2, #2
 80128fc:	300c      	adds	r0, #12
 80128fe:	f7ff ff4f 	bl	80127a0 <memcpy>
 8012902:	4621      	mov	r1, r4
 8012904:	4638      	mov	r0, r7
 8012906:	f7ff ffa5 	bl	8012854 <_Bfree>
 801290a:	4644      	mov	r4, r8
 801290c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012910:	3501      	adds	r5, #1
 8012912:	615e      	str	r6, [r3, #20]
 8012914:	6125      	str	r5, [r4, #16]
 8012916:	4620      	mov	r0, r4
 8012918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801291c:	08014c22 	.word	0x08014c22
 8012920:	08014c33 	.word	0x08014c33

08012924 <__hi0bits>:
 8012924:	0c02      	lsrs	r2, r0, #16
 8012926:	0412      	lsls	r2, r2, #16
 8012928:	4603      	mov	r3, r0
 801292a:	b9ca      	cbnz	r2, 8012960 <__hi0bits+0x3c>
 801292c:	0403      	lsls	r3, r0, #16
 801292e:	2010      	movs	r0, #16
 8012930:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012934:	bf04      	itt	eq
 8012936:	021b      	lsleq	r3, r3, #8
 8012938:	3008      	addeq	r0, #8
 801293a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801293e:	bf04      	itt	eq
 8012940:	011b      	lsleq	r3, r3, #4
 8012942:	3004      	addeq	r0, #4
 8012944:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012948:	bf04      	itt	eq
 801294a:	009b      	lsleq	r3, r3, #2
 801294c:	3002      	addeq	r0, #2
 801294e:	2b00      	cmp	r3, #0
 8012950:	db05      	blt.n	801295e <__hi0bits+0x3a>
 8012952:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8012956:	f100 0001 	add.w	r0, r0, #1
 801295a:	bf08      	it	eq
 801295c:	2020      	moveq	r0, #32
 801295e:	4770      	bx	lr
 8012960:	2000      	movs	r0, #0
 8012962:	e7e5      	b.n	8012930 <__hi0bits+0xc>

08012964 <__lo0bits>:
 8012964:	6803      	ldr	r3, [r0, #0]
 8012966:	4602      	mov	r2, r0
 8012968:	f013 0007 	ands.w	r0, r3, #7
 801296c:	d00b      	beq.n	8012986 <__lo0bits+0x22>
 801296e:	07d9      	lsls	r1, r3, #31
 8012970:	d421      	bmi.n	80129b6 <__lo0bits+0x52>
 8012972:	0798      	lsls	r0, r3, #30
 8012974:	bf49      	itett	mi
 8012976:	085b      	lsrmi	r3, r3, #1
 8012978:	089b      	lsrpl	r3, r3, #2
 801297a:	2001      	movmi	r0, #1
 801297c:	6013      	strmi	r3, [r2, #0]
 801297e:	bf5c      	itt	pl
 8012980:	2002      	movpl	r0, #2
 8012982:	6013      	strpl	r3, [r2, #0]
 8012984:	4770      	bx	lr
 8012986:	b299      	uxth	r1, r3
 8012988:	b909      	cbnz	r1, 801298e <__lo0bits+0x2a>
 801298a:	2010      	movs	r0, #16
 801298c:	0c1b      	lsrs	r3, r3, #16
 801298e:	b2d9      	uxtb	r1, r3
 8012990:	b909      	cbnz	r1, 8012996 <__lo0bits+0x32>
 8012992:	3008      	adds	r0, #8
 8012994:	0a1b      	lsrs	r3, r3, #8
 8012996:	0719      	lsls	r1, r3, #28
 8012998:	bf04      	itt	eq
 801299a:	091b      	lsreq	r3, r3, #4
 801299c:	3004      	addeq	r0, #4
 801299e:	0799      	lsls	r1, r3, #30
 80129a0:	bf04      	itt	eq
 80129a2:	089b      	lsreq	r3, r3, #2
 80129a4:	3002      	addeq	r0, #2
 80129a6:	07d9      	lsls	r1, r3, #31
 80129a8:	d403      	bmi.n	80129b2 <__lo0bits+0x4e>
 80129aa:	085b      	lsrs	r3, r3, #1
 80129ac:	f100 0001 	add.w	r0, r0, #1
 80129b0:	d003      	beq.n	80129ba <__lo0bits+0x56>
 80129b2:	6013      	str	r3, [r2, #0]
 80129b4:	4770      	bx	lr
 80129b6:	2000      	movs	r0, #0
 80129b8:	4770      	bx	lr
 80129ba:	2020      	movs	r0, #32
 80129bc:	4770      	bx	lr
	...

080129c0 <__i2b>:
 80129c0:	b510      	push	{r4, lr}
 80129c2:	460c      	mov	r4, r1
 80129c4:	2101      	movs	r1, #1
 80129c6:	f7ff ff05 	bl	80127d4 <_Balloc>
 80129ca:	4602      	mov	r2, r0
 80129cc:	b928      	cbnz	r0, 80129da <__i2b+0x1a>
 80129ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80129d2:	4b04      	ldr	r3, [pc, #16]	; (80129e4 <__i2b+0x24>)
 80129d4:	4804      	ldr	r0, [pc, #16]	; (80129e8 <__i2b+0x28>)
 80129d6:	f7ff f813 	bl	8011a00 <__assert_func>
 80129da:	2301      	movs	r3, #1
 80129dc:	6144      	str	r4, [r0, #20]
 80129de:	6103      	str	r3, [r0, #16]
 80129e0:	bd10      	pop	{r4, pc}
 80129e2:	bf00      	nop
 80129e4:	08014c22 	.word	0x08014c22
 80129e8:	08014c33 	.word	0x08014c33

080129ec <__multiply>:
 80129ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f0:	4691      	mov	r9, r2
 80129f2:	690a      	ldr	r2, [r1, #16]
 80129f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129f8:	460c      	mov	r4, r1
 80129fa:	429a      	cmp	r2, r3
 80129fc:	bfbe      	ittt	lt
 80129fe:	460b      	movlt	r3, r1
 8012a00:	464c      	movlt	r4, r9
 8012a02:	4699      	movlt	r9, r3
 8012a04:	6927      	ldr	r7, [r4, #16]
 8012a06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012a0a:	68a3      	ldr	r3, [r4, #8]
 8012a0c:	6861      	ldr	r1, [r4, #4]
 8012a0e:	eb07 060a 	add.w	r6, r7, sl
 8012a12:	42b3      	cmp	r3, r6
 8012a14:	b085      	sub	sp, #20
 8012a16:	bfb8      	it	lt
 8012a18:	3101      	addlt	r1, #1
 8012a1a:	f7ff fedb 	bl	80127d4 <_Balloc>
 8012a1e:	b930      	cbnz	r0, 8012a2e <__multiply+0x42>
 8012a20:	4602      	mov	r2, r0
 8012a22:	f240 115d 	movw	r1, #349	; 0x15d
 8012a26:	4b43      	ldr	r3, [pc, #268]	; (8012b34 <__multiply+0x148>)
 8012a28:	4843      	ldr	r0, [pc, #268]	; (8012b38 <__multiply+0x14c>)
 8012a2a:	f7fe ffe9 	bl	8011a00 <__assert_func>
 8012a2e:	f100 0514 	add.w	r5, r0, #20
 8012a32:	462b      	mov	r3, r5
 8012a34:	2200      	movs	r2, #0
 8012a36:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a3a:	4543      	cmp	r3, r8
 8012a3c:	d321      	bcc.n	8012a82 <__multiply+0x96>
 8012a3e:	f104 0314 	add.w	r3, r4, #20
 8012a42:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012a46:	f109 0314 	add.w	r3, r9, #20
 8012a4a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012a4e:	9202      	str	r2, [sp, #8]
 8012a50:	1b3a      	subs	r2, r7, r4
 8012a52:	3a15      	subs	r2, #21
 8012a54:	f022 0203 	bic.w	r2, r2, #3
 8012a58:	3204      	adds	r2, #4
 8012a5a:	f104 0115 	add.w	r1, r4, #21
 8012a5e:	428f      	cmp	r7, r1
 8012a60:	bf38      	it	cc
 8012a62:	2204      	movcc	r2, #4
 8012a64:	9201      	str	r2, [sp, #4]
 8012a66:	9a02      	ldr	r2, [sp, #8]
 8012a68:	9303      	str	r3, [sp, #12]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d80c      	bhi.n	8012a88 <__multiply+0x9c>
 8012a6e:	2e00      	cmp	r6, #0
 8012a70:	dd03      	ble.n	8012a7a <__multiply+0x8e>
 8012a72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d059      	beq.n	8012b2e <__multiply+0x142>
 8012a7a:	6106      	str	r6, [r0, #16]
 8012a7c:	b005      	add	sp, #20
 8012a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a82:	f843 2b04 	str.w	r2, [r3], #4
 8012a86:	e7d8      	b.n	8012a3a <__multiply+0x4e>
 8012a88:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a8c:	f1ba 0f00 	cmp.w	sl, #0
 8012a90:	d023      	beq.n	8012ada <__multiply+0xee>
 8012a92:	46a9      	mov	r9, r5
 8012a94:	f04f 0c00 	mov.w	ip, #0
 8012a98:	f104 0e14 	add.w	lr, r4, #20
 8012a9c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012aa0:	f8d9 1000 	ldr.w	r1, [r9]
 8012aa4:	fa1f fb82 	uxth.w	fp, r2
 8012aa8:	b289      	uxth	r1, r1
 8012aaa:	fb0a 110b 	mla	r1, sl, fp, r1
 8012aae:	4461      	add	r1, ip
 8012ab0:	f8d9 c000 	ldr.w	ip, [r9]
 8012ab4:	0c12      	lsrs	r2, r2, #16
 8012ab6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8012aba:	fb0a c202 	mla	r2, sl, r2, ip
 8012abe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012ac2:	b289      	uxth	r1, r1
 8012ac4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012ac8:	4577      	cmp	r7, lr
 8012aca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012ace:	f849 1b04 	str.w	r1, [r9], #4
 8012ad2:	d8e3      	bhi.n	8012a9c <__multiply+0xb0>
 8012ad4:	9a01      	ldr	r2, [sp, #4]
 8012ad6:	f845 c002 	str.w	ip, [r5, r2]
 8012ada:	9a03      	ldr	r2, [sp, #12]
 8012adc:	3304      	adds	r3, #4
 8012ade:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012ae2:	f1b9 0f00 	cmp.w	r9, #0
 8012ae6:	d020      	beq.n	8012b2a <__multiply+0x13e>
 8012ae8:	46ae      	mov	lr, r5
 8012aea:	f04f 0a00 	mov.w	sl, #0
 8012aee:	6829      	ldr	r1, [r5, #0]
 8012af0:	f104 0c14 	add.w	ip, r4, #20
 8012af4:	f8bc b000 	ldrh.w	fp, [ip]
 8012af8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012afc:	b289      	uxth	r1, r1
 8012afe:	fb09 220b 	mla	r2, r9, fp, r2
 8012b02:	4492      	add	sl, r2
 8012b04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012b08:	f84e 1b04 	str.w	r1, [lr], #4
 8012b0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012b10:	f8be 1000 	ldrh.w	r1, [lr]
 8012b14:	0c12      	lsrs	r2, r2, #16
 8012b16:	fb09 1102 	mla	r1, r9, r2, r1
 8012b1a:	4567      	cmp	r7, ip
 8012b1c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012b20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012b24:	d8e6      	bhi.n	8012af4 <__multiply+0x108>
 8012b26:	9a01      	ldr	r2, [sp, #4]
 8012b28:	50a9      	str	r1, [r5, r2]
 8012b2a:	3504      	adds	r5, #4
 8012b2c:	e79b      	b.n	8012a66 <__multiply+0x7a>
 8012b2e:	3e01      	subs	r6, #1
 8012b30:	e79d      	b.n	8012a6e <__multiply+0x82>
 8012b32:	bf00      	nop
 8012b34:	08014c22 	.word	0x08014c22
 8012b38:	08014c33 	.word	0x08014c33

08012b3c <__pow5mult>:
 8012b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b40:	4615      	mov	r5, r2
 8012b42:	f012 0203 	ands.w	r2, r2, #3
 8012b46:	4606      	mov	r6, r0
 8012b48:	460f      	mov	r7, r1
 8012b4a:	d007      	beq.n	8012b5c <__pow5mult+0x20>
 8012b4c:	4c25      	ldr	r4, [pc, #148]	; (8012be4 <__pow5mult+0xa8>)
 8012b4e:	3a01      	subs	r2, #1
 8012b50:	2300      	movs	r3, #0
 8012b52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b56:	f7ff fe9f 	bl	8012898 <__multadd>
 8012b5a:	4607      	mov	r7, r0
 8012b5c:	10ad      	asrs	r5, r5, #2
 8012b5e:	d03d      	beq.n	8012bdc <__pow5mult+0xa0>
 8012b60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012b62:	b97c      	cbnz	r4, 8012b84 <__pow5mult+0x48>
 8012b64:	2010      	movs	r0, #16
 8012b66:	f7fe f939 	bl	8010ddc <malloc>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	6270      	str	r0, [r6, #36]	; 0x24
 8012b6e:	b928      	cbnz	r0, 8012b7c <__pow5mult+0x40>
 8012b70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012b74:	4b1c      	ldr	r3, [pc, #112]	; (8012be8 <__pow5mult+0xac>)
 8012b76:	481d      	ldr	r0, [pc, #116]	; (8012bec <__pow5mult+0xb0>)
 8012b78:	f7fe ff42 	bl	8011a00 <__assert_func>
 8012b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b80:	6004      	str	r4, [r0, #0]
 8012b82:	60c4      	str	r4, [r0, #12]
 8012b84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012b88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b8c:	b94c      	cbnz	r4, 8012ba2 <__pow5mult+0x66>
 8012b8e:	f240 2171 	movw	r1, #625	; 0x271
 8012b92:	4630      	mov	r0, r6
 8012b94:	f7ff ff14 	bl	80129c0 <__i2b>
 8012b98:	2300      	movs	r3, #0
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ba0:	6003      	str	r3, [r0, #0]
 8012ba2:	f04f 0900 	mov.w	r9, #0
 8012ba6:	07eb      	lsls	r3, r5, #31
 8012ba8:	d50a      	bpl.n	8012bc0 <__pow5mult+0x84>
 8012baa:	4639      	mov	r1, r7
 8012bac:	4622      	mov	r2, r4
 8012bae:	4630      	mov	r0, r6
 8012bb0:	f7ff ff1c 	bl	80129ec <__multiply>
 8012bb4:	4680      	mov	r8, r0
 8012bb6:	4639      	mov	r1, r7
 8012bb8:	4630      	mov	r0, r6
 8012bba:	f7ff fe4b 	bl	8012854 <_Bfree>
 8012bbe:	4647      	mov	r7, r8
 8012bc0:	106d      	asrs	r5, r5, #1
 8012bc2:	d00b      	beq.n	8012bdc <__pow5mult+0xa0>
 8012bc4:	6820      	ldr	r0, [r4, #0]
 8012bc6:	b938      	cbnz	r0, 8012bd8 <__pow5mult+0x9c>
 8012bc8:	4622      	mov	r2, r4
 8012bca:	4621      	mov	r1, r4
 8012bcc:	4630      	mov	r0, r6
 8012bce:	f7ff ff0d 	bl	80129ec <__multiply>
 8012bd2:	6020      	str	r0, [r4, #0]
 8012bd4:	f8c0 9000 	str.w	r9, [r0]
 8012bd8:	4604      	mov	r4, r0
 8012bda:	e7e4      	b.n	8012ba6 <__pow5mult+0x6a>
 8012bdc:	4638      	mov	r0, r7
 8012bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012be2:	bf00      	nop
 8012be4:	08014d80 	.word	0x08014d80
 8012be8:	08014b0c 	.word	0x08014b0c
 8012bec:	08014c33 	.word	0x08014c33

08012bf0 <__lshift>:
 8012bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bf4:	460c      	mov	r4, r1
 8012bf6:	4607      	mov	r7, r0
 8012bf8:	4691      	mov	r9, r2
 8012bfa:	6923      	ldr	r3, [r4, #16]
 8012bfc:	6849      	ldr	r1, [r1, #4]
 8012bfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c02:	68a3      	ldr	r3, [r4, #8]
 8012c04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c08:	f108 0601 	add.w	r6, r8, #1
 8012c0c:	42b3      	cmp	r3, r6
 8012c0e:	db0b      	blt.n	8012c28 <__lshift+0x38>
 8012c10:	4638      	mov	r0, r7
 8012c12:	f7ff fddf 	bl	80127d4 <_Balloc>
 8012c16:	4605      	mov	r5, r0
 8012c18:	b948      	cbnz	r0, 8012c2e <__lshift+0x3e>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012c20:	4b29      	ldr	r3, [pc, #164]	; (8012cc8 <__lshift+0xd8>)
 8012c22:	482a      	ldr	r0, [pc, #168]	; (8012ccc <__lshift+0xdc>)
 8012c24:	f7fe feec 	bl	8011a00 <__assert_func>
 8012c28:	3101      	adds	r1, #1
 8012c2a:	005b      	lsls	r3, r3, #1
 8012c2c:	e7ee      	b.n	8012c0c <__lshift+0x1c>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	f100 0114 	add.w	r1, r0, #20
 8012c34:	f100 0210 	add.w	r2, r0, #16
 8012c38:	4618      	mov	r0, r3
 8012c3a:	4553      	cmp	r3, sl
 8012c3c:	db37      	blt.n	8012cae <__lshift+0xbe>
 8012c3e:	6920      	ldr	r0, [r4, #16]
 8012c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c44:	f104 0314 	add.w	r3, r4, #20
 8012c48:	f019 091f 	ands.w	r9, r9, #31
 8012c4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012c54:	d02f      	beq.n	8012cb6 <__lshift+0xc6>
 8012c56:	468a      	mov	sl, r1
 8012c58:	f04f 0c00 	mov.w	ip, #0
 8012c5c:	f1c9 0e20 	rsb	lr, r9, #32
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	fa02 f209 	lsl.w	r2, r2, r9
 8012c66:	ea42 020c 	orr.w	r2, r2, ip
 8012c6a:	f84a 2b04 	str.w	r2, [sl], #4
 8012c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c72:	4298      	cmp	r0, r3
 8012c74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012c78:	d8f2      	bhi.n	8012c60 <__lshift+0x70>
 8012c7a:	1b03      	subs	r3, r0, r4
 8012c7c:	3b15      	subs	r3, #21
 8012c7e:	f023 0303 	bic.w	r3, r3, #3
 8012c82:	3304      	adds	r3, #4
 8012c84:	f104 0215 	add.w	r2, r4, #21
 8012c88:	4290      	cmp	r0, r2
 8012c8a:	bf38      	it	cc
 8012c8c:	2304      	movcc	r3, #4
 8012c8e:	f841 c003 	str.w	ip, [r1, r3]
 8012c92:	f1bc 0f00 	cmp.w	ip, #0
 8012c96:	d001      	beq.n	8012c9c <__lshift+0xac>
 8012c98:	f108 0602 	add.w	r6, r8, #2
 8012c9c:	3e01      	subs	r6, #1
 8012c9e:	4638      	mov	r0, r7
 8012ca0:	4621      	mov	r1, r4
 8012ca2:	612e      	str	r6, [r5, #16]
 8012ca4:	f7ff fdd6 	bl	8012854 <_Bfree>
 8012ca8:	4628      	mov	r0, r5
 8012caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cae:	f842 0f04 	str.w	r0, [r2, #4]!
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	e7c1      	b.n	8012c3a <__lshift+0x4a>
 8012cb6:	3904      	subs	r1, #4
 8012cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cbc:	4298      	cmp	r0, r3
 8012cbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8012cc2:	d8f9      	bhi.n	8012cb8 <__lshift+0xc8>
 8012cc4:	e7ea      	b.n	8012c9c <__lshift+0xac>
 8012cc6:	bf00      	nop
 8012cc8:	08014c22 	.word	0x08014c22
 8012ccc:	08014c33 	.word	0x08014c33

08012cd0 <__mcmp>:
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	690a      	ldr	r2, [r1, #16]
 8012cd4:	6900      	ldr	r0, [r0, #16]
 8012cd6:	b530      	push	{r4, r5, lr}
 8012cd8:	1a80      	subs	r0, r0, r2
 8012cda:	d10d      	bne.n	8012cf8 <__mcmp+0x28>
 8012cdc:	3314      	adds	r3, #20
 8012cde:	3114      	adds	r1, #20
 8012ce0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012ce4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012ce8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012cec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012cf0:	4295      	cmp	r5, r2
 8012cf2:	d002      	beq.n	8012cfa <__mcmp+0x2a>
 8012cf4:	d304      	bcc.n	8012d00 <__mcmp+0x30>
 8012cf6:	2001      	movs	r0, #1
 8012cf8:	bd30      	pop	{r4, r5, pc}
 8012cfa:	42a3      	cmp	r3, r4
 8012cfc:	d3f4      	bcc.n	8012ce8 <__mcmp+0x18>
 8012cfe:	e7fb      	b.n	8012cf8 <__mcmp+0x28>
 8012d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d04:	e7f8      	b.n	8012cf8 <__mcmp+0x28>
	...

08012d08 <__mdiff>:
 8012d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0c:	460d      	mov	r5, r1
 8012d0e:	4607      	mov	r7, r0
 8012d10:	4611      	mov	r1, r2
 8012d12:	4628      	mov	r0, r5
 8012d14:	4614      	mov	r4, r2
 8012d16:	f7ff ffdb 	bl	8012cd0 <__mcmp>
 8012d1a:	1e06      	subs	r6, r0, #0
 8012d1c:	d111      	bne.n	8012d42 <__mdiff+0x3a>
 8012d1e:	4631      	mov	r1, r6
 8012d20:	4638      	mov	r0, r7
 8012d22:	f7ff fd57 	bl	80127d4 <_Balloc>
 8012d26:	4602      	mov	r2, r0
 8012d28:	b928      	cbnz	r0, 8012d36 <__mdiff+0x2e>
 8012d2a:	f240 2132 	movw	r1, #562	; 0x232
 8012d2e:	4b3a      	ldr	r3, [pc, #232]	; (8012e18 <__mdiff+0x110>)
 8012d30:	483a      	ldr	r0, [pc, #232]	; (8012e1c <__mdiff+0x114>)
 8012d32:	f7fe fe65 	bl	8011a00 <__assert_func>
 8012d36:	2301      	movs	r3, #1
 8012d38:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012d3c:	4610      	mov	r0, r2
 8012d3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d42:	bfa4      	itt	ge
 8012d44:	4623      	movge	r3, r4
 8012d46:	462c      	movge	r4, r5
 8012d48:	4638      	mov	r0, r7
 8012d4a:	6861      	ldr	r1, [r4, #4]
 8012d4c:	bfa6      	itte	ge
 8012d4e:	461d      	movge	r5, r3
 8012d50:	2600      	movge	r6, #0
 8012d52:	2601      	movlt	r6, #1
 8012d54:	f7ff fd3e 	bl	80127d4 <_Balloc>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	b918      	cbnz	r0, 8012d64 <__mdiff+0x5c>
 8012d5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012d60:	4b2d      	ldr	r3, [pc, #180]	; (8012e18 <__mdiff+0x110>)
 8012d62:	e7e5      	b.n	8012d30 <__mdiff+0x28>
 8012d64:	f102 0814 	add.w	r8, r2, #20
 8012d68:	46c2      	mov	sl, r8
 8012d6a:	f04f 0c00 	mov.w	ip, #0
 8012d6e:	6927      	ldr	r7, [r4, #16]
 8012d70:	60c6      	str	r6, [r0, #12]
 8012d72:	692e      	ldr	r6, [r5, #16]
 8012d74:	f104 0014 	add.w	r0, r4, #20
 8012d78:	f105 0914 	add.w	r9, r5, #20
 8012d7c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8012d80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012d84:	3410      	adds	r4, #16
 8012d86:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8012d8a:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d8e:	fa1f f18b 	uxth.w	r1, fp
 8012d92:	448c      	add	ip, r1
 8012d94:	b299      	uxth	r1, r3
 8012d96:	0c1b      	lsrs	r3, r3, #16
 8012d98:	ebac 0101 	sub.w	r1, ip, r1
 8012d9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012da0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012da4:	b289      	uxth	r1, r1
 8012da6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8012daa:	454e      	cmp	r6, r9
 8012dac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012db0:	f84a 3b04 	str.w	r3, [sl], #4
 8012db4:	d8e7      	bhi.n	8012d86 <__mdiff+0x7e>
 8012db6:	1b73      	subs	r3, r6, r5
 8012db8:	3b15      	subs	r3, #21
 8012dba:	f023 0303 	bic.w	r3, r3, #3
 8012dbe:	3515      	adds	r5, #21
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	42ae      	cmp	r6, r5
 8012dc4:	bf38      	it	cc
 8012dc6:	2304      	movcc	r3, #4
 8012dc8:	4418      	add	r0, r3
 8012dca:	4443      	add	r3, r8
 8012dcc:	461e      	mov	r6, r3
 8012dce:	4605      	mov	r5, r0
 8012dd0:	4575      	cmp	r5, lr
 8012dd2:	d30e      	bcc.n	8012df2 <__mdiff+0xea>
 8012dd4:	f10e 0103 	add.w	r1, lr, #3
 8012dd8:	1a09      	subs	r1, r1, r0
 8012dda:	f021 0103 	bic.w	r1, r1, #3
 8012dde:	3803      	subs	r0, #3
 8012de0:	4586      	cmp	lr, r0
 8012de2:	bf38      	it	cc
 8012de4:	2100      	movcc	r1, #0
 8012de6:	4419      	add	r1, r3
 8012de8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012dec:	b18b      	cbz	r3, 8012e12 <__mdiff+0x10a>
 8012dee:	6117      	str	r7, [r2, #16]
 8012df0:	e7a4      	b.n	8012d3c <__mdiff+0x34>
 8012df2:	f855 8b04 	ldr.w	r8, [r5], #4
 8012df6:	fa1f f188 	uxth.w	r1, r8
 8012dfa:	4461      	add	r1, ip
 8012dfc:	140c      	asrs	r4, r1, #16
 8012dfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012e02:	b289      	uxth	r1, r1
 8012e04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012e08:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8012e0c:	f846 1b04 	str.w	r1, [r6], #4
 8012e10:	e7de      	b.n	8012dd0 <__mdiff+0xc8>
 8012e12:	3f01      	subs	r7, #1
 8012e14:	e7e8      	b.n	8012de8 <__mdiff+0xe0>
 8012e16:	bf00      	nop
 8012e18:	08014c22 	.word	0x08014c22
 8012e1c:	08014c33 	.word	0x08014c33

08012e20 <__d2b>:
 8012e20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012e24:	2101      	movs	r1, #1
 8012e26:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8012e2a:	4690      	mov	r8, r2
 8012e2c:	461d      	mov	r5, r3
 8012e2e:	f7ff fcd1 	bl	80127d4 <_Balloc>
 8012e32:	4604      	mov	r4, r0
 8012e34:	b930      	cbnz	r0, 8012e44 <__d2b+0x24>
 8012e36:	4602      	mov	r2, r0
 8012e38:	f240 310a 	movw	r1, #778	; 0x30a
 8012e3c:	4b24      	ldr	r3, [pc, #144]	; (8012ed0 <__d2b+0xb0>)
 8012e3e:	4825      	ldr	r0, [pc, #148]	; (8012ed4 <__d2b+0xb4>)
 8012e40:	f7fe fdde 	bl	8011a00 <__assert_func>
 8012e44:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8012e48:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8012e4c:	bb2d      	cbnz	r5, 8012e9a <__d2b+0x7a>
 8012e4e:	9301      	str	r3, [sp, #4]
 8012e50:	f1b8 0300 	subs.w	r3, r8, #0
 8012e54:	d026      	beq.n	8012ea4 <__d2b+0x84>
 8012e56:	4668      	mov	r0, sp
 8012e58:	9300      	str	r3, [sp, #0]
 8012e5a:	f7ff fd83 	bl	8012964 <__lo0bits>
 8012e5e:	9900      	ldr	r1, [sp, #0]
 8012e60:	b1f0      	cbz	r0, 8012ea0 <__d2b+0x80>
 8012e62:	9a01      	ldr	r2, [sp, #4]
 8012e64:	f1c0 0320 	rsb	r3, r0, #32
 8012e68:	fa02 f303 	lsl.w	r3, r2, r3
 8012e6c:	430b      	orrs	r3, r1
 8012e6e:	40c2      	lsrs	r2, r0
 8012e70:	6163      	str	r3, [r4, #20]
 8012e72:	9201      	str	r2, [sp, #4]
 8012e74:	9b01      	ldr	r3, [sp, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	bf14      	ite	ne
 8012e7a:	2102      	movne	r1, #2
 8012e7c:	2101      	moveq	r1, #1
 8012e7e:	61a3      	str	r3, [r4, #24]
 8012e80:	6121      	str	r1, [r4, #16]
 8012e82:	b1c5      	cbz	r5, 8012eb6 <__d2b+0x96>
 8012e84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012e88:	4405      	add	r5, r0
 8012e8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012e8e:	603d      	str	r5, [r7, #0]
 8012e90:	6030      	str	r0, [r6, #0]
 8012e92:	4620      	mov	r0, r4
 8012e94:	b002      	add	sp, #8
 8012e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012e9e:	e7d6      	b.n	8012e4e <__d2b+0x2e>
 8012ea0:	6161      	str	r1, [r4, #20]
 8012ea2:	e7e7      	b.n	8012e74 <__d2b+0x54>
 8012ea4:	a801      	add	r0, sp, #4
 8012ea6:	f7ff fd5d 	bl	8012964 <__lo0bits>
 8012eaa:	2101      	movs	r1, #1
 8012eac:	9b01      	ldr	r3, [sp, #4]
 8012eae:	6121      	str	r1, [r4, #16]
 8012eb0:	6163      	str	r3, [r4, #20]
 8012eb2:	3020      	adds	r0, #32
 8012eb4:	e7e5      	b.n	8012e82 <__d2b+0x62>
 8012eb6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8012eba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012ebe:	6038      	str	r0, [r7, #0]
 8012ec0:	6918      	ldr	r0, [r3, #16]
 8012ec2:	f7ff fd2f 	bl	8012924 <__hi0bits>
 8012ec6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8012eca:	6031      	str	r1, [r6, #0]
 8012ecc:	e7e1      	b.n	8012e92 <__d2b+0x72>
 8012ece:	bf00      	nop
 8012ed0:	08014c22 	.word	0x08014c22
 8012ed4:	08014c33 	.word	0x08014c33

08012ed8 <_calloc_r>:
 8012ed8:	b570      	push	{r4, r5, r6, lr}
 8012eda:	fba1 5402 	umull	r5, r4, r1, r2
 8012ede:	b934      	cbnz	r4, 8012eee <_calloc_r+0x16>
 8012ee0:	4629      	mov	r1, r5
 8012ee2:	f7fd fffb 	bl	8010edc <_malloc_r>
 8012ee6:	4606      	mov	r6, r0
 8012ee8:	b928      	cbnz	r0, 8012ef6 <_calloc_r+0x1e>
 8012eea:	4630      	mov	r0, r6
 8012eec:	bd70      	pop	{r4, r5, r6, pc}
 8012eee:	220c      	movs	r2, #12
 8012ef0:	2600      	movs	r6, #0
 8012ef2:	6002      	str	r2, [r0, #0]
 8012ef4:	e7f9      	b.n	8012eea <_calloc_r+0x12>
 8012ef6:	462a      	mov	r2, r5
 8012ef8:	4621      	mov	r1, r4
 8012efa:	f7fd ff7f 	bl	8010dfc <memset>
 8012efe:	e7f4      	b.n	8012eea <_calloc_r+0x12>

08012f00 <__ssputs_r>:
 8012f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f04:	688e      	ldr	r6, [r1, #8]
 8012f06:	4682      	mov	sl, r0
 8012f08:	429e      	cmp	r6, r3
 8012f0a:	460c      	mov	r4, r1
 8012f0c:	4690      	mov	r8, r2
 8012f0e:	461f      	mov	r7, r3
 8012f10:	d838      	bhi.n	8012f84 <__ssputs_r+0x84>
 8012f12:	898a      	ldrh	r2, [r1, #12]
 8012f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012f18:	d032      	beq.n	8012f80 <__ssputs_r+0x80>
 8012f1a:	6825      	ldr	r5, [r4, #0]
 8012f1c:	6909      	ldr	r1, [r1, #16]
 8012f1e:	3301      	adds	r3, #1
 8012f20:	eba5 0901 	sub.w	r9, r5, r1
 8012f24:	6965      	ldr	r5, [r4, #20]
 8012f26:	444b      	add	r3, r9
 8012f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f30:	106d      	asrs	r5, r5, #1
 8012f32:	429d      	cmp	r5, r3
 8012f34:	bf38      	it	cc
 8012f36:	461d      	movcc	r5, r3
 8012f38:	0553      	lsls	r3, r2, #21
 8012f3a:	d531      	bpl.n	8012fa0 <__ssputs_r+0xa0>
 8012f3c:	4629      	mov	r1, r5
 8012f3e:	f7fd ffcd 	bl	8010edc <_malloc_r>
 8012f42:	4606      	mov	r6, r0
 8012f44:	b950      	cbnz	r0, 8012f5c <__ssputs_r+0x5c>
 8012f46:	230c      	movs	r3, #12
 8012f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f4c:	f8ca 3000 	str.w	r3, [sl]
 8012f50:	89a3      	ldrh	r3, [r4, #12]
 8012f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f56:	81a3      	strh	r3, [r4, #12]
 8012f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f5c:	464a      	mov	r2, r9
 8012f5e:	6921      	ldr	r1, [r4, #16]
 8012f60:	f7ff fc1e 	bl	80127a0 <memcpy>
 8012f64:	89a3      	ldrh	r3, [r4, #12]
 8012f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f6e:	81a3      	strh	r3, [r4, #12]
 8012f70:	6126      	str	r6, [r4, #16]
 8012f72:	444e      	add	r6, r9
 8012f74:	6026      	str	r6, [r4, #0]
 8012f76:	463e      	mov	r6, r7
 8012f78:	6165      	str	r5, [r4, #20]
 8012f7a:	eba5 0509 	sub.w	r5, r5, r9
 8012f7e:	60a5      	str	r5, [r4, #8]
 8012f80:	42be      	cmp	r6, r7
 8012f82:	d900      	bls.n	8012f86 <__ssputs_r+0x86>
 8012f84:	463e      	mov	r6, r7
 8012f86:	4632      	mov	r2, r6
 8012f88:	4641      	mov	r1, r8
 8012f8a:	6820      	ldr	r0, [r4, #0]
 8012f8c:	f000 fd76 	bl	8013a7c <memmove>
 8012f90:	68a3      	ldr	r3, [r4, #8]
 8012f92:	2000      	movs	r0, #0
 8012f94:	1b9b      	subs	r3, r3, r6
 8012f96:	60a3      	str	r3, [r4, #8]
 8012f98:	6823      	ldr	r3, [r4, #0]
 8012f9a:	4433      	add	r3, r6
 8012f9c:	6023      	str	r3, [r4, #0]
 8012f9e:	e7db      	b.n	8012f58 <__ssputs_r+0x58>
 8012fa0:	462a      	mov	r2, r5
 8012fa2:	f000 fd85 	bl	8013ab0 <_realloc_r>
 8012fa6:	4606      	mov	r6, r0
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	d1e1      	bne.n	8012f70 <__ssputs_r+0x70>
 8012fac:	4650      	mov	r0, sl
 8012fae:	6921      	ldr	r1, [r4, #16]
 8012fb0:	f7fd ff2c 	bl	8010e0c <_free_r>
 8012fb4:	e7c7      	b.n	8012f46 <__ssputs_r+0x46>
	...

08012fb8 <_svfiprintf_r>:
 8012fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fbc:	4698      	mov	r8, r3
 8012fbe:	898b      	ldrh	r3, [r1, #12]
 8012fc0:	4607      	mov	r7, r0
 8012fc2:	061b      	lsls	r3, r3, #24
 8012fc4:	460d      	mov	r5, r1
 8012fc6:	4614      	mov	r4, r2
 8012fc8:	b09d      	sub	sp, #116	; 0x74
 8012fca:	d50e      	bpl.n	8012fea <_svfiprintf_r+0x32>
 8012fcc:	690b      	ldr	r3, [r1, #16]
 8012fce:	b963      	cbnz	r3, 8012fea <_svfiprintf_r+0x32>
 8012fd0:	2140      	movs	r1, #64	; 0x40
 8012fd2:	f7fd ff83 	bl	8010edc <_malloc_r>
 8012fd6:	6028      	str	r0, [r5, #0]
 8012fd8:	6128      	str	r0, [r5, #16]
 8012fda:	b920      	cbnz	r0, 8012fe6 <_svfiprintf_r+0x2e>
 8012fdc:	230c      	movs	r3, #12
 8012fde:	603b      	str	r3, [r7, #0]
 8012fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fe4:	e0d1      	b.n	801318a <_svfiprintf_r+0x1d2>
 8012fe6:	2340      	movs	r3, #64	; 0x40
 8012fe8:	616b      	str	r3, [r5, #20]
 8012fea:	2300      	movs	r3, #0
 8012fec:	9309      	str	r3, [sp, #36]	; 0x24
 8012fee:	2320      	movs	r3, #32
 8012ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ff4:	2330      	movs	r3, #48	; 0x30
 8012ff6:	f04f 0901 	mov.w	r9, #1
 8012ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ffe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80131a4 <_svfiprintf_r+0x1ec>
 8013002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013006:	4623      	mov	r3, r4
 8013008:	469a      	mov	sl, r3
 801300a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801300e:	b10a      	cbz	r2, 8013014 <_svfiprintf_r+0x5c>
 8013010:	2a25      	cmp	r2, #37	; 0x25
 8013012:	d1f9      	bne.n	8013008 <_svfiprintf_r+0x50>
 8013014:	ebba 0b04 	subs.w	fp, sl, r4
 8013018:	d00b      	beq.n	8013032 <_svfiprintf_r+0x7a>
 801301a:	465b      	mov	r3, fp
 801301c:	4622      	mov	r2, r4
 801301e:	4629      	mov	r1, r5
 8013020:	4638      	mov	r0, r7
 8013022:	f7ff ff6d 	bl	8012f00 <__ssputs_r>
 8013026:	3001      	adds	r0, #1
 8013028:	f000 80aa 	beq.w	8013180 <_svfiprintf_r+0x1c8>
 801302c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801302e:	445a      	add	r2, fp
 8013030:	9209      	str	r2, [sp, #36]	; 0x24
 8013032:	f89a 3000 	ldrb.w	r3, [sl]
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 80a2 	beq.w	8013180 <_svfiprintf_r+0x1c8>
 801303c:	2300      	movs	r3, #0
 801303e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013046:	f10a 0a01 	add.w	sl, sl, #1
 801304a:	9304      	str	r3, [sp, #16]
 801304c:	9307      	str	r3, [sp, #28]
 801304e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013052:	931a      	str	r3, [sp, #104]	; 0x68
 8013054:	4654      	mov	r4, sl
 8013056:	2205      	movs	r2, #5
 8013058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801305c:	4851      	ldr	r0, [pc, #324]	; (80131a4 <_svfiprintf_r+0x1ec>)
 801305e:	f7ff fb91 	bl	8012784 <memchr>
 8013062:	9a04      	ldr	r2, [sp, #16]
 8013064:	b9d8      	cbnz	r0, 801309e <_svfiprintf_r+0xe6>
 8013066:	06d0      	lsls	r0, r2, #27
 8013068:	bf44      	itt	mi
 801306a:	2320      	movmi	r3, #32
 801306c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013070:	0711      	lsls	r1, r2, #28
 8013072:	bf44      	itt	mi
 8013074:	232b      	movmi	r3, #43	; 0x2b
 8013076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801307a:	f89a 3000 	ldrb.w	r3, [sl]
 801307e:	2b2a      	cmp	r3, #42	; 0x2a
 8013080:	d015      	beq.n	80130ae <_svfiprintf_r+0xf6>
 8013082:	4654      	mov	r4, sl
 8013084:	2000      	movs	r0, #0
 8013086:	f04f 0c0a 	mov.w	ip, #10
 801308a:	9a07      	ldr	r2, [sp, #28]
 801308c:	4621      	mov	r1, r4
 801308e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013092:	3b30      	subs	r3, #48	; 0x30
 8013094:	2b09      	cmp	r3, #9
 8013096:	d94e      	bls.n	8013136 <_svfiprintf_r+0x17e>
 8013098:	b1b0      	cbz	r0, 80130c8 <_svfiprintf_r+0x110>
 801309a:	9207      	str	r2, [sp, #28]
 801309c:	e014      	b.n	80130c8 <_svfiprintf_r+0x110>
 801309e:	eba0 0308 	sub.w	r3, r0, r8
 80130a2:	fa09 f303 	lsl.w	r3, r9, r3
 80130a6:	4313      	orrs	r3, r2
 80130a8:	46a2      	mov	sl, r4
 80130aa:	9304      	str	r3, [sp, #16]
 80130ac:	e7d2      	b.n	8013054 <_svfiprintf_r+0x9c>
 80130ae:	9b03      	ldr	r3, [sp, #12]
 80130b0:	1d19      	adds	r1, r3, #4
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	9103      	str	r1, [sp, #12]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	bfbb      	ittet	lt
 80130ba:	425b      	neglt	r3, r3
 80130bc:	f042 0202 	orrlt.w	r2, r2, #2
 80130c0:	9307      	strge	r3, [sp, #28]
 80130c2:	9307      	strlt	r3, [sp, #28]
 80130c4:	bfb8      	it	lt
 80130c6:	9204      	strlt	r2, [sp, #16]
 80130c8:	7823      	ldrb	r3, [r4, #0]
 80130ca:	2b2e      	cmp	r3, #46	; 0x2e
 80130cc:	d10c      	bne.n	80130e8 <_svfiprintf_r+0x130>
 80130ce:	7863      	ldrb	r3, [r4, #1]
 80130d0:	2b2a      	cmp	r3, #42	; 0x2a
 80130d2:	d135      	bne.n	8013140 <_svfiprintf_r+0x188>
 80130d4:	9b03      	ldr	r3, [sp, #12]
 80130d6:	3402      	adds	r4, #2
 80130d8:	1d1a      	adds	r2, r3, #4
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	9203      	str	r2, [sp, #12]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	bfb8      	it	lt
 80130e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80130e6:	9305      	str	r3, [sp, #20]
 80130e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80131a8 <_svfiprintf_r+0x1f0>
 80130ec:	2203      	movs	r2, #3
 80130ee:	4650      	mov	r0, sl
 80130f0:	7821      	ldrb	r1, [r4, #0]
 80130f2:	f7ff fb47 	bl	8012784 <memchr>
 80130f6:	b140      	cbz	r0, 801310a <_svfiprintf_r+0x152>
 80130f8:	2340      	movs	r3, #64	; 0x40
 80130fa:	eba0 000a 	sub.w	r0, r0, sl
 80130fe:	fa03 f000 	lsl.w	r0, r3, r0
 8013102:	9b04      	ldr	r3, [sp, #16]
 8013104:	3401      	adds	r4, #1
 8013106:	4303      	orrs	r3, r0
 8013108:	9304      	str	r3, [sp, #16]
 801310a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801310e:	2206      	movs	r2, #6
 8013110:	4826      	ldr	r0, [pc, #152]	; (80131ac <_svfiprintf_r+0x1f4>)
 8013112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013116:	f7ff fb35 	bl	8012784 <memchr>
 801311a:	2800      	cmp	r0, #0
 801311c:	d038      	beq.n	8013190 <_svfiprintf_r+0x1d8>
 801311e:	4b24      	ldr	r3, [pc, #144]	; (80131b0 <_svfiprintf_r+0x1f8>)
 8013120:	bb1b      	cbnz	r3, 801316a <_svfiprintf_r+0x1b2>
 8013122:	9b03      	ldr	r3, [sp, #12]
 8013124:	3307      	adds	r3, #7
 8013126:	f023 0307 	bic.w	r3, r3, #7
 801312a:	3308      	adds	r3, #8
 801312c:	9303      	str	r3, [sp, #12]
 801312e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013130:	4433      	add	r3, r6
 8013132:	9309      	str	r3, [sp, #36]	; 0x24
 8013134:	e767      	b.n	8013006 <_svfiprintf_r+0x4e>
 8013136:	460c      	mov	r4, r1
 8013138:	2001      	movs	r0, #1
 801313a:	fb0c 3202 	mla	r2, ip, r2, r3
 801313e:	e7a5      	b.n	801308c <_svfiprintf_r+0xd4>
 8013140:	2300      	movs	r3, #0
 8013142:	f04f 0c0a 	mov.w	ip, #10
 8013146:	4619      	mov	r1, r3
 8013148:	3401      	adds	r4, #1
 801314a:	9305      	str	r3, [sp, #20]
 801314c:	4620      	mov	r0, r4
 801314e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013152:	3a30      	subs	r2, #48	; 0x30
 8013154:	2a09      	cmp	r2, #9
 8013156:	d903      	bls.n	8013160 <_svfiprintf_r+0x1a8>
 8013158:	2b00      	cmp	r3, #0
 801315a:	d0c5      	beq.n	80130e8 <_svfiprintf_r+0x130>
 801315c:	9105      	str	r1, [sp, #20]
 801315e:	e7c3      	b.n	80130e8 <_svfiprintf_r+0x130>
 8013160:	4604      	mov	r4, r0
 8013162:	2301      	movs	r3, #1
 8013164:	fb0c 2101 	mla	r1, ip, r1, r2
 8013168:	e7f0      	b.n	801314c <_svfiprintf_r+0x194>
 801316a:	ab03      	add	r3, sp, #12
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	462a      	mov	r2, r5
 8013170:	4638      	mov	r0, r7
 8013172:	4b10      	ldr	r3, [pc, #64]	; (80131b4 <_svfiprintf_r+0x1fc>)
 8013174:	a904      	add	r1, sp, #16
 8013176:	f7fd ffc3 	bl	8011100 <_printf_float>
 801317a:	1c42      	adds	r2, r0, #1
 801317c:	4606      	mov	r6, r0
 801317e:	d1d6      	bne.n	801312e <_svfiprintf_r+0x176>
 8013180:	89ab      	ldrh	r3, [r5, #12]
 8013182:	065b      	lsls	r3, r3, #25
 8013184:	f53f af2c 	bmi.w	8012fe0 <_svfiprintf_r+0x28>
 8013188:	9809      	ldr	r0, [sp, #36]	; 0x24
 801318a:	b01d      	add	sp, #116	; 0x74
 801318c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013190:	ab03      	add	r3, sp, #12
 8013192:	9300      	str	r3, [sp, #0]
 8013194:	462a      	mov	r2, r5
 8013196:	4638      	mov	r0, r7
 8013198:	4b06      	ldr	r3, [pc, #24]	; (80131b4 <_svfiprintf_r+0x1fc>)
 801319a:	a904      	add	r1, sp, #16
 801319c:	f7fe fa4c 	bl	8011638 <_printf_i>
 80131a0:	e7eb      	b.n	801317a <_svfiprintf_r+0x1c2>
 80131a2:	bf00      	nop
 80131a4:	08014d8c 	.word	0x08014d8c
 80131a8:	08014d92 	.word	0x08014d92
 80131ac:	08014d96 	.word	0x08014d96
 80131b0:	08011101 	.word	0x08011101
 80131b4:	08012f01 	.word	0x08012f01

080131b8 <__sfputc_r>:
 80131b8:	6893      	ldr	r3, [r2, #8]
 80131ba:	b410      	push	{r4}
 80131bc:	3b01      	subs	r3, #1
 80131be:	2b00      	cmp	r3, #0
 80131c0:	6093      	str	r3, [r2, #8]
 80131c2:	da07      	bge.n	80131d4 <__sfputc_r+0x1c>
 80131c4:	6994      	ldr	r4, [r2, #24]
 80131c6:	42a3      	cmp	r3, r4
 80131c8:	db01      	blt.n	80131ce <__sfputc_r+0x16>
 80131ca:	290a      	cmp	r1, #10
 80131cc:	d102      	bne.n	80131d4 <__sfputc_r+0x1c>
 80131ce:	bc10      	pop	{r4}
 80131d0:	f000 b95e 	b.w	8013490 <__swbuf_r>
 80131d4:	6813      	ldr	r3, [r2, #0]
 80131d6:	1c58      	adds	r0, r3, #1
 80131d8:	6010      	str	r0, [r2, #0]
 80131da:	7019      	strb	r1, [r3, #0]
 80131dc:	4608      	mov	r0, r1
 80131de:	bc10      	pop	{r4}
 80131e0:	4770      	bx	lr

080131e2 <__sfputs_r>:
 80131e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131e4:	4606      	mov	r6, r0
 80131e6:	460f      	mov	r7, r1
 80131e8:	4614      	mov	r4, r2
 80131ea:	18d5      	adds	r5, r2, r3
 80131ec:	42ac      	cmp	r4, r5
 80131ee:	d101      	bne.n	80131f4 <__sfputs_r+0x12>
 80131f0:	2000      	movs	r0, #0
 80131f2:	e007      	b.n	8013204 <__sfputs_r+0x22>
 80131f4:	463a      	mov	r2, r7
 80131f6:	4630      	mov	r0, r6
 80131f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131fc:	f7ff ffdc 	bl	80131b8 <__sfputc_r>
 8013200:	1c43      	adds	r3, r0, #1
 8013202:	d1f3      	bne.n	80131ec <__sfputs_r+0xa>
 8013204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013208 <_vfiprintf_r>:
 8013208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320c:	460d      	mov	r5, r1
 801320e:	4614      	mov	r4, r2
 8013210:	4698      	mov	r8, r3
 8013212:	4606      	mov	r6, r0
 8013214:	b09d      	sub	sp, #116	; 0x74
 8013216:	b118      	cbz	r0, 8013220 <_vfiprintf_r+0x18>
 8013218:	6983      	ldr	r3, [r0, #24]
 801321a:	b90b      	cbnz	r3, 8013220 <_vfiprintf_r+0x18>
 801321c:	f000 fb16 	bl	801384c <__sinit>
 8013220:	4b89      	ldr	r3, [pc, #548]	; (8013448 <_vfiprintf_r+0x240>)
 8013222:	429d      	cmp	r5, r3
 8013224:	d11b      	bne.n	801325e <_vfiprintf_r+0x56>
 8013226:	6875      	ldr	r5, [r6, #4]
 8013228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801322a:	07d9      	lsls	r1, r3, #31
 801322c:	d405      	bmi.n	801323a <_vfiprintf_r+0x32>
 801322e:	89ab      	ldrh	r3, [r5, #12]
 8013230:	059a      	lsls	r2, r3, #22
 8013232:	d402      	bmi.n	801323a <_vfiprintf_r+0x32>
 8013234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013236:	f000 fba7 	bl	8013988 <__retarget_lock_acquire_recursive>
 801323a:	89ab      	ldrh	r3, [r5, #12]
 801323c:	071b      	lsls	r3, r3, #28
 801323e:	d501      	bpl.n	8013244 <_vfiprintf_r+0x3c>
 8013240:	692b      	ldr	r3, [r5, #16]
 8013242:	b9eb      	cbnz	r3, 8013280 <_vfiprintf_r+0x78>
 8013244:	4629      	mov	r1, r5
 8013246:	4630      	mov	r0, r6
 8013248:	f000 f974 	bl	8013534 <__swsetup_r>
 801324c:	b1c0      	cbz	r0, 8013280 <_vfiprintf_r+0x78>
 801324e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013250:	07dc      	lsls	r4, r3, #31
 8013252:	d50e      	bpl.n	8013272 <_vfiprintf_r+0x6a>
 8013254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013258:	b01d      	add	sp, #116	; 0x74
 801325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801325e:	4b7b      	ldr	r3, [pc, #492]	; (801344c <_vfiprintf_r+0x244>)
 8013260:	429d      	cmp	r5, r3
 8013262:	d101      	bne.n	8013268 <_vfiprintf_r+0x60>
 8013264:	68b5      	ldr	r5, [r6, #8]
 8013266:	e7df      	b.n	8013228 <_vfiprintf_r+0x20>
 8013268:	4b79      	ldr	r3, [pc, #484]	; (8013450 <_vfiprintf_r+0x248>)
 801326a:	429d      	cmp	r5, r3
 801326c:	bf08      	it	eq
 801326e:	68f5      	ldreq	r5, [r6, #12]
 8013270:	e7da      	b.n	8013228 <_vfiprintf_r+0x20>
 8013272:	89ab      	ldrh	r3, [r5, #12]
 8013274:	0598      	lsls	r0, r3, #22
 8013276:	d4ed      	bmi.n	8013254 <_vfiprintf_r+0x4c>
 8013278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801327a:	f000 fb86 	bl	801398a <__retarget_lock_release_recursive>
 801327e:	e7e9      	b.n	8013254 <_vfiprintf_r+0x4c>
 8013280:	2300      	movs	r3, #0
 8013282:	9309      	str	r3, [sp, #36]	; 0x24
 8013284:	2320      	movs	r3, #32
 8013286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801328a:	2330      	movs	r3, #48	; 0x30
 801328c:	f04f 0901 	mov.w	r9, #1
 8013290:	f8cd 800c 	str.w	r8, [sp, #12]
 8013294:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8013454 <_vfiprintf_r+0x24c>
 8013298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801329c:	4623      	mov	r3, r4
 801329e:	469a      	mov	sl, r3
 80132a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132a4:	b10a      	cbz	r2, 80132aa <_vfiprintf_r+0xa2>
 80132a6:	2a25      	cmp	r2, #37	; 0x25
 80132a8:	d1f9      	bne.n	801329e <_vfiprintf_r+0x96>
 80132aa:	ebba 0b04 	subs.w	fp, sl, r4
 80132ae:	d00b      	beq.n	80132c8 <_vfiprintf_r+0xc0>
 80132b0:	465b      	mov	r3, fp
 80132b2:	4622      	mov	r2, r4
 80132b4:	4629      	mov	r1, r5
 80132b6:	4630      	mov	r0, r6
 80132b8:	f7ff ff93 	bl	80131e2 <__sfputs_r>
 80132bc:	3001      	adds	r0, #1
 80132be:	f000 80aa 	beq.w	8013416 <_vfiprintf_r+0x20e>
 80132c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132c4:	445a      	add	r2, fp
 80132c6:	9209      	str	r2, [sp, #36]	; 0x24
 80132c8:	f89a 3000 	ldrb.w	r3, [sl]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	f000 80a2 	beq.w	8013416 <_vfiprintf_r+0x20e>
 80132d2:	2300      	movs	r3, #0
 80132d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132dc:	f10a 0a01 	add.w	sl, sl, #1
 80132e0:	9304      	str	r3, [sp, #16]
 80132e2:	9307      	str	r3, [sp, #28]
 80132e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80132e8:	931a      	str	r3, [sp, #104]	; 0x68
 80132ea:	4654      	mov	r4, sl
 80132ec:	2205      	movs	r2, #5
 80132ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132f2:	4858      	ldr	r0, [pc, #352]	; (8013454 <_vfiprintf_r+0x24c>)
 80132f4:	f7ff fa46 	bl	8012784 <memchr>
 80132f8:	9a04      	ldr	r2, [sp, #16]
 80132fa:	b9d8      	cbnz	r0, 8013334 <_vfiprintf_r+0x12c>
 80132fc:	06d1      	lsls	r1, r2, #27
 80132fe:	bf44      	itt	mi
 8013300:	2320      	movmi	r3, #32
 8013302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013306:	0713      	lsls	r3, r2, #28
 8013308:	bf44      	itt	mi
 801330a:	232b      	movmi	r3, #43	; 0x2b
 801330c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013310:	f89a 3000 	ldrb.w	r3, [sl]
 8013314:	2b2a      	cmp	r3, #42	; 0x2a
 8013316:	d015      	beq.n	8013344 <_vfiprintf_r+0x13c>
 8013318:	4654      	mov	r4, sl
 801331a:	2000      	movs	r0, #0
 801331c:	f04f 0c0a 	mov.w	ip, #10
 8013320:	9a07      	ldr	r2, [sp, #28]
 8013322:	4621      	mov	r1, r4
 8013324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013328:	3b30      	subs	r3, #48	; 0x30
 801332a:	2b09      	cmp	r3, #9
 801332c:	d94e      	bls.n	80133cc <_vfiprintf_r+0x1c4>
 801332e:	b1b0      	cbz	r0, 801335e <_vfiprintf_r+0x156>
 8013330:	9207      	str	r2, [sp, #28]
 8013332:	e014      	b.n	801335e <_vfiprintf_r+0x156>
 8013334:	eba0 0308 	sub.w	r3, r0, r8
 8013338:	fa09 f303 	lsl.w	r3, r9, r3
 801333c:	4313      	orrs	r3, r2
 801333e:	46a2      	mov	sl, r4
 8013340:	9304      	str	r3, [sp, #16]
 8013342:	e7d2      	b.n	80132ea <_vfiprintf_r+0xe2>
 8013344:	9b03      	ldr	r3, [sp, #12]
 8013346:	1d19      	adds	r1, r3, #4
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	9103      	str	r1, [sp, #12]
 801334c:	2b00      	cmp	r3, #0
 801334e:	bfbb      	ittet	lt
 8013350:	425b      	neglt	r3, r3
 8013352:	f042 0202 	orrlt.w	r2, r2, #2
 8013356:	9307      	strge	r3, [sp, #28]
 8013358:	9307      	strlt	r3, [sp, #28]
 801335a:	bfb8      	it	lt
 801335c:	9204      	strlt	r2, [sp, #16]
 801335e:	7823      	ldrb	r3, [r4, #0]
 8013360:	2b2e      	cmp	r3, #46	; 0x2e
 8013362:	d10c      	bne.n	801337e <_vfiprintf_r+0x176>
 8013364:	7863      	ldrb	r3, [r4, #1]
 8013366:	2b2a      	cmp	r3, #42	; 0x2a
 8013368:	d135      	bne.n	80133d6 <_vfiprintf_r+0x1ce>
 801336a:	9b03      	ldr	r3, [sp, #12]
 801336c:	3402      	adds	r4, #2
 801336e:	1d1a      	adds	r2, r3, #4
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	9203      	str	r2, [sp, #12]
 8013374:	2b00      	cmp	r3, #0
 8013376:	bfb8      	it	lt
 8013378:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801337c:	9305      	str	r3, [sp, #20]
 801337e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8013458 <_vfiprintf_r+0x250>
 8013382:	2203      	movs	r2, #3
 8013384:	4650      	mov	r0, sl
 8013386:	7821      	ldrb	r1, [r4, #0]
 8013388:	f7ff f9fc 	bl	8012784 <memchr>
 801338c:	b140      	cbz	r0, 80133a0 <_vfiprintf_r+0x198>
 801338e:	2340      	movs	r3, #64	; 0x40
 8013390:	eba0 000a 	sub.w	r0, r0, sl
 8013394:	fa03 f000 	lsl.w	r0, r3, r0
 8013398:	9b04      	ldr	r3, [sp, #16]
 801339a:	3401      	adds	r4, #1
 801339c:	4303      	orrs	r3, r0
 801339e:	9304      	str	r3, [sp, #16]
 80133a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133a4:	2206      	movs	r2, #6
 80133a6:	482d      	ldr	r0, [pc, #180]	; (801345c <_vfiprintf_r+0x254>)
 80133a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133ac:	f7ff f9ea 	bl	8012784 <memchr>
 80133b0:	2800      	cmp	r0, #0
 80133b2:	d03f      	beq.n	8013434 <_vfiprintf_r+0x22c>
 80133b4:	4b2a      	ldr	r3, [pc, #168]	; (8013460 <_vfiprintf_r+0x258>)
 80133b6:	bb1b      	cbnz	r3, 8013400 <_vfiprintf_r+0x1f8>
 80133b8:	9b03      	ldr	r3, [sp, #12]
 80133ba:	3307      	adds	r3, #7
 80133bc:	f023 0307 	bic.w	r3, r3, #7
 80133c0:	3308      	adds	r3, #8
 80133c2:	9303      	str	r3, [sp, #12]
 80133c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133c6:	443b      	add	r3, r7
 80133c8:	9309      	str	r3, [sp, #36]	; 0x24
 80133ca:	e767      	b.n	801329c <_vfiprintf_r+0x94>
 80133cc:	460c      	mov	r4, r1
 80133ce:	2001      	movs	r0, #1
 80133d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80133d4:	e7a5      	b.n	8013322 <_vfiprintf_r+0x11a>
 80133d6:	2300      	movs	r3, #0
 80133d8:	f04f 0c0a 	mov.w	ip, #10
 80133dc:	4619      	mov	r1, r3
 80133de:	3401      	adds	r4, #1
 80133e0:	9305      	str	r3, [sp, #20]
 80133e2:	4620      	mov	r0, r4
 80133e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133e8:	3a30      	subs	r2, #48	; 0x30
 80133ea:	2a09      	cmp	r2, #9
 80133ec:	d903      	bls.n	80133f6 <_vfiprintf_r+0x1ee>
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d0c5      	beq.n	801337e <_vfiprintf_r+0x176>
 80133f2:	9105      	str	r1, [sp, #20]
 80133f4:	e7c3      	b.n	801337e <_vfiprintf_r+0x176>
 80133f6:	4604      	mov	r4, r0
 80133f8:	2301      	movs	r3, #1
 80133fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80133fe:	e7f0      	b.n	80133e2 <_vfiprintf_r+0x1da>
 8013400:	ab03      	add	r3, sp, #12
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	462a      	mov	r2, r5
 8013406:	4630      	mov	r0, r6
 8013408:	4b16      	ldr	r3, [pc, #88]	; (8013464 <_vfiprintf_r+0x25c>)
 801340a:	a904      	add	r1, sp, #16
 801340c:	f7fd fe78 	bl	8011100 <_printf_float>
 8013410:	4607      	mov	r7, r0
 8013412:	1c78      	adds	r0, r7, #1
 8013414:	d1d6      	bne.n	80133c4 <_vfiprintf_r+0x1bc>
 8013416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013418:	07d9      	lsls	r1, r3, #31
 801341a:	d405      	bmi.n	8013428 <_vfiprintf_r+0x220>
 801341c:	89ab      	ldrh	r3, [r5, #12]
 801341e:	059a      	lsls	r2, r3, #22
 8013420:	d402      	bmi.n	8013428 <_vfiprintf_r+0x220>
 8013422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013424:	f000 fab1 	bl	801398a <__retarget_lock_release_recursive>
 8013428:	89ab      	ldrh	r3, [r5, #12]
 801342a:	065b      	lsls	r3, r3, #25
 801342c:	f53f af12 	bmi.w	8013254 <_vfiprintf_r+0x4c>
 8013430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013432:	e711      	b.n	8013258 <_vfiprintf_r+0x50>
 8013434:	ab03      	add	r3, sp, #12
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	462a      	mov	r2, r5
 801343a:	4630      	mov	r0, r6
 801343c:	4b09      	ldr	r3, [pc, #36]	; (8013464 <_vfiprintf_r+0x25c>)
 801343e:	a904      	add	r1, sp, #16
 8013440:	f7fe f8fa 	bl	8011638 <_printf_i>
 8013444:	e7e4      	b.n	8013410 <_vfiprintf_r+0x208>
 8013446:	bf00      	nop
 8013448:	08014dc0 	.word	0x08014dc0
 801344c:	08014de0 	.word	0x08014de0
 8013450:	08014da0 	.word	0x08014da0
 8013454:	08014d8c 	.word	0x08014d8c
 8013458:	08014d92 	.word	0x08014d92
 801345c:	08014d96 	.word	0x08014d96
 8013460:	08011101 	.word	0x08011101
 8013464:	080131e3 	.word	0x080131e3

08013468 <_kill_r>:
 8013468:	b538      	push	{r3, r4, r5, lr}
 801346a:	2300      	movs	r3, #0
 801346c:	4d06      	ldr	r5, [pc, #24]	; (8013488 <_kill_r+0x20>)
 801346e:	4604      	mov	r4, r0
 8013470:	4608      	mov	r0, r1
 8013472:	4611      	mov	r1, r2
 8013474:	602b      	str	r3, [r5, #0]
 8013476:	f7f2 fcac 	bl	8005dd2 <_kill>
 801347a:	1c43      	adds	r3, r0, #1
 801347c:	d102      	bne.n	8013484 <_kill_r+0x1c>
 801347e:	682b      	ldr	r3, [r5, #0]
 8013480:	b103      	cbz	r3, 8013484 <_kill_r+0x1c>
 8013482:	6023      	str	r3, [r4, #0]
 8013484:	bd38      	pop	{r3, r4, r5, pc}
 8013486:	bf00      	nop
 8013488:	20006260 	.word	0x20006260

0801348c <_getpid_r>:
 801348c:	f7f2 bc9a 	b.w	8005dc4 <_getpid>

08013490 <__swbuf_r>:
 8013490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013492:	460e      	mov	r6, r1
 8013494:	4614      	mov	r4, r2
 8013496:	4605      	mov	r5, r0
 8013498:	b118      	cbz	r0, 80134a2 <__swbuf_r+0x12>
 801349a:	6983      	ldr	r3, [r0, #24]
 801349c:	b90b      	cbnz	r3, 80134a2 <__swbuf_r+0x12>
 801349e:	f000 f9d5 	bl	801384c <__sinit>
 80134a2:	4b21      	ldr	r3, [pc, #132]	; (8013528 <__swbuf_r+0x98>)
 80134a4:	429c      	cmp	r4, r3
 80134a6:	d12b      	bne.n	8013500 <__swbuf_r+0x70>
 80134a8:	686c      	ldr	r4, [r5, #4]
 80134aa:	69a3      	ldr	r3, [r4, #24]
 80134ac:	60a3      	str	r3, [r4, #8]
 80134ae:	89a3      	ldrh	r3, [r4, #12]
 80134b0:	071a      	lsls	r2, r3, #28
 80134b2:	d52f      	bpl.n	8013514 <__swbuf_r+0x84>
 80134b4:	6923      	ldr	r3, [r4, #16]
 80134b6:	b36b      	cbz	r3, 8013514 <__swbuf_r+0x84>
 80134b8:	6923      	ldr	r3, [r4, #16]
 80134ba:	6820      	ldr	r0, [r4, #0]
 80134bc:	b2f6      	uxtb	r6, r6
 80134be:	1ac0      	subs	r0, r0, r3
 80134c0:	6963      	ldr	r3, [r4, #20]
 80134c2:	4637      	mov	r7, r6
 80134c4:	4283      	cmp	r3, r0
 80134c6:	dc04      	bgt.n	80134d2 <__swbuf_r+0x42>
 80134c8:	4621      	mov	r1, r4
 80134ca:	4628      	mov	r0, r5
 80134cc:	f000 f92a 	bl	8013724 <_fflush_r>
 80134d0:	bb30      	cbnz	r0, 8013520 <__swbuf_r+0x90>
 80134d2:	68a3      	ldr	r3, [r4, #8]
 80134d4:	3001      	adds	r0, #1
 80134d6:	3b01      	subs	r3, #1
 80134d8:	60a3      	str	r3, [r4, #8]
 80134da:	6823      	ldr	r3, [r4, #0]
 80134dc:	1c5a      	adds	r2, r3, #1
 80134de:	6022      	str	r2, [r4, #0]
 80134e0:	701e      	strb	r6, [r3, #0]
 80134e2:	6963      	ldr	r3, [r4, #20]
 80134e4:	4283      	cmp	r3, r0
 80134e6:	d004      	beq.n	80134f2 <__swbuf_r+0x62>
 80134e8:	89a3      	ldrh	r3, [r4, #12]
 80134ea:	07db      	lsls	r3, r3, #31
 80134ec:	d506      	bpl.n	80134fc <__swbuf_r+0x6c>
 80134ee:	2e0a      	cmp	r6, #10
 80134f0:	d104      	bne.n	80134fc <__swbuf_r+0x6c>
 80134f2:	4621      	mov	r1, r4
 80134f4:	4628      	mov	r0, r5
 80134f6:	f000 f915 	bl	8013724 <_fflush_r>
 80134fa:	b988      	cbnz	r0, 8013520 <__swbuf_r+0x90>
 80134fc:	4638      	mov	r0, r7
 80134fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013500:	4b0a      	ldr	r3, [pc, #40]	; (801352c <__swbuf_r+0x9c>)
 8013502:	429c      	cmp	r4, r3
 8013504:	d101      	bne.n	801350a <__swbuf_r+0x7a>
 8013506:	68ac      	ldr	r4, [r5, #8]
 8013508:	e7cf      	b.n	80134aa <__swbuf_r+0x1a>
 801350a:	4b09      	ldr	r3, [pc, #36]	; (8013530 <__swbuf_r+0xa0>)
 801350c:	429c      	cmp	r4, r3
 801350e:	bf08      	it	eq
 8013510:	68ec      	ldreq	r4, [r5, #12]
 8013512:	e7ca      	b.n	80134aa <__swbuf_r+0x1a>
 8013514:	4621      	mov	r1, r4
 8013516:	4628      	mov	r0, r5
 8013518:	f000 f80c 	bl	8013534 <__swsetup_r>
 801351c:	2800      	cmp	r0, #0
 801351e:	d0cb      	beq.n	80134b8 <__swbuf_r+0x28>
 8013520:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013524:	e7ea      	b.n	80134fc <__swbuf_r+0x6c>
 8013526:	bf00      	nop
 8013528:	08014dc0 	.word	0x08014dc0
 801352c:	08014de0 	.word	0x08014de0
 8013530:	08014da0 	.word	0x08014da0

08013534 <__swsetup_r>:
 8013534:	4b32      	ldr	r3, [pc, #200]	; (8013600 <__swsetup_r+0xcc>)
 8013536:	b570      	push	{r4, r5, r6, lr}
 8013538:	681d      	ldr	r5, [r3, #0]
 801353a:	4606      	mov	r6, r0
 801353c:	460c      	mov	r4, r1
 801353e:	b125      	cbz	r5, 801354a <__swsetup_r+0x16>
 8013540:	69ab      	ldr	r3, [r5, #24]
 8013542:	b913      	cbnz	r3, 801354a <__swsetup_r+0x16>
 8013544:	4628      	mov	r0, r5
 8013546:	f000 f981 	bl	801384c <__sinit>
 801354a:	4b2e      	ldr	r3, [pc, #184]	; (8013604 <__swsetup_r+0xd0>)
 801354c:	429c      	cmp	r4, r3
 801354e:	d10f      	bne.n	8013570 <__swsetup_r+0x3c>
 8013550:	686c      	ldr	r4, [r5, #4]
 8013552:	89a3      	ldrh	r3, [r4, #12]
 8013554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013558:	0719      	lsls	r1, r3, #28
 801355a:	d42c      	bmi.n	80135b6 <__swsetup_r+0x82>
 801355c:	06dd      	lsls	r5, r3, #27
 801355e:	d411      	bmi.n	8013584 <__swsetup_r+0x50>
 8013560:	2309      	movs	r3, #9
 8013562:	6033      	str	r3, [r6, #0]
 8013564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801356c:	81a3      	strh	r3, [r4, #12]
 801356e:	e03e      	b.n	80135ee <__swsetup_r+0xba>
 8013570:	4b25      	ldr	r3, [pc, #148]	; (8013608 <__swsetup_r+0xd4>)
 8013572:	429c      	cmp	r4, r3
 8013574:	d101      	bne.n	801357a <__swsetup_r+0x46>
 8013576:	68ac      	ldr	r4, [r5, #8]
 8013578:	e7eb      	b.n	8013552 <__swsetup_r+0x1e>
 801357a:	4b24      	ldr	r3, [pc, #144]	; (801360c <__swsetup_r+0xd8>)
 801357c:	429c      	cmp	r4, r3
 801357e:	bf08      	it	eq
 8013580:	68ec      	ldreq	r4, [r5, #12]
 8013582:	e7e6      	b.n	8013552 <__swsetup_r+0x1e>
 8013584:	0758      	lsls	r0, r3, #29
 8013586:	d512      	bpl.n	80135ae <__swsetup_r+0x7a>
 8013588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801358a:	b141      	cbz	r1, 801359e <__swsetup_r+0x6a>
 801358c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013590:	4299      	cmp	r1, r3
 8013592:	d002      	beq.n	801359a <__swsetup_r+0x66>
 8013594:	4630      	mov	r0, r6
 8013596:	f7fd fc39 	bl	8010e0c <_free_r>
 801359a:	2300      	movs	r3, #0
 801359c:	6363      	str	r3, [r4, #52]	; 0x34
 801359e:	89a3      	ldrh	r3, [r4, #12]
 80135a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80135a4:	81a3      	strh	r3, [r4, #12]
 80135a6:	2300      	movs	r3, #0
 80135a8:	6063      	str	r3, [r4, #4]
 80135aa:	6923      	ldr	r3, [r4, #16]
 80135ac:	6023      	str	r3, [r4, #0]
 80135ae:	89a3      	ldrh	r3, [r4, #12]
 80135b0:	f043 0308 	orr.w	r3, r3, #8
 80135b4:	81a3      	strh	r3, [r4, #12]
 80135b6:	6923      	ldr	r3, [r4, #16]
 80135b8:	b94b      	cbnz	r3, 80135ce <__swsetup_r+0x9a>
 80135ba:	89a3      	ldrh	r3, [r4, #12]
 80135bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80135c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135c4:	d003      	beq.n	80135ce <__swsetup_r+0x9a>
 80135c6:	4621      	mov	r1, r4
 80135c8:	4630      	mov	r0, r6
 80135ca:	f000 fa05 	bl	80139d8 <__smakebuf_r>
 80135ce:	89a0      	ldrh	r0, [r4, #12]
 80135d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80135d4:	f010 0301 	ands.w	r3, r0, #1
 80135d8:	d00a      	beq.n	80135f0 <__swsetup_r+0xbc>
 80135da:	2300      	movs	r3, #0
 80135dc:	60a3      	str	r3, [r4, #8]
 80135de:	6963      	ldr	r3, [r4, #20]
 80135e0:	425b      	negs	r3, r3
 80135e2:	61a3      	str	r3, [r4, #24]
 80135e4:	6923      	ldr	r3, [r4, #16]
 80135e6:	b943      	cbnz	r3, 80135fa <__swsetup_r+0xc6>
 80135e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80135ec:	d1ba      	bne.n	8013564 <__swsetup_r+0x30>
 80135ee:	bd70      	pop	{r4, r5, r6, pc}
 80135f0:	0781      	lsls	r1, r0, #30
 80135f2:	bf58      	it	pl
 80135f4:	6963      	ldrpl	r3, [r4, #20]
 80135f6:	60a3      	str	r3, [r4, #8]
 80135f8:	e7f4      	b.n	80135e4 <__swsetup_r+0xb0>
 80135fa:	2000      	movs	r0, #0
 80135fc:	e7f7      	b.n	80135ee <__swsetup_r+0xba>
 80135fe:	bf00      	nop
 8013600:	20000078 	.word	0x20000078
 8013604:	08014dc0 	.word	0x08014dc0
 8013608:	08014de0 	.word	0x08014de0
 801360c:	08014da0 	.word	0x08014da0

08013610 <abort>:
 8013610:	2006      	movs	r0, #6
 8013612:	b508      	push	{r3, lr}
 8013614:	f000 faa4 	bl	8013b60 <raise>
 8013618:	2001      	movs	r0, #1
 801361a:	f7f2 fbea 	bl	8005df2 <_exit>
	...

08013620 <__sflush_r>:
 8013620:	898a      	ldrh	r2, [r1, #12]
 8013622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013624:	4605      	mov	r5, r0
 8013626:	0710      	lsls	r0, r2, #28
 8013628:	460c      	mov	r4, r1
 801362a:	d457      	bmi.n	80136dc <__sflush_r+0xbc>
 801362c:	684b      	ldr	r3, [r1, #4]
 801362e:	2b00      	cmp	r3, #0
 8013630:	dc04      	bgt.n	801363c <__sflush_r+0x1c>
 8013632:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013634:	2b00      	cmp	r3, #0
 8013636:	dc01      	bgt.n	801363c <__sflush_r+0x1c>
 8013638:	2000      	movs	r0, #0
 801363a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801363c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801363e:	2e00      	cmp	r6, #0
 8013640:	d0fa      	beq.n	8013638 <__sflush_r+0x18>
 8013642:	2300      	movs	r3, #0
 8013644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013648:	682f      	ldr	r7, [r5, #0]
 801364a:	602b      	str	r3, [r5, #0]
 801364c:	d032      	beq.n	80136b4 <__sflush_r+0x94>
 801364e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013650:	89a3      	ldrh	r3, [r4, #12]
 8013652:	075a      	lsls	r2, r3, #29
 8013654:	d505      	bpl.n	8013662 <__sflush_r+0x42>
 8013656:	6863      	ldr	r3, [r4, #4]
 8013658:	1ac0      	subs	r0, r0, r3
 801365a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801365c:	b10b      	cbz	r3, 8013662 <__sflush_r+0x42>
 801365e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013660:	1ac0      	subs	r0, r0, r3
 8013662:	2300      	movs	r3, #0
 8013664:	4602      	mov	r2, r0
 8013666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013668:	4628      	mov	r0, r5
 801366a:	6a21      	ldr	r1, [r4, #32]
 801366c:	47b0      	blx	r6
 801366e:	1c43      	adds	r3, r0, #1
 8013670:	89a3      	ldrh	r3, [r4, #12]
 8013672:	d106      	bne.n	8013682 <__sflush_r+0x62>
 8013674:	6829      	ldr	r1, [r5, #0]
 8013676:	291d      	cmp	r1, #29
 8013678:	d82c      	bhi.n	80136d4 <__sflush_r+0xb4>
 801367a:	4a29      	ldr	r2, [pc, #164]	; (8013720 <__sflush_r+0x100>)
 801367c:	40ca      	lsrs	r2, r1
 801367e:	07d6      	lsls	r6, r2, #31
 8013680:	d528      	bpl.n	80136d4 <__sflush_r+0xb4>
 8013682:	2200      	movs	r2, #0
 8013684:	6062      	str	r2, [r4, #4]
 8013686:	6922      	ldr	r2, [r4, #16]
 8013688:	04d9      	lsls	r1, r3, #19
 801368a:	6022      	str	r2, [r4, #0]
 801368c:	d504      	bpl.n	8013698 <__sflush_r+0x78>
 801368e:	1c42      	adds	r2, r0, #1
 8013690:	d101      	bne.n	8013696 <__sflush_r+0x76>
 8013692:	682b      	ldr	r3, [r5, #0]
 8013694:	b903      	cbnz	r3, 8013698 <__sflush_r+0x78>
 8013696:	6560      	str	r0, [r4, #84]	; 0x54
 8013698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801369a:	602f      	str	r7, [r5, #0]
 801369c:	2900      	cmp	r1, #0
 801369e:	d0cb      	beq.n	8013638 <__sflush_r+0x18>
 80136a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80136a4:	4299      	cmp	r1, r3
 80136a6:	d002      	beq.n	80136ae <__sflush_r+0x8e>
 80136a8:	4628      	mov	r0, r5
 80136aa:	f7fd fbaf 	bl	8010e0c <_free_r>
 80136ae:	2000      	movs	r0, #0
 80136b0:	6360      	str	r0, [r4, #52]	; 0x34
 80136b2:	e7c2      	b.n	801363a <__sflush_r+0x1a>
 80136b4:	6a21      	ldr	r1, [r4, #32]
 80136b6:	2301      	movs	r3, #1
 80136b8:	4628      	mov	r0, r5
 80136ba:	47b0      	blx	r6
 80136bc:	1c41      	adds	r1, r0, #1
 80136be:	d1c7      	bne.n	8013650 <__sflush_r+0x30>
 80136c0:	682b      	ldr	r3, [r5, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d0c4      	beq.n	8013650 <__sflush_r+0x30>
 80136c6:	2b1d      	cmp	r3, #29
 80136c8:	d001      	beq.n	80136ce <__sflush_r+0xae>
 80136ca:	2b16      	cmp	r3, #22
 80136cc:	d101      	bne.n	80136d2 <__sflush_r+0xb2>
 80136ce:	602f      	str	r7, [r5, #0]
 80136d0:	e7b2      	b.n	8013638 <__sflush_r+0x18>
 80136d2:	89a3      	ldrh	r3, [r4, #12]
 80136d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136d8:	81a3      	strh	r3, [r4, #12]
 80136da:	e7ae      	b.n	801363a <__sflush_r+0x1a>
 80136dc:	690f      	ldr	r7, [r1, #16]
 80136de:	2f00      	cmp	r7, #0
 80136e0:	d0aa      	beq.n	8013638 <__sflush_r+0x18>
 80136e2:	0793      	lsls	r3, r2, #30
 80136e4:	bf18      	it	ne
 80136e6:	2300      	movne	r3, #0
 80136e8:	680e      	ldr	r6, [r1, #0]
 80136ea:	bf08      	it	eq
 80136ec:	694b      	ldreq	r3, [r1, #20]
 80136ee:	1bf6      	subs	r6, r6, r7
 80136f0:	600f      	str	r7, [r1, #0]
 80136f2:	608b      	str	r3, [r1, #8]
 80136f4:	2e00      	cmp	r6, #0
 80136f6:	dd9f      	ble.n	8013638 <__sflush_r+0x18>
 80136f8:	4633      	mov	r3, r6
 80136fa:	463a      	mov	r2, r7
 80136fc:	4628      	mov	r0, r5
 80136fe:	6a21      	ldr	r1, [r4, #32]
 8013700:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8013704:	47e0      	blx	ip
 8013706:	2800      	cmp	r0, #0
 8013708:	dc06      	bgt.n	8013718 <__sflush_r+0xf8>
 801370a:	89a3      	ldrh	r3, [r4, #12]
 801370c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013714:	81a3      	strh	r3, [r4, #12]
 8013716:	e790      	b.n	801363a <__sflush_r+0x1a>
 8013718:	4407      	add	r7, r0
 801371a:	1a36      	subs	r6, r6, r0
 801371c:	e7ea      	b.n	80136f4 <__sflush_r+0xd4>
 801371e:	bf00      	nop
 8013720:	20400001 	.word	0x20400001

08013724 <_fflush_r>:
 8013724:	b538      	push	{r3, r4, r5, lr}
 8013726:	690b      	ldr	r3, [r1, #16]
 8013728:	4605      	mov	r5, r0
 801372a:	460c      	mov	r4, r1
 801372c:	b913      	cbnz	r3, 8013734 <_fflush_r+0x10>
 801372e:	2500      	movs	r5, #0
 8013730:	4628      	mov	r0, r5
 8013732:	bd38      	pop	{r3, r4, r5, pc}
 8013734:	b118      	cbz	r0, 801373e <_fflush_r+0x1a>
 8013736:	6983      	ldr	r3, [r0, #24]
 8013738:	b90b      	cbnz	r3, 801373e <_fflush_r+0x1a>
 801373a:	f000 f887 	bl	801384c <__sinit>
 801373e:	4b14      	ldr	r3, [pc, #80]	; (8013790 <_fflush_r+0x6c>)
 8013740:	429c      	cmp	r4, r3
 8013742:	d11b      	bne.n	801377c <_fflush_r+0x58>
 8013744:	686c      	ldr	r4, [r5, #4]
 8013746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d0ef      	beq.n	801372e <_fflush_r+0xa>
 801374e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013750:	07d0      	lsls	r0, r2, #31
 8013752:	d404      	bmi.n	801375e <_fflush_r+0x3a>
 8013754:	0599      	lsls	r1, r3, #22
 8013756:	d402      	bmi.n	801375e <_fflush_r+0x3a>
 8013758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801375a:	f000 f915 	bl	8013988 <__retarget_lock_acquire_recursive>
 801375e:	4628      	mov	r0, r5
 8013760:	4621      	mov	r1, r4
 8013762:	f7ff ff5d 	bl	8013620 <__sflush_r>
 8013766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013768:	4605      	mov	r5, r0
 801376a:	07da      	lsls	r2, r3, #31
 801376c:	d4e0      	bmi.n	8013730 <_fflush_r+0xc>
 801376e:	89a3      	ldrh	r3, [r4, #12]
 8013770:	059b      	lsls	r3, r3, #22
 8013772:	d4dd      	bmi.n	8013730 <_fflush_r+0xc>
 8013774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013776:	f000 f908 	bl	801398a <__retarget_lock_release_recursive>
 801377a:	e7d9      	b.n	8013730 <_fflush_r+0xc>
 801377c:	4b05      	ldr	r3, [pc, #20]	; (8013794 <_fflush_r+0x70>)
 801377e:	429c      	cmp	r4, r3
 8013780:	d101      	bne.n	8013786 <_fflush_r+0x62>
 8013782:	68ac      	ldr	r4, [r5, #8]
 8013784:	e7df      	b.n	8013746 <_fflush_r+0x22>
 8013786:	4b04      	ldr	r3, [pc, #16]	; (8013798 <_fflush_r+0x74>)
 8013788:	429c      	cmp	r4, r3
 801378a:	bf08      	it	eq
 801378c:	68ec      	ldreq	r4, [r5, #12]
 801378e:	e7da      	b.n	8013746 <_fflush_r+0x22>
 8013790:	08014dc0 	.word	0x08014dc0
 8013794:	08014de0 	.word	0x08014de0
 8013798:	08014da0 	.word	0x08014da0

0801379c <std>:
 801379c:	2300      	movs	r3, #0
 801379e:	b510      	push	{r4, lr}
 80137a0:	4604      	mov	r4, r0
 80137a2:	e9c0 3300 	strd	r3, r3, [r0]
 80137a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137aa:	6083      	str	r3, [r0, #8]
 80137ac:	8181      	strh	r1, [r0, #12]
 80137ae:	6643      	str	r3, [r0, #100]	; 0x64
 80137b0:	81c2      	strh	r2, [r0, #14]
 80137b2:	6183      	str	r3, [r0, #24]
 80137b4:	4619      	mov	r1, r3
 80137b6:	2208      	movs	r2, #8
 80137b8:	305c      	adds	r0, #92	; 0x5c
 80137ba:	f7fd fb1f 	bl	8010dfc <memset>
 80137be:	4b05      	ldr	r3, [pc, #20]	; (80137d4 <std+0x38>)
 80137c0:	6224      	str	r4, [r4, #32]
 80137c2:	6263      	str	r3, [r4, #36]	; 0x24
 80137c4:	4b04      	ldr	r3, [pc, #16]	; (80137d8 <std+0x3c>)
 80137c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80137c8:	4b04      	ldr	r3, [pc, #16]	; (80137dc <std+0x40>)
 80137ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80137cc:	4b04      	ldr	r3, [pc, #16]	; (80137e0 <std+0x44>)
 80137ce:	6323      	str	r3, [r4, #48]	; 0x30
 80137d0:	bd10      	pop	{r4, pc}
 80137d2:	bf00      	nop
 80137d4:	08013b71 	.word	0x08013b71
 80137d8:	08013b93 	.word	0x08013b93
 80137dc:	08013bcb 	.word	0x08013bcb
 80137e0:	08013bef 	.word	0x08013bef

080137e4 <_cleanup_r>:
 80137e4:	4901      	ldr	r1, [pc, #4]	; (80137ec <_cleanup_r+0x8>)
 80137e6:	f000 b8af 	b.w	8013948 <_fwalk_reent>
 80137ea:	bf00      	nop
 80137ec:	08013725 	.word	0x08013725

080137f0 <__sfmoreglue>:
 80137f0:	2268      	movs	r2, #104	; 0x68
 80137f2:	b570      	push	{r4, r5, r6, lr}
 80137f4:	1e4d      	subs	r5, r1, #1
 80137f6:	4355      	muls	r5, r2
 80137f8:	460e      	mov	r6, r1
 80137fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80137fe:	f7fd fb6d 	bl	8010edc <_malloc_r>
 8013802:	4604      	mov	r4, r0
 8013804:	b140      	cbz	r0, 8013818 <__sfmoreglue+0x28>
 8013806:	2100      	movs	r1, #0
 8013808:	e9c0 1600 	strd	r1, r6, [r0]
 801380c:	300c      	adds	r0, #12
 801380e:	60a0      	str	r0, [r4, #8]
 8013810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013814:	f7fd faf2 	bl	8010dfc <memset>
 8013818:	4620      	mov	r0, r4
 801381a:	bd70      	pop	{r4, r5, r6, pc}

0801381c <__sfp_lock_acquire>:
 801381c:	4801      	ldr	r0, [pc, #4]	; (8013824 <__sfp_lock_acquire+0x8>)
 801381e:	f000 b8b3 	b.w	8013988 <__retarget_lock_acquire_recursive>
 8013822:	bf00      	nop
 8013824:	20006265 	.word	0x20006265

08013828 <__sfp_lock_release>:
 8013828:	4801      	ldr	r0, [pc, #4]	; (8013830 <__sfp_lock_release+0x8>)
 801382a:	f000 b8ae 	b.w	801398a <__retarget_lock_release_recursive>
 801382e:	bf00      	nop
 8013830:	20006265 	.word	0x20006265

08013834 <__sinit_lock_acquire>:
 8013834:	4801      	ldr	r0, [pc, #4]	; (801383c <__sinit_lock_acquire+0x8>)
 8013836:	f000 b8a7 	b.w	8013988 <__retarget_lock_acquire_recursive>
 801383a:	bf00      	nop
 801383c:	20006266 	.word	0x20006266

08013840 <__sinit_lock_release>:
 8013840:	4801      	ldr	r0, [pc, #4]	; (8013848 <__sinit_lock_release+0x8>)
 8013842:	f000 b8a2 	b.w	801398a <__retarget_lock_release_recursive>
 8013846:	bf00      	nop
 8013848:	20006266 	.word	0x20006266

0801384c <__sinit>:
 801384c:	b510      	push	{r4, lr}
 801384e:	4604      	mov	r4, r0
 8013850:	f7ff fff0 	bl	8013834 <__sinit_lock_acquire>
 8013854:	69a3      	ldr	r3, [r4, #24]
 8013856:	b11b      	cbz	r3, 8013860 <__sinit+0x14>
 8013858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801385c:	f7ff bff0 	b.w	8013840 <__sinit_lock_release>
 8013860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013864:	6523      	str	r3, [r4, #80]	; 0x50
 8013866:	4b13      	ldr	r3, [pc, #76]	; (80138b4 <__sinit+0x68>)
 8013868:	4a13      	ldr	r2, [pc, #76]	; (80138b8 <__sinit+0x6c>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	62a2      	str	r2, [r4, #40]	; 0x28
 801386e:	42a3      	cmp	r3, r4
 8013870:	bf08      	it	eq
 8013872:	2301      	moveq	r3, #1
 8013874:	4620      	mov	r0, r4
 8013876:	bf08      	it	eq
 8013878:	61a3      	streq	r3, [r4, #24]
 801387a:	f000 f81f 	bl	80138bc <__sfp>
 801387e:	6060      	str	r0, [r4, #4]
 8013880:	4620      	mov	r0, r4
 8013882:	f000 f81b 	bl	80138bc <__sfp>
 8013886:	60a0      	str	r0, [r4, #8]
 8013888:	4620      	mov	r0, r4
 801388a:	f000 f817 	bl	80138bc <__sfp>
 801388e:	2200      	movs	r2, #0
 8013890:	2104      	movs	r1, #4
 8013892:	60e0      	str	r0, [r4, #12]
 8013894:	6860      	ldr	r0, [r4, #4]
 8013896:	f7ff ff81 	bl	801379c <std>
 801389a:	2201      	movs	r2, #1
 801389c:	2109      	movs	r1, #9
 801389e:	68a0      	ldr	r0, [r4, #8]
 80138a0:	f7ff ff7c 	bl	801379c <std>
 80138a4:	2202      	movs	r2, #2
 80138a6:	2112      	movs	r1, #18
 80138a8:	68e0      	ldr	r0, [r4, #12]
 80138aa:	f7ff ff77 	bl	801379c <std>
 80138ae:	2301      	movs	r3, #1
 80138b0:	61a3      	str	r3, [r4, #24]
 80138b2:	e7d1      	b.n	8013858 <__sinit+0xc>
 80138b4:	08014ad4 	.word	0x08014ad4
 80138b8:	080137e5 	.word	0x080137e5

080138bc <__sfp>:
 80138bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138be:	4607      	mov	r7, r0
 80138c0:	f7ff ffac 	bl	801381c <__sfp_lock_acquire>
 80138c4:	4b1e      	ldr	r3, [pc, #120]	; (8013940 <__sfp+0x84>)
 80138c6:	681e      	ldr	r6, [r3, #0]
 80138c8:	69b3      	ldr	r3, [r6, #24]
 80138ca:	b913      	cbnz	r3, 80138d2 <__sfp+0x16>
 80138cc:	4630      	mov	r0, r6
 80138ce:	f7ff ffbd 	bl	801384c <__sinit>
 80138d2:	3648      	adds	r6, #72	; 0x48
 80138d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80138d8:	3b01      	subs	r3, #1
 80138da:	d503      	bpl.n	80138e4 <__sfp+0x28>
 80138dc:	6833      	ldr	r3, [r6, #0]
 80138de:	b30b      	cbz	r3, 8013924 <__sfp+0x68>
 80138e0:	6836      	ldr	r6, [r6, #0]
 80138e2:	e7f7      	b.n	80138d4 <__sfp+0x18>
 80138e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80138e8:	b9d5      	cbnz	r5, 8013920 <__sfp+0x64>
 80138ea:	4b16      	ldr	r3, [pc, #88]	; (8013944 <__sfp+0x88>)
 80138ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80138f0:	60e3      	str	r3, [r4, #12]
 80138f2:	6665      	str	r5, [r4, #100]	; 0x64
 80138f4:	f000 f847 	bl	8013986 <__retarget_lock_init_recursive>
 80138f8:	f7ff ff96 	bl	8013828 <__sfp_lock_release>
 80138fc:	2208      	movs	r2, #8
 80138fe:	4629      	mov	r1, r5
 8013900:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013904:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013908:	6025      	str	r5, [r4, #0]
 801390a:	61a5      	str	r5, [r4, #24]
 801390c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013910:	f7fd fa74 	bl	8010dfc <memset>
 8013914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801391c:	4620      	mov	r0, r4
 801391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013920:	3468      	adds	r4, #104	; 0x68
 8013922:	e7d9      	b.n	80138d8 <__sfp+0x1c>
 8013924:	2104      	movs	r1, #4
 8013926:	4638      	mov	r0, r7
 8013928:	f7ff ff62 	bl	80137f0 <__sfmoreglue>
 801392c:	4604      	mov	r4, r0
 801392e:	6030      	str	r0, [r6, #0]
 8013930:	2800      	cmp	r0, #0
 8013932:	d1d5      	bne.n	80138e0 <__sfp+0x24>
 8013934:	f7ff ff78 	bl	8013828 <__sfp_lock_release>
 8013938:	230c      	movs	r3, #12
 801393a:	603b      	str	r3, [r7, #0]
 801393c:	e7ee      	b.n	801391c <__sfp+0x60>
 801393e:	bf00      	nop
 8013940:	08014ad4 	.word	0x08014ad4
 8013944:	ffff0001 	.word	0xffff0001

08013948 <_fwalk_reent>:
 8013948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801394c:	4606      	mov	r6, r0
 801394e:	4688      	mov	r8, r1
 8013950:	2700      	movs	r7, #0
 8013952:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801395a:	f1b9 0901 	subs.w	r9, r9, #1
 801395e:	d505      	bpl.n	801396c <_fwalk_reent+0x24>
 8013960:	6824      	ldr	r4, [r4, #0]
 8013962:	2c00      	cmp	r4, #0
 8013964:	d1f7      	bne.n	8013956 <_fwalk_reent+0xe>
 8013966:	4638      	mov	r0, r7
 8013968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801396c:	89ab      	ldrh	r3, [r5, #12]
 801396e:	2b01      	cmp	r3, #1
 8013970:	d907      	bls.n	8013982 <_fwalk_reent+0x3a>
 8013972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013976:	3301      	adds	r3, #1
 8013978:	d003      	beq.n	8013982 <_fwalk_reent+0x3a>
 801397a:	4629      	mov	r1, r5
 801397c:	4630      	mov	r0, r6
 801397e:	47c0      	blx	r8
 8013980:	4307      	orrs	r7, r0
 8013982:	3568      	adds	r5, #104	; 0x68
 8013984:	e7e9      	b.n	801395a <_fwalk_reent+0x12>

08013986 <__retarget_lock_init_recursive>:
 8013986:	4770      	bx	lr

08013988 <__retarget_lock_acquire_recursive>:
 8013988:	4770      	bx	lr

0801398a <__retarget_lock_release_recursive>:
 801398a:	4770      	bx	lr

0801398c <__swhatbuf_r>:
 801398c:	b570      	push	{r4, r5, r6, lr}
 801398e:	460e      	mov	r6, r1
 8013990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013994:	4614      	mov	r4, r2
 8013996:	2900      	cmp	r1, #0
 8013998:	461d      	mov	r5, r3
 801399a:	b096      	sub	sp, #88	; 0x58
 801399c:	da08      	bge.n	80139b0 <__swhatbuf_r+0x24>
 801399e:	2200      	movs	r2, #0
 80139a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80139a4:	602a      	str	r2, [r5, #0]
 80139a6:	061a      	lsls	r2, r3, #24
 80139a8:	d410      	bmi.n	80139cc <__swhatbuf_r+0x40>
 80139aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80139ae:	e00e      	b.n	80139ce <__swhatbuf_r+0x42>
 80139b0:	466a      	mov	r2, sp
 80139b2:	f000 f94f 	bl	8013c54 <_fstat_r>
 80139b6:	2800      	cmp	r0, #0
 80139b8:	dbf1      	blt.n	801399e <__swhatbuf_r+0x12>
 80139ba:	9a01      	ldr	r2, [sp, #4]
 80139bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80139c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80139c4:	425a      	negs	r2, r3
 80139c6:	415a      	adcs	r2, r3
 80139c8:	602a      	str	r2, [r5, #0]
 80139ca:	e7ee      	b.n	80139aa <__swhatbuf_r+0x1e>
 80139cc:	2340      	movs	r3, #64	; 0x40
 80139ce:	2000      	movs	r0, #0
 80139d0:	6023      	str	r3, [r4, #0]
 80139d2:	b016      	add	sp, #88	; 0x58
 80139d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080139d8 <__smakebuf_r>:
 80139d8:	898b      	ldrh	r3, [r1, #12]
 80139da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80139dc:	079d      	lsls	r5, r3, #30
 80139de:	4606      	mov	r6, r0
 80139e0:	460c      	mov	r4, r1
 80139e2:	d507      	bpl.n	80139f4 <__smakebuf_r+0x1c>
 80139e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80139e8:	6023      	str	r3, [r4, #0]
 80139ea:	6123      	str	r3, [r4, #16]
 80139ec:	2301      	movs	r3, #1
 80139ee:	6163      	str	r3, [r4, #20]
 80139f0:	b002      	add	sp, #8
 80139f2:	bd70      	pop	{r4, r5, r6, pc}
 80139f4:	466a      	mov	r2, sp
 80139f6:	ab01      	add	r3, sp, #4
 80139f8:	f7ff ffc8 	bl	801398c <__swhatbuf_r>
 80139fc:	9900      	ldr	r1, [sp, #0]
 80139fe:	4605      	mov	r5, r0
 8013a00:	4630      	mov	r0, r6
 8013a02:	f7fd fa6b 	bl	8010edc <_malloc_r>
 8013a06:	b948      	cbnz	r0, 8013a1c <__smakebuf_r+0x44>
 8013a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a0c:	059a      	lsls	r2, r3, #22
 8013a0e:	d4ef      	bmi.n	80139f0 <__smakebuf_r+0x18>
 8013a10:	f023 0303 	bic.w	r3, r3, #3
 8013a14:	f043 0302 	orr.w	r3, r3, #2
 8013a18:	81a3      	strh	r3, [r4, #12]
 8013a1a:	e7e3      	b.n	80139e4 <__smakebuf_r+0xc>
 8013a1c:	4b0d      	ldr	r3, [pc, #52]	; (8013a54 <__smakebuf_r+0x7c>)
 8013a1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013a20:	89a3      	ldrh	r3, [r4, #12]
 8013a22:	6020      	str	r0, [r4, #0]
 8013a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a28:	81a3      	strh	r3, [r4, #12]
 8013a2a:	9b00      	ldr	r3, [sp, #0]
 8013a2c:	6120      	str	r0, [r4, #16]
 8013a2e:	6163      	str	r3, [r4, #20]
 8013a30:	9b01      	ldr	r3, [sp, #4]
 8013a32:	b15b      	cbz	r3, 8013a4c <__smakebuf_r+0x74>
 8013a34:	4630      	mov	r0, r6
 8013a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a3a:	f000 f91d 	bl	8013c78 <_isatty_r>
 8013a3e:	b128      	cbz	r0, 8013a4c <__smakebuf_r+0x74>
 8013a40:	89a3      	ldrh	r3, [r4, #12]
 8013a42:	f023 0303 	bic.w	r3, r3, #3
 8013a46:	f043 0301 	orr.w	r3, r3, #1
 8013a4a:	81a3      	strh	r3, [r4, #12]
 8013a4c:	89a0      	ldrh	r0, [r4, #12]
 8013a4e:	4305      	orrs	r5, r0
 8013a50:	81a5      	strh	r5, [r4, #12]
 8013a52:	e7cd      	b.n	80139f0 <__smakebuf_r+0x18>
 8013a54:	080137e5 	.word	0x080137e5

08013a58 <__ascii_mbtowc>:
 8013a58:	b082      	sub	sp, #8
 8013a5a:	b901      	cbnz	r1, 8013a5e <__ascii_mbtowc+0x6>
 8013a5c:	a901      	add	r1, sp, #4
 8013a5e:	b142      	cbz	r2, 8013a72 <__ascii_mbtowc+0x1a>
 8013a60:	b14b      	cbz	r3, 8013a76 <__ascii_mbtowc+0x1e>
 8013a62:	7813      	ldrb	r3, [r2, #0]
 8013a64:	600b      	str	r3, [r1, #0]
 8013a66:	7812      	ldrb	r2, [r2, #0]
 8013a68:	1e10      	subs	r0, r2, #0
 8013a6a:	bf18      	it	ne
 8013a6c:	2001      	movne	r0, #1
 8013a6e:	b002      	add	sp, #8
 8013a70:	4770      	bx	lr
 8013a72:	4610      	mov	r0, r2
 8013a74:	e7fb      	b.n	8013a6e <__ascii_mbtowc+0x16>
 8013a76:	f06f 0001 	mvn.w	r0, #1
 8013a7a:	e7f8      	b.n	8013a6e <__ascii_mbtowc+0x16>

08013a7c <memmove>:
 8013a7c:	4288      	cmp	r0, r1
 8013a7e:	b510      	push	{r4, lr}
 8013a80:	eb01 0402 	add.w	r4, r1, r2
 8013a84:	d902      	bls.n	8013a8c <memmove+0x10>
 8013a86:	4284      	cmp	r4, r0
 8013a88:	4623      	mov	r3, r4
 8013a8a:	d807      	bhi.n	8013a9c <memmove+0x20>
 8013a8c:	1e43      	subs	r3, r0, #1
 8013a8e:	42a1      	cmp	r1, r4
 8013a90:	d008      	beq.n	8013aa4 <memmove+0x28>
 8013a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a9a:	e7f8      	b.n	8013a8e <memmove+0x12>
 8013a9c:	4601      	mov	r1, r0
 8013a9e:	4402      	add	r2, r0
 8013aa0:	428a      	cmp	r2, r1
 8013aa2:	d100      	bne.n	8013aa6 <memmove+0x2a>
 8013aa4:	bd10      	pop	{r4, pc}
 8013aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013aae:	e7f7      	b.n	8013aa0 <memmove+0x24>

08013ab0 <_realloc_r>:
 8013ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ab4:	4680      	mov	r8, r0
 8013ab6:	4614      	mov	r4, r2
 8013ab8:	460e      	mov	r6, r1
 8013aba:	b921      	cbnz	r1, 8013ac6 <_realloc_r+0x16>
 8013abc:	4611      	mov	r1, r2
 8013abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac2:	f7fd ba0b 	b.w	8010edc <_malloc_r>
 8013ac6:	b92a      	cbnz	r2, 8013ad4 <_realloc_r+0x24>
 8013ac8:	f7fd f9a0 	bl	8010e0c <_free_r>
 8013acc:	4625      	mov	r5, r4
 8013ace:	4628      	mov	r0, r5
 8013ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad4:	f000 f8f2 	bl	8013cbc <_malloc_usable_size_r>
 8013ad8:	4284      	cmp	r4, r0
 8013ada:	4607      	mov	r7, r0
 8013adc:	d802      	bhi.n	8013ae4 <_realloc_r+0x34>
 8013ade:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013ae2:	d812      	bhi.n	8013b0a <_realloc_r+0x5a>
 8013ae4:	4621      	mov	r1, r4
 8013ae6:	4640      	mov	r0, r8
 8013ae8:	f7fd f9f8 	bl	8010edc <_malloc_r>
 8013aec:	4605      	mov	r5, r0
 8013aee:	2800      	cmp	r0, #0
 8013af0:	d0ed      	beq.n	8013ace <_realloc_r+0x1e>
 8013af2:	42bc      	cmp	r4, r7
 8013af4:	4622      	mov	r2, r4
 8013af6:	4631      	mov	r1, r6
 8013af8:	bf28      	it	cs
 8013afa:	463a      	movcs	r2, r7
 8013afc:	f7fe fe50 	bl	80127a0 <memcpy>
 8013b00:	4631      	mov	r1, r6
 8013b02:	4640      	mov	r0, r8
 8013b04:	f7fd f982 	bl	8010e0c <_free_r>
 8013b08:	e7e1      	b.n	8013ace <_realloc_r+0x1e>
 8013b0a:	4635      	mov	r5, r6
 8013b0c:	e7df      	b.n	8013ace <_realloc_r+0x1e>

08013b0e <_raise_r>:
 8013b0e:	291f      	cmp	r1, #31
 8013b10:	b538      	push	{r3, r4, r5, lr}
 8013b12:	4604      	mov	r4, r0
 8013b14:	460d      	mov	r5, r1
 8013b16:	d904      	bls.n	8013b22 <_raise_r+0x14>
 8013b18:	2316      	movs	r3, #22
 8013b1a:	6003      	str	r3, [r0, #0]
 8013b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b20:	bd38      	pop	{r3, r4, r5, pc}
 8013b22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b24:	b112      	cbz	r2, 8013b2c <_raise_r+0x1e>
 8013b26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b2a:	b94b      	cbnz	r3, 8013b40 <_raise_r+0x32>
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	f7ff fcad 	bl	801348c <_getpid_r>
 8013b32:	462a      	mov	r2, r5
 8013b34:	4601      	mov	r1, r0
 8013b36:	4620      	mov	r0, r4
 8013b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b3c:	f7ff bc94 	b.w	8013468 <_kill_r>
 8013b40:	2b01      	cmp	r3, #1
 8013b42:	d00a      	beq.n	8013b5a <_raise_r+0x4c>
 8013b44:	1c59      	adds	r1, r3, #1
 8013b46:	d103      	bne.n	8013b50 <_raise_r+0x42>
 8013b48:	2316      	movs	r3, #22
 8013b4a:	6003      	str	r3, [r0, #0]
 8013b4c:	2001      	movs	r0, #1
 8013b4e:	e7e7      	b.n	8013b20 <_raise_r+0x12>
 8013b50:	2400      	movs	r4, #0
 8013b52:	4628      	mov	r0, r5
 8013b54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b58:	4798      	blx	r3
 8013b5a:	2000      	movs	r0, #0
 8013b5c:	e7e0      	b.n	8013b20 <_raise_r+0x12>
	...

08013b60 <raise>:
 8013b60:	4b02      	ldr	r3, [pc, #8]	; (8013b6c <raise+0xc>)
 8013b62:	4601      	mov	r1, r0
 8013b64:	6818      	ldr	r0, [r3, #0]
 8013b66:	f7ff bfd2 	b.w	8013b0e <_raise_r>
 8013b6a:	bf00      	nop
 8013b6c:	20000078 	.word	0x20000078

08013b70 <__sread>:
 8013b70:	b510      	push	{r4, lr}
 8013b72:	460c      	mov	r4, r1
 8013b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b78:	f000 f8a8 	bl	8013ccc <_read_r>
 8013b7c:	2800      	cmp	r0, #0
 8013b7e:	bfab      	itete	ge
 8013b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b82:	89a3      	ldrhlt	r3, [r4, #12]
 8013b84:	181b      	addge	r3, r3, r0
 8013b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b8a:	bfac      	ite	ge
 8013b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b8e:	81a3      	strhlt	r3, [r4, #12]
 8013b90:	bd10      	pop	{r4, pc}

08013b92 <__swrite>:
 8013b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b96:	461f      	mov	r7, r3
 8013b98:	898b      	ldrh	r3, [r1, #12]
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	05db      	lsls	r3, r3, #23
 8013b9e:	460c      	mov	r4, r1
 8013ba0:	4616      	mov	r6, r2
 8013ba2:	d505      	bpl.n	8013bb0 <__swrite+0x1e>
 8013ba4:	2302      	movs	r3, #2
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bac:	f000 f874 	bl	8013c98 <_lseek_r>
 8013bb0:	89a3      	ldrh	r3, [r4, #12]
 8013bb2:	4632      	mov	r2, r6
 8013bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bb8:	81a3      	strh	r3, [r4, #12]
 8013bba:	4628      	mov	r0, r5
 8013bbc:	463b      	mov	r3, r7
 8013bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc6:	f000 b823 	b.w	8013c10 <_write_r>

08013bca <__sseek>:
 8013bca:	b510      	push	{r4, lr}
 8013bcc:	460c      	mov	r4, r1
 8013bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bd2:	f000 f861 	bl	8013c98 <_lseek_r>
 8013bd6:	1c43      	adds	r3, r0, #1
 8013bd8:	89a3      	ldrh	r3, [r4, #12]
 8013bda:	bf15      	itete	ne
 8013bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013be6:	81a3      	strheq	r3, [r4, #12]
 8013be8:	bf18      	it	ne
 8013bea:	81a3      	strhne	r3, [r4, #12]
 8013bec:	bd10      	pop	{r4, pc}

08013bee <__sclose>:
 8013bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bf2:	f000 b81f 	b.w	8013c34 <_close_r>

08013bf6 <__ascii_wctomb>:
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	4608      	mov	r0, r1
 8013bfa:	b141      	cbz	r1, 8013c0e <__ascii_wctomb+0x18>
 8013bfc:	2aff      	cmp	r2, #255	; 0xff
 8013bfe:	d904      	bls.n	8013c0a <__ascii_wctomb+0x14>
 8013c00:	228a      	movs	r2, #138	; 0x8a
 8013c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c06:	601a      	str	r2, [r3, #0]
 8013c08:	4770      	bx	lr
 8013c0a:	2001      	movs	r0, #1
 8013c0c:	700a      	strb	r2, [r1, #0]
 8013c0e:	4770      	bx	lr

08013c10 <_write_r>:
 8013c10:	b538      	push	{r3, r4, r5, lr}
 8013c12:	4604      	mov	r4, r0
 8013c14:	4608      	mov	r0, r1
 8013c16:	4611      	mov	r1, r2
 8013c18:	2200      	movs	r2, #0
 8013c1a:	4d05      	ldr	r5, [pc, #20]	; (8013c30 <_write_r+0x20>)
 8013c1c:	602a      	str	r2, [r5, #0]
 8013c1e:	461a      	mov	r2, r3
 8013c20:	f7f2 f90e 	bl	8005e40 <_write>
 8013c24:	1c43      	adds	r3, r0, #1
 8013c26:	d102      	bne.n	8013c2e <_write_r+0x1e>
 8013c28:	682b      	ldr	r3, [r5, #0]
 8013c2a:	b103      	cbz	r3, 8013c2e <_write_r+0x1e>
 8013c2c:	6023      	str	r3, [r4, #0]
 8013c2e:	bd38      	pop	{r3, r4, r5, pc}
 8013c30:	20006260 	.word	0x20006260

08013c34 <_close_r>:
 8013c34:	b538      	push	{r3, r4, r5, lr}
 8013c36:	2300      	movs	r3, #0
 8013c38:	4d05      	ldr	r5, [pc, #20]	; (8013c50 <_close_r+0x1c>)
 8013c3a:	4604      	mov	r4, r0
 8013c3c:	4608      	mov	r0, r1
 8013c3e:	602b      	str	r3, [r5, #0]
 8013c40:	f7f2 f91a 	bl	8005e78 <_close>
 8013c44:	1c43      	adds	r3, r0, #1
 8013c46:	d102      	bne.n	8013c4e <_close_r+0x1a>
 8013c48:	682b      	ldr	r3, [r5, #0]
 8013c4a:	b103      	cbz	r3, 8013c4e <_close_r+0x1a>
 8013c4c:	6023      	str	r3, [r4, #0]
 8013c4e:	bd38      	pop	{r3, r4, r5, pc}
 8013c50:	20006260 	.word	0x20006260

08013c54 <_fstat_r>:
 8013c54:	b538      	push	{r3, r4, r5, lr}
 8013c56:	2300      	movs	r3, #0
 8013c58:	4d06      	ldr	r5, [pc, #24]	; (8013c74 <_fstat_r+0x20>)
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	4608      	mov	r0, r1
 8013c5e:	4611      	mov	r1, r2
 8013c60:	602b      	str	r3, [r5, #0]
 8013c62:	f7f2 f914 	bl	8005e8e <_fstat>
 8013c66:	1c43      	adds	r3, r0, #1
 8013c68:	d102      	bne.n	8013c70 <_fstat_r+0x1c>
 8013c6a:	682b      	ldr	r3, [r5, #0]
 8013c6c:	b103      	cbz	r3, 8013c70 <_fstat_r+0x1c>
 8013c6e:	6023      	str	r3, [r4, #0]
 8013c70:	bd38      	pop	{r3, r4, r5, pc}
 8013c72:	bf00      	nop
 8013c74:	20006260 	.word	0x20006260

08013c78 <_isatty_r>:
 8013c78:	b538      	push	{r3, r4, r5, lr}
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	4d05      	ldr	r5, [pc, #20]	; (8013c94 <_isatty_r+0x1c>)
 8013c7e:	4604      	mov	r4, r0
 8013c80:	4608      	mov	r0, r1
 8013c82:	602b      	str	r3, [r5, #0]
 8013c84:	f7f2 f912 	bl	8005eac <_isatty>
 8013c88:	1c43      	adds	r3, r0, #1
 8013c8a:	d102      	bne.n	8013c92 <_isatty_r+0x1a>
 8013c8c:	682b      	ldr	r3, [r5, #0]
 8013c8e:	b103      	cbz	r3, 8013c92 <_isatty_r+0x1a>
 8013c90:	6023      	str	r3, [r4, #0]
 8013c92:	bd38      	pop	{r3, r4, r5, pc}
 8013c94:	20006260 	.word	0x20006260

08013c98 <_lseek_r>:
 8013c98:	b538      	push	{r3, r4, r5, lr}
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	4608      	mov	r0, r1
 8013c9e:	4611      	mov	r1, r2
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	4d05      	ldr	r5, [pc, #20]	; (8013cb8 <_lseek_r+0x20>)
 8013ca4:	602a      	str	r2, [r5, #0]
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	f7f2 f90a 	bl	8005ec0 <_lseek>
 8013cac:	1c43      	adds	r3, r0, #1
 8013cae:	d102      	bne.n	8013cb6 <_lseek_r+0x1e>
 8013cb0:	682b      	ldr	r3, [r5, #0]
 8013cb2:	b103      	cbz	r3, 8013cb6 <_lseek_r+0x1e>
 8013cb4:	6023      	str	r3, [r4, #0]
 8013cb6:	bd38      	pop	{r3, r4, r5, pc}
 8013cb8:	20006260 	.word	0x20006260

08013cbc <_malloc_usable_size_r>:
 8013cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cc0:	1f18      	subs	r0, r3, #4
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	bfbc      	itt	lt
 8013cc6:	580b      	ldrlt	r3, [r1, r0]
 8013cc8:	18c0      	addlt	r0, r0, r3
 8013cca:	4770      	bx	lr

08013ccc <_read_r>:
 8013ccc:	b538      	push	{r3, r4, r5, lr}
 8013cce:	4604      	mov	r4, r0
 8013cd0:	4608      	mov	r0, r1
 8013cd2:	4611      	mov	r1, r2
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	4d05      	ldr	r5, [pc, #20]	; (8013cec <_read_r+0x20>)
 8013cd8:	602a      	str	r2, [r5, #0]
 8013cda:	461a      	mov	r2, r3
 8013cdc:	f7f2 f893 	bl	8005e06 <_read>
 8013ce0:	1c43      	adds	r3, r0, #1
 8013ce2:	d102      	bne.n	8013cea <_read_r+0x1e>
 8013ce4:	682b      	ldr	r3, [r5, #0]
 8013ce6:	b103      	cbz	r3, 8013cea <_read_r+0x1e>
 8013ce8:	6023      	str	r3, [r4, #0]
 8013cea:	bd38      	pop	{r3, r4, r5, pc}
 8013cec:	20006260 	.word	0x20006260

08013cf0 <_gettimeofday>:
 8013cf0:	2258      	movs	r2, #88	; 0x58
 8013cf2:	4b02      	ldr	r3, [pc, #8]	; (8013cfc <_gettimeofday+0xc>)
 8013cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013cf8:	601a      	str	r2, [r3, #0]
 8013cfa:	4770      	bx	lr
 8013cfc:	20006260 	.word	0x20006260

08013d00 <_init>:
 8013d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d02:	bf00      	nop
 8013d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d06:	bc08      	pop	{r3}
 8013d08:	469e      	mov	lr, r3
 8013d0a:	4770      	bx	lr

08013d0c <_fini>:
 8013d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0e:	bf00      	nop
 8013d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d12:	bc08      	pop	{r3}
 8013d14:	469e      	mov	lr, r3
 8013d16:	4770      	bx	lr
